v2.0 raw
# ImageBaseAddress=0x00000000
# entry
# 00000 Instruction { source: "Initialzing flags and internal regs.", opcode: Init, args: [], resolved: None }
00 
# 00001 Instruction { source: "Initialzing stack register to 0x000f0f00.", opcode: LoadImm32, args: [Register(0x0c), Constant32(0x000f0f00=986880)], resolved: None }
20 0c 00 0f 0f 00 
# 00007 Instruction { source: "PseudoCall(Label24(:main))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 0000d Instruction { source: "PseudoCall(Label24(:main))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 17 00 00 00 
# 00013 Instruction { source: "PseudoCall(Label24(:main))", opcode: JmpImm, args: [Label24(:main)], resolved: None }
70 fd 22 00 
# 00017 Instruction { source: "PseudoCall(Label24(:main))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 0001d Instruction { source: "Halting after return from entry function.", opcode: Halt, args: [Constant32(0x00000000=0)], resolved: None }
7e 00 00 00 00 
# :PS2_SCAN_CODE_TO_ASCII
# const Array(Number(U8), Some(1025))
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
60 
7e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
71 
51 
00 
00 
31 
21 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
7a 
5a 
00 
00 
73 
53 
00 
00 
61 
41 
00 
00 
77 
57 
00 
00 
32 
40 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
63 
43 
00 
00 
78 
58 
00 
00 
64 
44 
00 
00 
65 
45 
00 
00 
34 
24 
00 
00 
33 
23 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
20 
20 
00 
00 
76 
56 
00 
00 
66 
46 
00 
00 
74 
54 
00 
00 
72 
52 
00 
00 
35 
25 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6e 
4e 
00 
00 
62 
42 
00 
00 
68 
48 
00 
00 
67 
47 
00 
00 
79 
59 
00 
00 
36 
5e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6d 
4d 
00 
00 
6a 
4a 
00 
00 
75 
55 
00 
00 
37 
26 
00 
00 
38 
2a 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2c 
3c 
00 
00 
6b 
4b 
00 
00 
69 
49 
00 
00 
6f 
4f 
00 
00 
30 
29 
00 
00 
39 
28 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2e 
3e 
00 
00 
2f 
3f 
00 
00 
6c 
4c 
00 
00 
3b 
3a 
00 
00 
70 
50 
00 
00 
2d 
5f 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
27 
22 
00 
00 
00 
00 
00 
00 
5b 
7b 
00 
00 
3d 
2b 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
0a 
0a 
00 
00 
5d 
7d 
00 
00 
5c 
7c 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
ff 
# :lcd_row_start
# const Array(Number(U8), Some(4))
00 
40 
14 
54 
# :KeyBoard_init
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([16])
# Var td45b (td45b Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }) Reg(U32) Some([20, 21, 22, 23])
# Var tdaa (tdaa Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }) Reg(U32) Some([20, 21, 22, 23])
# td45b <- 0n987136/0x000f1000u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }", "Number(USIZE, 987136)"] }
# 00427 Instruction { source: "td45b <- 0n987136/0x000f1000u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }\", \"Number(USIZE, 987136)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x000f1000=987136)], resolved: None }
20 14 00 10 0f 00 
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0042d Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x10), Constant8(0x00=0)], resolved: None }
04 10 00 
# mem[td45b] <- tb36e U8
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }"] }
# 00430 Instruction { source: "mem[td45b] <- tb36e U8\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x10), Register(0x14)], resolved: None }
06 10 14 
# tdaa <- 0n987140/0x000f1004u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Number(USIZE, 987140)"] }
# 00433 Instruction { source: "tdaa <- 0n987140/0x000f1004u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Number(USIZE, 987140)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x000f1004=987140)], resolved: None }
20 14 04 10 0f 00 
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00439 Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x10), Constant8(0x00=0)], resolved: None }
04 10 00 
# mem[tdaa] <- tb36e U8
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }"] }
# 0043c Instruction { source: "mem[tdaa] <- tb36e U8\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x10), Register(0x14)], resolved: None }
06 10 14 
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 0043f Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_KeyBoard_init
# 	SourceContext { contexts: [] }
# function_end_KeyBoard_init
# Unreachable
# 	SourceContext { contexts: [] }
# 00441 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :Keyboard_poll
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var c (Local c Number(U8) Reg(U8)) Reg(U8) Some([24])
# Var code (Local code Number(U8) Reg(U8)) Reg(U8) Some([24])
# Var index (Local index Number(USIZE) Reg(U32)) Reg(U32) Some([28, 29, 30, 31])
# Var inline_Keyboard_poll_queue_push_37_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_Keyboard_poll_queue_push_37_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_Keyboard_poll_queue_push_37_n (Arg1 n Number(U8)) Reg(U8) Some([24])
# Var inline_Keyboard_poll_queue_push_37_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([32, 33, 34, 35])
# Var inline_Keyboard_poll_queue_push_37_t1d36 (t1d36 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_Keyboard_poll_queue_push_37_t2187 (t2187 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_Keyboard_poll_queue_push_37_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([40])
# Var inline_Keyboard_poll_queue_push_37_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_Keyboard_poll_queue_push_37_t531d (t531d Ident("n")) Reg(U8) Some([24])
# Var inline_Keyboard_poll_queue_push_37_t565a (t565a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_Keyboard_poll_queue_push_37_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([44, 45, 46, 47])
# Var inline_Keyboard_poll_queue_push_37_t6778 (t6778 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))) Reg(U8) Some([24])
# Var inline_Keyboard_poll_queue_push_37_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([48, 49, 50, 51])
# Var inline_Keyboard_poll_queue_push_37_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([36, 37, 38, 39])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (static "stdin") Reg(U32) Some([32, 33, 34, 35])
# Var t12ac (t12ac Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })) Reg(U8) Some([24])
# Var t15d1 (t15d1 Number(USIZE, 4)) Reg(U32) Some([28, 29, 30, 31])
# Var t23a (t23a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }) Reg(U32) Some([52, 53, 54, 55])
# Var t2ca9 (t2ca9 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))) Reg(U8) Some([24])
# Var t3334 (t3334 Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4))) Reg(U8) Some([24])
# Var t379c (t379c LocalFieldDeref("keyboard", "shift_held")) Reg(U8) Some([24])
# Var t4c8b (t4c8b Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([52, 53, 54, 55])
# Var t528d (t528d Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }) Reg(U32) Some([52, 53, 54, 55])
# Var t5e63 (t5e63 Arithmetic(Add, Ident("index"), Number(USIZE, 3))) Reg(U32) Some([28, 29, 30, 31])
# Var t674 (t674 Arithmetic(Add, Ident("index"), Number(USIZE, 1))) Reg(U32) Some([32, 33, 34, 35])
# Var t6cd9 (t6cd9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }) Reg(U32) Some([52, 53, 54, 55])
# Var t7b09 (t7b09 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))) Reg(U8) Some([24])
# Var t7ebd (t7ebd LocalFieldDeref("keyboard", "release_in_progress")) Reg(U8) Some([56])
# Var t861f (t861f Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([24])
# Var tac13 (tac13 Ident("c")) Reg(U8) Some([24])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([57])
# Var tb62e (tb62e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }) Reg(U32) Some([52, 53, 54, 55])
# Var td18e (td18e Ident("index")) Reg(U32) Some([28, 29, 30, 31])
# Var td45b (td45b Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }) Reg(U32) Some([52, 53, 54, 55])
# Var tdaa (tdaa Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }) Reg(U32) Some([32, 33, 34, 35])
# Var te5cf (te5cf Arithmetic(Add, Ident("index"), Number(USIZE, 2))) Reg(U32) Some([32, 33, 34, 35])
# Var ted94 (ted94 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }) Reg(U32) Some([52, 53, 54, 55])
# Var tf68c (tf68c Ident("code")) Reg(U8) Some([24])
# Var tfcd (tfcd Number(U8, 1)) Reg(U8) Some([57])
# Var tfff6 (tfff6 AddressOf(Ident("stdin"))) Reg(U32) Some([32, 33, 34, 35])
# Some(t861f) <= call io_ready_to_read()
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4))", "Call(Call { function: \"io_ready_to_read\", parameters: [] })", "Call(Call { function: \"io_ready_to_read\", parameters: [] })"] }
# 00446 Instruction { source: "ReadyToRead", opcode: IoReadyToRead, args: [Register(0x18)], resolved: None }
79 18 
# t3334 <- t861f BitwiseAnd Number(0n4/0x04u8)
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4))"] }
# 00448 Instruction { source: "t3334 <- t861f BitwiseAnd Number(0n4/0x04u8)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4))\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x04=4)], resolved: None }
04 00 04 
# 0044b Instruction { source: "t3334 <- t861f BitwiseAnd Number(0n4/0x04u8)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4))\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4))\"] }", opcode: And8, args: [Register(0x18), Register(0x00), Register(0x18)], resolved: None }
1b 18 00 18 
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0044f Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x39), Constant8(0x00=0)], resolved: None }
04 39 00 
# if t3334 == tb36e then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }"] }
# 00452 Instruction { source: "if t3334 == tb36e then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x18), Register(0x39)], resolved: None }
15 18 39 
# 00455 Instruction { source: "if t3334 == tb36e then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(Keyboard_poll_if_true_0_1)], resolved: None }
72 5d 04 00 
# 00459 Instruction { source: "if t3334 == tb36e then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_else_0_2)], resolved: None }
70 63 04 00 
# :Keyboard_poll_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }"] }
# Keyboard_poll_if_true_0_1
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 0045d Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto Keyboard_poll_if_end_0
# 	SourceContext { contexts: [] }
# 0045f Instruction { source: "goto Keyboard_poll_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_end_0)], resolved: None }
70 63 04 00 
# :Keyboard_poll_if_else_0_2
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_else_0_2
# :Keyboard_poll_if_end_0
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_end_0
# Some(code) <= call io_read2()
# 	SourceContext { contexts: ["Assign { target: Ident(\"code\"), var_type: Some(Number(U8)), value: Call(Call { function: \"io_read2\", parameters: [] }) }", "Call(Call { function: \"io_read2\", parameters: [] })"] }
# 00463 Instruction { source: "IoRead2", opcode: In2, args: [Register(0x18)], resolved: None }
62 18 
# t15d1 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }", "Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 00465 Instruction { source: "t15d1 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x1c), Constant32(0x00000004=4)], resolved: None }
20 1c 04 00 00 00 
# tf68c <- code U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }", "Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }", "Ident(\"code\")", "Ident(\"code\")"] }
# optimized away noop copy Instruction { source: "tf68c <- code U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\", \"Ident(\\\"code\\\")\", \"Ident(\\\"code\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# t528d U32 <- tf68c U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }", "Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }"] }
# 0046b Instruction { source: "Zero-pad for t528d U32 <- tf68c U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\"] }", opcode: LoadImm32, args: [Register(0x34), Constant32(0x00000000=0)], resolved: None }
20 34 00 00 00 00 
# 00471 Instruction { source: "t528d U32 <- tf68c U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\"] }", opcode: Copy8, args: [Register(0x18), Register(0x34)], resolved: None }
0b 18 34 
# index <- t15d1 Multiply Var(t528d)
# 	SourceContext { contexts: ["Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }", "Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))"] }
# 00474 Instruction { source: "index <- t15d1 Multiply Var(t528d)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\"] }", opcode: Mul8_16, args: [Register(0x1c), Register(0x34), Register(0x1c)], resolved: None }
11 1c 34 1c 
# 00478 Instruction { source: "index <- t15d1 Multiply Var(t528d)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x00=0)], resolved: None }
04 1e 00 
# 0047b Instruction { source: "index <- t15d1 Multiply Var(t528d)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\"] }", opcode: LoadImm8, args: [Register(0x1f), Constant8(0x00=0)], resolved: None }
04 1f 00 
# td45b <- 0n987136/0x000f1000u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }", "LocalFieldDeref(\"keyboard\", \"shift_held\")", "LocalFieldDeref(\"keyboard\", \"shift_held\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }", "Number(USIZE, 987136)"] }
# 0047e Instruction { source: "td45b <- 0n987136/0x000f1000u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }\", \"Number(USIZE, 987136)\"] }", opcode: LoadImm32, args: [Register(0x34), Constant32(0x000f1000=987136)], resolved: None }
20 34 00 10 0f 00 
# t379c <- mem[td45b] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }", "LocalFieldDeref(\"keyboard\", \"shift_held\")", "LocalFieldDeref(\"keyboard\", \"shift_held\")"] }
# 00484 Instruction { source: "t379c <- mem[td45b] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\")\"] }", opcode: Load8, args: [Register(0x34), Register(0x18)], resolved: None }
05 34 18 
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00487 Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x39), Constant8(0x00=0)], resolved: None }
04 39 00 
# if t379c != tb36e then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }"] }
# 0048a Instruction { source: "if t379c != tb36e then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x18), Register(0x39)], resolved: None }
15 18 39 
# 0048d Instruction { source: "if t379c != tb36e then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(Keyboard_poll_if_else_0_5)], resolved: None }
72 ad 04 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t379c != tb36e then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_4)], resolved: None }
# :Keyboard_poll_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }"] }
# Keyboard_poll_if_true_0_4
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Ident(\"PS2_SCAN_CODE_TO_ASCII\")"] }
# 00491 Instruction { source: "t4c8b <- const &PS2_SCAN_CODE_TO_ASCII\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\")\"] }", opcode: LoadImm32, args: [Register(0x34), Label32(:PS2_SCAN_CODE_TO_ASCII)], resolved: None }
20 34 22 00 00 00 
# td18e <- index U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))", "Ident(\"index\")", "Ident(\"index\")"] }
# optimized away noop copy Instruction { source: "td18e <- index U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Ident(\\\"index\\\")\", \"Ident(\\\"index\\\")\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t674 <- td18e Add Number(0n1/0x00000001u32)
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))"] }
# 00497 Instruction { source: "t674 <- td18e Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x20)], resolved: None }
21 1c 20 
# 0049a Instruction { source: "t674 <- td18e Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x20), Constant32(0x00000001=1)], resolved: None }
32 20 01 00 00 00 
# t23a <- t4c8b Add Var(t674)
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))"] }
# 004a0 Instruction { source: "t23a <- t4c8b Add Var(t674)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 004a1 Instruction { source: "t23a <- t4c8b Add Var(t674)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\"] }", opcode: AddCarry32_1, args: [Register(0x34), Register(0x20), Register(0x34)], resolved: None }
30 34 20 34 
# 004a5 Instruction { source: "t23a <- t4c8b Add Var(t674)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# c <- mem[t23a] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))"] }
# 004a6 Instruction { source: "c <- mem[t23a] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\"] }", opcode: Load8, args: [Register(0x34), Register(0x18)], resolved: None }
05 34 18 
# goto Keyboard_poll_if_end_3
# 	SourceContext { contexts: [] }
# 004a9 Instruction { source: "goto Keyboard_poll_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_end_3)], resolved: None }
70 bc 04 00 
# :Keyboard_poll_if_else_0_5
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_else_0_5
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Ident(\"PS2_SCAN_CODE_TO_ASCII\")"] }
# 004ad Instruction { source: "t4c8b <- const &PS2_SCAN_CODE_TO_ASCII\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\")\"] }", opcode: LoadImm32, args: [Register(0x34), Label32(:PS2_SCAN_CODE_TO_ASCII)], resolved: None }
20 34 22 00 00 00 
# td18e <- index U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))", "Ident(\"index\")", "Ident(\"index\")"] }
# optimized away noop copy Instruction { source: "td18e <- index U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\", \"Ident(\\\"index\\\")\", \"Ident(\\\"index\\\")\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# tb62e <- t4c8b Add Var(td18e)
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))"] }
# 004b3 Instruction { source: "tb62e <- t4c8b Add Var(td18e)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 004b4 Instruction { source: "tb62e <- t4c8b Add Var(td18e)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x34), Register(0x1c), Register(0x34)], resolved: None }
30 34 1c 34 
# 004b8 Instruction { source: "tb62e <- t4c8b Add Var(td18e)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# c <- mem[tb62e] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))"] }
# 004b9 Instruction { source: "c <- mem[tb62e] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\"] }", opcode: Load8, args: [Register(0x34), Register(0x18)], resolved: None }
05 34 18 
# :Keyboard_poll_if_end_3
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_end_3
# tdaa <- 0n987140/0x000f1004u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Number(USIZE, 987140)"] }
# 004bc Instruction { source: "tdaa <- 0n987140/0x000f1004u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Number(USIZE, 987140)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x000f1004=987140)], resolved: None }
20 20 04 10 0f 00 
# t7ebd <- mem[tdaa] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")"] }
# 004c2 Instruction { source: "t7ebd <- mem[tdaa] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\"] }", opcode: Load8, args: [Register(0x20), Register(0x38)], resolved: None }
05 20 38 
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 004c5 Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x39), Constant8(0x00=0)], resolved: None }
04 39 00 
# if t7ebd == tb36e then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }"] }
# 004c8 Instruction { source: "if t7ebd == tb36e then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x38), Register(0x39)], resolved: None }
15 38 39 
# 004cb Instruction { source: "if t7ebd == tb36e then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(Keyboard_poll_if_true_0_7)], resolved: None }
72 d3 04 00 
# 004cf Instruction { source: "if t7ebd == tb36e then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_else_0_8)], resolved: None }
70 1d 05 00 
# :Keyboard_poll_if_true_0_7
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }])], else_block: [] }"] }
# Keyboard_poll_if_true_0_7
# t0 <- 0n987228/0x000f105cu32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))"] }
# 004d3 Instruction { source: "t0 <- 0n987228/0x000f105cu32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"stdin\\\"))\", \"AddressOf(Ident(\\\"stdin\\\"))\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x000f105c=987228)], resolved: None }
20 20 5c 10 0f 00 
# tfff6 <- t0 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))"] }
# optimized away noop copy Instruction { source: "tfff6 <- t0 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"stdin\\\"))\", \"AddressOf(Ident(\\\"stdin\\\"))\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# tac13 <- c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "tac13 <- c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_Keyboard_poll_queue_push_37_s <- tfff6 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_s <- tfff6 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_Keyboard_poll_queue_push_37_n <- tac13 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_n <- tac13 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_Keyboard_poll_queue_push_37_t565a <- inline_Keyboard_poll_queue_push_37_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_t565a <- inline_Keyboard_poll_queue_push_37_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_Keyboard_poll_queue_push_37_values <- inline_Keyboard_poll_queue_push_37_t565a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 004d9 Instruction { source: "inline_Keyboard_poll_queue_push_37_values <- inline_Keyboard_poll_queue_push_37_t565a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x20), Register(0x24)], resolved: None }
21 20 24 
# inline_Keyboard_poll_queue_push_37_t1d36 <- inline_Keyboard_poll_queue_push_37_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_t1d36 <- inline_Keyboard_poll_queue_push_37_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 004dc Instruction { source: "inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: Copy32, args: [Register(0x20), Register(0x30)], resolved: None }
21 20 30 
# 004df Instruction { source: "inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x30), Constant32(0x00000104=260)], resolved: None }
32 30 04 01 00 00 
# inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")"] }
# 004e5 Instruction { source: "inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\"] }", opcode: Load8, args: [Register(0x30), Register(0x28)], resolved: None }
05 30 28 
# inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }"] }
# 004e8 Instruction { source: "Zero-pad for inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x00000000=0)], resolved: None }
20 2c 00 00 00 00 
# 004ee Instruction { source: "inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: Copy8, args: [Register(0x28), Register(0x2c)], resolved: None }
0b 28 2c 
# inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_t1d36 Add Var(inline_Keyboard_poll_queue_push_37_t5bb7)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })"] }
# 004f1 Instruction { source: "inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_t1d36 Add Var(inline_Keyboard_poll_queue_push_37_t5bb7)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 004f2 Instruction { source: "inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_t1d36 Add Var(inline_Keyboard_poll_queue_push_37_t5bb7)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0x24), Register(0x2c), Register(0x24)], resolved: None }
30 24 2c 24 
# 004f6 Instruction { source: "inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_t1d36 Add Var(inline_Keyboard_poll_queue_push_37_t5bb7)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_Keyboard_poll_queue_push_37_t531d <- inline_Keyboard_poll_queue_push_37_n U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_t531d <- inline_Keyboard_poll_queue_push_37_n U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# mem[inline_Keyboard_poll_queue_push_37_t2187] <- inline_Keyboard_poll_queue_push_37_t531d U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }"] }
# 004f7 Instruction { source: "mem[inline_Keyboard_poll_queue_push_37_t2187] <- inline_Keyboard_poll_queue_push_37_t531d U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store8, args: [Register(0x18), Register(0x24)], resolved: None }
06 18 24 
# inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 004fa Instruction { source: "inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: Copy32, args: [Register(0x20), Register(0x30)], resolved: None }
21 20 30 
# 004fd Instruction { source: "inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x30), Constant32(0x00000104=260)], resolved: None }
32 30 04 01 00 00 
# inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 00503 Instruction { source: "inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: Copy32, args: [Register(0x20), Register(0x30)], resolved: None }
21 20 30 
# 00506 Instruction { source: "inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x30), Constant32(0x00000104=260)], resolved: None }
32 30 04 01 00 00 
# inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")"] }
# 0050c Instruction { source: "inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\"] }", opcode: Load8, args: [Register(0x30), Register(0x28)], resolved: None }
05 30 28 
# inline_Keyboard_poll_queue_push_37_t6778 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))"] }
# 0050f Instruction { source: "inline_Keyboard_poll_queue_push_37_t6778 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 00512 Instruction { source: "inline_Keyboard_poll_queue_push_37_t6778 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x28), Register(0x00), Register(0x18)], resolved: None }
14 28 00 18 
# mem[inline_Keyboard_poll_queue_push_37_tc1ff] <- inline_Keyboard_poll_queue_push_37_t6778 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }"] }
# 00516 Instruction { source: "mem[inline_Keyboard_poll_queue_push_37_tc1ff] <- inline_Keyboard_poll_queue_push_37_t6778 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\"] }", opcode: Store8, args: [Register(0x18), Register(0x30)], resolved: None }
06 18 30 
# goto inline_Keyboard_poll_queue_push_37_function_end_queue_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_Keyboard_poll_queue_push_37_function_end_queue_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_Keyboard_poll_queue_push_37_function_end_queue_push)], resolved: None }
# :inline_Keyboard_poll_queue_push_37_function_end_queue_push
# 	SourceContext { contexts: [] }
# inline_Keyboard_poll_queue_push_37_function_end_queue_push
# goto Keyboard_poll_if_end_6
# 	SourceContext { contexts: [] }
# 00519 Instruction { source: "goto Keyboard_poll_if_end_6\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_end_6)], resolved: None }
70 1d 05 00 
# :Keyboard_poll_if_else_0_8
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_else_0_8
# :Keyboard_poll_if_end_6
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_end_6
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0051d Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x39), Constant8(0x00=0)], resolved: None }
04 39 00 
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Ident(\"PS2_SCAN_CODE_TO_ASCII\")"] }
# 00520 Instruction { source: "t4c8b <- const &PS2_SCAN_CODE_TO_ASCII\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\")\"] }", opcode: LoadImm32, args: [Register(0x34), Label32(:PS2_SCAN_CODE_TO_ASCII)], resolved: None }
20 34 22 00 00 00 
# td18e <- index U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))", "Ident(\"index\")", "Ident(\"index\")"] }
# optimized away noop copy Instruction { source: "td18e <- index U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Ident(\\\"index\\\")\", \"Ident(\\\"index\\\")\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# te5cf <- td18e Add Number(0n2/0x00000002u32)
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))"] }
# 00526 Instruction { source: "te5cf <- td18e Add Number(0n2/0x00000002u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x20)], resolved: None }
21 1c 20 
# 00529 Instruction { source: "te5cf <- td18e Add Number(0n2/0x00000002u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x20), Constant32(0x00000002=2)], resolved: None }
32 20 02 00 00 00 
# ted94 <- t4c8b Add Var(te5cf)
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))"] }
# 0052f Instruction { source: "ted94 <- t4c8b Add Var(te5cf)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00530 Instruction { source: "ted94 <- t4c8b Add Var(te5cf)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\"] }", opcode: AddCarry32_1, args: [Register(0x34), Register(0x20), Register(0x34)], resolved: None }
30 34 20 34 
# 00534 Instruction { source: "ted94 <- t4c8b Add Var(te5cf)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t2ca9 <- mem[ted94] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))"] }
# 00535 Instruction { source: "t2ca9 <- mem[ted94] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\"] }", opcode: Load8, args: [Register(0x34), Register(0x18)], resolved: None }
05 34 18 
# if tb36e != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }"] }
# 00538 Instruction { source: "if tb36e != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\"] }", opcode: Cmp8, args: [Register(0x39), Register(0x18)], resolved: None }
15 39 18 
# 0053b Instruction { source: "if tb36e != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\"] }", opcode: JzImm, args: [Label24(Keyboard_poll_if_else_0_11)], resolved: None }
72 72 05 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb36e != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\"] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_10)], resolved: None }
# :Keyboard_poll_if_true_0_10
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }"] }
# Keyboard_poll_if_true_0_10
# tdaa <- 0n987140/0x000f1004u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Number(USIZE, 987140)"] }
# 0053f Instruction { source: "tdaa <- 0n987140/0x000f1004u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Number(USIZE, 987140)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x000f1004=987140)], resolved: None }
20 20 04 10 0f 00 
# t7ebd <- mem[tdaa] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")"] }
# 00545 Instruction { source: "t7ebd <- mem[tdaa] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\"] }", opcode: Load8, args: [Register(0x20), Register(0x38)], resolved: None }
05 20 38 
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00548 Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x39), Constant8(0x00=0)], resolved: None }
04 39 00 
# if t7ebd != tb36e then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }"] }
# 0054b Instruction { source: "if t7ebd != tb36e then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x38), Register(0x39)], resolved: None }
15 38 39 
# 0054e Instruction { source: "if t7ebd != tb36e then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(Keyboard_poll_if_else_0_14)], resolved: None }
72 62 05 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t7ebd != tb36e then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_13)], resolved: None }
# :Keyboard_poll_if_true_0_13
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }"] }
# Keyboard_poll_if_true_0_13
# td45b <- 0n987136/0x000f1000u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }", "Number(USIZE, 987136)"] }
# 00552 Instruction { source: "td45b <- 0n987136/0x000f1000u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }\", \"Number(USIZE, 987136)\"] }", opcode: LoadImm32, args: [Register(0x34), Constant32(0x000f1000=987136)], resolved: None }
20 34 00 10 0f 00 
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00558 Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x39), Constant8(0x00=0)], resolved: None }
04 39 00 
# mem[td45b] <- tb36e U8
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }"] }
# 0055b Instruction { source: "mem[td45b] <- tb36e U8\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x39), Register(0x34)], resolved: None }
06 39 34 
# goto Keyboard_poll_if_end_12
# 	SourceContext { contexts: [] }
# 0055e Instruction { source: "goto Keyboard_poll_if_end_12\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_end_12)], resolved: None }
70 6e 05 00 
# :Keyboard_poll_if_else_0_14
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_else_0_14
# td45b <- 0n987136/0x000f1000u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }", "Number(USIZE, 987136)"] }
# 00562 Instruction { source: "td45b <- 0n987136/0x000f1000u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }\", \"Number(USIZE, 987136)\"] }", opcode: LoadImm32, args: [Register(0x34), Constant32(0x000f1000=987136)], resolved: None }
20 34 00 10 0f 00 
# tfcd <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 00568 Instruction { source: "tfcd <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x39), Constant8(0x01=1)], resolved: None }
04 39 01 
# mem[td45b] <- tfcd U8
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }"] }
# 0056b Instruction { source: "mem[td45b] <- tfcd U8\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }\"] }", opcode: Store8, args: [Register(0x39), Register(0x34)], resolved: None }
06 39 34 
# :Keyboard_poll_if_end_12
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_end_12
# goto Keyboard_poll_if_end_9
# 	SourceContext { contexts: [] }
# 0056e Instruction { source: "goto Keyboard_poll_if_end_9\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_end_9)], resolved: None }
70 72 05 00 
# :Keyboard_poll_if_else_0_11
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_else_0_11
# :Keyboard_poll_if_end_9
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_end_9
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00572 Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x39), Constant8(0x00=0)], resolved: None }
04 39 00 
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Ident(\"PS2_SCAN_CODE_TO_ASCII\")"] }
# 00575 Instruction { source: "t4c8b <- const &PS2_SCAN_CODE_TO_ASCII\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\")\"] }", opcode: LoadImm32, args: [Register(0x34), Label32(:PS2_SCAN_CODE_TO_ASCII)], resolved: None }
20 34 22 00 00 00 
# td18e <- index U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))", "Ident(\"index\")", "Ident(\"index\")"] }
# optimized away noop copy Instruction { source: "td18e <- index U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Ident(\\\"index\\\")\", \"Ident(\\\"index\\\")\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t5e63 <- td18e Add Number(0n3/0x00000003u32)
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))"] }
# 0057b Instruction { source: "t5e63 <- td18e Add Number(0n3/0x00000003u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x1c), Constant32(0x00000003=3)], resolved: None }
32 1c 03 00 00 00 
# t6cd9 <- t4c8b Add Var(t5e63)
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))"] }
# 00581 Instruction { source: "t6cd9 <- t4c8b Add Var(t5e63)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00582 Instruction { source: "t6cd9 <- t4c8b Add Var(t5e63)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\"] }", opcode: AddCarry32_1, args: [Register(0x34), Register(0x1c), Register(0x34)], resolved: None }
30 34 1c 34 
# 00586 Instruction { source: "t6cd9 <- t4c8b Add Var(t5e63)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t7b09 <- mem[t6cd9] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))"] }
# 00587 Instruction { source: "t7b09 <- mem[t6cd9] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\"] }", opcode: Load8, args: [Register(0x34), Register(0x18)], resolved: None }
05 34 18 
# if tb36e != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }"] }
# 0058a Instruction { source: "if tb36e != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\"] }", opcode: Cmp8, args: [Register(0x39), Register(0x18)], resolved: None }
15 39 18 
# 0058d Instruction { source: "if tb36e != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\"] }", opcode: JzImm, args: [Label24(Keyboard_poll_if_else_0_17)], resolved: None }
72 a1 05 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb36e != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\"] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_16)], resolved: None }
# :Keyboard_poll_if_true_0_16
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }"] }
# Keyboard_poll_if_true_0_16
# tdaa <- 0n987140/0x000f1004u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Number(USIZE, 987140)"] }
# 00591 Instruction { source: "tdaa <- 0n987140/0x000f1004u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Number(USIZE, 987140)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x000f1004=987140)], resolved: None }
20 20 04 10 0f 00 
# tfcd <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 00597 Instruction { source: "tfcd <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x39), Constant8(0x01=1)], resolved: None }
04 39 01 
# mem[tdaa] <- tfcd U8
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }"] }
# 0059a Instruction { source: "mem[tdaa] <- tfcd U8\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\"] }", opcode: Store8, args: [Register(0x39), Register(0x20)], resolved: None }
06 39 20 
# goto Keyboard_poll_if_end_15
# 	SourceContext { contexts: [] }
# 0059d Instruction { source: "goto Keyboard_poll_if_end_15\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_end_15)], resolved: None }
70 ad 05 00 
# :Keyboard_poll_if_else_0_17
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_else_0_17
# tdaa <- 0n987140/0x000f1004u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Number(USIZE, 987140)"] }
# 005a1 Instruction { source: "tdaa <- 0n987140/0x000f1004u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Number(USIZE, 987140)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x000f1004=987140)], resolved: None }
20 20 04 10 0f 00 
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 005a7 Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x39), Constant8(0x00=0)], resolved: None }
04 39 00 
# mem[tdaa] <- tb36e U8
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }"] }
# 005aa Instruction { source: "mem[tdaa] <- tb36e U8\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x39), Register(0x20)], resolved: None }
06 39 20 
# :Keyboard_poll_if_end_15
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_end_15
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 005ad Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_Keyboard_poll
# 	SourceContext { contexts: [] }
# function_end_Keyboard_poll
# Unreachable
# 	SourceContext { contexts: [] }
# 005af Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :RpnCalc_handle
# Ret Some(U8)
# Arg0=c
# Arg1=ch
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var a (Local a Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([68, 69, 70, 71])
# Var ch (Arg1 ch Number(U8)) Reg(U8) Some([72])
# Var diff (Local diff Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_RpnCalc_init_50_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_init_50_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_init_50_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_init_50_s (Local s Ptr(Struct("Stack")) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_50_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_init_50_t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_50_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_init_50_tb2e9 (tb2e9 Ident("s")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_50_tbc15 (tbc15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_init_50_tf462 (tf462 Call(Call { function: "stack_init", parameters: [Ident("s")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(USIZE)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([88, 89, 90, 91])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t531d (t531d Ident("n")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([88, 89, 90, 91])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([88, 89, 90, 91])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_t4760 (t4760 AddressOf(PtrFieldDeref("c", "stack"))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_t5fbe (t5fbe Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([100])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([101])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_tbc15 (tbc15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([88, 89, 90, 91])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 (tfdb7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(USIZE)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t531d (t531d Ident("n")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_t4760 (t4760 AddressOf(PtrFieldDeref("c", "stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_t5fbe (t5fbe Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([109])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_tbc15 (tbc15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 (tfdb7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(USIZE)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t531d (t531d Ident("n")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t4760 (t4760 AddressOf(PtrFieldDeref("c", "stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t5fbe (t5fbe Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([109])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_tbc15 (tbc15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 (tfdb7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_mul32_32_12_a (Arg0 a Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_a_hi (Local a_hi Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_b (Arg1 b Number(USIZE)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_12_b_hi (Local b_hi Number(USIZE) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a (Arg0 a Number(USIZE)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b (Arg1 b Number(USIZE)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 (t3585 Ident("e")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 (t45f5 Ident("d")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([100])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 (t8792 Ident("a")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([72])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 (tac13 Ident("c")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 (tace9 Ident("b")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([101])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([100])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a (Arg0 a Number(USIZE)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b (Arg1 b Number(USIZE)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 (t3585 Ident("e")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 (t45f5 Ident("d")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([101])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 (t8792 Ident("a")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([109])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 (tac13 Ident("c")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 (tace9 Ident("b")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([110])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([101])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a (Arg0 a Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b (Arg1 b Number(USIZE)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 (t3585 Ident("e")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 (t45f5 Ident("d")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([72])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 (t8792 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 (tac13 Ident("c")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 (tace9 Ident("b")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([100])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([72])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_mul32_32_12_t45f5 (t45f5 Ident("d")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_12_t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_12_t5cca (t5cca Ident("b_hi")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_t6afc (t6afc Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_t811a (t811a Index("b", Number(U8, 2))) Reg(U8) Some([109])
# Var inline_RpnCalc_handle_mul32_32_12_t8792 (t8792 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_t8fbd (t8fbd Ident("a_hi")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_t9829 (t9829 Index("b", Number(U8, 3))) Reg(U8) Some([109])
# Var inline_RpnCalc_handle_mul32_32_12_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_tac13 (tac13 Ident("c")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_12_tace9 (tace9 Ident("b")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_12_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_12_tbe0a (tbe0a Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_by10_13_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_mul32_by10_13_a (Arg0 a Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_by10_13_b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_by10_13_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_mul32_by10_13_t7eaf (t7eaf Arithmetic(Add, Ident("b"), Ident("a"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_by10_13_t8792 (t8792 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_by10_13_tace9 (tace9 Ident("b")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_putc_15_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_15_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_15_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_15_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_15_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_15_tac13 (tac13 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_16_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_16_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_16_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_16_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_16_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_16_tac13 (tac13 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_17_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_17_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_17_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_17_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_17_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_17_tac13 (tac13 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_18_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_18_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_18_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_18_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_18_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_18_tac13 (tac13 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_19_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_19_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_19_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_19_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_19_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_19_tac13 (tac13 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_20_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_20_c (Arg0 c Number(U8)) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_putc_20_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_20_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_20_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_20_tac13 (tac13 Ident("c")) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_putc_21_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_21_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_21_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_21_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_21_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_21_tac13 (tac13 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_22_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_22_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_22_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_22_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_22_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_22_tac13 (tac13 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_23_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_23_c (Arg0 c Number(U8)) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_putc_23_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_23_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_23_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_23_tac13 (tac13 Ident("c")) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_putc_24_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_24_c (Arg0 c Number(U8)) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_putc_24_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_24_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_24_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_24_tac13 (tac13 Ident("c")) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_stack_get_48_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_get_48_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_get_48_n (Arg1 n Number(USIZE)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_get_48_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_get_48_t2db0 (t2db0 Index("values", Ident("n"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_get_48_t531d (t531d Ident("n")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_get_48_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_get_48_t5abb (t5abb Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_get_48_td38d (td38d Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_get_48_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_get_48_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_pop_52_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_pop_52_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_pop_52_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_52_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_52_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_52_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_52_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_52_t8e54 (t8e54 Index("values", PtrFieldDeref("s", "first_free"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_52_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_stack_pop_52_te089 (te089 Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_52_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_52_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_stack_pop_52_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_53_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_pop_53_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_pop_53_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_53_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_53_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_53_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_53_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_53_t8e54 (t8e54 Index("values", PtrFieldDeref("s", "first_free"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_53_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_stack_pop_53_te089 (te089 Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_53_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_53_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_stack_pop_53_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_54_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_push_54_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_push_54_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_54_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_54_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_54_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_54_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_54_t531d (t531d Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_54_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_54_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_54_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_54_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_54_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_54_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_55_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_push_55_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_push_55_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_55_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_55_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_55_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_t531d (t531d Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_55_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_55_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_55_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_55_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_55_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_56_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_push_56_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_push_56_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_56_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_56_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_56_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_t531d (t531d Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_56_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_56_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_56_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_56_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_56_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_57_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_push_57_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_push_57_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_57_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_57_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_57_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_t531d (t531d Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_57_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_57_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_57_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_57_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_57_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_58_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_push_58_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_push_58_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_58_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_58_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_58_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_58_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_58_t531d (t531d Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_58_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_58_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_58_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_58_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_58_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_stack_push_58_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_59_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_push_59_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_push_59_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_59_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_59_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_59_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_t531d (t531d Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_59_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_59_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_59_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_59_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_59_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var product (Local product Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var quotient (Local quotient Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var stack (Local stack Ptr(Struct("Stack")) Reg(U32)) Reg(U32) Some([112, 113, 114, 115])
# Var stack_count (Local stack_count Number(U8) Reg(U8)) Reg(U8) Some([110])
# Var stack_count_usize (Local stack_count_usize Number(USIZE) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var stack_needed (Local stack_needed Number(U8) Reg(U8)) Reg(U8) Some([116])
# Var sum (Local sum Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var t1501 (t1501 Number(U8, 113)) Reg(U8) Some([73])
# Var t17ee (t17ee Ident("diff")) Reg(U32) Some([60, 61, 62, 63])
# Var t18a9 (t18a9 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })) Reg(U8) Some([73])
# Var t1ba9 (t1ba9 Ident("quotient")) Reg(U32) Some([60, 61, 62, 63])
# Var t2398 (t2398 Call(Call { function: "print_dec32", parameters: [Ident("product")] })) Reg(U8) Some([73])
# Var t24a4 (t24a4 Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var t2597 (t2597 Number(U8, 43)) Reg(U8) Some([117])
# Var t2754 (t2754 Ident("product")) Reg(U32) Some([60, 61, 62, 63])
# Var t2ac9 (t2ac9 Number(U8, 57)) Reg(U8) Some([73])
# Var t2af9 (t2af9 Call(Call { function: "putc", parameters: [Number(U8, 69)] })) Reg(U8) Some([73])
# Var t2d0c (t2d0c Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })) Reg(U8) Some([73])
# Var t352b (t352b Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })) Reg(U8) Some([73])
# Var t39b5 (t39b5 Number(U8, 115)) Reg(U8) Some([117])
# Var t3f70 (t3f70 Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) Reg(U32) Some([60, 61, 62, 63])
# Var t4376 (t4376 Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }) Reg(U32) Some([64, 65, 66, 67])
# Var t4671 (t4671 Ident("stack_needed")) Reg(U8) Some([117])
# Var t49a (t49a Number(U8, 100)) Reg(U8) Some([73])
# Var t4e08 (t4e08 Number(U8, 99)) Reg(U8) Some([73])
# Var t6001 (t6001 Ident("stack_count")) Reg(U8) Some([100])
# Var t670d (t670d Ident("sum")) Reg(U32) Some([60, 61, 62, 63])
# Var t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([76, 77, 78, 79])
# Var t701d (t701d Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var t7e7f (t7e7f Call(Call { function: "putc", parameters: [Number(U8, 58)] })) Reg(U8) Some([73])
# Var t7f48 (t7f48 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }) Reg(U32) Some([76, 77, 78, 79])
# Var t7ff1 (t7ff1 Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) Reg(U8) Some([73])
# Var t8103 (t8103 Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })) Reg(U8) Some([73])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([104, 105, 106, 107])
# Var t8b2f (t8b2f Number(U8, 45)) Reg(U8) Some([117])
# Var t9046 (t9046 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })) Reg(U8) Some([73])
# Var t969e (t969e Number(U8, 42)) Reg(U8) Some([117])
# Var t9c38 (t9c38 Number(U8, 82)) Reg(U8) Some([73])
# Var ta378 (ta378 Call(Call { function: "print_dec32", parameters: [Ident("sum")] })) Reg(U8) Some([73])
# Var ta622 (ta622 Call(Call { function: "print_dec8", parameters: [Ident("i")] })) Reg(U8) Some([73])
# Var tac13 (tac13 Ident("c")) Reg(U32) Some([68, 69, 70, 71])
# Var tac5f (tac5f Number(U8, 32)) Reg(U8) Some([73])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([68, 69, 70, 71])
# Var tacf6 (tacf6 Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })) Reg(U32) Some([60, 61, 62, 63])
# Var tadd (tadd Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })) Reg(U32) Some([60, 61, 62, 63])
# Var tb087 (tb087 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })) Reg(U8) Some([73])
# Var tb1ab (tb1ab Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })) Reg(U8) Some([73])
# Var tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var tb303 (tb303 Call(Call { function: "putc", parameters: [Number(U8, 82)] })) Reg(U8) Some([73])
# Var tb336 (tb336 Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })) Reg(U32) Some([64, 65, 66, 67])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([100])
# Var tb507 (tb507 Number(U8, 69)) Reg(U8) Some([73])
# Var tbc15 (tbc15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([60, 61, 62, 63])
# Var tbf93 (tbf93 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64)) }) Reg(U32) Some([76, 77, 78, 79])
# Var tca36 (tca36 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })) Reg(U8) Some([73])
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([73])
# Var td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([64, 65, 66, 67])
# Var td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([117])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([72])
# Var te25f (te25f Call(Call { function: "print_dec32", parameters: [Ident("diff")] })) Reg(U8) Some([73])
# Var te668 (te668 Number(U8, 47)) Reg(U8) Some([117])
# Var tebdf (tebdf Number(U8, 58)) Reg(U8) Some([108])
# Var tec99 (tec99 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([73])
# Var tf48d (tf48d Number(U8, 48)) Reg(U8) Some([73])
# Var tfcd (tfcd Number(U8, 1)) Reg(U8) Some([100])
# Var tfdb7 (tfdb7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([60, 61, 62, 63])
# Var tfe08 (tfe08 Ident("stack")) Reg(U32) Some([76, 77, 78, 79])
# 005b4 Instruction { source: "Save function parameter 'c' registers [0, 1, 2, 3] to locals [68, 69, 70, 71].", opcode: Copy32, args: [Register(0x00), Register(0x44)], resolved: None }
21 00 44 
# 005b7 Instruction { source: "Save function parameter 'ch' registers [4] to locals [72].", opcode: Copy8, args: [Register(0x04), Register(0x48)], resolved: None }
0b 04 48 
# tbc15 <- c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 005ba Instruction { source: "tbc15 <- c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack\\\"), var_type: Some(Ptr(Struct(\\\"Stack\\\"))), value: AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# stack <- tbc15 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))"] }
# 005bd Instruction { source: "stack <- tbc15 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack\\\"), var_type: Some(Ptr(Struct(\\\"Stack\\\"))), value: AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x70)], resolved: None }
21 3c 70 
# a <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 005c0 Instruction { source: "a <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x00=0)], resolved: None }
04 3c 00 
# b <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 005c3 Instruction { source: "b <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x40), Constant8(0x00=0)], resolved: None }
04 40 00 
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t2597 <- 0n43/0x2bu8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }", "Number(U8, 43)", "Number(U8, 43)"] }
# 005c6 Instruction { source: "t2597 <- 0n43/0x2bu8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\", \"Number(U8, 43)\", \"Number(U8, 43)\"] }", opcode: LoadImm8, args: [Register(0x75), Constant8(0x2b=43)], resolved: None }
04 75 2b 
# if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }"] }
# 005c9 Instruction { source: "if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\"] }", opcode: Cmp8, args: [Register(0x48), Register(0x75)], resolved: None }
15 48 75 
# 005cc Instruction { source: "if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_0_1)], resolved: None }
72 d4 05 00 
# 005d0 Instruction { source: "if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_0_2)], resolved: None }
70 db 05 00 
# :RpnCalc_handle_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 0) }] }"] }
# RpnCalc_handle_if_true_0_1
# stack_needed <- 0n2/0x02u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }", "Number(U8, 2)"] }
# 005d4 Instruction { source: "stack_needed <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x74), Constant8(0x02=2)], resolved: None }
04 74 02 
# goto RpnCalc_handle_if_end_0
# 	SourceContext { contexts: [] }
# 005d7 Instruction { source: "goto RpnCalc_handle_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_0)], resolved: None }
70 32 06 00 
# :RpnCalc_handle_if_else_0_2
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_2
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t8b2f <- 0n45/0x2du8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }", "Number(U8, 45)", "Number(U8, 45)"] }
# 005db Instruction { source: "t8b2f <- 0n45/0x2du8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\", \"Number(U8, 45)\", \"Number(U8, 45)\"] }", opcode: LoadImm8, args: [Register(0x75), Constant8(0x2d=45)], resolved: None }
04 75 2d 
# if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }"] }
# 005de Instruction { source: "if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\"] }", opcode: Cmp8, args: [Register(0x48), Register(0x75)], resolved: None }
15 48 75 
# 005e1 Instruction { source: "if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_1_3)], resolved: None }
72 e9 05 00 
# 005e5 Instruction { source: "if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_1_4)], resolved: None }
70 f0 05 00 
# :RpnCalc_handle_if_true_1_3
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_1_3
# stack_needed <- 0n2/0x02u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }", "Number(U8, 2)"] }
# 005e9 Instruction { source: "stack_needed <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x74), Constant8(0x02=2)], resolved: None }
04 74 02 
# goto RpnCalc_handle_if_end_0
# 	SourceContext { contexts: [] }
# 005ec Instruction { source: "goto RpnCalc_handle_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_0)], resolved: None }
70 32 06 00 
# :RpnCalc_handle_if_else_1_4
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_1_4
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t969e <- 0n42/0x2au8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }", "Number(U8, 42)", "Number(U8, 42)"] }
# 005f0 Instruction { source: "t969e <- 0n42/0x2au8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\", \"Number(U8, 42)\", \"Number(U8, 42)\"] }", opcode: LoadImm8, args: [Register(0x75), Constant8(0x2a=42)], resolved: None }
04 75 2a 
# if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }"] }
# 005f3 Instruction { source: "if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\"] }", opcode: Cmp8, args: [Register(0x48), Register(0x75)], resolved: None }
15 48 75 
# 005f6 Instruction { source: "if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_2_5)], resolved: None }
72 fe 05 00 
# 005fa Instruction { source: "if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_2_6)], resolved: None }
70 05 06 00 
# :RpnCalc_handle_if_true_2_5
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_2_5
# stack_needed <- 0n2/0x02u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }", "Number(U8, 2)"] }
# 005fe Instruction { source: "stack_needed <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x74), Constant8(0x02=2)], resolved: None }
04 74 02 
# goto RpnCalc_handle_if_end_0
# 	SourceContext { contexts: [] }
# 00601 Instruction { source: "goto RpnCalc_handle_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_0)], resolved: None }
70 32 06 00 
# :RpnCalc_handle_if_else_2_6
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_2_6
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# te668 <- 0n47/0x2fu8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }", "Number(U8, 47)", "Number(U8, 47)"] }
# 00605 Instruction { source: "te668 <- 0n47/0x2fu8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\", \"Number(U8, 47)\", \"Number(U8, 47)\"] }", opcode: LoadImm8, args: [Register(0x75), Constant8(0x2f=47)], resolved: None }
04 75 2f 
# if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }"] }
# 00608 Instruction { source: "if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\"] }", opcode: Cmp8, args: [Register(0x48), Register(0x75)], resolved: None }
15 48 75 
# 0060b Instruction { source: "if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_3_7)], resolved: None }
72 13 06 00 
# 0060f Instruction { source: "if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_3_8)], resolved: None }
70 1a 06 00 
# :RpnCalc_handle_if_true_3_7
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_3_7
# stack_needed <- 0n2/0x02u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }", "Number(U8, 2)"] }
# 00613 Instruction { source: "stack_needed <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x74), Constant8(0x02=2)], resolved: None }
04 74 02 
# goto RpnCalc_handle_if_end_0
# 	SourceContext { contexts: [] }
# 00616 Instruction { source: "goto RpnCalc_handle_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_0)], resolved: None }
70 32 06 00 
# :RpnCalc_handle_if_else_3_8
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_3_8
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t39b5 <- 0n115/0x73u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }", "Number(U8, 115)", "Number(U8, 115)"] }
# 0061a Instruction { source: "t39b5 <- 0n115/0x73u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\", \"Number(U8, 115)\", \"Number(U8, 115)\"] }", opcode: LoadImm8, args: [Register(0x75), Constant8(0x73=115)], resolved: None }
04 75 73 
# if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }"] }
# 0061d Instruction { source: "if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: Cmp8, args: [Register(0x48), Register(0x75)], resolved: None }
15 48 75 
# 00620 Instruction { source: "if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_4_9)], resolved: None }
72 28 06 00 
# 00624 Instruction { source: "if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_4_10)], resolved: None }
70 2f 06 00 
# :RpnCalc_handle_if_true_4_9
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_4_9
# stack_needed <- 0n2/0x02u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }", "Number(U8, 2)"] }
# 00628 Instruction { source: "stack_needed <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x74), Constant8(0x02=2)], resolved: None }
04 74 02 
# goto RpnCalc_handle_if_end_0
# 	SourceContext { contexts: [] }
# 0062b Instruction { source: "goto RpnCalc_handle_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_0)], resolved: None }
70 32 06 00 
# :RpnCalc_handle_if_else_4_10
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_4_10
# stack_needed <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)"] }
# 0062f Instruction { source: "stack_needed <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x74), Constant8(0x00=0)], resolved: None }
04 74 00 
# :RpnCalc_handle_if_end_0
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_0
# t4671 <- stack_needed U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }", "Ident(\"stack_needed\")", "Ident(\"stack_needed\")"] }
# 00632 Instruction { source: "t4671 <- stack_needed U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\", \"Ident(\\\"stack_needed\\\")\", \"Ident(\\\"stack_needed\\\")\"] }", opcode: Copy8, args: [Register(0x74), Register(0x75)], resolved: None }
0b 74 75 
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00635 Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x00=0)], resolved: None }
04 64 00 
# if t4671 > tb36e then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }"] }
# 00638 Instruction { source: "if t4671 > tb36e then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x75), Register(0x64)], resolved: None }
15 75 64 
# 0063b Instruction { source: "if t4671 > tb36e then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_if_else_0_13)], resolved: None }
71 e5 06 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > tb36e then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_12)], resolved: None }
# :RpnCalc_handle_if_true_0_12
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }])], else_block: [] }"] }
# RpnCalc_handle_if_true_0_12
# tac13 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "tac13 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_c <- tac13 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })"] }
# 0063f Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_c <- tac13 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x44), Register(0x4c)], resolved: None }
21 44 4c 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32)
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 00642 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x50)], resolved: None }
21 4c 50 
# 00645 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x50), Constant32(0x00000048=72)], resolved: None }
32 50 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")"] }
# 0064b Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\"] }", opcode: Load8, args: [Register(0x50), Register(0x64)], resolved: None }
05 50 64 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0064e Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x65), Constant8(0x00=0)], resolved: None }
04 65 00 
# if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }"] }
# 00651 Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x64), Register(0x65)], resolved: None }
15 64 65 
# 00654 Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2)], resolved: None }
72 e1 06 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }"] }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tbc15 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tbc15 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_t4760 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tbc15 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))"] }
# 00658 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_t4760 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tbc15 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x50)], resolved: None }
21 4c 50 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 0065b Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x54)], resolved: None }
21 4c 54 
# 0065e Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x54), Constant32(0x00000044=68)], resolved: None }
32 54 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")"] }
# 00664 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\"] }", opcode: Load32, args: [Register(0x54), Register(0x58)], resolved: None }
22 54 58 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t4760 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })"] }
# 00667 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t4760 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x50), Register(0x54)], resolved: None }
21 50 54 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })"] }
# 0066a Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x58), Register(0x50)], resolved: None }
21 58 50 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t587d <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t587d <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_values <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t587d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 0066d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_values <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t587d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x54), Register(0x58)], resolved: None }
21 54 58 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf90a <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# 00670 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf90a <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x60)], resolved: None }
21 58 60 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00673 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x54), Register(0x5c)], resolved: None }
21 54 5c 
# 00676 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x5c), Constant32(0x00000040=64)], resolved: None }
32 5c 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 0067c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x5c), Register(0x58)], resolved: None }
22 5c 58 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 0067f Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm32, args: [Register(0x00), Constant32(0x00000004=4)], resolved: None }
20 00 04 00 00 00 
# 00685 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: Mul8_16, args: [Register(0x58), Register(0x00), Register(0x58)], resolved: None }
11 58 00 58 
# 00689 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm8, args: [Register(0x5a), Constant8(0x00=0)], resolved: None }
04 5a 00 
# 0068c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm8, args: [Register(0x5b), Constant8(0x00=0)], resolved: None }
04 5b 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 0068f Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00690 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x60), Register(0x58), Register(0x58)], resolved: None }
30 60 58 58 
# 00694 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t531d <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t531d <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t531d U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 00695 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t531d U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x50), Register(0x58)], resolved: None }
23 50 58 
# 00698 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t531d U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00699 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x54), Register(0x5c)], resolved: None }
21 54 5c 
# 0069c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x5c), Constant32(0x00000040=64)], resolved: None }
32 5c 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 006a2 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x54), Register(0x5c)], resolved: None }
21 54 5c 
# 006a5 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x5c), Constant32(0x00000040=64)], resolved: None }
32 5c 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 006ab Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x5c), Register(0x58)], resolved: None }
22 5c 58 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 006ae Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0x58), Register(0x50)], resolved: None }
21 58 50 
# 006b1 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x50), Constant32(0x00000001=1)], resolved: None }
32 50 01 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 006b7 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x50), Register(0x5c)], resolved: None }
23 50 5c 
# 006ba Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 006bb Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x54)], resolved: None }
21 4c 54 
# 006be Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x54), Constant32(0x00000044=68)], resolved: None }
32 54 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 006c4 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000000=0)], resolved: None }
20 50 00 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }"] }
# 006ca Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x50), Register(0x54)], resolved: None }
23 50 54 
# 006cd Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 006ce Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x50)], resolved: None }
21 4c 50 
# 006d1 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x50), Constant32(0x00000048=72)], resolved: None }
32 50 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 006d7 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x65), Constant8(0x00=0)], resolved: None }
04 65 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }"] }
# 006da Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x65), Register(0x50)], resolved: None }
06 65 50 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0
# 	SourceContext { contexts: [] }
# 006dd Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0)], resolved: None }
70 e1 06 00 
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_11
# 	SourceContext { contexts: [] }
# 006e1 Instruction { source: "goto RpnCalc_handle_if_end_11\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_11)], resolved: None }
70 e5 06 00 
# :RpnCalc_handle_if_else_0_13
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_13
# :RpnCalc_handle_if_end_11
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_11
# t7f48 <- stack U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_count_usize\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"stack\", \"first_free\") }", "PtrFieldDeref(\"stack\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }", "Ident(\"stack\")"] }
# 006e5 Instruction { source: "t7f48 <- stack U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_count_usize\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\") }\", \"PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x70), Register(0x4c)], resolved: None }
21 70 4c 
# tbf93 <- t7f48 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_count_usize\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"stack\", \"first_free\") }", "PtrFieldDeref(\"stack\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64))"] }
# 006e8 Instruction { source: "tbf93 <- t7f48 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_count_usize\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\") }\", \"PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x4c), Constant32(0x00000040=64)], resolved: None }
32 4c 40 00 00 00 
# stack_count_usize <- mem[tbf93] U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_count_usize\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"stack\", \"first_free\") }", "PtrFieldDeref(\"stack\", \"first_free\")"] }
# 006ee Instruction { source: "stack_count_usize <- mem[tbf93] U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_count_usize\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\") }\", \"PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x4c), Register(0x4c)], resolved: None }
22 4c 4c 
# stack_count <- stack_count_usize[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_count\"), var_type: Some(Number(U8)), value: Index(\"stack_count_usize\", Number(U8, 0)) }", "Index(\"stack_count_usize\", Number(U8, 0))"] }
# 006f1 Instruction { source: "stack_count <- stack_count_usize[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_count\\\"), var_type: Some(Number(U8)), value: Index(\\\"stack_count_usize\\\", Number(U8, 0)) }\", \"Index(\\\"stack_count_usize\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x4c), Register(0x6e)], resolved: None }
0b 4c 6e 
# t4671 <- stack_needed U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }", "Ident(\"stack_needed\")", "Ident(\"stack_needed\")"] }
# 006f4 Instruction { source: "t4671 <- stack_needed U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }\", \"Ident(\\\"stack_needed\\\")\", \"Ident(\\\"stack_needed\\\")\"] }", opcode: Copy8, args: [Register(0x74), Register(0x75)], resolved: None }
0b 74 75 
# t6001 <- stack_count U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }", "Ident(\"stack_count\")", "Ident(\"stack_count\")"] }
# 006f7 Instruction { source: "t6001 <- stack_count U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }\", \"Ident(\\\"stack_count\\\")\", \"Ident(\\\"stack_count\\\")\"] }", opcode: Copy8, args: [Register(0x6e), Register(0x64)], resolved: None }
0b 6e 64 
# if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }"] }
# 006fa Instruction { source: "if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }\"] }", opcode: Cmp8, args: [Register(0x75), Register(0x64)], resolved: None }
15 75 64 
# 006fd Instruction { source: "if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_if_else_0_16)], resolved: None }
71 98 08 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_15)], resolved: None }
# :RpnCalc_handle_if_true_0_15
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }"] }
# RpnCalc_handle_if_true_0_15
# tb507 <- 0n69/0x45u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 69)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 69)] })", "Number(U8, 69)", "Number(U8, 69)"] }
# 00701 Instruction { source: "tb507 <- 0n69/0x45u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] })\", \"Number(U8, 69)\", \"Number(U8, 69)\"] }", opcode: LoadImm8, args: [Register(0x49), Constant8(0x45=69)], resolved: None }
04 49 45 
# inline_RpnCalc_handle_putc_15_c <- tb507 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 69)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 69)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_15_c <- tb507 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] })\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_15_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00704 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x49)], resolved: None }
68 49 
# inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })"] }
# 00706 Instruction { source: "Arg0[ch]=inline_RpnCalc_handle_putc_15_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x49), Register(0x00)], resolved: None }
0b 49 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79]
# 00709 Instruction { source: "Saving reg0x4f before None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4f)], resolved: None }
09 4f 
# 0070b Instruction { source: "Saving reg0x4e before None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4e)], resolved: None }
09 4e 
# 0070d Instruction { source: "Saving reg0x4d before None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4d)], resolved: None }
09 4d 
# 0070f Instruction { source: "Saving reg0x4c before None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4c)], resolved: None }
09 4c 
# 00711 Instruction { source: "Saving reg0x49 before None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x49)], resolved: None }
09 49 
# 00713 Instruction { source: "Saving reg0x48 before None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x48)], resolved: None }
09 48 
# 00715 Instruction { source: "Saving reg0x47 before None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x47)], resolved: None }
09 47 
# 00717 Instruction { source: "Saving reg0x46 before None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x46)], resolved: None }
09 46 
# 00719 Instruction { source: "Saving reg0x45 before None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x45)], resolved: None }
09 45 
# 0071b Instruction { source: "Saving reg0x44 before None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x44)], resolved: None }
09 44 
# 0071d Instruction { source: "Saving reg0x43 before None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x43)], resolved: None }
09 43 
# 0071f Instruction { source: "Saving reg0x42 before None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x42)], resolved: None }
09 42 
# 00721 Instruction { source: "Saving reg0x41 before None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x41)], resolved: None }
09 41 
# 00723 Instruction { source: "Saving reg0x40 before None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x40)], resolved: None }
09 40 
# 00725 Instruction { source: "Saving reg0x3e before None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3e)], resolved: None }
09 3e 
# 00727 Instruction { source: "Saving reg0x3d before None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3d)], resolved: None }
09 3d 
# 00729 Instruction { source: "Saving reg0x3c before None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3c)], resolved: None }
09 3c 
# 0072b Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 00731 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 3b 07 00 00 
# 00737 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: JmpImm, args: [Label24(:lcd_putc)], resolved: None }
70 08 21 00 
# 0073b Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 00741 Instruction { source: "Restoring reg0x3c after None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3c)], resolved: None }
0a 3c 
# 00743 Instruction { source: "Restoring reg0x3d after None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3d)], resolved: None }
0a 3d 
# 00745 Instruction { source: "Restoring reg0x3e after None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3e)], resolved: None }
0a 3e 
# 00747 Instruction { source: "Restoring reg0x40 after None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x40)], resolved: None }
0a 40 
# 00749 Instruction { source: "Restoring reg0x41 after None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x41)], resolved: None }
0a 41 
# 0074b Instruction { source: "Restoring reg0x42 after None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x42)], resolved: None }
0a 42 
# 0074d Instruction { source: "Restoring reg0x43 after None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x43)], resolved: None }
0a 43 
# 0074f Instruction { source: "Restoring reg0x44 after None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x44)], resolved: None }
0a 44 
# 00751 Instruction { source: "Restoring reg0x45 after None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x45)], resolved: None }
0a 45 
# 00753 Instruction { source: "Restoring reg0x46 after None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x46)], resolved: None }
0a 46 
# 00755 Instruction { source: "Restoring reg0x47 after None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x47)], resolved: None }
0a 47 
# 00757 Instruction { source: "Restoring reg0x48 after None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x48)], resolved: None }
0a 48 
# 00759 Instruction { source: "Restoring reg0x49 after None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x49)], resolved: None }
0a 49 
# 0075b Instruction { source: "Restoring reg0x4c after None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4c)], resolved: None }
0a 4c 
# 0075d Instruction { source: "Restoring reg0x4d after None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4d)], resolved: None }
0a 4d 
# 0075f Instruction { source: "Restoring reg0x4e after None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4e)], resolved: None }
0a 4e 
# 00761 Instruction { source: "Restoring reg0x4f after None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4f)], resolved: None }
0a 4f 
# goto inline_RpnCalc_handle_putc_15_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_15_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_15_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_15_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_15_function_end_putc
# t9c38 <- 0n82/0x52u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Number(U8, 82)", "Number(U8, 82)"] }
# 00763 Instruction { source: "t9c38 <- 0n82/0x52u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Number(U8, 82)\", \"Number(U8, 82)\"] }", opcode: LoadImm8, args: [Register(0x49), Constant8(0x52=82)], resolved: None }
04 49 52 
# inline_RpnCalc_handle_putc_16_c <- t9c38 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_16_c <- t9c38 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00766 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x49)], resolved: None }
68 49 
# inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })"] }
# 00768 Instruction { source: "Arg0[ch]=inline_RpnCalc_handle_putc_16_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x49), Register(0x00)], resolved: None }
0b 49 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79]
# 0076b Instruction { source: "Saving reg0x4f before None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4f)], resolved: None }
09 4f 
# 0076d Instruction { source: "Saving reg0x4e before None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4e)], resolved: None }
09 4e 
# 0076f Instruction { source: "Saving reg0x4d before None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4d)], resolved: None }
09 4d 
# 00771 Instruction { source: "Saving reg0x4c before None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4c)], resolved: None }
09 4c 
# 00773 Instruction { source: "Saving reg0x49 before None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x49)], resolved: None }
09 49 
# 00775 Instruction { source: "Saving reg0x48 before None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x48)], resolved: None }
09 48 
# 00777 Instruction { source: "Saving reg0x47 before None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x47)], resolved: None }
09 47 
# 00779 Instruction { source: "Saving reg0x46 before None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x46)], resolved: None }
09 46 
# 0077b Instruction { source: "Saving reg0x45 before None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x45)], resolved: None }
09 45 
# 0077d Instruction { source: "Saving reg0x44 before None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x44)], resolved: None }
09 44 
# 0077f Instruction { source: "Saving reg0x43 before None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x43)], resolved: None }
09 43 
# 00781 Instruction { source: "Saving reg0x42 before None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x42)], resolved: None }
09 42 
# 00783 Instruction { source: "Saving reg0x41 before None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x41)], resolved: None }
09 41 
# 00785 Instruction { source: "Saving reg0x40 before None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x40)], resolved: None }
09 40 
# 00787 Instruction { source: "Saving reg0x3e before None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3e)], resolved: None }
09 3e 
# 00789 Instruction { source: "Saving reg0x3d before None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3d)], resolved: None }
09 3d 
# 0078b Instruction { source: "Saving reg0x3c before None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3c)], resolved: None }
09 3c 
# 0078d Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 00793 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 9d 07 00 00 
# 00799 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: JmpImm, args: [Label24(:lcd_putc)], resolved: None }
70 08 21 00 
# 0079d Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 007a3 Instruction { source: "Restoring reg0x3c after None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3c)], resolved: None }
0a 3c 
# 007a5 Instruction { source: "Restoring reg0x3d after None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3d)], resolved: None }
0a 3d 
# 007a7 Instruction { source: "Restoring reg0x3e after None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3e)], resolved: None }
0a 3e 
# 007a9 Instruction { source: "Restoring reg0x40 after None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x40)], resolved: None }
0a 40 
# 007ab Instruction { source: "Restoring reg0x41 after None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x41)], resolved: None }
0a 41 
# 007ad Instruction { source: "Restoring reg0x42 after None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x42)], resolved: None }
0a 42 
# 007af Instruction { source: "Restoring reg0x43 after None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x43)], resolved: None }
0a 43 
# 007b1 Instruction { source: "Restoring reg0x44 after None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x44)], resolved: None }
0a 44 
# 007b3 Instruction { source: "Restoring reg0x45 after None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x45)], resolved: None }
0a 45 
# 007b5 Instruction { source: "Restoring reg0x46 after None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x46)], resolved: None }
0a 46 
# 007b7 Instruction { source: "Restoring reg0x47 after None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x47)], resolved: None }
0a 47 
# 007b9 Instruction { source: "Restoring reg0x48 after None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x48)], resolved: None }
0a 48 
# 007bb Instruction { source: "Restoring reg0x49 after None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x49)], resolved: None }
0a 49 
# 007bd Instruction { source: "Restoring reg0x4c after None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4c)], resolved: None }
0a 4c 
# 007bf Instruction { source: "Restoring reg0x4d after None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4d)], resolved: None }
0a 4d 
# 007c1 Instruction { source: "Restoring reg0x4e after None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4e)], resolved: None }
0a 4e 
# 007c3 Instruction { source: "Restoring reg0x4f after None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4f)], resolved: None }
0a 4f 
# goto inline_RpnCalc_handle_putc_16_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_16_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_16_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_16_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_16_function_end_putc
# t9c38 <- 0n82/0x52u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Number(U8, 82)", "Number(U8, 82)"] }
# 007c5 Instruction { source: "t9c38 <- 0n82/0x52u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Number(U8, 82)\", \"Number(U8, 82)\"] }", opcode: LoadImm8, args: [Register(0x49), Constant8(0x52=82)], resolved: None }
04 49 52 
# inline_RpnCalc_handle_putc_17_c <- t9c38 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_17_c <- t9c38 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_17_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 007c8 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x49)], resolved: None }
68 49 
# inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })"] }
# 007ca Instruction { source: "Arg0[ch]=inline_RpnCalc_handle_putc_17_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x49), Register(0x00)], resolved: None }
0b 49 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79]
# 007cd Instruction { source: "Saving reg0x4f before None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4f)], resolved: None }
09 4f 
# 007cf Instruction { source: "Saving reg0x4e before None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4e)], resolved: None }
09 4e 
# 007d1 Instruction { source: "Saving reg0x4d before None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4d)], resolved: None }
09 4d 
# 007d3 Instruction { source: "Saving reg0x4c before None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4c)], resolved: None }
09 4c 
# 007d5 Instruction { source: "Saving reg0x49 before None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x49)], resolved: None }
09 49 
# 007d7 Instruction { source: "Saving reg0x48 before None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x48)], resolved: None }
09 48 
# 007d9 Instruction { source: "Saving reg0x47 before None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x47)], resolved: None }
09 47 
# 007db Instruction { source: "Saving reg0x46 before None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x46)], resolved: None }
09 46 
# 007dd Instruction { source: "Saving reg0x45 before None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x45)], resolved: None }
09 45 
# 007df Instruction { source: "Saving reg0x44 before None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x44)], resolved: None }
09 44 
# 007e1 Instruction { source: "Saving reg0x43 before None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x43)], resolved: None }
09 43 
# 007e3 Instruction { source: "Saving reg0x42 before None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x42)], resolved: None }
09 42 
# 007e5 Instruction { source: "Saving reg0x41 before None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x41)], resolved: None }
09 41 
# 007e7 Instruction { source: "Saving reg0x40 before None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x40)], resolved: None }
09 40 
# 007e9 Instruction { source: "Saving reg0x3e before None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3e)], resolved: None }
09 3e 
# 007eb Instruction { source: "Saving reg0x3d before None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3d)], resolved: None }
09 3d 
# 007ed Instruction { source: "Saving reg0x3c before None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3c)], resolved: None }
09 3c 
# 007ef Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 007f5 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c ff 07 00 00 
# 007fb Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: JmpImm, args: [Label24(:lcd_putc)], resolved: None }
70 08 21 00 
# 007ff Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 00805 Instruction { source: "Restoring reg0x3c after None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3c)], resolved: None }
0a 3c 
# 00807 Instruction { source: "Restoring reg0x3d after None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3d)], resolved: None }
0a 3d 
# 00809 Instruction { source: "Restoring reg0x3e after None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3e)], resolved: None }
0a 3e 
# 0080b Instruction { source: "Restoring reg0x40 after None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x40)], resolved: None }
0a 40 
# 0080d Instruction { source: "Restoring reg0x41 after None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x41)], resolved: None }
0a 41 
# 0080f Instruction { source: "Restoring reg0x42 after None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x42)], resolved: None }
0a 42 
# 00811 Instruction { source: "Restoring reg0x43 after None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x43)], resolved: None }
0a 43 
# 00813 Instruction { source: "Restoring reg0x44 after None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x44)], resolved: None }
0a 44 
# 00815 Instruction { source: "Restoring reg0x45 after None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x45)], resolved: None }
0a 45 
# 00817 Instruction { source: "Restoring reg0x46 after None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x46)], resolved: None }
0a 46 
# 00819 Instruction { source: "Restoring reg0x47 after None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x47)], resolved: None }
0a 47 
# 0081b Instruction { source: "Restoring reg0x48 after None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x48)], resolved: None }
0a 48 
# 0081d Instruction { source: "Restoring reg0x49 after None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x49)], resolved: None }
0a 49 
# 0081f Instruction { source: "Restoring reg0x4c after None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4c)], resolved: None }
0a 4c 
# 00821 Instruction { source: "Restoring reg0x4d after None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4d)], resolved: None }
0a 4d 
# 00823 Instruction { source: "Restoring reg0x4e after None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4e)], resolved: None }
0a 4e 
# 00825 Instruction { source: "Restoring reg0x4f after None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4f)], resolved: None }
0a 4f 
# goto inline_RpnCalc_handle_putc_17_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_17_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_17_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_17_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_17_function_end_putc
# td7b5 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 00827 Instruction { source: "td7b5 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x75), Constant8(0x0a=10)], resolved: None }
04 75 0a 
# inline_RpnCalc_handle_putc_18_c <- td7b5 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# 0082a Instruction { source: "inline_RpnCalc_handle_putc_18_c <- td7b5 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x75), Register(0x49)], resolved: None }
0b 75 49 
# inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 0082d Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x49)], resolved: None }
68 49 
# inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })"] }
# 0082f Instruction { source: "Arg0[ch]=inline_RpnCalc_handle_putc_18_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x49), Register(0x00)], resolved: None }
0b 49 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79]
# 00832 Instruction { source: "Saving reg0x4f before None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4f)], resolved: None }
09 4f 
# 00834 Instruction { source: "Saving reg0x4e before None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4e)], resolved: None }
09 4e 
# 00836 Instruction { source: "Saving reg0x4d before None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4d)], resolved: None }
09 4d 
# 00838 Instruction { source: "Saving reg0x4c before None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4c)], resolved: None }
09 4c 
# 0083a Instruction { source: "Saving reg0x49 before None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x49)], resolved: None }
09 49 
# 0083c Instruction { source: "Saving reg0x48 before None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x48)], resolved: None }
09 48 
# 0083e Instruction { source: "Saving reg0x47 before None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x47)], resolved: None }
09 47 
# 00840 Instruction { source: "Saving reg0x46 before None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x46)], resolved: None }
09 46 
# 00842 Instruction { source: "Saving reg0x45 before None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x45)], resolved: None }
09 45 
# 00844 Instruction { source: "Saving reg0x44 before None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x44)], resolved: None }
09 44 
# 00846 Instruction { source: "Saving reg0x43 before None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x43)], resolved: None }
09 43 
# 00848 Instruction { source: "Saving reg0x42 before None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x42)], resolved: None }
09 42 
# 0084a Instruction { source: "Saving reg0x41 before None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x41)], resolved: None }
09 41 
# 0084c Instruction { source: "Saving reg0x40 before None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x40)], resolved: None }
09 40 
# 0084e Instruction { source: "Saving reg0x3e before None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3e)], resolved: None }
09 3e 
# 00850 Instruction { source: "Saving reg0x3d before None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3d)], resolved: None }
09 3d 
# 00852 Instruction { source: "Saving reg0x3c before None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3c)], resolved: None }
09 3c 
# 00854 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 0085a Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 64 08 00 00 
# 00860 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: JmpImm, args: [Label24(:lcd_putc)], resolved: None }
70 08 21 00 
# 00864 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 0086a Instruction { source: "Restoring reg0x3c after None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3c)], resolved: None }
0a 3c 
# 0086c Instruction { source: "Restoring reg0x3d after None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3d)], resolved: None }
0a 3d 
# 0086e Instruction { source: "Restoring reg0x3e after None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3e)], resolved: None }
0a 3e 
# 00870 Instruction { source: "Restoring reg0x40 after None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x40)], resolved: None }
0a 40 
# 00872 Instruction { source: "Restoring reg0x41 after None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x41)], resolved: None }
0a 41 
# 00874 Instruction { source: "Restoring reg0x42 after None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x42)], resolved: None }
0a 42 
# 00876 Instruction { source: "Restoring reg0x43 after None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x43)], resolved: None }
0a 43 
# 00878 Instruction { source: "Restoring reg0x44 after None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x44)], resolved: None }
0a 44 
# 0087a Instruction { source: "Restoring reg0x45 after None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x45)], resolved: None }
0a 45 
# 0087c Instruction { source: "Restoring reg0x46 after None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x46)], resolved: None }
0a 46 
# 0087e Instruction { source: "Restoring reg0x47 after None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x47)], resolved: None }
0a 47 
# 00880 Instruction { source: "Restoring reg0x48 after None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x48)], resolved: None }
0a 48 
# 00882 Instruction { source: "Restoring reg0x49 after None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x49)], resolved: None }
0a 49 
# 00884 Instruction { source: "Restoring reg0x4c after None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4c)], resolved: None }
0a 4c 
# 00886 Instruction { source: "Restoring reg0x4d after None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4d)], resolved: None }
0a 4d 
# 00888 Instruction { source: "Restoring reg0x4e after None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4e)], resolved: None }
0a 4e 
# 0088a Instruction { source: "Restoring reg0x4f after None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4f)], resolved: None }
0a 4f 
# goto inline_RpnCalc_handle_putc_18_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_18_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_18_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_18_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_18_function_end_putc
# tfcd <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 1)) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 0088c Instruction { source: "tfcd <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 1)) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x01=1)], resolved: None }
04 64 01 
# return Some(tfcd)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 1)) }"] }
# 0088f Instruction { source: "return Some(tfcd)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x00)], resolved: None }
0b 64 00 
# 00892 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto RpnCalc_handle_if_end_14
# 	SourceContext { contexts: [] }
# 00894 Instruction { source: "goto RpnCalc_handle_if_end_14\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_14)], resolved: None }
70 98 08 00 
# :RpnCalc_handle_if_else_0_16
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_16
# :RpnCalc_handle_if_end_14
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_14
# t4671 <- stack_needed U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }", "Ident(\"stack_needed\")", "Ident(\"stack_needed\")"] }
# 00898 Instruction { source: "t4671 <- stack_needed U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\", \"Ident(\\\"stack_needed\\\")\", \"Ident(\\\"stack_needed\\\")\"] }", opcode: Copy8, args: [Register(0x74), Register(0x75)], resolved: None }
0b 74 75 
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0089b Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x00=0)], resolved: None }
04 64 00 
# if t4671 > tb36e then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }"] }
# 0089e Instruction { source: "if t4671 > tb36e then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x75), Register(0x64)], resolved: None }
15 75 64 
# 008a1 Instruction { source: "if t4671 > tb36e then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_if_else_0_19)], resolved: None }
71 f9 08 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > tb36e then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_18)], resolved: None }
# :RpnCalc_handle_if_true_0_18
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }"] }
# RpnCalc_handle_if_true_0_18
# tfe08 <- stack U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }", "Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 008a5 Instruction { source: "tfe08 <- stack U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }\", \"Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x70), Register(0x4c)], resolved: None }
21 70 4c 
# inline_RpnCalc_handle_stack_pop_52_s <- tfe08 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }", "Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })"] }
# 008a8 Instruction { source: "inline_RpnCalc_handle_stack_pop_52_s <- tfe08 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }\", \"Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] })\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x3c)], resolved: None }
21 4c 3c 
# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 008ab Instruction { source: "inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x50)], resolved: None }
21 3c 50 
# 008ae Instruction { source: "inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x50), Constant32(0x00000040=64)], resolved: None }
32 50 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 008b4 Instruction { source: "inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x50)], resolved: None }
21 3c 50 
# 008b7 Instruction { source: "inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x50), Constant32(0x00000040=64)], resolved: None }
32 50 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 008bd Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x50), Register(0x4c)], resolved: None }
22 50 4c 
# inline_RpnCalc_handle_stack_pop_52_te089 <- inline_RpnCalc_handle_stack_pop_52_t14ab Subtract Number(0n1/0x00000001u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 008c0 Instruction { source: "inline_RpnCalc_handle_stack_pop_52_te089 <- inline_RpnCalc_handle_stack_pop_52_t14ab Subtract Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x4c), Constant32(0xffffffff=4294967295)], resolved: None }
32 4c ff ff ff ff 
# mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_te089 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 008c6 Instruction { source: "mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_te089 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x4c), Register(0x50)], resolved: None }
23 4c 50 
# 008c9 Instruction { source: "mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_te089 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_pop_52_t587d <- inline_RpnCalc_handle_stack_pop_52_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t587d <- inline_RpnCalc_handle_stack_pop_52_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_values <- inline_RpnCalc_handle_stack_pop_52_t587d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 008ca Instruction { source: "inline_RpnCalc_handle_stack_pop_52_values <- inline_RpnCalc_handle_stack_pop_52_t587d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x4c)], resolved: None }
21 3c 4c 
# inline_RpnCalc_handle_stack_pop_52_tf90a <- inline_RpnCalc_handle_stack_pop_52_values U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# 008cd Instruction { source: "inline_RpnCalc_handle_stack_pop_52_tf90a <- inline_RpnCalc_handle_stack_pop_52_values U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x54)], resolved: None }
21 4c 54 
# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 008d0 Instruction { source: "inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x50)], resolved: None }
21 3c 50 
# 008d3 Instruction { source: "inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x50), Constant32(0x00000040=64)], resolved: None }
32 50 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 008d9 Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x50), Register(0x4c)], resolved: None }
22 50 4c 
# inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 008dc Instruction { source: "inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm32, args: [Register(0x00), Constant32(0x00000004=4)], resolved: None }
20 00 04 00 00 00 
# 008e2 Instruction { source: "inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: Mul8_16, args: [Register(0x4c), Register(0x00), Register(0x3c)], resolved: None }
11 4c 00 3c 
# 008e6 Instruction { source: "inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm8, args: [Register(0x3e), Constant8(0x00=0)], resolved: None }
04 3e 00 
# 008e9 Instruction { source: "inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm8, args: [Register(0x3f), Constant8(0x00=0)], resolved: None }
04 3f 00 
# inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_tf90a Add Var(inline_RpnCalc_handle_stack_pop_52_tf659)
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 008ec Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_tf90a Add Var(inline_RpnCalc_handle_stack_pop_52_tf659)\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 008ed Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_tf90a Add Var(inline_RpnCalc_handle_stack_pop_52_tf659)\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x54), Register(0x3c), Register(0x3c)], resolved: None }
30 54 3c 3c 
# 008f1 Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_tf90a Add Var(inline_RpnCalc_handle_stack_pop_52_tf659)\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_52_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_52_t100e] U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))"] }
# 008f2 Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_52_t100e] U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\"] }", opcode: Load32, args: [Register(0x3c), Register(0x3c)], resolved: None }
22 3c 3c 
# a <- inline_RpnCalc_handle_stack_pop_52_t8e54 U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }"] }
# optimized away noop copy Instruction { source: "a <- inline_RpnCalc_handle_stack_pop_52_t8e54 U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# goto inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop)], resolved: None }
# :inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop
# goto RpnCalc_handle_if_end_17
# 	SourceContext { contexts: [] }
# 008f5 Instruction { source: "goto RpnCalc_handle_if_end_17\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_17)], resolved: None }
70 f9 08 00 
# :RpnCalc_handle_if_else_0_19
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_19
# :RpnCalc_handle_if_end_17
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_17
# t4671 <- stack_needed U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }, [Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }", "Ident(\"stack_needed\")", "Ident(\"stack_needed\")"] }
# 008f9 Instruction { source: "t4671 <- stack_needed U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }, [Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }\", \"Ident(\\\"stack_needed\\\")\", \"Ident(\\\"stack_needed\\\")\"] }", opcode: Copy8, args: [Register(0x74), Register(0x75)], resolved: None }
0b 74 75 
# tfcd <- 0n1/0x01u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }, [Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 008fc Instruction { source: "tfcd <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }, [Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x01=1)], resolved: None }
04 64 01 
# if t4671 > tfcd then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }, [Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }"] }
# 008ff Instruction { source: "if t4671 > tfcd then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }, [Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }\"] }", opcode: Cmp8, args: [Register(0x75), Register(0x64)], resolved: None }
15 75 64 
# 00902 Instruction { source: "if t4671 > tfcd then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }, [Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_if_else_0_22)], resolved: None }
71 5a 09 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > tfcd then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }, [Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_21)], resolved: None }
# :RpnCalc_handle_if_true_0_21
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }, [Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }"] }
# RpnCalc_handle_if_true_0_21
# tfe08 <- stack U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }", "Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 00906 Instruction { source: "tfe08 <- stack U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }\", \"Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x70), Register(0x4c)], resolved: None }
21 70 4c 
# inline_RpnCalc_handle_stack_pop_53_s <- tfe08 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }", "Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })"] }
# 00909 Instruction { source: "inline_RpnCalc_handle_stack_pop_53_s <- tfe08 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }\", \"Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] })\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x40)], resolved: None }
21 4c 40 
# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 0090c Instruction { source: "inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x50)], resolved: None }
21 40 50 
# 0090f Instruction { source: "inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x50), Constant32(0x00000040=64)], resolved: None }
32 50 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00915 Instruction { source: "inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x50)], resolved: None }
21 40 50 
# 00918 Instruction { source: "inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x50), Constant32(0x00000040=64)], resolved: None }
32 50 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 0091e Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x50), Register(0x4c)], resolved: None }
22 50 4c 
# inline_RpnCalc_handle_stack_pop_53_te089 <- inline_RpnCalc_handle_stack_pop_53_t14ab Subtract Number(0n1/0x00000001u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 00921 Instruction { source: "inline_RpnCalc_handle_stack_pop_53_te089 <- inline_RpnCalc_handle_stack_pop_53_t14ab Subtract Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x4c), Constant32(0xffffffff=4294967295)], resolved: None }
32 4c ff ff ff ff 
# mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_te089 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 00927 Instruction { source: "mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_te089 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x4c), Register(0x50)], resolved: None }
23 4c 50 
# 0092a Instruction { source: "mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_te089 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_pop_53_t587d <- inline_RpnCalc_handle_stack_pop_53_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t587d <- inline_RpnCalc_handle_stack_pop_53_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_values <- inline_RpnCalc_handle_stack_pop_53_t587d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 0092b Instruction { source: "inline_RpnCalc_handle_stack_pop_53_values <- inline_RpnCalc_handle_stack_pop_53_t587d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x4c)], resolved: None }
21 40 4c 
# inline_RpnCalc_handle_stack_pop_53_tf90a <- inline_RpnCalc_handle_stack_pop_53_values U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# 0092e Instruction { source: "inline_RpnCalc_handle_stack_pop_53_tf90a <- inline_RpnCalc_handle_stack_pop_53_values U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x54)], resolved: None }
21 4c 54 
# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00931 Instruction { source: "inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x50)], resolved: None }
21 40 50 
# 00934 Instruction { source: "inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x50), Constant32(0x00000040=64)], resolved: None }
32 50 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 0093a Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x50), Register(0x4c)], resolved: None }
22 50 4c 
# inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 0093d Instruction { source: "inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm32, args: [Register(0x00), Constant32(0x00000004=4)], resolved: None }
20 00 04 00 00 00 
# 00943 Instruction { source: "inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: Mul8_16, args: [Register(0x4c), Register(0x00), Register(0x40)], resolved: None }
11 4c 00 40 
# 00947 Instruction { source: "inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm8, args: [Register(0x42), Constant8(0x00=0)], resolved: None }
04 42 00 
# 0094a Instruction { source: "inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm8, args: [Register(0x43), Constant8(0x00=0)], resolved: None }
04 43 00 
# inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_tf90a Add Var(inline_RpnCalc_handle_stack_pop_53_tf659)
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 0094d Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_tf90a Add Var(inline_RpnCalc_handle_stack_pop_53_tf659)\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0094e Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_tf90a Add Var(inline_RpnCalc_handle_stack_pop_53_tf659)\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x54), Register(0x40), Register(0x40)], resolved: None }
30 54 40 40 
# 00952 Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_tf90a Add Var(inline_RpnCalc_handle_stack_pop_53_tf659)\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_53_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_53_t100e] U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))"] }
# 00953 Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_53_t100e] U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\"] }", opcode: Load32, args: [Register(0x40), Register(0x40)], resolved: None }
22 40 40 
# b <- inline_RpnCalc_handle_stack_pop_53_t8e54 U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }"] }
# optimized away noop copy Instruction { source: "b <- inline_RpnCalc_handle_stack_pop_53_t8e54 U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# goto inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop)], resolved: None }
# :inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop
# goto RpnCalc_handle_if_end_20
# 	SourceContext { contexts: [] }
# 00956 Instruction { source: "goto RpnCalc_handle_if_end_20\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_20)], resolved: None }
70 5a 09 00 
# :RpnCalc_handle_if_else_0_22
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_22
# :RpnCalc_handle_if_end_20
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_20
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }, [Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }, [Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t2597 <- 0n43/0x2bu8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }, [Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }", "Number(U8, 43)", "Number(U8, 43)"] }
# 0095a Instruction { source: "t2597 <- 0n43/0x2bu8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }, [Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\", \"Number(U8, 43)\", \"Number(U8, 43)\"] }", opcode: LoadImm8, args: [Register(0x75), Constant8(0x2b=43)], resolved: None }
04 75 2b 
# if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }, [Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }"] }
# 0095d Instruction { source: "if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }, [Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\"] }", opcode: Cmp8, args: [Register(0x48), Register(0x75)], resolved: None }
15 48 75 
# 00960 Instruction { source: "if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }, [Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_0_24)], resolved: None }
72 68 09 00 
# 00964 Instruction { source: "if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }, [Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_0_25)], resolved: None }
70 e0 0a 00 
# :RpnCalc_handle_if_true_0_24
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }, [Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }"] }
# RpnCalc_handle_if_true_0_24
# tace9 <- b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# 00968 Instruction { source: "tace9 <- b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x44)], resolved: None }
21 40 44 
# t8792 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# 0096b Instruction { source: "t8792 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x68)], resolved: None }
21 3c 68 
# sum <- tace9 Add Var(t8792)
# 	SourceContext { contexts: ["Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))"] }
# 0096e Instruction { source: "sum <- tace9 Add Var(t8792)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0096f Instruction { source: "sum <- tace9 Add Var(t8792)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x44), Register(0x68), Register(0x40)], resolved: None }
30 44 68 40 
# 00973 Instruction { source: "sum <- tace9 Add Var(t8792)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t670d <- sum U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] })", "Ident(\"sum\")", "Ident(\"sum\")"] }
# 00974 Instruction { source: "t670d <- sum U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Ident(\\\"sum\\\")\", \"Ident(\\\"sum\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x3c)], resolved: None }
21 40 3c 
# None <= call print_dec32(t670d,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] })"] }
# 00977 Instruction { source: "Arg0[a]=t670d None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x00)], resolved: None }
21 3c 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117]
# 0097a Instruction { source: "Saving reg0x75 before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x75)], resolved: None }
09 75 
# 0097c Instruction { source: "Saving reg0x74 before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x74)], resolved: None }
09 74 
# 0097e Instruction { source: "Saving reg0x73 before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x73)], resolved: None }
09 73 
# 00980 Instruction { source: "Saving reg0x72 before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x72)], resolved: None }
09 72 
# 00982 Instruction { source: "Saving reg0x71 before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x71)], resolved: None }
09 71 
# 00984 Instruction { source: "Saving reg0x70 before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x70)], resolved: None }
09 70 
# 00986 Instruction { source: "Saving reg0x6e before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x6e)], resolved: None }
09 6e 
# 00988 Instruction { source: "Saving reg0x6d before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x6d)], resolved: None }
09 6d 
# 0098a Instruction { source: "Saving reg0x6c before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x6c)], resolved: None }
09 6c 
# 0098c Instruction { source: "Saving reg0x6b before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x6b)], resolved: None }
09 6b 
# 0098e Instruction { source: "Saving reg0x6a before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x6a)], resolved: None }
09 6a 
# 00990 Instruction { source: "Saving reg0x69 before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x69)], resolved: None }
09 69 
# 00992 Instruction { source: "Saving reg0x68 before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x68)], resolved: None }
09 68 
# 00994 Instruction { source: "Saving reg0x65 before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x65)], resolved: None }
09 65 
# 00996 Instruction { source: "Saving reg0x64 before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x64)], resolved: None }
09 64 
# 00998 Instruction { source: "Saving reg0x63 before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x63)], resolved: None }
09 63 
# 0099a Instruction { source: "Saving reg0x62 before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x62)], resolved: None }
09 62 
# 0099c Instruction { source: "Saving reg0x61 before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x61)], resolved: None }
09 61 
# 0099e Instruction { source: "Saving reg0x60 before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x60)], resolved: None }
09 60 
# 009a0 Instruction { source: "Saving reg0x4f before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x4f)], resolved: None }
09 4f 
# 009a2 Instruction { source: "Saving reg0x4e before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x4e)], resolved: None }
09 4e 
# 009a4 Instruction { source: "Saving reg0x4d before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x4d)], resolved: None }
09 4d 
# 009a6 Instruction { source: "Saving reg0x4c before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x4c)], resolved: None }
09 4c 
# 009a8 Instruction { source: "Saving reg0x49 before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x49)], resolved: None }
09 49 
# 009aa Instruction { source: "Saving reg0x48 before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x48)], resolved: None }
09 48 
# 009ac Instruction { source: "Saving reg0x47 before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x47)], resolved: None }
09 47 
# 009ae Instruction { source: "Saving reg0x46 before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x46)], resolved: None }
09 46 
# 009b0 Instruction { source: "Saving reg0x45 before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x45)], resolved: None }
09 45 
# 009b2 Instruction { source: "Saving reg0x44 before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x44)], resolved: None }
09 44 
# 009b4 Instruction { source: "Saving reg0x43 before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x43)], resolved: None }
09 43 
# 009b6 Instruction { source: "Saving reg0x42 before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x42)], resolved: None }
09 42 
# 009b8 Instruction { source: "Saving reg0x41 before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x41)], resolved: None }
09 41 
# 009ba Instruction { source: "Saving reg0x40 before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x40)], resolved: None }
09 40 
# 009bc Instruction { source: "Saving reg0x3e before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x3e)], resolved: None }
09 3e 
# 009be Instruction { source: "Saving reg0x3d before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x3d)], resolved: None }
09 3d 
# 009c0 Instruction { source: "Saving reg0x3c before None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x3c)], resolved: None }
09 3c 
# 009c2 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 009c8 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c d2 09 00 00 
# 009ce Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: JmpImm, args: [Label24(:print_dec32)], resolved: None }
70 a0 28 00 
# 009d2 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 009d8 Instruction { source: "Restoring reg0x3c after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x3c)], resolved: None }
0a 3c 
# 009da Instruction { source: "Restoring reg0x3d after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x3d)], resolved: None }
0a 3d 
# 009dc Instruction { source: "Restoring reg0x3e after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x3e)], resolved: None }
0a 3e 
# 009de Instruction { source: "Restoring reg0x40 after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x40)], resolved: None }
0a 40 
# 009e0 Instruction { source: "Restoring reg0x41 after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x41)], resolved: None }
0a 41 
# 009e2 Instruction { source: "Restoring reg0x42 after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x42)], resolved: None }
0a 42 
# 009e4 Instruction { source: "Restoring reg0x43 after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x43)], resolved: None }
0a 43 
# 009e6 Instruction { source: "Restoring reg0x44 after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x44)], resolved: None }
0a 44 
# 009e8 Instruction { source: "Restoring reg0x45 after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x45)], resolved: None }
0a 45 
# 009ea Instruction { source: "Restoring reg0x46 after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x46)], resolved: None }
0a 46 
# 009ec Instruction { source: "Restoring reg0x47 after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x47)], resolved: None }
0a 47 
# 009ee Instruction { source: "Restoring reg0x48 after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x48)], resolved: None }
0a 48 
# 009f0 Instruction { source: "Restoring reg0x49 after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x49)], resolved: None }
0a 49 
# 009f2 Instruction { source: "Restoring reg0x4c after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x4c)], resolved: None }
0a 4c 
# 009f4 Instruction { source: "Restoring reg0x4d after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x4d)], resolved: None }
0a 4d 
# 009f6 Instruction { source: "Restoring reg0x4e after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x4e)], resolved: None }
0a 4e 
# 009f8 Instruction { source: "Restoring reg0x4f after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x4f)], resolved: None }
0a 4f 
# 009fa Instruction { source: "Restoring reg0x60 after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x60)], resolved: None }
0a 60 
# 009fc Instruction { source: "Restoring reg0x61 after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x61)], resolved: None }
0a 61 
# 009fe Instruction { source: "Restoring reg0x62 after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x62)], resolved: None }
0a 62 
# 00a00 Instruction { source: "Restoring reg0x63 after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x63)], resolved: None }
0a 63 
# 00a02 Instruction { source: "Restoring reg0x64 after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x64)], resolved: None }
0a 64 
# 00a04 Instruction { source: "Restoring reg0x65 after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x65)], resolved: None }
0a 65 
# 00a06 Instruction { source: "Restoring reg0x68 after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x68)], resolved: None }
0a 68 
# 00a08 Instruction { source: "Restoring reg0x69 after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x69)], resolved: None }
0a 69 
# 00a0a Instruction { source: "Restoring reg0x6a after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x6a)], resolved: None }
0a 6a 
# 00a0c Instruction { source: "Restoring reg0x6b after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x6b)], resolved: None }
0a 6b 
# 00a0e Instruction { source: "Restoring reg0x6c after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x6c)], resolved: None }
0a 6c 
# 00a10 Instruction { source: "Restoring reg0x6d after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x6d)], resolved: None }
0a 6d 
# 00a12 Instruction { source: "Restoring reg0x6e after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x6e)], resolved: None }
0a 6e 
# 00a14 Instruction { source: "Restoring reg0x70 after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x70)], resolved: None }
0a 70 
# 00a16 Instruction { source: "Restoring reg0x71 after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x71)], resolved: None }
0a 71 
# 00a18 Instruction { source: "Restoring reg0x72 after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x72)], resolved: None }
0a 72 
# 00a1a Instruction { source: "Restoring reg0x73 after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x73)], resolved: None }
0a 73 
# 00a1c Instruction { source: "Restoring reg0x74 after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x74)], resolved: None }
0a 74 
# 00a1e Instruction { source: "Restoring reg0x75 after None <= call print_dec32(t670d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x75)], resolved: None }
0a 75 
# td7b5 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 00a20 Instruction { source: "td7b5 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x75), Constant8(0x0a=10)], resolved: None }
04 75 0a 
# inline_RpnCalc_handle_putc_19_c <- td7b5 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# 00a23 Instruction { source: "inline_RpnCalc_handle_putc_19_c <- td7b5 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x75), Register(0x49)], resolved: None }
0b 75 49 
# inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_19_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00a26 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x49)], resolved: None }
68 49 
# inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })"] }
# 00a28 Instruction { source: "Arg0[ch]=inline_RpnCalc_handle_putc_19_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x49), Register(0x00)], resolved: None }
0b 49 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79]
# 00a2b Instruction { source: "Saving reg0x4f before None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4f)], resolved: None }
09 4f 
# 00a2d Instruction { source: "Saving reg0x4e before None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4e)], resolved: None }
09 4e 
# 00a2f Instruction { source: "Saving reg0x4d before None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4d)], resolved: None }
09 4d 
# 00a31 Instruction { source: "Saving reg0x4c before None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4c)], resolved: None }
09 4c 
# 00a33 Instruction { source: "Saving reg0x49 before None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x49)], resolved: None }
09 49 
# 00a35 Instruction { source: "Saving reg0x48 before None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x48)], resolved: None }
09 48 
# 00a37 Instruction { source: "Saving reg0x47 before None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x47)], resolved: None }
09 47 
# 00a39 Instruction { source: "Saving reg0x46 before None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x46)], resolved: None }
09 46 
# 00a3b Instruction { source: "Saving reg0x45 before None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x45)], resolved: None }
09 45 
# 00a3d Instruction { source: "Saving reg0x44 before None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x44)], resolved: None }
09 44 
# 00a3f Instruction { source: "Saving reg0x43 before None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x43)], resolved: None }
09 43 
# 00a41 Instruction { source: "Saving reg0x42 before None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x42)], resolved: None }
09 42 
# 00a43 Instruction { source: "Saving reg0x41 before None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x41)], resolved: None }
09 41 
# 00a45 Instruction { source: "Saving reg0x40 before None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x40)], resolved: None }
09 40 
# 00a47 Instruction { source: "Saving reg0x3e before None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3e)], resolved: None }
09 3e 
# 00a49 Instruction { source: "Saving reg0x3d before None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3d)], resolved: None }
09 3d 
# 00a4b Instruction { source: "Saving reg0x3c before None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3c)], resolved: None }
09 3c 
# 00a4d Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 00a53 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 5d 0a 00 00 
# 00a59 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: JmpImm, args: [Label24(:lcd_putc)], resolved: None }
70 08 21 00 
# 00a5d Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 00a63 Instruction { source: "Restoring reg0x3c after None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3c)], resolved: None }
0a 3c 
# 00a65 Instruction { source: "Restoring reg0x3d after None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3d)], resolved: None }
0a 3d 
# 00a67 Instruction { source: "Restoring reg0x3e after None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3e)], resolved: None }
0a 3e 
# 00a69 Instruction { source: "Restoring reg0x40 after None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x40)], resolved: None }
0a 40 
# 00a6b Instruction { source: "Restoring reg0x41 after None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x41)], resolved: None }
0a 41 
# 00a6d Instruction { source: "Restoring reg0x42 after None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x42)], resolved: None }
0a 42 
# 00a6f Instruction { source: "Restoring reg0x43 after None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x43)], resolved: None }
0a 43 
# 00a71 Instruction { source: "Restoring reg0x44 after None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x44)], resolved: None }
0a 44 
# 00a73 Instruction { source: "Restoring reg0x45 after None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x45)], resolved: None }
0a 45 
# 00a75 Instruction { source: "Restoring reg0x46 after None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x46)], resolved: None }
0a 46 
# 00a77 Instruction { source: "Restoring reg0x47 after None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x47)], resolved: None }
0a 47 
# 00a79 Instruction { source: "Restoring reg0x48 after None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x48)], resolved: None }
0a 48 
# 00a7b Instruction { source: "Restoring reg0x49 after None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x49)], resolved: None }
0a 49 
# 00a7d Instruction { source: "Restoring reg0x4c after None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4c)], resolved: None }
0a 4c 
# 00a7f Instruction { source: "Restoring reg0x4d after None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4d)], resolved: None }
0a 4d 
# 00a81 Instruction { source: "Restoring reg0x4e after None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4e)], resolved: None }
0a 4e 
# 00a83 Instruction { source: "Restoring reg0x4f after None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4f)], resolved: None }
0a 4f 
# goto inline_RpnCalc_handle_putc_19_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_19_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_19_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_19_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_19_function_end_putc
# tfe08 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 00a85 Instruction { source: "tfe08 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x70), Register(0x4c)], resolved: None }
21 70 4c 
# t670d <- sum U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })", "Ident(\"sum\")", "Ident(\"sum\")"] }
# 00a88 Instruction { source: "t670d <- sum U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\", \"Ident(\\\"sum\\\")\", \"Ident(\\\"sum\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x3c)], resolved: None }
21 40 3c 
# inline_RpnCalc_handle_stack_push_54_s <- tfe08 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })"] }
# 00a8b Instruction { source: "inline_RpnCalc_handle_stack_push_54_s <- tfe08 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x40)], resolved: None }
21 4c 40 
# inline_RpnCalc_handle_stack_push_54_n <- t670d U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_n <- t670d U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_t587d <- inline_RpnCalc_handle_stack_push_54_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t587d <- inline_RpnCalc_handle_stack_push_54_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_values <- inline_RpnCalc_handle_stack_push_54_t587d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 00a8e Instruction { source: "inline_RpnCalc_handle_stack_push_54_values <- inline_RpnCalc_handle_stack_push_54_t587d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x44)], resolved: None }
21 40 44 
# inline_RpnCalc_handle_stack_push_54_tf90a <- inline_RpnCalc_handle_stack_push_54_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# 00a91 Instruction { source: "inline_RpnCalc_handle_stack_push_54_tf90a <- inline_RpnCalc_handle_stack_push_54_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x4c)], resolved: None }
21 44 4c 
# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00a94 Instruction { source: "inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x68)], resolved: None }
21 40 68 
# 00a97 Instruction { source: "inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x68), Constant32(0x00000040=64)], resolved: None }
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00a9d Instruction { source: "inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x68), Register(0x44)], resolved: None }
22 68 44 
# inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 00aa0 Instruction { source: "inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm32, args: [Register(0x00), Constant32(0x00000004=4)], resolved: None }
20 00 04 00 00 00 
# 00aa6 Instruction { source: "inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: Mul8_16, args: [Register(0x44), Register(0x00), Register(0x44)], resolved: None }
11 44 00 44 
# 00aaa Instruction { source: "inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm8, args: [Register(0x46), Constant8(0x00=0)], resolved: None }
04 46 00 
# 00aad Instruction { source: "inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm8, args: [Register(0x47), Constant8(0x00=0)], resolved: None }
04 47 00 
# inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_tf90a Add Var(inline_RpnCalc_handle_stack_push_54_tf659)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 00ab0 Instruction { source: "inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_tf90a Add Var(inline_RpnCalc_handle_stack_push_54_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00ab1 Instruction { source: "inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_tf90a Add Var(inline_RpnCalc_handle_stack_push_54_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x44), Register(0x44)], resolved: None }
30 4c 44 44 
# 00ab5 Instruction { source: "inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_tf90a Add Var(inline_RpnCalc_handle_stack_push_54_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_54_t531d <- inline_RpnCalc_handle_stack_push_54_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t531d <- inline_RpnCalc_handle_stack_push_54_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_t531d U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 00ab6 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_t531d U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x3c), Register(0x44)], resolved: None }
23 3c 44 
# 00ab9 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_t531d U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00aba Instruction { source: "inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x68)], resolved: None }
21 40 68 
# 00abd Instruction { source: "inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x68), Constant32(0x00000040=64)], resolved: None }
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00ac3 Instruction { source: "inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x68)], resolved: None }
21 40 68 
# 00ac6 Instruction { source: "inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x68), Constant32(0x00000040=64)], resolved: None }
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00acc Instruction { source: "inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x68), Register(0x44)], resolved: None }
22 68 44 
# inline_RpnCalc_handle_stack_push_54_td757 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 00acf Instruction { source: "inline_RpnCalc_handle_stack_push_54_td757 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# 00ad2 Instruction { source: "inline_RpnCalc_handle_stack_push_54_td757 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x3c), Constant32(0x00000001=1)], resolved: None }
32 3c 01 00 00 00 
# mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_td757 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 00ad8 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_td757 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x3c), Register(0x68)], resolved: None }
23 3c 68 
# 00adb Instruction { source: "mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_td757 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_stack_push_54_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_54_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_54_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_54_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_push_54_function_end_stack_push
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 00adc Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 66 17 00 
# :RpnCalc_handle_if_else_0_25
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_25
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t8b2f <- 0n45/0x2du8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }", "Number(U8, 45)", "Number(U8, 45)"] }
# 00ae0 Instruction { source: "t8b2f <- 0n45/0x2du8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\", \"Number(U8, 45)\", \"Number(U8, 45)\"] }", opcode: LoadImm8, args: [Register(0x75), Constant8(0x2d=45)], resolved: None }
04 75 2d 
# if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }"] }
# 00ae3 Instruction { source: "if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\"] }", opcode: Cmp8, args: [Register(0x48), Register(0x75)], resolved: None }
15 48 75 
# 00ae6 Instruction { source: "if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_1_26)], resolved: None }
72 ee 0a 00 
# 00aea Instruction { source: "if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_1_27)], resolved: None }
70 71 0c 00 
# :RpnCalc_handle_if_true_1_26
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_1_26
# tace9 <- b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }", "Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# 00aee Instruction { source: "tace9 <- b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x44)], resolved: None }
21 40 44 
# t8792 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }", "Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# 00af1 Instruction { source: "t8792 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x68)], resolved: None }
21 3c 68 
# diff <- tace9 Subtract Var(t8792)
# 	SourceContext { contexts: ["Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }", "Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\"))"] }
# 00af4 Instruction { source: "diff <- tace9 Subtract Var(t8792)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: Copy32, args: [Register(0x68), Register(0x00)], resolved: None }
21 68 00 
# 00af7 Instruction { source: "diff <- tace9 Subtract Var(t8792)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 00af9 Instruction { source: "diff <- tace9 Subtract Var(t8792)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 00afb Instruction { source: "diff <- tace9 Subtract Var(t8792)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 00afd Instruction { source: "diff <- tace9 Subtract Var(t8792)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 00aff Instruction { source: "diff <- tace9 Subtract Var(t8792)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 00b05 Instruction { source: "diff <- tace9 Subtract Var(t8792)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00b06 Instruction { source: "diff <- tace9 Subtract Var(t8792)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x44), Register(0x00), Register(0x3c)], resolved: None }
30 44 00 3c 
# 00b0a Instruction { source: "diff <- tace9 Subtract Var(t8792)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t17ee <- diff U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] })", "Ident(\"diff\")", "Ident(\"diff\")"] }
# optimized away noop copy Instruction { source: "t17ee <- diff U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Ident(\\\"diff\\\")\", \"Ident(\\\"diff\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# None <= call print_dec32(t17ee,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] })"] }
# 00b0b Instruction { source: "Arg0[a]=t17ee None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x00)], resolved: None }
21 3c 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117]
# 00b0e Instruction { source: "Saving reg0x75 before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x75)], resolved: None }
09 75 
# 00b10 Instruction { source: "Saving reg0x74 before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x74)], resolved: None }
09 74 
# 00b12 Instruction { source: "Saving reg0x73 before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x73)], resolved: None }
09 73 
# 00b14 Instruction { source: "Saving reg0x72 before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x72)], resolved: None }
09 72 
# 00b16 Instruction { source: "Saving reg0x71 before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x71)], resolved: None }
09 71 
# 00b18 Instruction { source: "Saving reg0x70 before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x70)], resolved: None }
09 70 
# 00b1a Instruction { source: "Saving reg0x6e before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x6e)], resolved: None }
09 6e 
# 00b1c Instruction { source: "Saving reg0x6d before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x6d)], resolved: None }
09 6d 
# 00b1e Instruction { source: "Saving reg0x6c before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x6c)], resolved: None }
09 6c 
# 00b20 Instruction { source: "Saving reg0x6b before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x6b)], resolved: None }
09 6b 
# 00b22 Instruction { source: "Saving reg0x6a before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x6a)], resolved: None }
09 6a 
# 00b24 Instruction { source: "Saving reg0x69 before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x69)], resolved: None }
09 69 
# 00b26 Instruction { source: "Saving reg0x68 before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x68)], resolved: None }
09 68 
# 00b28 Instruction { source: "Saving reg0x65 before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x65)], resolved: None }
09 65 
# 00b2a Instruction { source: "Saving reg0x64 before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x64)], resolved: None }
09 64 
# 00b2c Instruction { source: "Saving reg0x63 before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x63)], resolved: None }
09 63 
# 00b2e Instruction { source: "Saving reg0x62 before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x62)], resolved: None }
09 62 
# 00b30 Instruction { source: "Saving reg0x61 before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x61)], resolved: None }
09 61 
# 00b32 Instruction { source: "Saving reg0x60 before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x60)], resolved: None }
09 60 
# 00b34 Instruction { source: "Saving reg0x4f before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x4f)], resolved: None }
09 4f 
# 00b36 Instruction { source: "Saving reg0x4e before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x4e)], resolved: None }
09 4e 
# 00b38 Instruction { source: "Saving reg0x4d before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x4d)], resolved: None }
09 4d 
# 00b3a Instruction { source: "Saving reg0x4c before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x4c)], resolved: None }
09 4c 
# 00b3c Instruction { source: "Saving reg0x49 before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x49)], resolved: None }
09 49 
# 00b3e Instruction { source: "Saving reg0x48 before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x48)], resolved: None }
09 48 
# 00b40 Instruction { source: "Saving reg0x47 before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x47)], resolved: None }
09 47 
# 00b42 Instruction { source: "Saving reg0x46 before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x46)], resolved: None }
09 46 
# 00b44 Instruction { source: "Saving reg0x45 before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x45)], resolved: None }
09 45 
# 00b46 Instruction { source: "Saving reg0x44 before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x44)], resolved: None }
09 44 
# 00b48 Instruction { source: "Saving reg0x43 before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x43)], resolved: None }
09 43 
# 00b4a Instruction { source: "Saving reg0x42 before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x42)], resolved: None }
09 42 
# 00b4c Instruction { source: "Saving reg0x41 before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x41)], resolved: None }
09 41 
# 00b4e Instruction { source: "Saving reg0x40 before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x40)], resolved: None }
09 40 
# 00b50 Instruction { source: "Saving reg0x3e before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x3e)], resolved: None }
09 3e 
# 00b52 Instruction { source: "Saving reg0x3d before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x3d)], resolved: None }
09 3d 
# 00b54 Instruction { source: "Saving reg0x3c before None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x3c)], resolved: None }
09 3c 
# 00b56 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 00b5c Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 66 0b 00 00 
# 00b62 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: JmpImm, args: [Label24(:print_dec32)], resolved: None }
70 a0 28 00 
# 00b66 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 00b6c Instruction { source: "Restoring reg0x3c after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x3c)], resolved: None }
0a 3c 
# 00b6e Instruction { source: "Restoring reg0x3d after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x3d)], resolved: None }
0a 3d 
# 00b70 Instruction { source: "Restoring reg0x3e after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x3e)], resolved: None }
0a 3e 
# 00b72 Instruction { source: "Restoring reg0x40 after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x40)], resolved: None }
0a 40 
# 00b74 Instruction { source: "Restoring reg0x41 after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x41)], resolved: None }
0a 41 
# 00b76 Instruction { source: "Restoring reg0x42 after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x42)], resolved: None }
0a 42 
# 00b78 Instruction { source: "Restoring reg0x43 after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x43)], resolved: None }
0a 43 
# 00b7a Instruction { source: "Restoring reg0x44 after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x44)], resolved: None }
0a 44 
# 00b7c Instruction { source: "Restoring reg0x45 after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x45)], resolved: None }
0a 45 
# 00b7e Instruction { source: "Restoring reg0x46 after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x46)], resolved: None }
0a 46 
# 00b80 Instruction { source: "Restoring reg0x47 after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x47)], resolved: None }
0a 47 
# 00b82 Instruction { source: "Restoring reg0x48 after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x48)], resolved: None }
0a 48 
# 00b84 Instruction { source: "Restoring reg0x49 after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x49)], resolved: None }
0a 49 
# 00b86 Instruction { source: "Restoring reg0x4c after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x4c)], resolved: None }
0a 4c 
# 00b88 Instruction { source: "Restoring reg0x4d after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x4d)], resolved: None }
0a 4d 
# 00b8a Instruction { source: "Restoring reg0x4e after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x4e)], resolved: None }
0a 4e 
# 00b8c Instruction { source: "Restoring reg0x4f after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x4f)], resolved: None }
0a 4f 
# 00b8e Instruction { source: "Restoring reg0x60 after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x60)], resolved: None }
0a 60 
# 00b90 Instruction { source: "Restoring reg0x61 after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x61)], resolved: None }
0a 61 
# 00b92 Instruction { source: "Restoring reg0x62 after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x62)], resolved: None }
0a 62 
# 00b94 Instruction { source: "Restoring reg0x63 after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x63)], resolved: None }
0a 63 
# 00b96 Instruction { source: "Restoring reg0x64 after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x64)], resolved: None }
0a 64 
# 00b98 Instruction { source: "Restoring reg0x65 after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x65)], resolved: None }
0a 65 
# 00b9a Instruction { source: "Restoring reg0x68 after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x68)], resolved: None }
0a 68 
# 00b9c Instruction { source: "Restoring reg0x69 after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x69)], resolved: None }
0a 69 
# 00b9e Instruction { source: "Restoring reg0x6a after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x6a)], resolved: None }
0a 6a 
# 00ba0 Instruction { source: "Restoring reg0x6b after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x6b)], resolved: None }
0a 6b 
# 00ba2 Instruction { source: "Restoring reg0x6c after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x6c)], resolved: None }
0a 6c 
# 00ba4 Instruction { source: "Restoring reg0x6d after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x6d)], resolved: None }
0a 6d 
# 00ba6 Instruction { source: "Restoring reg0x6e after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x6e)], resolved: None }
0a 6e 
# 00ba8 Instruction { source: "Restoring reg0x70 after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x70)], resolved: None }
0a 70 
# 00baa Instruction { source: "Restoring reg0x71 after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x71)], resolved: None }
0a 71 
# 00bac Instruction { source: "Restoring reg0x72 after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x72)], resolved: None }
0a 72 
# 00bae Instruction { source: "Restoring reg0x73 after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x73)], resolved: None }
0a 73 
# 00bb0 Instruction { source: "Restoring reg0x74 after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x74)], resolved: None }
0a 74 
# 00bb2 Instruction { source: "Restoring reg0x75 after None <= call print_dec32(t17ee,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x75)], resolved: None }
0a 75 
# td7b5 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 00bb4 Instruction { source: "td7b5 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x75), Constant8(0x0a=10)], resolved: None }
04 75 0a 
# inline_RpnCalc_handle_putc_20_c <- td7b5 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# 00bb7 Instruction { source: "inline_RpnCalc_handle_putc_20_c <- td7b5 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x75), Register(0x6c)], resolved: None }
0b 75 6c 
# inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x6c)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_20_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00bba Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x6c)], resolved: None }
68 6c 
# inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x6c)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })"] }
# 00bbc Instruction { source: "Arg0[ch]=inline_RpnCalc_handle_putc_20_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x00)], resolved: None }
0b 6c 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79]
# 00bbf Instruction { source: "Saving reg0x4f before None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4f)], resolved: None }
09 4f 
# 00bc1 Instruction { source: "Saving reg0x4e before None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4e)], resolved: None }
09 4e 
# 00bc3 Instruction { source: "Saving reg0x4d before None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4d)], resolved: None }
09 4d 
# 00bc5 Instruction { source: "Saving reg0x4c before None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4c)], resolved: None }
09 4c 
# 00bc7 Instruction { source: "Saving reg0x49 before None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x49)], resolved: None }
09 49 
# 00bc9 Instruction { source: "Saving reg0x48 before None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x48)], resolved: None }
09 48 
# 00bcb Instruction { source: "Saving reg0x47 before None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x47)], resolved: None }
09 47 
# 00bcd Instruction { source: "Saving reg0x46 before None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x46)], resolved: None }
09 46 
# 00bcf Instruction { source: "Saving reg0x45 before None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x45)], resolved: None }
09 45 
# 00bd1 Instruction { source: "Saving reg0x44 before None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x44)], resolved: None }
09 44 
# 00bd3 Instruction { source: "Saving reg0x43 before None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x43)], resolved: None }
09 43 
# 00bd5 Instruction { source: "Saving reg0x42 before None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x42)], resolved: None }
09 42 
# 00bd7 Instruction { source: "Saving reg0x41 before None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x41)], resolved: None }
09 41 
# 00bd9 Instruction { source: "Saving reg0x40 before None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x40)], resolved: None }
09 40 
# 00bdb Instruction { source: "Saving reg0x3e before None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3e)], resolved: None }
09 3e 
# 00bdd Instruction { source: "Saving reg0x3d before None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3d)], resolved: None }
09 3d 
# 00bdf Instruction { source: "Saving reg0x3c before None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3c)], resolved: None }
09 3c 
# 00be1 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 00be7 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c f1 0b 00 00 
# 00bed Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: JmpImm, args: [Label24(:lcd_putc)], resolved: None }
70 08 21 00 
# 00bf1 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 00bf7 Instruction { source: "Restoring reg0x3c after None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3c)], resolved: None }
0a 3c 
# 00bf9 Instruction { source: "Restoring reg0x3d after None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3d)], resolved: None }
0a 3d 
# 00bfb Instruction { source: "Restoring reg0x3e after None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3e)], resolved: None }
0a 3e 
# 00bfd Instruction { source: "Restoring reg0x40 after None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x40)], resolved: None }
0a 40 
# 00bff Instruction { source: "Restoring reg0x41 after None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x41)], resolved: None }
0a 41 
# 00c01 Instruction { source: "Restoring reg0x42 after None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x42)], resolved: None }
0a 42 
# 00c03 Instruction { source: "Restoring reg0x43 after None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x43)], resolved: None }
0a 43 
# 00c05 Instruction { source: "Restoring reg0x44 after None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x44)], resolved: None }
0a 44 
# 00c07 Instruction { source: "Restoring reg0x45 after None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x45)], resolved: None }
0a 45 
# 00c09 Instruction { source: "Restoring reg0x46 after None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x46)], resolved: None }
0a 46 
# 00c0b Instruction { source: "Restoring reg0x47 after None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x47)], resolved: None }
0a 47 
# 00c0d Instruction { source: "Restoring reg0x48 after None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x48)], resolved: None }
0a 48 
# 00c0f Instruction { source: "Restoring reg0x49 after None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x49)], resolved: None }
0a 49 
# 00c11 Instruction { source: "Restoring reg0x4c after None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4c)], resolved: None }
0a 4c 
# 00c13 Instruction { source: "Restoring reg0x4d after None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4d)], resolved: None }
0a 4d 
# 00c15 Instruction { source: "Restoring reg0x4e after None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4e)], resolved: None }
0a 4e 
# 00c17 Instruction { source: "Restoring reg0x4f after None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4f)], resolved: None }
0a 4f 
# goto inline_RpnCalc_handle_putc_20_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_20_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_20_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_20_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_20_function_end_putc
# tfe08 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 00c19 Instruction { source: "tfe08 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x70), Register(0x4c)], resolved: None }
21 70 4c 
# t17ee <- diff U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })", "Ident(\"diff\")", "Ident(\"diff\")"] }
# optimized away noop copy Instruction { source: "t17ee <- diff U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\", \"Ident(\\\"diff\\\")\", \"Ident(\\\"diff\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_s <- tfe08 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })"] }
# 00c1c Instruction { source: "inline_RpnCalc_handle_stack_push_55_s <- tfe08 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x40)], resolved: None }
21 4c 40 
# inline_RpnCalc_handle_stack_push_55_n <- t17ee U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_n <- t17ee U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_t587d <- inline_RpnCalc_handle_stack_push_55_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t587d <- inline_RpnCalc_handle_stack_push_55_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_values <- inline_RpnCalc_handle_stack_push_55_t587d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 00c1f Instruction { source: "inline_RpnCalc_handle_stack_push_55_values <- inline_RpnCalc_handle_stack_push_55_t587d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x44)], resolved: None }
21 40 44 
# inline_RpnCalc_handle_stack_push_55_tf90a <- inline_RpnCalc_handle_stack_push_55_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# 00c22 Instruction { source: "inline_RpnCalc_handle_stack_push_55_tf90a <- inline_RpnCalc_handle_stack_push_55_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x4c)], resolved: None }
21 44 4c 
# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00c25 Instruction { source: "inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x68)], resolved: None }
21 40 68 
# 00c28 Instruction { source: "inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x68), Constant32(0x00000040=64)], resolved: None }
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00c2e Instruction { source: "inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x68), Register(0x44)], resolved: None }
22 68 44 
# inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 00c31 Instruction { source: "inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm32, args: [Register(0x00), Constant32(0x00000004=4)], resolved: None }
20 00 04 00 00 00 
# 00c37 Instruction { source: "inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: Mul8_16, args: [Register(0x44), Register(0x00), Register(0x44)], resolved: None }
11 44 00 44 
# 00c3b Instruction { source: "inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm8, args: [Register(0x46), Constant8(0x00=0)], resolved: None }
04 46 00 
# 00c3e Instruction { source: "inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm8, args: [Register(0x47), Constant8(0x00=0)], resolved: None }
04 47 00 
# inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_tf90a Add Var(inline_RpnCalc_handle_stack_push_55_tf659)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 00c41 Instruction { source: "inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_tf90a Add Var(inline_RpnCalc_handle_stack_push_55_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00c42 Instruction { source: "inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_tf90a Add Var(inline_RpnCalc_handle_stack_push_55_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x44), Register(0x44)], resolved: None }
30 4c 44 44 
# 00c46 Instruction { source: "inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_tf90a Add Var(inline_RpnCalc_handle_stack_push_55_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_55_t531d <- inline_RpnCalc_handle_stack_push_55_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t531d <- inline_RpnCalc_handle_stack_push_55_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_t531d U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 00c47 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_t531d U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x3c), Register(0x44)], resolved: None }
23 3c 44 
# 00c4a Instruction { source: "mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_t531d U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00c4b Instruction { source: "inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x68)], resolved: None }
21 40 68 
# 00c4e Instruction { source: "inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x68), Constant32(0x00000040=64)], resolved: None }
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00c54 Instruction { source: "inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x68)], resolved: None }
21 40 68 
# 00c57 Instruction { source: "inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x68), Constant32(0x00000040=64)], resolved: None }
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00c5d Instruction { source: "inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x68), Register(0x44)], resolved: None }
22 68 44 
# inline_RpnCalc_handle_stack_push_55_td757 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 00c60 Instruction { source: "inline_RpnCalc_handle_stack_push_55_td757 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# 00c63 Instruction { source: "inline_RpnCalc_handle_stack_push_55_td757 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x3c), Constant32(0x00000001=1)], resolved: None }
32 3c 01 00 00 00 
# mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_td757 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 00c69 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_td757 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x3c), Register(0x68)], resolved: None }
23 3c 68 
# 00c6c Instruction { source: "mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_td757 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_stack_push_55_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_55_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_55_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_55_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_push_55_function_end_stack_push
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 00c6d Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 66 17 00 
# :RpnCalc_handle_if_else_1_27
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_1_27
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t969e <- 0n42/0x2au8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }", "Number(U8, 42)", "Number(U8, 42)"] }
# 00c71 Instruction { source: "t969e <- 0n42/0x2au8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\", \"Number(U8, 42)\", \"Number(U8, 42)\"] }", opcode: LoadImm8, args: [Register(0x75), Constant8(0x2a=42)], resolved: None }
04 75 2a 
# if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }"] }
# 00c74 Instruction { source: "if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\"] }", opcode: Cmp8, args: [Register(0x48), Register(0x75)], resolved: None }
15 48 75 
# 00c77 Instruction { source: "if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_2_28)], resolved: None }
72 7f 0c 00 
# 00c7b Instruction { source: "if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_2_29)], resolved: None }
70 34 10 00 
# :RpnCalc_handle_if_true_2_28
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_2_28
# tace9 <- b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# 00c7f Instruction { source: "tace9 <- b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x44)], resolved: None }
21 40 44 
# t8792 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# 00c82 Instruction { source: "t8792 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x68)], resolved: None }
21 3c 68 
# inline_RpnCalc_handle_mul32_32_12_a <- tace9 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] })"] }
# 00c85 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_a <- tace9 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# inline_RpnCalc_handle_mul32_32_12_b <- t8792 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] })"] }
# 00c88 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_b <- t8792 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x68), Register(0x44)], resolved: None }
21 68 44 
# inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })"] }
# 00c8b Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x40)], resolved: None }
21 3c 40 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })"] }
# 00c8e Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x44), Register(0x68)], resolved: None }
21 44 68 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9)
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 00c91 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x40), Register(0x68), Register(0x4c)], resolved: None }
11 40 68 4c 
# 00c95 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x4e), Constant8(0x00=0)], resolved: None }
04 4e 00 
# 00c98 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x4f), Constant8(0x00=0)], resolved: None }
04 4f 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00c9b Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x41), Register(0x6c)], resolved: None }
0b 41 6c 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 00c9e Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x54), Constant32(0x00000000=0)], resolved: None }
20 54 00 00 00 00 
# 00ca4 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x54)], resolved: None }
0b 6c 54 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 00ca7 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x69), Register(0x48)], resolved: None }
0b 69 48 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 00caa Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000000=0)], resolved: None }
20 50 00 00 00 00 
# 00cb0 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x48), Register(0x50)], resolved: None }
0b 48 50 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 00cb3 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x54), Register(0x50), Register(0x50)], resolved: None }
11 54 50 50 
# 00cb7 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x52), Constant8(0x00=0)], resolved: None }
04 52 00 
# 00cba Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x53), Constant8(0x00=0)], resolved: None }
04 53 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 00cbd Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x51), Register(0x64)], resolved: None }
0b 51 64 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 00cc0 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x53)], resolved: None }
0b 64 53 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 00cc3 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x50), Register(0x64)], resolved: None }
0b 50 64 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 00cc6 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x52)], resolved: None }
0b 64 52 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00cc9 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x65), Constant8(0x00=0)], resolved: None }
04 65 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 00ccc Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x65), Register(0x51)], resolved: None }
0b 65 51 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00ccf Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x65), Constant8(0x00=0)], resolved: None }
04 65 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 00cd2 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x65), Register(0x50)], resolved: None }
0b 65 50 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4)
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 00cd5 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00cd6 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x50), Register(0x4c)], resolved: None }
30 4c 50 4c 
# 00cda Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 00cdb Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x69), Register(0x48)], resolved: None }
0b 69 48 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 00cde Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000000=0)], resolved: None }
20 50 00 00 00 00 
# 00ce4 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x48), Register(0x50)], resolved: None }
0b 48 50 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 00ce7 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x40), Register(0x50), Register(0x50)], resolved: None }
11 40 50 50 
# 00ceb Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x52), Constant8(0x00=0)], resolved: None }
04 52 00 
# 00cee Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x53), Constant8(0x00=0)], resolved: None }
04 53 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00cf1 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x41), Register(0x6c)], resolved: None }
0b 41 6c 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 00cf4 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x54), Constant32(0x00000000=0)], resolved: None }
20 54 00 00 00 00 
# 00cfa Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x54)], resolved: None }
0b 6c 54 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9)
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 00cfd Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x54), Register(0x68), Register(0x40)], resolved: None }
11 54 68 40 
# 00d01 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x42), Constant8(0x00=0)], resolved: None }
04 42 00 
# 00d04 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x43), Constant8(0x00=0)], resolved: None }
04 43 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 00d07 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x68)], resolved: None }
21 50 68 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585)
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 00d0a Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00d0b Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x68), Register(0x40), Register(0x50)], resolved: None }
30 68 40 50 
# 00d0f Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 00d10 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x52), Register(0x6c)], resolved: None }
0b 52 6c 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 00d13 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x53)], resolved: None }
0b 6c 53 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 00d16 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x51), Register(0x6c)], resolved: None }
0b 51 6c 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 00d19 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x52)], resolved: None }
0b 6c 52 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 00d1c Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x50), Register(0x6c)], resolved: None }
0b 50 6c 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 00d1f Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x51)], resolved: None }
0b 6c 51 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00d22 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x65), Constant8(0x00=0)], resolved: None }
04 65 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 00d25 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x65), Register(0x50)], resolved: None }
0b 65 50 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 00d28 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x68)], resolved: None }
21 50 68 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5)
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 00d2b Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00d2c Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x68), Register(0x40)], resolved: None }
30 4c 68 40 
# 00d30 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_12_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# 00d31 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x40), Register(0x4c)], resolved: None }
21 40 4c 
# goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_a_hi <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a_hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 00d34 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_a_hi <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a_hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000000=0)], resolved: None }
20 40 00 00 00 00 
# inline_RpnCalc_handle_mul32_32_12_t5b7c <- inline_RpnCalc_handle_mul32_32_12_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 1)), var_type: None, value: Index(\"a\", Number(U8, 3)) }", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 00d3a Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t5b7c <- inline_RpnCalc_handle_mul32_32_12_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"a\\\", Number(U8, 3)) }\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x3f), Register(0x49)], resolved: None }
0b 3f 49 
# inline_RpnCalc_handle_mul32_32_12_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t5b7c U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 1)), var_type: None, value: Index(\"a\", Number(U8, 3)) }"] }
# 00d3d Instruction { source: "inline_RpnCalc_handle_mul32_32_12_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t5b7c U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"a\\\", Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0x49), Register(0x41)], resolved: None }
0b 49 41 
# inline_RpnCalc_handle_mul32_32_12_t577f <- inline_RpnCalc_handle_mul32_32_12_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 0)), var_type: None, value: Index(\"a\", Number(U8, 2)) }", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 00d40 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t577f <- inline_RpnCalc_handle_mul32_32_12_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"a\\\", Number(U8, 2)) }\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x3e), Register(0x49)], resolved: None }
0b 3e 49 
# inline_RpnCalc_handle_mul32_32_12_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t577f U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 0)), var_type: None, value: Index(\"a\", Number(U8, 2)) }"] }
# 00d43 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t577f U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"a\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x49), Register(0x40)], resolved: None }
0b 49 40 
# inline_RpnCalc_handle_mul32_32_12_b_hi <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b_hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 00d46 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_b_hi <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b_hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x68), Constant32(0x00000000=0)], resolved: None }
20 68 00 00 00 00 
# inline_RpnCalc_handle_mul32_32_12_t9829 <- inline_RpnCalc_handle_mul32_32_12_b[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 1)), var_type: None, value: Index(\"b\", Number(U8, 3)) }", "Index(\"b\", Number(U8, 3))", "Index(\"b\", Number(U8, 3))"] }
# 00d4c Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t9829 <- inline_RpnCalc_handle_mul32_32_12_b[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"b\\\", Number(U8, 3)) }\", \"Index(\\\"b\\\", Number(U8, 3))\", \"Index(\\\"b\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x47), Register(0x6d)], resolved: None }
0b 47 6d 
# inline_RpnCalc_handle_mul32_32_12_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t9829 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 1)), var_type: None, value: Index(\"b\", Number(U8, 3)) }"] }
# 00d4f Instruction { source: "inline_RpnCalc_handle_mul32_32_12_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t9829 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"b\\\", Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0x6d), Register(0x69)], resolved: None }
0b 6d 69 
# inline_RpnCalc_handle_mul32_32_12_t811a <- inline_RpnCalc_handle_mul32_32_12_b[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 0)), var_type: None, value: Index(\"b\", Number(U8, 2)) }", "Index(\"b\", Number(U8, 2))", "Index(\"b\", Number(U8, 2))"] }
# 00d52 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t811a <- inline_RpnCalc_handle_mul32_32_12_b[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"b\\\", Number(U8, 2)) }\", \"Index(\\\"b\\\", Number(U8, 2))\", \"Index(\\\"b\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x46), Register(0x6d)], resolved: None }
0b 46 6d 
# inline_RpnCalc_handle_mul32_32_12_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t811a U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 0)), var_type: None, value: Index(\"b\", Number(U8, 2)) }"] }
# 00d55 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t811a U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"b\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x6d), Register(0x68)], resolved: None }
0b 6d 68 
# inline_RpnCalc_handle_mul32_32_12_t8fbd <- inline_RpnCalc_handle_mul32_32_12_a_hi U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Ident(\"a_hi\")", "Ident(\"a_hi\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8fbd <- inline_RpnCalc_handle_mul32_32_12_a_hi U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"a_hi\\\")\", \"Ident(\\\"a_hi\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a <- inline_RpnCalc_handle_mul32_32_12_t8fbd U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a <- inline_RpnCalc_handle_mul32_32_12_t8fbd U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9)
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 00d58 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x40), Register(0x44), Register(0x50)], resolved: None }
11 40 44 50 
# 00d5c Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x52), Constant8(0x00=0)], resolved: None }
04 52 00 
# 00d5f Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x53), Constant8(0x00=0)], resolved: None }
04 53 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00d62 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x41), Register(0x6c)], resolved: None }
0b 41 6c 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 00d65 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x58), Constant32(0x00000000=0)], resolved: None }
20 58 00 00 00 00 
# 00d6b Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x58)], resolved: None }
0b 6c 58 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 00d6e Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x45), Register(0x6d)], resolved: None }
0b 45 6d 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 00d71 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x54), Constant32(0x00000000=0)], resolved: None }
20 54 00 00 00 00 
# 00d77 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6d), Register(0x54)], resolved: None }
0b 6d 54 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 00d7a Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x58), Register(0x54), Register(0x54)], resolved: None }
11 58 54 54 
# 00d7e Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x56), Constant8(0x00=0)], resolved: None }
04 56 00 
# 00d81 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x57), Constant8(0x00=0)], resolved: None }
04 57 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 00d84 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x55), Register(0x65)], resolved: None }
0b 55 65 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 00d87 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x65), Register(0x57)], resolved: None }
0b 65 57 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 00d8a Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x54), Register(0x65)], resolved: None }
0b 54 65 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 00d8d Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x65), Register(0x56)], resolved: None }
0b 65 56 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00d90 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x6e), Constant8(0x00=0)], resolved: None }
04 6e 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 00d93 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x6e), Register(0x55)], resolved: None }
0b 6e 55 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00d96 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x6e), Constant8(0x00=0)], resolved: None }
04 6e 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 00d99 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x6e), Register(0x54)], resolved: None }
0b 6e 54 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4)
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 00d9c Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00d9d Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x50), Register(0x54), Register(0x50)], resolved: None }
30 50 54 50 
# 00da1 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 00da2 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x45), Register(0x6d)], resolved: None }
0b 45 6d 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 00da5 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x54), Constant32(0x00000000=0)], resolved: None }
20 54 00 00 00 00 
# 00dab Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6d), Register(0x54)], resolved: None }
0b 6d 54 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 00dae Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x40), Register(0x54), Register(0x54)], resolved: None }
11 40 54 54 
# 00db2 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x56), Constant8(0x00=0)], resolved: None }
04 56 00 
# 00db5 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x57), Constant8(0x00=0)], resolved: None }
04 57 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00db8 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x41), Register(0x6c)], resolved: None }
0b 41 6c 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 00dbb Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x58), Constant32(0x00000000=0)], resolved: None }
20 58 00 00 00 00 
# 00dc1 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x58)], resolved: None }
0b 6c 58 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9)
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 00dc4 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x58), Register(0x44), Register(0x40)], resolved: None }
11 58 44 40 
# 00dc8 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x42), Constant8(0x00=0)], resolved: None }
04 42 00 
# 00dcb Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x43), Constant8(0x00=0)], resolved: None }
04 43 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 00dce Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x44)], resolved: None }
21 54 44 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585)
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 00dd1 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00dd2 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x44), Register(0x40), Register(0x54)], resolved: None }
30 44 40 54 
# 00dd6 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 00dd7 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x56), Register(0x6c)], resolved: None }
0b 56 6c 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 00dda Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x57)], resolved: None }
0b 6c 57 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 00ddd Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x55), Register(0x6c)], resolved: None }
0b 55 6c 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 00de0 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x56)], resolved: None }
0b 6c 56 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 00de3 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x54), Register(0x6c)], resolved: None }
0b 54 6c 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 00de6 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x55)], resolved: None }
0b 6c 55 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00de9 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x6e), Constant8(0x00=0)], resolved: None }
04 6e 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 00dec Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x6e), Register(0x54)], resolved: None }
0b 6e 54 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 00def Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x44)], resolved: None }
21 54 44 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5)
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 00df2 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00df3 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x50), Register(0x44), Register(0x40)], resolved: None }
30 50 44 40 
# 00df7 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_12_t6afc <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# 00df8 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t6afc <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x40), Register(0x54)], resolved: None }
21 40 54 
# goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_t5cca <- inline_RpnCalc_handle_mul32_32_12_b_hi U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Ident(\"b_hi\")", "Ident(\"b_hi\")"] }
# 00dfb Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t5cca <- inline_RpnCalc_handle_mul32_32_12_b_hi U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Ident(\\\"b_hi\\\")\", \"Ident(\\\"b_hi\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x40)], resolved: None }
21 68 40 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_12_t5cca U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_12_t5cca U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9)
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 00dfe Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x3c), Register(0x40), Register(0x44)], resolved: None }
11 3c 40 44 
# 00e02 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x46), Constant8(0x00=0)], resolved: None }
04 46 00 
# 00e05 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x47), Constant8(0x00=0)], resolved: None }
04 47 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00e08 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x3d), Register(0x49)], resolved: None }
0b 3d 49 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 00e0b Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000000=0)], resolved: None }
20 50 00 00 00 00 
# 00e11 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x49), Register(0x50)], resolved: None }
0b 49 50 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 00e14 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x41), Register(0x6c)], resolved: None }
0b 41 6c 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 00e17 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x68), Constant32(0x00000000=0)], resolved: None }
20 68 00 00 00 00 
# 00e1d Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x68)], resolved: None }
0b 6c 68 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 00e20 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x50), Register(0x68), Register(0x68)], resolved: None }
11 50 68 68 
# 00e24 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x6a), Constant8(0x00=0)], resolved: None }
04 6a 00 
# 00e27 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x6b), Constant8(0x00=0)], resolved: None }
04 6b 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 00e2a Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x69), Register(0x48)], resolved: None }
0b 69 48 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 00e2d Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x48), Register(0x6b)], resolved: None }
0b 48 6b 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 00e30 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x68), Register(0x48)], resolved: None }
0b 68 48 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 00e33 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x48), Register(0x6a)], resolved: None }
0b 48 6a 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00e36 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x00=0)], resolved: None }
04 64 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 00e39 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x69)], resolved: None }
0b 64 69 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00e3c Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x00=0)], resolved: None }
04 64 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 00e3f Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x68)], resolved: None }
0b 64 68 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4)
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 00e42 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00e43 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x44), Register(0x68), Register(0x44)], resolved: None }
30 44 68 44 
# 00e47 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 00e48 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x41), Register(0x6c)], resolved: None }
0b 41 6c 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 00e4b Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x68), Constant32(0x00000000=0)], resolved: None }
20 68 00 00 00 00 
# 00e51 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x68)], resolved: None }
0b 6c 68 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 00e54 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x3c), Register(0x68), Register(0x68)], resolved: None }
11 3c 68 68 
# 00e58 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x6a), Constant8(0x00=0)], resolved: None }
04 6a 00 
# 00e5b Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x6b), Constant8(0x00=0)], resolved: None }
04 6b 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00e5e Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x3d), Register(0x49)], resolved: None }
0b 3d 49 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 00e61 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000000=0)], resolved: None }
20 50 00 00 00 00 
# 00e67 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x49), Register(0x50)], resolved: None }
0b 49 50 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9)
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 00e6a Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x50), Register(0x40), Register(0x3c)], resolved: None }
11 50 40 3c 
# 00e6e Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x3e), Constant8(0x00=0)], resolved: None }
04 3e 00 
# 00e71 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x3f), Constant8(0x00=0)], resolved: None }
04 3f 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 00e74 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x40)], resolved: None }
21 68 40 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585)
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 00e77 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00e78 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x3c), Register(0x68)], resolved: None }
30 40 3c 68 
# 00e7c Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 00e7d Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x6a), Register(0x49)], resolved: None }
0b 6a 49 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 00e80 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x49), Register(0x6b)], resolved: None }
0b 49 6b 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 00e83 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x69), Register(0x49)], resolved: None }
0b 69 49 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 00e86 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x49), Register(0x6a)], resolved: None }
0b 49 6a 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 00e89 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x68), Register(0x49)], resolved: None }
0b 68 49 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 00e8c Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x49), Register(0x69)], resolved: None }
0b 49 69 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00e8f Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x00=0)], resolved: None }
04 64 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 00e92 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x68)], resolved: None }
0b 64 68 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 00e95 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x40)], resolved: None }
21 68 40 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5)
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 00e98 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00e99 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x44), Register(0x40), Register(0x3c)], resolved: None }
30 44 40 3c 
# 00e9d Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_12_tbe0a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tbe0a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a)
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))"] }
# 00e9e Instruction { source: "inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00e9f Instruction { source: "inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\"] }", opcode: AddCarry32_1, args: [Register(0x54), Register(0x3c), Register(0x3c)], resolved: None }
30 54 3c 3c 
# 00ea3 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_12_tbd6 <- inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 00ea4 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tbd6 <- inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x3d), Register(0x49)], resolved: None }
0b 3d 49 
# inline_RpnCalc_handle_mul32_32_12_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_tbd6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 00ea7 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_tbd6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x49), Register(0x3f)], resolved: None }
0b 49 3f 
# inline_RpnCalc_handle_mul32_32_12_tac23 <- inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 00eaa Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tac23 <- inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x49)], resolved: None }
0b 3c 49 
# inline_RpnCalc_handle_mul32_32_12_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_tac23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 00ead Instruction { source: "inline_RpnCalc_handle_mul32_32_12_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_tac23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x49), Register(0x3e)], resolved: None }
0b 49 3e 
# inline_RpnCalc_handle_mul32_32_12_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00eb0 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x00=0)], resolved: None }
04 6c 00 
# inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_tb36e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 00eb3 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x3d)], resolved: None }
0b 6c 3d 
# inline_RpnCalc_handle_mul32_32_12_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00eb6 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x00=0)], resolved: None }
04 6c 00 
# inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_tb36e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 00eb9 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x3c)], resolved: None }
0b 6c 3c 
# inline_RpnCalc_handle_mul32_32_12_tac13 <- inline_RpnCalc_handle_mul32_32_12_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 00ebc Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tac13 <- inline_RpnCalc_handle_mul32_32_12_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x40)], resolved: None }
21 4c 40 
# inline_RpnCalc_handle_mul32_32_12_t45f5 <- inline_RpnCalc_handle_mul32_32_12_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t45f5 <- inline_RpnCalc_handle_mul32_32_12_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5)
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 00ebf Instruction { source: "inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00ec0 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x3c), Register(0x3c)], resolved: None }
30 40 3c 3c 
# 00ec4 Instruction { source: "inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# product <- inline_RpnCalc_handle_mul32_32_12_ta65d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# 00ec5 Instruction { source: "product <- inline_RpnCalc_handle_mul32_32_12_ta65d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x40)], resolved: None }
21 3c 40 
# goto inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32
# t2754 <- product U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] })", "Ident(\"product\")", "Ident(\"product\")"] }
# 00ec8 Instruction { source: "t2754 <- product U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Ident(\\\"product\\\")\", \"Ident(\\\"product\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x3c)], resolved: None }
21 40 3c 
# None <= call print_dec32(t2754,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] })"] }
# 00ecb Instruction { source: "Arg0[a]=t2754 None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x00)], resolved: None }
21 3c 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117]
# 00ece Instruction { source: "Saving reg0x75 before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x75)], resolved: None }
09 75 
# 00ed0 Instruction { source: "Saving reg0x74 before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x74)], resolved: None }
09 74 
# 00ed2 Instruction { source: "Saving reg0x73 before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x73)], resolved: None }
09 73 
# 00ed4 Instruction { source: "Saving reg0x72 before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x72)], resolved: None }
09 72 
# 00ed6 Instruction { source: "Saving reg0x71 before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x71)], resolved: None }
09 71 
# 00ed8 Instruction { source: "Saving reg0x70 before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x70)], resolved: None }
09 70 
# 00eda Instruction { source: "Saving reg0x6e before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x6e)], resolved: None }
09 6e 
# 00edc Instruction { source: "Saving reg0x6d before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x6d)], resolved: None }
09 6d 
# 00ede Instruction { source: "Saving reg0x6c before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x6c)], resolved: None }
09 6c 
# 00ee0 Instruction { source: "Saving reg0x6b before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x6b)], resolved: None }
09 6b 
# 00ee2 Instruction { source: "Saving reg0x6a before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x6a)], resolved: None }
09 6a 
# 00ee4 Instruction { source: "Saving reg0x69 before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x69)], resolved: None }
09 69 
# 00ee6 Instruction { source: "Saving reg0x68 before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x68)], resolved: None }
09 68 
# 00ee8 Instruction { source: "Saving reg0x65 before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x65)], resolved: None }
09 65 
# 00eea Instruction { source: "Saving reg0x64 before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x64)], resolved: None }
09 64 
# 00eec Instruction { source: "Saving reg0x63 before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x63)], resolved: None }
09 63 
# 00eee Instruction { source: "Saving reg0x62 before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x62)], resolved: None }
09 62 
# 00ef0 Instruction { source: "Saving reg0x61 before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x61)], resolved: None }
09 61 
# 00ef2 Instruction { source: "Saving reg0x60 before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x60)], resolved: None }
09 60 
# 00ef4 Instruction { source: "Saving reg0x4f before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x4f)], resolved: None }
09 4f 
# 00ef6 Instruction { source: "Saving reg0x4e before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x4e)], resolved: None }
09 4e 
# 00ef8 Instruction { source: "Saving reg0x4d before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x4d)], resolved: None }
09 4d 
# 00efa Instruction { source: "Saving reg0x4c before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x4c)], resolved: None }
09 4c 
# 00efc Instruction { source: "Saving reg0x49 before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x49)], resolved: None }
09 49 
# 00efe Instruction { source: "Saving reg0x48 before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x48)], resolved: None }
09 48 
# 00f00 Instruction { source: "Saving reg0x47 before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x47)], resolved: None }
09 47 
# 00f02 Instruction { source: "Saving reg0x46 before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x46)], resolved: None }
09 46 
# 00f04 Instruction { source: "Saving reg0x45 before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x45)], resolved: None }
09 45 
# 00f06 Instruction { source: "Saving reg0x44 before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x44)], resolved: None }
09 44 
# 00f08 Instruction { source: "Saving reg0x43 before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x43)], resolved: None }
09 43 
# 00f0a Instruction { source: "Saving reg0x42 before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x42)], resolved: None }
09 42 
# 00f0c Instruction { source: "Saving reg0x41 before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x41)], resolved: None }
09 41 
# 00f0e Instruction { source: "Saving reg0x40 before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x40)], resolved: None }
09 40 
# 00f10 Instruction { source: "Saving reg0x3e before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x3e)], resolved: None }
09 3e 
# 00f12 Instruction { source: "Saving reg0x3d before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x3d)], resolved: None }
09 3d 
# 00f14 Instruction { source: "Saving reg0x3c before None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x3c)], resolved: None }
09 3c 
# 00f16 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 00f1c Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 26 0f 00 00 
# 00f22 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: JmpImm, args: [Label24(:print_dec32)], resolved: None }
70 a0 28 00 
# 00f26 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 00f2c Instruction { source: "Restoring reg0x3c after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x3c)], resolved: None }
0a 3c 
# 00f2e Instruction { source: "Restoring reg0x3d after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x3d)], resolved: None }
0a 3d 
# 00f30 Instruction { source: "Restoring reg0x3e after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x3e)], resolved: None }
0a 3e 
# 00f32 Instruction { source: "Restoring reg0x40 after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x40)], resolved: None }
0a 40 
# 00f34 Instruction { source: "Restoring reg0x41 after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x41)], resolved: None }
0a 41 
# 00f36 Instruction { source: "Restoring reg0x42 after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x42)], resolved: None }
0a 42 
# 00f38 Instruction { source: "Restoring reg0x43 after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x43)], resolved: None }
0a 43 
# 00f3a Instruction { source: "Restoring reg0x44 after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x44)], resolved: None }
0a 44 
# 00f3c Instruction { source: "Restoring reg0x45 after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x45)], resolved: None }
0a 45 
# 00f3e Instruction { source: "Restoring reg0x46 after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x46)], resolved: None }
0a 46 
# 00f40 Instruction { source: "Restoring reg0x47 after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x47)], resolved: None }
0a 47 
# 00f42 Instruction { source: "Restoring reg0x48 after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x48)], resolved: None }
0a 48 
# 00f44 Instruction { source: "Restoring reg0x49 after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x49)], resolved: None }
0a 49 
# 00f46 Instruction { source: "Restoring reg0x4c after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x4c)], resolved: None }
0a 4c 
# 00f48 Instruction { source: "Restoring reg0x4d after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x4d)], resolved: None }
0a 4d 
# 00f4a Instruction { source: "Restoring reg0x4e after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x4e)], resolved: None }
0a 4e 
# 00f4c Instruction { source: "Restoring reg0x4f after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x4f)], resolved: None }
0a 4f 
# 00f4e Instruction { source: "Restoring reg0x60 after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x60)], resolved: None }
0a 60 
# 00f50 Instruction { source: "Restoring reg0x61 after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x61)], resolved: None }
0a 61 
# 00f52 Instruction { source: "Restoring reg0x62 after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x62)], resolved: None }
0a 62 
# 00f54 Instruction { source: "Restoring reg0x63 after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x63)], resolved: None }
0a 63 
# 00f56 Instruction { source: "Restoring reg0x64 after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x64)], resolved: None }
0a 64 
# 00f58 Instruction { source: "Restoring reg0x65 after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x65)], resolved: None }
0a 65 
# 00f5a Instruction { source: "Restoring reg0x68 after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x68)], resolved: None }
0a 68 
# 00f5c Instruction { source: "Restoring reg0x69 after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x69)], resolved: None }
0a 69 
# 00f5e Instruction { source: "Restoring reg0x6a after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x6a)], resolved: None }
0a 6a 
# 00f60 Instruction { source: "Restoring reg0x6b after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x6b)], resolved: None }
0a 6b 
# 00f62 Instruction { source: "Restoring reg0x6c after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x6c)], resolved: None }
0a 6c 
# 00f64 Instruction { source: "Restoring reg0x6d after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x6d)], resolved: None }
0a 6d 
# 00f66 Instruction { source: "Restoring reg0x6e after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x6e)], resolved: None }
0a 6e 
# 00f68 Instruction { source: "Restoring reg0x70 after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x70)], resolved: None }
0a 70 
# 00f6a Instruction { source: "Restoring reg0x71 after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x71)], resolved: None }
0a 71 
# 00f6c Instruction { source: "Restoring reg0x72 after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x72)], resolved: None }
0a 72 
# 00f6e Instruction { source: "Restoring reg0x73 after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x73)], resolved: None }
0a 73 
# 00f70 Instruction { source: "Restoring reg0x74 after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x74)], resolved: None }
0a 74 
# 00f72 Instruction { source: "Restoring reg0x75 after None <= call print_dec32(t2754,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x75)], resolved: None }
0a 75 
# td7b5 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 00f74 Instruction { source: "td7b5 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x75), Constant8(0x0a=10)], resolved: None }
04 75 0a 
# inline_RpnCalc_handle_putc_21_c <- td7b5 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# 00f77 Instruction { source: "inline_RpnCalc_handle_putc_21_c <- td7b5 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x75), Register(0x49)], resolved: None }
0b 75 49 
# inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_21_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00f7a Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x49)], resolved: None }
68 49 
# inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })"] }
# 00f7c Instruction { source: "Arg0[ch]=inline_RpnCalc_handle_putc_21_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x49), Register(0x00)], resolved: None }
0b 49 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79]
# 00f7f Instruction { source: "Saving reg0x4f before None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4f)], resolved: None }
09 4f 
# 00f81 Instruction { source: "Saving reg0x4e before None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4e)], resolved: None }
09 4e 
# 00f83 Instruction { source: "Saving reg0x4d before None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4d)], resolved: None }
09 4d 
# 00f85 Instruction { source: "Saving reg0x4c before None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4c)], resolved: None }
09 4c 
# 00f87 Instruction { source: "Saving reg0x49 before None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x49)], resolved: None }
09 49 
# 00f89 Instruction { source: "Saving reg0x48 before None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x48)], resolved: None }
09 48 
# 00f8b Instruction { source: "Saving reg0x47 before None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x47)], resolved: None }
09 47 
# 00f8d Instruction { source: "Saving reg0x46 before None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x46)], resolved: None }
09 46 
# 00f8f Instruction { source: "Saving reg0x45 before None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x45)], resolved: None }
09 45 
# 00f91 Instruction { source: "Saving reg0x44 before None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x44)], resolved: None }
09 44 
# 00f93 Instruction { source: "Saving reg0x43 before None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x43)], resolved: None }
09 43 
# 00f95 Instruction { source: "Saving reg0x42 before None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x42)], resolved: None }
09 42 
# 00f97 Instruction { source: "Saving reg0x41 before None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x41)], resolved: None }
09 41 
# 00f99 Instruction { source: "Saving reg0x40 before None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x40)], resolved: None }
09 40 
# 00f9b Instruction { source: "Saving reg0x3e before None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3e)], resolved: None }
09 3e 
# 00f9d Instruction { source: "Saving reg0x3d before None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3d)], resolved: None }
09 3d 
# 00f9f Instruction { source: "Saving reg0x3c before None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3c)], resolved: None }
09 3c 
# 00fa1 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 00fa7 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c b1 0f 00 00 
# 00fad Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: JmpImm, args: [Label24(:lcd_putc)], resolved: None }
70 08 21 00 
# 00fb1 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 00fb7 Instruction { source: "Restoring reg0x3c after None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3c)], resolved: None }
0a 3c 
# 00fb9 Instruction { source: "Restoring reg0x3d after None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3d)], resolved: None }
0a 3d 
# 00fbb Instruction { source: "Restoring reg0x3e after None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3e)], resolved: None }
0a 3e 
# 00fbd Instruction { source: "Restoring reg0x40 after None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x40)], resolved: None }
0a 40 
# 00fbf Instruction { source: "Restoring reg0x41 after None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x41)], resolved: None }
0a 41 
# 00fc1 Instruction { source: "Restoring reg0x42 after None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x42)], resolved: None }
0a 42 
# 00fc3 Instruction { source: "Restoring reg0x43 after None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x43)], resolved: None }
0a 43 
# 00fc5 Instruction { source: "Restoring reg0x44 after None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x44)], resolved: None }
0a 44 
# 00fc7 Instruction { source: "Restoring reg0x45 after None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x45)], resolved: None }
0a 45 
# 00fc9 Instruction { source: "Restoring reg0x46 after None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x46)], resolved: None }
0a 46 
# 00fcb Instruction { source: "Restoring reg0x47 after None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x47)], resolved: None }
0a 47 
# 00fcd Instruction { source: "Restoring reg0x48 after None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x48)], resolved: None }
0a 48 
# 00fcf Instruction { source: "Restoring reg0x49 after None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x49)], resolved: None }
0a 49 
# 00fd1 Instruction { source: "Restoring reg0x4c after None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4c)], resolved: None }
0a 4c 
# 00fd3 Instruction { source: "Restoring reg0x4d after None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4d)], resolved: None }
0a 4d 
# 00fd5 Instruction { source: "Restoring reg0x4e after None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4e)], resolved: None }
0a 4e 
# 00fd7 Instruction { source: "Restoring reg0x4f after None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4f)], resolved: None }
0a 4f 
# goto inline_RpnCalc_handle_putc_21_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_21_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_21_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_21_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_21_function_end_putc
# tfe08 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 00fd9 Instruction { source: "tfe08 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x70), Register(0x4c)], resolved: None }
21 70 4c 
# t2754 <- product U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })", "Ident(\"product\")", "Ident(\"product\")"] }
# 00fdc Instruction { source: "t2754 <- product U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\", \"Ident(\\\"product\\\")\", \"Ident(\\\"product\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x3c)], resolved: None }
21 40 3c 
# inline_RpnCalc_handle_stack_push_56_s <- tfe08 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })"] }
# 00fdf Instruction { source: "inline_RpnCalc_handle_stack_push_56_s <- tfe08 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x40)], resolved: None }
21 4c 40 
# inline_RpnCalc_handle_stack_push_56_n <- t2754 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_n <- t2754 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_t587d <- inline_RpnCalc_handle_stack_push_56_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t587d <- inline_RpnCalc_handle_stack_push_56_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_values <- inline_RpnCalc_handle_stack_push_56_t587d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 00fe2 Instruction { source: "inline_RpnCalc_handle_stack_push_56_values <- inline_RpnCalc_handle_stack_push_56_t587d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x44)], resolved: None }
21 40 44 
# inline_RpnCalc_handle_stack_push_56_tf90a <- inline_RpnCalc_handle_stack_push_56_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# 00fe5 Instruction { source: "inline_RpnCalc_handle_stack_push_56_tf90a <- inline_RpnCalc_handle_stack_push_56_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x4c)], resolved: None }
21 44 4c 
# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00fe8 Instruction { source: "inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x68)], resolved: None }
21 40 68 
# 00feb Instruction { source: "inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x68), Constant32(0x00000040=64)], resolved: None }
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00ff1 Instruction { source: "inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x68), Register(0x44)], resolved: None }
22 68 44 
# inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 00ff4 Instruction { source: "inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm32, args: [Register(0x00), Constant32(0x00000004=4)], resolved: None }
20 00 04 00 00 00 
# 00ffa Instruction { source: "inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: Mul8_16, args: [Register(0x44), Register(0x00), Register(0x44)], resolved: None }
11 44 00 44 
# 00ffe Instruction { source: "inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm8, args: [Register(0x46), Constant8(0x00=0)], resolved: None }
04 46 00 
# 01001 Instruction { source: "inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm8, args: [Register(0x47), Constant8(0x00=0)], resolved: None }
04 47 00 
# inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_tf90a Add Var(inline_RpnCalc_handle_stack_push_56_tf659)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 01004 Instruction { source: "inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_tf90a Add Var(inline_RpnCalc_handle_stack_push_56_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01005 Instruction { source: "inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_tf90a Add Var(inline_RpnCalc_handle_stack_push_56_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x44), Register(0x44)], resolved: None }
30 4c 44 44 
# 01009 Instruction { source: "inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_tf90a Add Var(inline_RpnCalc_handle_stack_push_56_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_56_t531d <- inline_RpnCalc_handle_stack_push_56_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t531d <- inline_RpnCalc_handle_stack_push_56_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_t531d U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 0100a Instruction { source: "mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_t531d U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x3c), Register(0x44)], resolved: None }
23 3c 44 
# 0100d Instruction { source: "mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_t531d U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 0100e Instruction { source: "inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x68)], resolved: None }
21 40 68 
# 01011 Instruction { source: "inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x68), Constant32(0x00000040=64)], resolved: None }
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 01017 Instruction { source: "inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x68)], resolved: None }
21 40 68 
# 0101a Instruction { source: "inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x68), Constant32(0x00000040=64)], resolved: None }
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 01020 Instruction { source: "inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x68), Register(0x44)], resolved: None }
22 68 44 
# inline_RpnCalc_handle_stack_push_56_td757 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 01023 Instruction { source: "inline_RpnCalc_handle_stack_push_56_td757 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# 01026 Instruction { source: "inline_RpnCalc_handle_stack_push_56_td757 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x3c), Constant32(0x00000001=1)], resolved: None }
32 3c 01 00 00 00 
# mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_td757 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 0102c Instruction { source: "mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_td757 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x3c), Register(0x68)], resolved: None }
23 3c 68 
# 0102f Instruction { source: "mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_td757 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_stack_push_56_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_56_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_56_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_56_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_push_56_function_end_stack_push
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 01030 Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 66 17 00 
# :RpnCalc_handle_if_else_2_29
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_2_29
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# te668 <- 0n47/0x2fu8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }", "Number(U8, 47)", "Number(U8, 47)"] }
# 01034 Instruction { source: "te668 <- 0n47/0x2fu8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\", \"Number(U8, 47)\", \"Number(U8, 47)\"] }", opcode: LoadImm8, args: [Register(0x75), Constant8(0x2f=47)], resolved: None }
04 75 2f 
# if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }"] }
# 01037 Instruction { source: "if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\"] }", opcode: Cmp8, args: [Register(0x48), Register(0x75)], resolved: None }
15 48 75 
# 0103a Instruction { source: "if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_3_30)], resolved: None }
72 42 10 00 
# 0103e Instruction { source: "if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_3_31)], resolved: None }
70 1f 12 00 
# :RpnCalc_handle_if_true_3_30
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_3_30
# tace9 <- b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# 01042 Instruction { source: "tace9 <- b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x44)], resolved: None }
21 40 44 
# t8792 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# 01045 Instruction { source: "t8792 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x68)], resolved: None }
21 3c 68 
# Some(quotient) <= call div32(tace9,t8792,)
# 	SourceContext { contexts: ["Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] })"] }
# 01048 Instruction { source: "Arg0[a]=tace9 Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x44), Register(0x00)], resolved: None }
21 44 00 
# 0104b Instruction { source: "Arg1[b]=t8792 Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x68), Register(0x04)], resolved: None }
21 68 04 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228}
# Registers to save: [96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117]
# 0104e Instruction { source: "Saving reg0x75 before Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x75)], resolved: None }
09 75 
# 01050 Instruction { source: "Saving reg0x74 before Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x74)], resolved: None }
09 74 
# 01052 Instruction { source: "Saving reg0x73 before Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x73)], resolved: None }
09 73 
# 01054 Instruction { source: "Saving reg0x72 before Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x72)], resolved: None }
09 72 
# 01056 Instruction { source: "Saving reg0x71 before Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x71)], resolved: None }
09 71 
# 01058 Instruction { source: "Saving reg0x70 before Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x70)], resolved: None }
09 70 
# 0105a Instruction { source: "Saving reg0x6e before Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x6e)], resolved: None }
09 6e 
# 0105c Instruction { source: "Saving reg0x6d before Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x6d)], resolved: None }
09 6d 
# 0105e Instruction { source: "Saving reg0x6c before Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x6c)], resolved: None }
09 6c 
# 01060 Instruction { source: "Saving reg0x6b before Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x6b)], resolved: None }
09 6b 
# 01062 Instruction { source: "Saving reg0x6a before Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x6a)], resolved: None }
09 6a 
# 01064 Instruction { source: "Saving reg0x69 before Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x69)], resolved: None }
09 69 
# 01066 Instruction { source: "Saving reg0x68 before Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x68)], resolved: None }
09 68 
# 01068 Instruction { source: "Saving reg0x65 before Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x65)], resolved: None }
09 65 
# 0106a Instruction { source: "Saving reg0x64 before Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x64)], resolved: None }
09 64 
# 0106c Instruction { source: "Saving reg0x63 before Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x63)], resolved: None }
09 63 
# 0106e Instruction { source: "Saving reg0x62 before Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x62)], resolved: None }
09 62 
# 01070 Instruction { source: "Saving reg0x61 before Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x61)], resolved: None }
09 61 
# 01072 Instruction { source: "Saving reg0x60 before Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x60)], resolved: None }
09 60 
# 01074 Instruction { source: "PseudoCall(Label24(:div32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 0107a Instruction { source: "PseudoCall(Label24(:div32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 84 10 00 00 
# 01080 Instruction { source: "PseudoCall(Label24(:div32))", opcode: JmpImm, args: [Label24(:div32)], resolved: None }
70 69 19 00 
# 01084 Instruction { source: "PseudoCall(Label24(:div32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 0108a Instruction { source: "Restoring reg0x60 after Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x60)], resolved: None }
0a 60 
# 0108c Instruction { source: "Restoring reg0x61 after Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x61)], resolved: None }
0a 61 
# 0108e Instruction { source: "Restoring reg0x62 after Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x62)], resolved: None }
0a 62 
# 01090 Instruction { source: "Restoring reg0x63 after Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x63)], resolved: None }
0a 63 
# 01092 Instruction { source: "Restoring reg0x64 after Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x64)], resolved: None }
0a 64 
# 01094 Instruction { source: "Restoring reg0x65 after Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x65)], resolved: None }
0a 65 
# 01096 Instruction { source: "Restoring reg0x68 after Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x68)], resolved: None }
0a 68 
# 01098 Instruction { source: "Restoring reg0x69 after Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x69)], resolved: None }
0a 69 
# 0109a Instruction { source: "Restoring reg0x6a after Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x6a)], resolved: None }
0a 6a 
# 0109c Instruction { source: "Restoring reg0x6b after Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x6b)], resolved: None }
0a 6b 
# 0109e Instruction { source: "Restoring reg0x6c after Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x6c)], resolved: None }
0a 6c 
# 010a0 Instruction { source: "Restoring reg0x6d after Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x6d)], resolved: None }
0a 6d 
# 010a2 Instruction { source: "Restoring reg0x6e after Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x6e)], resolved: None }
0a 6e 
# 010a4 Instruction { source: "Restoring reg0x70 after Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x70)], resolved: None }
0a 70 
# 010a6 Instruction { source: "Restoring reg0x71 after Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x71)], resolved: None }
0a 71 
# 010a8 Instruction { source: "Restoring reg0x72 after Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x72)], resolved: None }
0a 72 
# 010aa Instruction { source: "Restoring reg0x73 after Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x73)], resolved: None }
0a 73 
# 010ac Instruction { source: "Restoring reg0x74 after Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x74)], resolved: None }
0a 74 
# 010ae Instruction { source: "Restoring reg0x75 after Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x75)], resolved: None }
0a 75 
# 010b0 Instruction { source: "Some(quotient) <= call div32(tace9,t8792,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x00), Register(0x40)], resolved: None }
21 00 40 
# t1ba9 <- quotient U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] })", "Ident(\"quotient\")", "Ident(\"quotient\")"] }
# 010b3 Instruction { source: "t1ba9 <- quotient U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Ident(\\\"quotient\\\")\", \"Ident(\\\"quotient\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x3c)], resolved: None }
21 40 3c 
# None <= call print_dec32(t1ba9,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] })"] }
# 010b6 Instruction { source: "Arg0[a]=t1ba9 None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x00)], resolved: None }
21 3c 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117]
# 010b9 Instruction { source: "Saving reg0x75 before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x75)], resolved: None }
09 75 
# 010bb Instruction { source: "Saving reg0x74 before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x74)], resolved: None }
09 74 
# 010bd Instruction { source: "Saving reg0x73 before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x73)], resolved: None }
09 73 
# 010bf Instruction { source: "Saving reg0x72 before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x72)], resolved: None }
09 72 
# 010c1 Instruction { source: "Saving reg0x71 before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x71)], resolved: None }
09 71 
# 010c3 Instruction { source: "Saving reg0x70 before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x70)], resolved: None }
09 70 
# 010c5 Instruction { source: "Saving reg0x6e before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x6e)], resolved: None }
09 6e 
# 010c7 Instruction { source: "Saving reg0x6d before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x6d)], resolved: None }
09 6d 
# 010c9 Instruction { source: "Saving reg0x6c before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x6c)], resolved: None }
09 6c 
# 010cb Instruction { source: "Saving reg0x6b before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x6b)], resolved: None }
09 6b 
# 010cd Instruction { source: "Saving reg0x6a before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x6a)], resolved: None }
09 6a 
# 010cf Instruction { source: "Saving reg0x69 before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x69)], resolved: None }
09 69 
# 010d1 Instruction { source: "Saving reg0x68 before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x68)], resolved: None }
09 68 
# 010d3 Instruction { source: "Saving reg0x65 before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x65)], resolved: None }
09 65 
# 010d5 Instruction { source: "Saving reg0x64 before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x64)], resolved: None }
09 64 
# 010d7 Instruction { source: "Saving reg0x63 before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x63)], resolved: None }
09 63 
# 010d9 Instruction { source: "Saving reg0x62 before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x62)], resolved: None }
09 62 
# 010db Instruction { source: "Saving reg0x61 before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x61)], resolved: None }
09 61 
# 010dd Instruction { source: "Saving reg0x60 before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x60)], resolved: None }
09 60 
# 010df Instruction { source: "Saving reg0x4f before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x4f)], resolved: None }
09 4f 
# 010e1 Instruction { source: "Saving reg0x4e before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x4e)], resolved: None }
09 4e 
# 010e3 Instruction { source: "Saving reg0x4d before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x4d)], resolved: None }
09 4d 
# 010e5 Instruction { source: "Saving reg0x4c before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x4c)], resolved: None }
09 4c 
# 010e7 Instruction { source: "Saving reg0x49 before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x49)], resolved: None }
09 49 
# 010e9 Instruction { source: "Saving reg0x48 before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x48)], resolved: None }
09 48 
# 010eb Instruction { source: "Saving reg0x47 before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x47)], resolved: None }
09 47 
# 010ed Instruction { source: "Saving reg0x46 before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x46)], resolved: None }
09 46 
# 010ef Instruction { source: "Saving reg0x45 before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x45)], resolved: None }
09 45 
# 010f1 Instruction { source: "Saving reg0x44 before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x44)], resolved: None }
09 44 
# 010f3 Instruction { source: "Saving reg0x43 before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x43)], resolved: None }
09 43 
# 010f5 Instruction { source: "Saving reg0x42 before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x42)], resolved: None }
09 42 
# 010f7 Instruction { source: "Saving reg0x41 before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x41)], resolved: None }
09 41 
# 010f9 Instruction { source: "Saving reg0x40 before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x40)], resolved: None }
09 40 
# 010fb Instruction { source: "Saving reg0x3e before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x3e)], resolved: None }
09 3e 
# 010fd Instruction { source: "Saving reg0x3d before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x3d)], resolved: None }
09 3d 
# 010ff Instruction { source: "Saving reg0x3c before None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x3c)], resolved: None }
09 3c 
# 01101 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 01107 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 11 11 00 00 
# 0110d Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: JmpImm, args: [Label24(:print_dec32)], resolved: None }
70 a0 28 00 
# 01111 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 01117 Instruction { source: "Restoring reg0x3c after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x3c)], resolved: None }
0a 3c 
# 01119 Instruction { source: "Restoring reg0x3d after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x3d)], resolved: None }
0a 3d 
# 0111b Instruction { source: "Restoring reg0x3e after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x3e)], resolved: None }
0a 3e 
# 0111d Instruction { source: "Restoring reg0x40 after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x40)], resolved: None }
0a 40 
# 0111f Instruction { source: "Restoring reg0x41 after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x41)], resolved: None }
0a 41 
# 01121 Instruction { source: "Restoring reg0x42 after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x42)], resolved: None }
0a 42 
# 01123 Instruction { source: "Restoring reg0x43 after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x43)], resolved: None }
0a 43 
# 01125 Instruction { source: "Restoring reg0x44 after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x44)], resolved: None }
0a 44 
# 01127 Instruction { source: "Restoring reg0x45 after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x45)], resolved: None }
0a 45 
# 01129 Instruction { source: "Restoring reg0x46 after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x46)], resolved: None }
0a 46 
# 0112b Instruction { source: "Restoring reg0x47 after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x47)], resolved: None }
0a 47 
# 0112d Instruction { source: "Restoring reg0x48 after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x48)], resolved: None }
0a 48 
# 0112f Instruction { source: "Restoring reg0x49 after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x49)], resolved: None }
0a 49 
# 01131 Instruction { source: "Restoring reg0x4c after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x4c)], resolved: None }
0a 4c 
# 01133 Instruction { source: "Restoring reg0x4d after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x4d)], resolved: None }
0a 4d 
# 01135 Instruction { source: "Restoring reg0x4e after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x4e)], resolved: None }
0a 4e 
# 01137 Instruction { source: "Restoring reg0x4f after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x4f)], resolved: None }
0a 4f 
# 01139 Instruction { source: "Restoring reg0x60 after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x60)], resolved: None }
0a 60 
# 0113b Instruction { source: "Restoring reg0x61 after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x61)], resolved: None }
0a 61 
# 0113d Instruction { source: "Restoring reg0x62 after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x62)], resolved: None }
0a 62 
# 0113f Instruction { source: "Restoring reg0x63 after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x63)], resolved: None }
0a 63 
# 01141 Instruction { source: "Restoring reg0x64 after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x64)], resolved: None }
0a 64 
# 01143 Instruction { source: "Restoring reg0x65 after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x65)], resolved: None }
0a 65 
# 01145 Instruction { source: "Restoring reg0x68 after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x68)], resolved: None }
0a 68 
# 01147 Instruction { source: "Restoring reg0x69 after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x69)], resolved: None }
0a 69 
# 01149 Instruction { source: "Restoring reg0x6a after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x6a)], resolved: None }
0a 6a 
# 0114b Instruction { source: "Restoring reg0x6b after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x6b)], resolved: None }
0a 6b 
# 0114d Instruction { source: "Restoring reg0x6c after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x6c)], resolved: None }
0a 6c 
# 0114f Instruction { source: "Restoring reg0x6d after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x6d)], resolved: None }
0a 6d 
# 01151 Instruction { source: "Restoring reg0x6e after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x6e)], resolved: None }
0a 6e 
# 01153 Instruction { source: "Restoring reg0x70 after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x70)], resolved: None }
0a 70 
# 01155 Instruction { source: "Restoring reg0x71 after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x71)], resolved: None }
0a 71 
# 01157 Instruction { source: "Restoring reg0x72 after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x72)], resolved: None }
0a 72 
# 01159 Instruction { source: "Restoring reg0x73 after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x73)], resolved: None }
0a 73 
# 0115b Instruction { source: "Restoring reg0x74 after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x74)], resolved: None }
0a 74 
# 0115d Instruction { source: "Restoring reg0x75 after None <= call print_dec32(t1ba9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x75)], resolved: None }
0a 75 
# td7b5 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 0115f Instruction { source: "td7b5 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x75), Constant8(0x0a=10)], resolved: None }
04 75 0a 
# inline_RpnCalc_handle_putc_22_c <- td7b5 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# 01162 Instruction { source: "inline_RpnCalc_handle_putc_22_c <- td7b5 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x75), Register(0x49)], resolved: None }
0b 75 49 
# inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_22_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 01165 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x49)], resolved: None }
68 49 
# inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })"] }
# 01167 Instruction { source: "Arg0[ch]=inline_RpnCalc_handle_putc_22_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x49), Register(0x00)], resolved: None }
0b 49 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79]
# 0116a Instruction { source: "Saving reg0x4f before None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4f)], resolved: None }
09 4f 
# 0116c Instruction { source: "Saving reg0x4e before None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4e)], resolved: None }
09 4e 
# 0116e Instruction { source: "Saving reg0x4d before None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4d)], resolved: None }
09 4d 
# 01170 Instruction { source: "Saving reg0x4c before None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4c)], resolved: None }
09 4c 
# 01172 Instruction { source: "Saving reg0x49 before None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x49)], resolved: None }
09 49 
# 01174 Instruction { source: "Saving reg0x48 before None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x48)], resolved: None }
09 48 
# 01176 Instruction { source: "Saving reg0x47 before None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x47)], resolved: None }
09 47 
# 01178 Instruction { source: "Saving reg0x46 before None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x46)], resolved: None }
09 46 
# 0117a Instruction { source: "Saving reg0x45 before None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x45)], resolved: None }
09 45 
# 0117c Instruction { source: "Saving reg0x44 before None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x44)], resolved: None }
09 44 
# 0117e Instruction { source: "Saving reg0x43 before None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x43)], resolved: None }
09 43 
# 01180 Instruction { source: "Saving reg0x42 before None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x42)], resolved: None }
09 42 
# 01182 Instruction { source: "Saving reg0x41 before None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x41)], resolved: None }
09 41 
# 01184 Instruction { source: "Saving reg0x40 before None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x40)], resolved: None }
09 40 
# 01186 Instruction { source: "Saving reg0x3e before None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3e)], resolved: None }
09 3e 
# 01188 Instruction { source: "Saving reg0x3d before None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3d)], resolved: None }
09 3d 
# 0118a Instruction { source: "Saving reg0x3c before None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3c)], resolved: None }
09 3c 
# 0118c Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 01192 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 9c 11 00 00 
# 01198 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: JmpImm, args: [Label24(:lcd_putc)], resolved: None }
70 08 21 00 
# 0119c Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 011a2 Instruction { source: "Restoring reg0x3c after None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3c)], resolved: None }
0a 3c 
# 011a4 Instruction { source: "Restoring reg0x3d after None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3d)], resolved: None }
0a 3d 
# 011a6 Instruction { source: "Restoring reg0x3e after None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3e)], resolved: None }
0a 3e 
# 011a8 Instruction { source: "Restoring reg0x40 after None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x40)], resolved: None }
0a 40 
# 011aa Instruction { source: "Restoring reg0x41 after None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x41)], resolved: None }
0a 41 
# 011ac Instruction { source: "Restoring reg0x42 after None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x42)], resolved: None }
0a 42 
# 011ae Instruction { source: "Restoring reg0x43 after None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x43)], resolved: None }
0a 43 
# 011b0 Instruction { source: "Restoring reg0x44 after None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x44)], resolved: None }
0a 44 
# 011b2 Instruction { source: "Restoring reg0x45 after None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x45)], resolved: None }
0a 45 
# 011b4 Instruction { source: "Restoring reg0x46 after None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x46)], resolved: None }
0a 46 
# 011b6 Instruction { source: "Restoring reg0x47 after None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x47)], resolved: None }
0a 47 
# 011b8 Instruction { source: "Restoring reg0x48 after None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x48)], resolved: None }
0a 48 
# 011ba Instruction { source: "Restoring reg0x49 after None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x49)], resolved: None }
0a 49 
# 011bc Instruction { source: "Restoring reg0x4c after None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4c)], resolved: None }
0a 4c 
# 011be Instruction { source: "Restoring reg0x4d after None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4d)], resolved: None }
0a 4d 
# 011c0 Instruction { source: "Restoring reg0x4e after None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4e)], resolved: None }
0a 4e 
# 011c2 Instruction { source: "Restoring reg0x4f after None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4f)], resolved: None }
0a 4f 
# goto inline_RpnCalc_handle_putc_22_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_22_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_22_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_22_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_22_function_end_putc
# tfe08 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 011c4 Instruction { source: "tfe08 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x70), Register(0x4c)], resolved: None }
21 70 4c 
# t1ba9 <- quotient U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })", "Ident(\"quotient\")", "Ident(\"quotient\")"] }
# 011c7 Instruction { source: "t1ba9 <- quotient U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\", \"Ident(\\\"quotient\\\")\", \"Ident(\\\"quotient\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x3c)], resolved: None }
21 40 3c 
# inline_RpnCalc_handle_stack_push_57_s <- tfe08 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })"] }
# 011ca Instruction { source: "inline_RpnCalc_handle_stack_push_57_s <- tfe08 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x40)], resolved: None }
21 4c 40 
# inline_RpnCalc_handle_stack_push_57_n <- t1ba9 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_n <- t1ba9 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_t587d <- inline_RpnCalc_handle_stack_push_57_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t587d <- inline_RpnCalc_handle_stack_push_57_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_values <- inline_RpnCalc_handle_stack_push_57_t587d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 011cd Instruction { source: "inline_RpnCalc_handle_stack_push_57_values <- inline_RpnCalc_handle_stack_push_57_t587d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x44)], resolved: None }
21 40 44 
# inline_RpnCalc_handle_stack_push_57_tf90a <- inline_RpnCalc_handle_stack_push_57_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# 011d0 Instruction { source: "inline_RpnCalc_handle_stack_push_57_tf90a <- inline_RpnCalc_handle_stack_push_57_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x4c)], resolved: None }
21 44 4c 
# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 011d3 Instruction { source: "inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x68)], resolved: None }
21 40 68 
# 011d6 Instruction { source: "inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x68), Constant32(0x00000040=64)], resolved: None }
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 011dc Instruction { source: "inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x68), Register(0x44)], resolved: None }
22 68 44 
# inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 011df Instruction { source: "inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm32, args: [Register(0x00), Constant32(0x00000004=4)], resolved: None }
20 00 04 00 00 00 
# 011e5 Instruction { source: "inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: Mul8_16, args: [Register(0x44), Register(0x00), Register(0x44)], resolved: None }
11 44 00 44 
# 011e9 Instruction { source: "inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm8, args: [Register(0x46), Constant8(0x00=0)], resolved: None }
04 46 00 
# 011ec Instruction { source: "inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm8, args: [Register(0x47), Constant8(0x00=0)], resolved: None }
04 47 00 
# inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_tf90a Add Var(inline_RpnCalc_handle_stack_push_57_tf659)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 011ef Instruction { source: "inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_tf90a Add Var(inline_RpnCalc_handle_stack_push_57_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 011f0 Instruction { source: "inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_tf90a Add Var(inline_RpnCalc_handle_stack_push_57_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x44), Register(0x44)], resolved: None }
30 4c 44 44 
# 011f4 Instruction { source: "inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_tf90a Add Var(inline_RpnCalc_handle_stack_push_57_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_57_t531d <- inline_RpnCalc_handle_stack_push_57_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t531d <- inline_RpnCalc_handle_stack_push_57_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_t531d U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 011f5 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_t531d U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x3c), Register(0x44)], resolved: None }
23 3c 44 
# 011f8 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_t531d U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 011f9 Instruction { source: "inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x68)], resolved: None }
21 40 68 
# 011fc Instruction { source: "inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x68), Constant32(0x00000040=64)], resolved: None }
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 01202 Instruction { source: "inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x68)], resolved: None }
21 40 68 
# 01205 Instruction { source: "inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x68), Constant32(0x00000040=64)], resolved: None }
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 0120b Instruction { source: "inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x68), Register(0x44)], resolved: None }
22 68 44 
# inline_RpnCalc_handle_stack_push_57_td757 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 0120e Instruction { source: "inline_RpnCalc_handle_stack_push_57_td757 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# 01211 Instruction { source: "inline_RpnCalc_handle_stack_push_57_td757 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x3c), Constant32(0x00000001=1)], resolved: None }
32 3c 01 00 00 00 
# mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_td757 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 01217 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_td757 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x3c), Register(0x68)], resolved: None }
23 3c 68 
# 0121a Instruction { source: "mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_td757 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_stack_push_57_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_57_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_57_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_57_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_push_57_function_end_stack_push
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 0121b Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 66 17 00 
# :RpnCalc_handle_if_else_3_31
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_3_31
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t39b5 <- 0n115/0x73u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }", "Number(U8, 115)", "Number(U8, 115)"] }
# 0121f Instruction { source: "t39b5 <- 0n115/0x73u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\", \"Number(U8, 115)\", \"Number(U8, 115)\"] }", opcode: LoadImm8, args: [Register(0x75), Constant8(0x73=115)], resolved: None }
04 75 73 
# if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }"] }
# 01222 Instruction { source: "if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: Cmp8, args: [Register(0x48), Register(0x75)], resolved: None }
15 48 75 
# 01225 Instruction { source: "if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_4_32)], resolved: None }
72 2d 12 00 
# 01229 Instruction { source: "if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_4_33)], resolved: None }
70 e5 12 00 
# :RpnCalc_handle_if_true_4_32
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_4_32
# tfe08 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 0122d Instruction { source: "tfe08 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x70), Register(0x4c)], resolved: None }
21 70 4c 
# t8792 <- a U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# 01230 Instruction { source: "t8792 <- a U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x68)], resolved: None }
21 3c 68 
# inline_RpnCalc_handle_stack_push_58_s <- tfe08 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })"] }
# 01233 Instruction { source: "inline_RpnCalc_handle_stack_push_58_s <- tfe08 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x44)], resolved: None }
21 4c 44 
# inline_RpnCalc_handle_stack_push_58_n <- t8792 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })"] }
# 01236 Instruction { source: "inline_RpnCalc_handle_stack_push_58_n <- t8792 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x68), Register(0x3c)], resolved: None }
21 68 3c 
# inline_RpnCalc_handle_stack_push_58_t587d <- inline_RpnCalc_handle_stack_push_58_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t587d <- inline_RpnCalc_handle_stack_push_58_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_values <- inline_RpnCalc_handle_stack_push_58_t587d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 01239 Instruction { source: "inline_RpnCalc_handle_stack_push_58_values <- inline_RpnCalc_handle_stack_push_58_t587d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x44), Register(0x68)], resolved: None }
21 44 68 
# inline_RpnCalc_handle_stack_push_58_tf90a <- inline_RpnCalc_handle_stack_push_58_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# 0123c Instruction { source: "inline_RpnCalc_handle_stack_push_58_tf90a <- inline_RpnCalc_handle_stack_push_58_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x50)], resolved: None }
21 68 50 
# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 0123f Instruction { source: "inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x44), Register(0x4c)], resolved: None }
21 44 4c 
# 01242 Instruction { source: "inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x4c), Constant32(0x00000040=64)], resolved: None }
32 4c 40 00 00 00 
# inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 01248 Instruction { source: "inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x4c), Register(0x68)], resolved: None }
22 4c 68 
# inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 0124b Instruction { source: "inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm32, args: [Register(0x00), Constant32(0x00000004=4)], resolved: None }
20 00 04 00 00 00 
# 01251 Instruction { source: "inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: Mul8_16, args: [Register(0x68), Register(0x00), Register(0x68)], resolved: None }
11 68 00 68 
# 01255 Instruction { source: "inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm8, args: [Register(0x6a), Constant8(0x00=0)], resolved: None }
04 6a 00 
# 01258 Instruction { source: "inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm8, args: [Register(0x6b), Constant8(0x00=0)], resolved: None }
04 6b 00 
# inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_tf90a Add Var(inline_RpnCalc_handle_stack_push_58_tf659)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 0125b Instruction { source: "inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_tf90a Add Var(inline_RpnCalc_handle_stack_push_58_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0125c Instruction { source: "inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_tf90a Add Var(inline_RpnCalc_handle_stack_push_58_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x50), Register(0x68), Register(0x68)], resolved: None }
30 50 68 68 
# 01260 Instruction { source: "inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_tf90a Add Var(inline_RpnCalc_handle_stack_push_58_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_58_t531d <- inline_RpnCalc_handle_stack_push_58_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t531d <- inline_RpnCalc_handle_stack_push_58_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_t531d U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 01261 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_t531d U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x3c), Register(0x68)], resolved: None }
23 3c 68 
# 01264 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_t531d U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 01265 Instruction { source: "inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x44), Register(0x4c)], resolved: None }
21 44 4c 
# 01268 Instruction { source: "inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x4c), Constant32(0x00000040=64)], resolved: None }
32 4c 40 00 00 00 
# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 0126e Instruction { source: "inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x44), Register(0x4c)], resolved: None }
21 44 4c 
# 01271 Instruction { source: "inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x4c), Constant32(0x00000040=64)], resolved: None }
32 4c 40 00 00 00 
# inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 01277 Instruction { source: "inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x4c), Register(0x68)], resolved: None }
22 4c 68 
# inline_RpnCalc_handle_stack_push_58_td757 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 0127a Instruction { source: "inline_RpnCalc_handle_stack_push_58_td757 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0x68), Register(0x3c)], resolved: None }
21 68 3c 
# 0127d Instruction { source: "inline_RpnCalc_handle_stack_push_58_td757 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x3c), Constant32(0x00000001=1)], resolved: None }
32 3c 01 00 00 00 
# mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_td757 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 01283 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_td757 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x3c), Register(0x4c)], resolved: None }
23 3c 4c 
# 01286 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_td757 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_stack_push_58_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_58_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_58_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_58_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_push_58_function_end_stack_push
# tfe08 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 01287 Instruction { source: "tfe08 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x70), Register(0x4c)], resolved: None }
21 70 4c 
# tace9 <- b U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# 0128a Instruction { source: "tace9 <- b U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x44)], resolved: None }
21 40 44 
# inline_RpnCalc_handle_stack_push_59_s <- tfe08 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })"] }
# 0128d Instruction { source: "inline_RpnCalc_handle_stack_push_59_s <- tfe08 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x40)], resolved: None }
21 4c 40 
# inline_RpnCalc_handle_stack_push_59_n <- tace9 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })"] }
# 01290 Instruction { source: "inline_RpnCalc_handle_stack_push_59_n <- tace9 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# inline_RpnCalc_handle_stack_push_59_t587d <- inline_RpnCalc_handle_stack_push_59_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t587d <- inline_RpnCalc_handle_stack_push_59_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_values <- inline_RpnCalc_handle_stack_push_59_t587d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 01293 Instruction { source: "inline_RpnCalc_handle_stack_push_59_values <- inline_RpnCalc_handle_stack_push_59_t587d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x44)], resolved: None }
21 40 44 
# inline_RpnCalc_handle_stack_push_59_tf90a <- inline_RpnCalc_handle_stack_push_59_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# 01296 Instruction { source: "inline_RpnCalc_handle_stack_push_59_tf90a <- inline_RpnCalc_handle_stack_push_59_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x4c)], resolved: None }
21 44 4c 
# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 01299 Instruction { source: "inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x68)], resolved: None }
21 40 68 
# 0129c Instruction { source: "inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x68), Constant32(0x00000040=64)], resolved: None }
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 012a2 Instruction { source: "inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x68), Register(0x44)], resolved: None }
22 68 44 
# inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 012a5 Instruction { source: "inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm32, args: [Register(0x00), Constant32(0x00000004=4)], resolved: None }
20 00 04 00 00 00 
# 012ab Instruction { source: "inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: Mul8_16, args: [Register(0x44), Register(0x00), Register(0x44)], resolved: None }
11 44 00 44 
# 012af Instruction { source: "inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm8, args: [Register(0x46), Constant8(0x00=0)], resolved: None }
04 46 00 
# 012b2 Instruction { source: "inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm8, args: [Register(0x47), Constant8(0x00=0)], resolved: None }
04 47 00 
# inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_tf90a Add Var(inline_RpnCalc_handle_stack_push_59_tf659)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 012b5 Instruction { source: "inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_tf90a Add Var(inline_RpnCalc_handle_stack_push_59_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 012b6 Instruction { source: "inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_tf90a Add Var(inline_RpnCalc_handle_stack_push_59_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x44), Register(0x44)], resolved: None }
30 4c 44 44 
# 012ba Instruction { source: "inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_tf90a Add Var(inline_RpnCalc_handle_stack_push_59_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_59_t531d <- inline_RpnCalc_handle_stack_push_59_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t531d <- inline_RpnCalc_handle_stack_push_59_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_t531d U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 012bb Instruction { source: "mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_t531d U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x3c), Register(0x44)], resolved: None }
23 3c 44 
# 012be Instruction { source: "mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_t531d U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 012bf Instruction { source: "inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x68)], resolved: None }
21 40 68 
# 012c2 Instruction { source: "inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x68), Constant32(0x00000040=64)], resolved: None }
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 012c8 Instruction { source: "inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x68)], resolved: None }
21 40 68 
# 012cb Instruction { source: "inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x68), Constant32(0x00000040=64)], resolved: None }
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 012d1 Instruction { source: "inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x68), Register(0x44)], resolved: None }
22 68 44 
# inline_RpnCalc_handle_stack_push_59_td757 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 012d4 Instruction { source: "inline_RpnCalc_handle_stack_push_59_td757 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# 012d7 Instruction { source: "inline_RpnCalc_handle_stack_push_59_td757 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x3c), Constant32(0x00000001=1)], resolved: None }
32 3c 01 00 00 00 
# mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_td757 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 012dd Instruction { source: "mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_td757 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x3c), Register(0x68)], resolved: None }
23 3c 68 
# 012e0 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_td757 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_stack_push_59_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_59_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_59_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_59_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_push_59_function_end_stack_push
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 012e1 Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 66 17 00 
# :RpnCalc_handle_if_else_4_33
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_4_33
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t1501 <- 0n113/0x71u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }", "Number(U8, 113)", "Number(U8, 113)"] }
# 012e5 Instruction { source: "t1501 <- 0n113/0x71u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\", \"Number(U8, 113)\", \"Number(U8, 113)\"] }", opcode: LoadImm8, args: [Register(0x49), Constant8(0x71=113)], resolved: None }
04 49 71 
# if tdcd9 == t1501 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }"] }
# 012e8 Instruction { source: "if tdcd9 == t1501 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: Cmp8, args: [Register(0x48), Register(0x49)], resolved: None }
15 48 49 
# 012eb Instruction { source: "if tdcd9 == t1501 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_5_34)], resolved: None }
72 f3 12 00 
# 012ef Instruction { source: "if tdcd9 == t1501 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_5_35)], resolved: None }
70 ff 12 00 
# :RpnCalc_handle_if_true_5_34
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_5_34
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 012f3 Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x00=0)], resolved: None }
04 64 00 
# return Some(tb36e)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 012f6 Instruction { source: "return Some(tb36e)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x00)], resolved: None }
0b 64 00 
# 012f9 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 012fb Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 66 17 00 
# :RpnCalc_handle_if_else_5_35
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_5_35
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# td7b5 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 012ff Instruction { source: "td7b5 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x75), Constant8(0x0a=10)], resolved: None }
04 75 0a 
# if tdcd9 == td7b5 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }"] }
# 01302 Instruction { source: "if tdcd9 == td7b5 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x48), Register(0x75)], resolved: None }
15 48 75 
# 01305 Instruction { source: "if tdcd9 == td7b5 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_6_36)], resolved: None }
72 0d 13 00 
# 01309 Instruction { source: "if tdcd9 == td7b5 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_6_37)], resolved: None }
70 b3 13 00 
# :RpnCalc_handle_if_true_6_36
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_6_36
# tac13 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "tac13 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_c <- tac13 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })"] }
# 0130d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_c <- tac13 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32)
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 01310 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x40)], resolved: None }
21 3c 40 
# 01313 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x40), Constant32(0x00000048=72)], resolved: None }
32 40 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")"] }
# 01319 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\"] }", opcode: Load8, args: [Register(0x40), Register(0x6c)], resolved: None }
05 40 6c 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0131c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x6d), Constant8(0x00=0)], resolved: None }
04 6d 00 
# if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }"] }
# 0131f Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x6c), Register(0x6d)], resolved: None }
15 6c 6d 
# 01322 Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2)], resolved: None }
72 af 13 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }"] }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tbc15 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tbc15 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_t4760 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tbc15 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))"] }
# 01326 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_t4760 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tbc15 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x40)], resolved: None }
21 3c 40 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 01329 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x44)], resolved: None }
21 3c 44 
# 0132c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x44), Constant32(0x00000044=68)], resolved: None }
32 44 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")"] }
# 01332 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\"] }", opcode: Load32, args: [Register(0x44), Register(0x68)], resolved: None }
22 44 68 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t4760 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })"] }
# 01335 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t4760 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x40), Register(0x44)], resolved: None }
21 40 44 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })"] }
# 01338 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x68), Register(0x40)], resolved: None }
21 68 40 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t587d <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t587d <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_values <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t587d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 0133b Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_values <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t587d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x44), Register(0x68)], resolved: None }
21 44 68 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf90a <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# 0133e Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf90a <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x50)], resolved: None }
21 68 50 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 01341 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x44), Register(0x4c)], resolved: None }
21 44 4c 
# 01344 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x4c), Constant32(0x00000040=64)], resolved: None }
32 4c 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 0134a Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x4c), Register(0x68)], resolved: None }
22 4c 68 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 0134d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm32, args: [Register(0x00), Constant32(0x00000004=4)], resolved: None }
20 00 04 00 00 00 
# 01353 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: Mul8_16, args: [Register(0x68), Register(0x00), Register(0x68)], resolved: None }
11 68 00 68 
# 01357 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm8, args: [Register(0x6a), Constant8(0x00=0)], resolved: None }
04 6a 00 
# 0135a Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm8, args: [Register(0x6b), Constant8(0x00=0)], resolved: None }
04 6b 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 0135d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0135e Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x50), Register(0x68), Register(0x68)], resolved: None }
30 50 68 68 
# 01362 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t531d <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t531d <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t531d U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 01363 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t531d U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x40), Register(0x68)], resolved: None }
23 40 68 
# 01366 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t531d U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 01367 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x44), Register(0x4c)], resolved: None }
21 44 4c 
# 0136a Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x4c), Constant32(0x00000040=64)], resolved: None }
32 4c 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 01370 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x44), Register(0x4c)], resolved: None }
21 44 4c 
# 01373 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x4c), Constant32(0x00000040=64)], resolved: None }
32 4c 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 01379 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x4c), Register(0x68)], resolved: None }
22 4c 68 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 0137c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0x68), Register(0x40)], resolved: None }
21 68 40 
# 0137f Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x40), Constant32(0x00000001=1)], resolved: None }
32 40 01 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 01385 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x40), Register(0x4c)], resolved: None }
23 40 4c 
# 01388 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 01389 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x44)], resolved: None }
21 3c 44 
# 0138c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x44), Constant32(0x00000044=68)], resolved: None }
32 44 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 01392 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000000=0)], resolved: None }
20 40 00 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }"] }
# 01398 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x40), Register(0x44)], resolved: None }
23 40 44 
# 0139b Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 0139c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x40)], resolved: None }
21 3c 40 
# 0139f Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x40), Constant32(0x00000048=72)], resolved: None }
32 40 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 013a5 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x6d), Constant8(0x00=0)], resolved: None }
04 6d 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }"] }
# 013a8 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x6d), Register(0x40)], resolved: None }
06 6d 40 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0
# 	SourceContext { contexts: [] }
# 013ab Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0)], resolved: None }
70 af 13 00 
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 013af Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 66 17 00 
# :RpnCalc_handle_if_else_6_37
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_6_37
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# tac5f <- 0n32/0x20u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }", "Number(U8, 32)", "Number(U8, 32)"] }
# 013b3 Instruction { source: "tac5f <- 0n32/0x20u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }\", \"Number(U8, 32)\", \"Number(U8, 32)\"] }", opcode: LoadImm8, args: [Register(0x49), Constant8(0x20=32)], resolved: None }
04 49 20 
# if tdcd9 == tac5f then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }"] }
# 013b6 Instruction { source: "if tdcd9 == tac5f then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }\"] }", opcode: Cmp8, args: [Register(0x48), Register(0x49)], resolved: None }
15 48 49 
# 013b9 Instruction { source: "if tdcd9 == tac5f then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_7_38)], resolved: None }
72 c1 13 00 
# 013bd Instruction { source: "if tdcd9 == tac5f then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_7_39)], resolved: None }
70 67 14 00 
# :RpnCalc_handle_if_true_7_38
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_7_38
# tac13 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "tac13 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_c <- tac13 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })"] }
# 013c1 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_c <- tac13 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32)
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 013c4 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x40)], resolved: None }
21 3c 40 
# 013c7 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x40), Constant32(0x00000048=72)], resolved: None }
32 40 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")"] }
# 013cd Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\"] }", opcode: Load8, args: [Register(0x40), Register(0x6c)], resolved: None }
05 40 6c 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 013d0 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x6d), Constant8(0x00=0)], resolved: None }
04 6d 00 
# if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }"] }
# 013d3 Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x6c), Register(0x6d)], resolved: None }
15 6c 6d 
# 013d6 Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2)], resolved: None }
72 63 14 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }"] }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tbc15 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tbc15 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t4760 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tbc15 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))"] }
# 013da Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t4760 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tbc15 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x40)], resolved: None }
21 3c 40 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 013dd Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x44)], resolved: None }
21 3c 44 
# 013e0 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x44), Constant32(0x00000044=68)], resolved: None }
32 44 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")"] }
# 013e6 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\"] }", opcode: Load32, args: [Register(0x44), Register(0x68)], resolved: None }
22 44 68 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t4760 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })"] }
# 013e9 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t4760 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x40), Register(0x44)], resolved: None }
21 40 44 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })"] }
# 013ec Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x68), Register(0x40)], resolved: None }
21 68 40 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t587d <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t587d <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_values <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t587d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 013ef Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_values <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t587d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x44), Register(0x68)], resolved: None }
21 44 68 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf90a <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# 013f2 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf90a <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x50)], resolved: None }
21 68 50 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 013f5 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x44), Register(0x4c)], resolved: None }
21 44 4c 
# 013f8 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x4c), Constant32(0x00000040=64)], resolved: None }
32 4c 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 013fe Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x4c), Register(0x68)], resolved: None }
22 4c 68 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 01401 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm32, args: [Register(0x00), Constant32(0x00000004=4)], resolved: None }
20 00 04 00 00 00 
# 01407 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: Mul8_16, args: [Register(0x68), Register(0x00), Register(0x68)], resolved: None }
11 68 00 68 
# 0140b Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm8, args: [Register(0x6a), Constant8(0x00=0)], resolved: None }
04 6a 00 
# 0140e Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm8, args: [Register(0x6b), Constant8(0x00=0)], resolved: None }
04 6b 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 01411 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01412 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x50), Register(0x68), Register(0x68)], resolved: None }
30 50 68 68 
# 01416 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t531d <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t531d <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t531d U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 01417 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t531d U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x40), Register(0x68)], resolved: None }
23 40 68 
# 0141a Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t531d U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 0141b Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x44), Register(0x4c)], resolved: None }
21 44 4c 
# 0141e Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x4c), Constant32(0x00000040=64)], resolved: None }
32 4c 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 01424 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x44), Register(0x4c)], resolved: None }
21 44 4c 
# 01427 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x4c), Constant32(0x00000040=64)], resolved: None }
32 4c 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 0142d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x4c), Register(0x68)], resolved: None }
22 4c 68 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 01430 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0x68), Register(0x40)], resolved: None }
21 68 40 
# 01433 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x40), Constant32(0x00000001=1)], resolved: None }
32 40 01 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 01439 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x40), Register(0x4c)], resolved: None }
23 40 4c 
# 0143c Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 0143d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x44)], resolved: None }
21 3c 44 
# 01440 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x44), Constant32(0x00000044=68)], resolved: None }
32 44 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 01446 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000000=0)], resolved: None }
20 40 00 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }"] }
# 0144c Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x40), Register(0x44)], resolved: None }
23 40 44 
# 0144f Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 01450 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x40)], resolved: None }
21 3c 40 
# 01453 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x40), Constant32(0x00000048=72)], resolved: None }
32 40 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01459 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x6d), Constant8(0x00=0)], resolved: None }
04 6d 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }"] }
# 0145c Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x6d), Register(0x40)], resolved: None }
06 6d 40 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0
# 	SourceContext { contexts: [] }
# 0145f Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0)], resolved: None }
70 63 14 00 
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 01463 Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 66 17 00 
# :RpnCalc_handle_if_else_7_39
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_7_39
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t4e08 <- 0n99/0x63u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }", "Number(U8, 99)", "Number(U8, 99)"] }
# 01467 Instruction { source: "t4e08 <- 0n99/0x63u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }\", \"Number(U8, 99)\", \"Number(U8, 99)\"] }", opcode: LoadImm8, args: [Register(0x49), Constant8(0x63=99)], resolved: None }
04 49 63 
# if tdcd9 == t4e08 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }"] }
# 0146a Instruction { source: "if tdcd9 == t4e08 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }\"] }", opcode: Cmp8, args: [Register(0x48), Register(0x49)], resolved: None }
15 48 49 
# 0146d Instruction { source: "if tdcd9 == t4e08 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_8_40)], resolved: None }
72 75 14 00 
# 01471 Instruction { source: "if tdcd9 == t4e08 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_8_41)], resolved: None }
70 a5 14 00 
# :RpnCalc_handle_if_true_8_40
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_8_40
# tac13 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "tac13 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_c <- tac13 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] })"] }
# 01475 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_c <- tac13 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# inline_RpnCalc_handle_RpnCalc_init_50_tbc15 <- inline_RpnCalc_handle_RpnCalc_init_50_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"s\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_tbc15 <- inline_RpnCalc_handle_RpnCalc_init_50_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"s\\\"), var_type: Some(Ptr(Struct(\\\"Stack\\\"))), value: AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_s <- inline_RpnCalc_handle_RpnCalc_init_50_tbc15 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"s\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))"] }
# 01478 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_s <- inline_RpnCalc_handle_RpnCalc_init_50_tbc15 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"s\\\"), var_type: Some(Ptr(Struct(\\\"Stack\\\"))), value: AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x40)], resolved: None }
21 3c 40 
# inline_RpnCalc_handle_RpnCalc_init_50_tb2e9 <- inline_RpnCalc_handle_RpnCalc_init_50_s U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Ident(\"s\")", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_tb2e9 <- inline_RpnCalc_handle_RpnCalc_init_50_s U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] }) }\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\", \"Ident(\\\"s\\\")\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s <- inline_RpnCalc_handle_RpnCalc_init_50_tb2e9 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s <- inline_RpnCalc_handle_RpnCalc_init_50_tb2e9 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] }) }\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t4bb9 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t4bb9 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 0147b Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x44)], resolved: None }
21 40 44 
# 0147e Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x44), Constant32(0x00000040=64)], resolved: None }
32 44 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 01484 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000000=0)], resolved: None }
20 40 00 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }"] }
# 0148a Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x40), Register(0x44)], resolved: None }
23 40 44 
# 0148d Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# inline_RpnCalc_handle_RpnCalc_init_50_tb1ed <- inline_RpnCalc_handle_RpnCalc_init_50_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_tb1ed <- inline_RpnCalc_handle_RpnCalc_init_50_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_tb1ed Add Number(0n68/0x00000044u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 0148e Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_tb1ed Add Number(0n68/0x00000044u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x40)], resolved: None }
21 3c 40 
# 01491 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_tb1ed Add Number(0n68/0x00000044u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x40), Constant32(0x00000044=68)], resolved: None }
32 40 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_init_50_t60ec <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 01497 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_t60ec <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x3c), Constant32(0x00000000=0)], resolved: None }
20 3c 00 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }"] }
# 0149d Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x3c), Register(0x40)], resolved: None }
23 3c 40 
# 014a0 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 014a1 Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 66 17 00 
# :RpnCalc_handle_if_else_8_41
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_8_41
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t49a <- 0n100/0x64u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }", "Number(U8, 100)", "Number(U8, 100)"] }
# 014a5 Instruction { source: "t49a <- 0n100/0x64u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }\", \"Number(U8, 100)\", \"Number(U8, 100)\"] }", opcode: LoadImm8, args: [Register(0x49), Constant8(0x64=100)], resolved: None }
04 49 64 
# if tdcd9 == t49a then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }"] }
# 014a8 Instruction { source: "if tdcd9 == t49a then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }\"] }", opcode: Cmp8, args: [Register(0x48), Register(0x49)], resolved: None }
15 48 49 
# 014ab Instruction { source: "if tdcd9 == t49a then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_9_42)], resolved: None }
72 b3 14 00 
# 014af Instruction { source: "if tdcd9 == t49a then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_9_43)], resolved: None }
70 c4 16 00 
# :RpnCalc_handle_if_true_9_42
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_9_42
# i <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 014b3 Instruction { source: "i <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x49), Constant8(0x00=0)], resolved: None }
04 49 00 
# :RpnCalc_handle_while_predicate_44
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }"] }
# RpnCalc_handle_while_predicate_44
# td0f3 <- i U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "td0f3 <- i U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# t6001 <- stack_count U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }", "Ident(\"stack_count\")", "Ident(\"stack_count\")"] }
# 014b6 Instruction { source: "t6001 <- stack_count U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }\", \"Ident(\\\"stack_count\\\")\", \"Ident(\\\"stack_count\\\")\"] }", opcode: Copy8, args: [Register(0x6e), Register(0x64)], resolved: None }
0b 6e 64 
# if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }"] }
# 014b9 Instruction { source: "if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }\"] }", opcode: Cmp8, args: [Register(0x64), Register(0x49)], resolved: None }
15 64 49 
# 014bc Instruction { source: "if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_while_end_46)], resolved: None }
71 c0 16 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_while_body_45)], resolved: None }
# :RpnCalc_handle_while_body_45
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }"] }
# RpnCalc_handle_while_body_45
# td0f3 <- i U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] })", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] })", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "td0f3 <- i U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call print_dec8(td0f3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] })", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] })"] }
# 014c0 Instruction { source: "Arg0[a]=td0f3 None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Copy8, args: [Register(0x49), Register(0x00)], resolved: None }
0b 49 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 164, 165, 166, 167, 168, 169, 170, 171, 185, 186, 187, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79]
# 014c3 Instruction { source: "Saving reg0x4f before None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Push8, args: [Register(0x4f)], resolved: None }
09 4f 
# 014c5 Instruction { source: "Saving reg0x4e before None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Push8, args: [Register(0x4e)], resolved: None }
09 4e 
# 014c7 Instruction { source: "Saving reg0x4d before None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Push8, args: [Register(0x4d)], resolved: None }
09 4d 
# 014c9 Instruction { source: "Saving reg0x4c before None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Push8, args: [Register(0x4c)], resolved: None }
09 4c 
# 014cb Instruction { source: "Saving reg0x49 before None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Push8, args: [Register(0x49)], resolved: None }
09 49 
# 014cd Instruction { source: "Saving reg0x48 before None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Push8, args: [Register(0x48)], resolved: None }
09 48 
# 014cf Instruction { source: "Saving reg0x47 before None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Push8, args: [Register(0x47)], resolved: None }
09 47 
# 014d1 Instruction { source: "Saving reg0x46 before None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Push8, args: [Register(0x46)], resolved: None }
09 46 
# 014d3 Instruction { source: "Saving reg0x45 before None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Push8, args: [Register(0x45)], resolved: None }
09 45 
# 014d5 Instruction { source: "Saving reg0x44 before None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Push8, args: [Register(0x44)], resolved: None }
09 44 
# 014d7 Instruction { source: "Saving reg0x43 before None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Push8, args: [Register(0x43)], resolved: None }
09 43 
# 014d9 Instruction { source: "Saving reg0x42 before None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Push8, args: [Register(0x42)], resolved: None }
09 42 
# 014db Instruction { source: "Saving reg0x41 before None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Push8, args: [Register(0x41)], resolved: None }
09 41 
# 014dd Instruction { source: "Saving reg0x40 before None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Push8, args: [Register(0x40)], resolved: None }
09 40 
# 014df Instruction { source: "Saving reg0x3e before None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Push8, args: [Register(0x3e)], resolved: None }
09 3e 
# 014e1 Instruction { source: "Saving reg0x3d before None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Push8, args: [Register(0x3d)], resolved: None }
09 3d 
# 014e3 Instruction { source: "Saving reg0x3c before None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Push8, args: [Register(0x3c)], resolved: None }
09 3c 
# 014e5 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 014eb Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c f5 14 00 00 
# 014f1 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: JmpImm, args: [Label24(:print_dec8)], resolved: None }
70 cd 2a 00 
# 014f5 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 014fb Instruction { source: "Restoring reg0x3c after None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Pop8, args: [Register(0x3c)], resolved: None }
0a 3c 
# 014fd Instruction { source: "Restoring reg0x3d after None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Pop8, args: [Register(0x3d)], resolved: None }
0a 3d 
# 014ff Instruction { source: "Restoring reg0x3e after None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Pop8, args: [Register(0x3e)], resolved: None }
0a 3e 
# 01501 Instruction { source: "Restoring reg0x40 after None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Pop8, args: [Register(0x40)], resolved: None }
0a 40 
# 01503 Instruction { source: "Restoring reg0x41 after None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Pop8, args: [Register(0x41)], resolved: None }
0a 41 
# 01505 Instruction { source: "Restoring reg0x42 after None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Pop8, args: [Register(0x42)], resolved: None }
0a 42 
# 01507 Instruction { source: "Restoring reg0x43 after None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Pop8, args: [Register(0x43)], resolved: None }
0a 43 
# 01509 Instruction { source: "Restoring reg0x44 after None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Pop8, args: [Register(0x44)], resolved: None }
0a 44 
# 0150b Instruction { source: "Restoring reg0x45 after None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Pop8, args: [Register(0x45)], resolved: None }
0a 45 
# 0150d Instruction { source: "Restoring reg0x46 after None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Pop8, args: [Register(0x46)], resolved: None }
0a 46 
# 0150f Instruction { source: "Restoring reg0x47 after None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Pop8, args: [Register(0x47)], resolved: None }
0a 47 
# 01511 Instruction { source: "Restoring reg0x48 after None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Pop8, args: [Register(0x48)], resolved: None }
0a 48 
# 01513 Instruction { source: "Restoring reg0x49 after None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Pop8, args: [Register(0x49)], resolved: None }
0a 49 
# 01515 Instruction { source: "Restoring reg0x4c after None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Pop8, args: [Register(0x4c)], resolved: None }
0a 4c 
# 01517 Instruction { source: "Restoring reg0x4d after None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Pop8, args: [Register(0x4d)], resolved: None }
0a 4d 
# 01519 Instruction { source: "Restoring reg0x4e after None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Pop8, args: [Register(0x4e)], resolved: None }
0a 4e 
# 0151b Instruction { source: "Restoring reg0x4f after None <= call print_dec8(td0f3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Pop8, args: [Register(0x4f)], resolved: None }
0a 4f 
# tebdf <- 0n58/0x3au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 58)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 58)] })", "Number(U8, 58)", "Number(U8, 58)"] }
# 0151d Instruction { source: "tebdf <- 0n58/0x3au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] })\", \"Number(U8, 58)\", \"Number(U8, 58)\"] }", opcode: LoadImm8, args: [Register(0x6c), Constant8(0x3a=58)], resolved: None }
04 6c 3a 
# inline_RpnCalc_handle_putc_23_c <- tebdf U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 58)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 58)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_23_c <- tebdf U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] })\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x6c)], resolved: None }
# inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x6c)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_23_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 01520 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x6c)], resolved: None }
68 6c 
# inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x6c)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })"] }
# 01522 Instruction { source: "Arg0[ch]=inline_RpnCalc_handle_putc_23_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x00)], resolved: None }
0b 6c 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79]
# 01525 Instruction { source: "Saving reg0x4f before None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4f)], resolved: None }
09 4f 
# 01527 Instruction { source: "Saving reg0x4e before None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4e)], resolved: None }
09 4e 
# 01529 Instruction { source: "Saving reg0x4d before None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4d)], resolved: None }
09 4d 
# 0152b Instruction { source: "Saving reg0x4c before None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4c)], resolved: None }
09 4c 
# 0152d Instruction { source: "Saving reg0x49 before None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x49)], resolved: None }
09 49 
# 0152f Instruction { source: "Saving reg0x48 before None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x48)], resolved: None }
09 48 
# 01531 Instruction { source: "Saving reg0x47 before None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x47)], resolved: None }
09 47 
# 01533 Instruction { source: "Saving reg0x46 before None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x46)], resolved: None }
09 46 
# 01535 Instruction { source: "Saving reg0x45 before None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x45)], resolved: None }
09 45 
# 01537 Instruction { source: "Saving reg0x44 before None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x44)], resolved: None }
09 44 
# 01539 Instruction { source: "Saving reg0x43 before None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x43)], resolved: None }
09 43 
# 0153b Instruction { source: "Saving reg0x42 before None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x42)], resolved: None }
09 42 
# 0153d Instruction { source: "Saving reg0x41 before None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x41)], resolved: None }
09 41 
# 0153f Instruction { source: "Saving reg0x40 before None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x40)], resolved: None }
09 40 
# 01541 Instruction { source: "Saving reg0x3e before None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3e)], resolved: None }
09 3e 
# 01543 Instruction { source: "Saving reg0x3d before None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3d)], resolved: None }
09 3d 
# 01545 Instruction { source: "Saving reg0x3c before None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3c)], resolved: None }
09 3c 
# 01547 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 0154d Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 57 15 00 00 
# 01553 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: JmpImm, args: [Label24(:lcd_putc)], resolved: None }
70 08 21 00 
# 01557 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 0155d Instruction { source: "Restoring reg0x3c after None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3c)], resolved: None }
0a 3c 
# 0155f Instruction { source: "Restoring reg0x3d after None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3d)], resolved: None }
0a 3d 
# 01561 Instruction { source: "Restoring reg0x3e after None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3e)], resolved: None }
0a 3e 
# 01563 Instruction { source: "Restoring reg0x40 after None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x40)], resolved: None }
0a 40 
# 01565 Instruction { source: "Restoring reg0x41 after None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x41)], resolved: None }
0a 41 
# 01567 Instruction { source: "Restoring reg0x42 after None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x42)], resolved: None }
0a 42 
# 01569 Instruction { source: "Restoring reg0x43 after None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x43)], resolved: None }
0a 43 
# 0156b Instruction { source: "Restoring reg0x44 after None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x44)], resolved: None }
0a 44 
# 0156d Instruction { source: "Restoring reg0x45 after None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x45)], resolved: None }
0a 45 
# 0156f Instruction { source: "Restoring reg0x46 after None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x46)], resolved: None }
0a 46 
# 01571 Instruction { source: "Restoring reg0x47 after None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x47)], resolved: None }
0a 47 
# 01573 Instruction { source: "Restoring reg0x48 after None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x48)], resolved: None }
0a 48 
# 01575 Instruction { source: "Restoring reg0x49 after None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x49)], resolved: None }
0a 49 
# 01577 Instruction { source: "Restoring reg0x4c after None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4c)], resolved: None }
0a 4c 
# 01579 Instruction { source: "Restoring reg0x4d after None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4d)], resolved: None }
0a 4d 
# 0157b Instruction { source: "Restoring reg0x4e after None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4e)], resolved: None }
0a 4e 
# 0157d Instruction { source: "Restoring reg0x4f after None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4f)], resolved: None }
0a 4f 
# goto inline_RpnCalc_handle_putc_23_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_23_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_23_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_23_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_23_function_end_putc
# tfe08 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 0157f Instruction { source: "tfe08 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x70), Register(0x4c)], resolved: None }
21 70 4c 
# td0f3 <- i U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }", "Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "td0f3 <- i U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# t4376 U32 <- td0f3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }", "Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }"] }
# 01582 Instruction { source: "Zero-pad for t4376 U32 <- td0f3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000000=0)], resolved: None }
20 40 00 00 00 00 
# 01588 Instruction { source: "t4376 U32 <- td0f3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }\"] }", opcode: Copy8, args: [Register(0x49), Register(0x40)], resolved: None }
0b 49 40 
# inline_RpnCalc_handle_stack_get_48_s <- tfe08 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })"] }
# 0158b Instruction { source: "inline_RpnCalc_handle_stack_get_48_s <- tfe08 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x44)], resolved: None }
21 4c 44 
# inline_RpnCalc_handle_stack_get_48_n <- t4376 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_48_n <- t4376 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_get_48_t587d <- inline_RpnCalc_handle_stack_get_48_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_48_t587d <- inline_RpnCalc_handle_stack_get_48_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_get_48_values <- inline_RpnCalc_handle_stack_get_48_t587d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_48_values <- inline_RpnCalc_handle_stack_get_48_t587d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_get_48_tf90a <- inline_RpnCalc_handle_stack_get_48_values U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }", "Index(\"values\", Ident(\"n\"))", "Index(\"values\", Ident(\"n\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_48_tf90a <- inline_RpnCalc_handle_stack_get_48_values U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_get_48_t531d <- inline_RpnCalc_handle_stack_get_48_n U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }", "Index(\"values\", Ident(\"n\"))", "Index(\"values\", Ident(\"n\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4)))", "Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))", "Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_48_t531d <- inline_RpnCalc_handle_stack_get_48_n U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_t531d Multiply Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }", "Index(\"values\", Ident(\"n\"))", "Index(\"values\", Ident(\"n\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4)))", "Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))", "Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))"] }
# 0158e Instruction { source: "inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_t531d Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm32, args: [Register(0x00), Constant32(0x00000004=4)], resolved: None }
20 00 04 00 00 00 
# 01594 Instruction { source: "inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_t531d Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\"] }", opcode: Mul8_16, args: [Register(0x40), Register(0x00), Register(0x40)], resolved: None }
11 40 00 40 
# 01598 Instruction { source: "inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_t531d Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm8, args: [Register(0x42), Constant8(0x00=0)], resolved: None }
04 42 00 
# 0159b Instruction { source: "inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_t531d Multiply Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\"] }", opcode: LoadImm8, args: [Register(0x43), Constant8(0x00=0)], resolved: None }
04 43 00 
# inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_tf90a Add Var(inline_RpnCalc_handle_stack_get_48_td38d)
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }", "Index(\"values\", Ident(\"n\"))", "Index(\"values\", Ident(\"n\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4)))"] }
# 0159e Instruction { source: "inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_tf90a Add Var(inline_RpnCalc_handle_stack_get_48_td38d)\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0159f Instruction { source: "inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_tf90a Add Var(inline_RpnCalc_handle_stack_get_48_td38d)\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x44), Register(0x40), Register(0x40)], resolved: None }
30 44 40 40 
# 015a3 Instruction { source: "inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_tf90a Add Var(inline_RpnCalc_handle_stack_get_48_td38d)\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_get_48_t2db0 <- mem[inline_RpnCalc_handle_stack_get_48_t5abb] U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }", "Index(\"values\", Ident(\"n\"))", "Index(\"values\", Ident(\"n\"))"] }
# 015a4 Instruction { source: "inline_RpnCalc_handle_stack_get_48_t2db0 <- mem[inline_RpnCalc_handle_stack_get_48_t5abb] U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\"] }", opcode: Load32, args: [Register(0x40), Register(0x40)], resolved: None }
22 40 40 
# tb336 <- inline_RpnCalc_handle_stack_get_48_t2db0 U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }"] }
# optimized away noop copy Instruction { source: "tb336 <- inline_RpnCalc_handle_stack_get_48_t2db0 U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# goto inline_RpnCalc_handle_stack_get_48_function_end_stack_get
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_get_48_function_end_stack_get\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_get_48_function_end_stack_get)], resolved: None }
# :inline_RpnCalc_handle_stack_get_48_function_end_stack_get
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_get_48_function_end_stack_get
# None <= call print_dec32(tb336,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })"] }
# 015a7 Instruction { source: "Arg0[a]=tb336 None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Copy32, args: [Register(0x40), Register(0x00)], resolved: None }
21 40 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117]
# 015aa Instruction { source: "Saving reg0x75 before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x75)], resolved: None }
09 75 
# 015ac Instruction { source: "Saving reg0x74 before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x74)], resolved: None }
09 74 
# 015ae Instruction { source: "Saving reg0x73 before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x73)], resolved: None }
09 73 
# 015b0 Instruction { source: "Saving reg0x72 before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x72)], resolved: None }
09 72 
# 015b2 Instruction { source: "Saving reg0x71 before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x71)], resolved: None }
09 71 
# 015b4 Instruction { source: "Saving reg0x70 before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x70)], resolved: None }
09 70 
# 015b6 Instruction { source: "Saving reg0x6e before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x6e)], resolved: None }
09 6e 
# 015b8 Instruction { source: "Saving reg0x6d before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x6d)], resolved: None }
09 6d 
# 015ba Instruction { source: "Saving reg0x6c before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x6c)], resolved: None }
09 6c 
# 015bc Instruction { source: "Saving reg0x6b before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x6b)], resolved: None }
09 6b 
# 015be Instruction { source: "Saving reg0x6a before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x6a)], resolved: None }
09 6a 
# 015c0 Instruction { source: "Saving reg0x69 before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x69)], resolved: None }
09 69 
# 015c2 Instruction { source: "Saving reg0x68 before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x68)], resolved: None }
09 68 
# 015c4 Instruction { source: "Saving reg0x65 before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x65)], resolved: None }
09 65 
# 015c6 Instruction { source: "Saving reg0x64 before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x64)], resolved: None }
09 64 
# 015c8 Instruction { source: "Saving reg0x63 before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x63)], resolved: None }
09 63 
# 015ca Instruction { source: "Saving reg0x62 before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x62)], resolved: None }
09 62 
# 015cc Instruction { source: "Saving reg0x61 before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x61)], resolved: None }
09 61 
# 015ce Instruction { source: "Saving reg0x60 before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x60)], resolved: None }
09 60 
# 015d0 Instruction { source: "Saving reg0x4f before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x4f)], resolved: None }
09 4f 
# 015d2 Instruction { source: "Saving reg0x4e before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x4e)], resolved: None }
09 4e 
# 015d4 Instruction { source: "Saving reg0x4d before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x4d)], resolved: None }
09 4d 
# 015d6 Instruction { source: "Saving reg0x4c before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x4c)], resolved: None }
09 4c 
# 015d8 Instruction { source: "Saving reg0x49 before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x49)], resolved: None }
09 49 
# 015da Instruction { source: "Saving reg0x48 before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x48)], resolved: None }
09 48 
# 015dc Instruction { source: "Saving reg0x47 before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x47)], resolved: None }
09 47 
# 015de Instruction { source: "Saving reg0x46 before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x46)], resolved: None }
09 46 
# 015e0 Instruction { source: "Saving reg0x45 before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x45)], resolved: None }
09 45 
# 015e2 Instruction { source: "Saving reg0x44 before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x44)], resolved: None }
09 44 
# 015e4 Instruction { source: "Saving reg0x43 before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x43)], resolved: None }
09 43 
# 015e6 Instruction { source: "Saving reg0x42 before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x42)], resolved: None }
09 42 
# 015e8 Instruction { source: "Saving reg0x41 before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x41)], resolved: None }
09 41 
# 015ea Instruction { source: "Saving reg0x40 before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x40)], resolved: None }
09 40 
# 015ec Instruction { source: "Saving reg0x3e before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x3e)], resolved: None }
09 3e 
# 015ee Instruction { source: "Saving reg0x3d before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x3d)], resolved: None }
09 3d 
# 015f0 Instruction { source: "Saving reg0x3c before None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x3c)], resolved: None }
09 3c 
# 015f2 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 015f8 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 02 16 00 00 
# 015fe Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: JmpImm, args: [Label24(:print_dec32)], resolved: None }
70 a0 28 00 
# 01602 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 01608 Instruction { source: "Restoring reg0x3c after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x3c)], resolved: None }
0a 3c 
# 0160a Instruction { source: "Restoring reg0x3d after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x3d)], resolved: None }
0a 3d 
# 0160c Instruction { source: "Restoring reg0x3e after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x3e)], resolved: None }
0a 3e 
# 0160e Instruction { source: "Restoring reg0x40 after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x40)], resolved: None }
0a 40 
# 01610 Instruction { source: "Restoring reg0x41 after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x41)], resolved: None }
0a 41 
# 01612 Instruction { source: "Restoring reg0x42 after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x42)], resolved: None }
0a 42 
# 01614 Instruction { source: "Restoring reg0x43 after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x43)], resolved: None }
0a 43 
# 01616 Instruction { source: "Restoring reg0x44 after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x44)], resolved: None }
0a 44 
# 01618 Instruction { source: "Restoring reg0x45 after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x45)], resolved: None }
0a 45 
# 0161a Instruction { source: "Restoring reg0x46 after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x46)], resolved: None }
0a 46 
# 0161c Instruction { source: "Restoring reg0x47 after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x47)], resolved: None }
0a 47 
# 0161e Instruction { source: "Restoring reg0x48 after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x48)], resolved: None }
0a 48 
# 01620 Instruction { source: "Restoring reg0x49 after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x49)], resolved: None }
0a 49 
# 01622 Instruction { source: "Restoring reg0x4c after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x4c)], resolved: None }
0a 4c 
# 01624 Instruction { source: "Restoring reg0x4d after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x4d)], resolved: None }
0a 4d 
# 01626 Instruction { source: "Restoring reg0x4e after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x4e)], resolved: None }
0a 4e 
# 01628 Instruction { source: "Restoring reg0x4f after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x4f)], resolved: None }
0a 4f 
# 0162a Instruction { source: "Restoring reg0x60 after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x60)], resolved: None }
0a 60 
# 0162c Instruction { source: "Restoring reg0x61 after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x61)], resolved: None }
0a 61 
# 0162e Instruction { source: "Restoring reg0x62 after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x62)], resolved: None }
0a 62 
# 01630 Instruction { source: "Restoring reg0x63 after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x63)], resolved: None }
0a 63 
# 01632 Instruction { source: "Restoring reg0x64 after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x64)], resolved: None }
0a 64 
# 01634 Instruction { source: "Restoring reg0x65 after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x65)], resolved: None }
0a 65 
# 01636 Instruction { source: "Restoring reg0x68 after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x68)], resolved: None }
0a 68 
# 01638 Instruction { source: "Restoring reg0x69 after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x69)], resolved: None }
0a 69 
# 0163a Instruction { source: "Restoring reg0x6a after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x6a)], resolved: None }
0a 6a 
# 0163c Instruction { source: "Restoring reg0x6b after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x6b)], resolved: None }
0a 6b 
# 0163e Instruction { source: "Restoring reg0x6c after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x6c)], resolved: None }
0a 6c 
# 01640 Instruction { source: "Restoring reg0x6d after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x6d)], resolved: None }
0a 6d 
# 01642 Instruction { source: "Restoring reg0x6e after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x6e)], resolved: None }
0a 6e 
# 01644 Instruction { source: "Restoring reg0x70 after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x70)], resolved: None }
0a 70 
# 01646 Instruction { source: "Restoring reg0x71 after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x71)], resolved: None }
0a 71 
# 01648 Instruction { source: "Restoring reg0x72 after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x72)], resolved: None }
0a 72 
# 0164a Instruction { source: "Restoring reg0x73 after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x73)], resolved: None }
0a 73 
# 0164c Instruction { source: "Restoring reg0x74 after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x74)], resolved: None }
0a 74 
# 0164e Instruction { source: "Restoring reg0x75 after None <= call print_dec32(tb336,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x75)], resolved: None }
0a 75 
# td7b5 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 01650 Instruction { source: "td7b5 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x75), Constant8(0x0a=10)], resolved: None }
04 75 0a 
# inline_RpnCalc_handle_putc_24_c <- td7b5 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# 01653 Instruction { source: "inline_RpnCalc_handle_putc_24_c <- td7b5 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x75), Register(0x6c)], resolved: None }
0b 75 6c 
# inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x6c)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_24_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 01656 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x6c)], resolved: None }
68 6c 
# inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x6c)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })"] }
# 01658 Instruction { source: "Arg0[ch]=inline_RpnCalc_handle_putc_24_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x00)], resolved: None }
0b 6c 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79]
# 0165b Instruction { source: "Saving reg0x4f before None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4f)], resolved: None }
09 4f 
# 0165d Instruction { source: "Saving reg0x4e before None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4e)], resolved: None }
09 4e 
# 0165f Instruction { source: "Saving reg0x4d before None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4d)], resolved: None }
09 4d 
# 01661 Instruction { source: "Saving reg0x4c before None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x4c)], resolved: None }
09 4c 
# 01663 Instruction { source: "Saving reg0x49 before None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x49)], resolved: None }
09 49 
# 01665 Instruction { source: "Saving reg0x48 before None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x48)], resolved: None }
09 48 
# 01667 Instruction { source: "Saving reg0x47 before None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x47)], resolved: None }
09 47 
# 01669 Instruction { source: "Saving reg0x46 before None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x46)], resolved: None }
09 46 
# 0166b Instruction { source: "Saving reg0x45 before None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x45)], resolved: None }
09 45 
# 0166d Instruction { source: "Saving reg0x44 before None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x44)], resolved: None }
09 44 
# 0166f Instruction { source: "Saving reg0x43 before None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x43)], resolved: None }
09 43 
# 01671 Instruction { source: "Saving reg0x42 before None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x42)], resolved: None }
09 42 
# 01673 Instruction { source: "Saving reg0x41 before None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x41)], resolved: None }
09 41 
# 01675 Instruction { source: "Saving reg0x40 before None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x40)], resolved: None }
09 40 
# 01677 Instruction { source: "Saving reg0x3e before None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3e)], resolved: None }
09 3e 
# 01679 Instruction { source: "Saving reg0x3d before None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3d)], resolved: None }
09 3d 
# 0167b Instruction { source: "Saving reg0x3c before None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x3c)], resolved: None }
09 3c 
# 0167d Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 01683 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 8d 16 00 00 
# 01689 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: JmpImm, args: [Label24(:lcd_putc)], resolved: None }
70 08 21 00 
# 0168d Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 01693 Instruction { source: "Restoring reg0x3c after None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3c)], resolved: None }
0a 3c 
# 01695 Instruction { source: "Restoring reg0x3d after None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3d)], resolved: None }
0a 3d 
# 01697 Instruction { source: "Restoring reg0x3e after None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x3e)], resolved: None }
0a 3e 
# 01699 Instruction { source: "Restoring reg0x40 after None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x40)], resolved: None }
0a 40 
# 0169b Instruction { source: "Restoring reg0x41 after None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x41)], resolved: None }
0a 41 
# 0169d Instruction { source: "Restoring reg0x42 after None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x42)], resolved: None }
0a 42 
# 0169f Instruction { source: "Restoring reg0x43 after None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x43)], resolved: None }
0a 43 
# 016a1 Instruction { source: "Restoring reg0x44 after None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x44)], resolved: None }
0a 44 
# 016a3 Instruction { source: "Restoring reg0x45 after None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x45)], resolved: None }
0a 45 
# 016a5 Instruction { source: "Restoring reg0x46 after None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x46)], resolved: None }
0a 46 
# 016a7 Instruction { source: "Restoring reg0x47 after None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x47)], resolved: None }
0a 47 
# 016a9 Instruction { source: "Restoring reg0x48 after None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x48)], resolved: None }
0a 48 
# 016ab Instruction { source: "Restoring reg0x49 after None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x49)], resolved: None }
0a 49 
# 016ad Instruction { source: "Restoring reg0x4c after None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4c)], resolved: None }
0a 4c 
# 016af Instruction { source: "Restoring reg0x4d after None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4d)], resolved: None }
0a 4d 
# 016b1 Instruction { source: "Restoring reg0x4e after None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4e)], resolved: None }
0a 4e 
# 016b3 Instruction { source: "Restoring reg0x4f after None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x4f)], resolved: None }
0a 4f 
# goto inline_RpnCalc_handle_putc_24_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_24_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_24_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_24_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_24_function_end_putc
# td0f3 <- i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "td0f3 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))"] }
# 016b5 Instruction { source: "i <- td0f3 Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 016b8 Instruction { source: "i <- td0f3 Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x49), Register(0x00), Register(0x49)], resolved: None }
14 49 00 49 
# goto RpnCalc_handle_while_predicate_44
# 	SourceContext { contexts: [] }
# 016bc Instruction { source: "goto RpnCalc_handle_while_predicate_44\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_while_predicate_44)], resolved: None }
70 b6 14 00 
# :RpnCalc_handle_while_end_46
# 	SourceContext { contexts: [] }
# RpnCalc_handle_while_end_46
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 016c0 Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 66 17 00 
# :RpnCalc_handle_if_else_9_43
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_9_43
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t2ac9 <- 0n57/0x39u8 
# 	SourceContext { contexts: ["Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Number(U8, 57)", "Number(U8, 57)"] }
# 016c4 Instruction { source: "t2ac9 <- 0n57/0x39u8 \n\tSourceContext { contexts: [\"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Number(U8, 57)\", \"Number(U8, 57)\"] }", opcode: LoadImm8, args: [Register(0x49), Constant8(0x39=57)], resolved: None }
04 49 39 
# if tdcd9 <= t2ac9 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48'
# 	SourceContext { contexts: ["Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }"] }
# 016c7 Instruction { source: "if tdcd9 <= t2ac9 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48'\n\tSourceContext { contexts: [\"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: Cmp8, args: [Register(0x48), Register(0x49)], resolved: None }
15 48 49 
# 016ca Instruction { source: "if tdcd9 <= t2ac9 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48'\n\tSourceContext { contexts: [\"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_if_true_10_47)], resolved: None }
71 d2 16 00 
# 016ce Instruction { source: "if tdcd9 <= t2ac9 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48'\n\tSourceContext { contexts: [\"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_10_48)], resolved: None }
70 66 17 00 
# :RpnCalc_handle_if_true_10_47
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_10_47
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# tf48d <- 0n48/0x30u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }", "Number(U8, 48)", "Number(U8, 48)"] }
# 016d2 Instruction { source: "tf48d <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x49), Constant8(0x30=48)], resolved: None }
04 49 30 
# if tdcd9 >= tf48d then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }"] }
# 016d5 Instruction { source: "if tdcd9 >= tf48d then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }\"] }", opcode: Cmp8, args: [Register(0x49), Register(0x48)], resolved: None }
15 49 48 
# 016d8 Instruction { source: "if tdcd9 >= tf48d then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_if_true_0_50)], resolved: None }
71 e0 16 00 
# 016dc Instruction { source: "if tdcd9 >= tf48d then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_0_51)], resolved: None }
70 62 17 00 
# :RpnCalc_handle_if_true_0_50
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }"] }
# RpnCalc_handle_if_true_0_50
# tb1ed <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 016e0 Instruction { source: "tb1ed <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# tfdb7 <- tb1ed Add Number(0n72/0x00000048u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 016e3 Instruction { source: "tfdb7 <- tb1ed Add Number(0n72/0x00000048u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x3c), Constant32(0x00000048=72)], resolved: None }
32 3c 48 00 00 00 
# tfcd <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 016e9 Instruction { source: "tfcd <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x01=1)], resolved: None }
04 64 01 
# mem[tfdb7] <- tfcd U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }"] }
# 016ec Instruction { source: "mem[tfdb7] <- tfcd U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }\"] }", opcode: Store8, args: [Register(0x64), Register(0x3c)], resolved: None }
06 64 3c 
# tb1ed <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 016ef Instruction { source: "tb1ed <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# t6e8e <- tb1ed Add Number(0n68/0x00000044u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 016f2 Instruction { source: "t6e8e <- tb1ed Add Number(0n68/0x00000044u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x4c)], resolved: None }
21 3c 4c 
# 016f5 Instruction { source: "t6e8e <- tb1ed Add Number(0n68/0x00000044u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x4c), Constant32(0x00000044=68)], resolved: None }
32 4c 44 00 00 00 
# tb1ed <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 016fb Instruction { source: "tb1ed <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# t6e8e <- tb1ed Add Number(0n68/0x00000044u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 016fe Instruction { source: "t6e8e <- tb1ed Add Number(0n68/0x00000044u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x4c)], resolved: None }
21 3c 4c 
# 01701 Instruction { source: "t6e8e <- tb1ed Add Number(0n68/0x00000044u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x4c), Constant32(0x00000044=68)], resolved: None }
32 4c 44 00 00 00 
# td60 <- mem[t6e8e] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")"] }
# 01707 Instruction { source: "td60 <- mem[t6e8e] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\"] }", opcode: Load32, args: [Register(0x4c), Register(0x40)], resolved: None }
22 4c 40 
# inline_RpnCalc_handle_mul32_by10_13_a <- td60 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })"] }
# 0170a Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_a <- td60 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x40), Register(0x3c)], resolved: None }
21 40 3c 
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792)
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))"] }
# 0170d Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0170e Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x3c), Register(0x3c)], resolved: None }
30 3c 3c 3c 
# 01712 Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792)
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))"] }
# 01713 Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01714 Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x3c), Register(0x40)], resolved: None }
30 3c 3c 40 
# 01718 Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9)
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"b\"))"] }
# 01719 Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0171a Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x40), Register(0x40)], resolved: None }
30 40 40 40 
# 0171e Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792)
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))"] }
# 0171f Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01720 Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x3c), Register(0x3c)], resolved: None }
30 40 3c 3c 
# 01724 Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# tadd <- inline_RpnCalc_handle_mul32_by10_13_t7eaf U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }"] }
# optimized away noop copy Instruction { source: "tadd <- inline_RpnCalc_handle_mul32_by10_13_t7eaf U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# goto inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10)], resolved: None }
# :inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10
# mem[t6e8e] <- tadd U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }"] }
# 01725 Instruction { source: "mem[t6e8e] <- tadd U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\"] }", opcode: Store32_1, args: [Register(0x3c), Register(0x4c)], resolved: None }
23 3c 4c 
# 01728 Instruction { source: "mem[t6e8e] <- tadd U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# tb1ed <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 01729 Instruction { source: "tb1ed <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# t6e8e <- tb1ed Add Number(0n68/0x00000044u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 0172c Instruction { source: "t6e8e <- tb1ed Add Number(0n68/0x00000044u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x4c)], resolved: None }
21 3c 4c 
# 0172f Instruction { source: "t6e8e <- tb1ed Add Number(0n68/0x00000044u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x4c), Constant32(0x00000044=68)], resolved: None }
32 4c 44 00 00 00 
# tb1ed <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 01735 Instruction { source: "tb1ed <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# t6e8e <- tb1ed Add Number(0n68/0x00000044u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 01738 Instruction { source: "t6e8e <- tb1ed Add Number(0n68/0x00000044u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x4c)], resolved: None }
21 3c 4c 
# 0173b Instruction { source: "t6e8e <- tb1ed Add Number(0n68/0x00000044u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x4c), Constant32(0x00000044=68)], resolved: None }
32 4c 44 00 00 00 
# td60 <- mem[t6e8e] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")"] }
# 01741 Instruction { source: "td60 <- mem[t6e8e] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\"] }", opcode: Load32, args: [Register(0x4c), Register(0x40)], resolved: None }
22 4c 40 
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t7ff1 <- tdcd9 Subtract Number(0n48/0x30u8)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))"] }
# 01744 Instruction { source: "t7ff1 <- tdcd9 Subtract Number(0n48/0x30u8)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0xd0=208)], resolved: None }
04 00 d0 
# 01747 Instruction { source: "t7ff1 <- tdcd9 Subtract Number(0n48/0x30u8)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x48), Register(0x00), Register(0x49)], resolved: None }
14 48 00 49 
# t3f70 U32 <- t7ff1 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }"] }
# 0174b Instruction { source: "Zero-pad for t3f70 U32 <- t7ff1 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\"] }", opcode: LoadImm32, args: [Register(0x3c), Constant32(0x00000000=0)], resolved: None }
20 3c 00 00 00 00 
# 01751 Instruction { source: "t3f70 U32 <- t7ff1 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\"] }", opcode: Copy8, args: [Register(0x49), Register(0x3c)], resolved: None }
0b 49 3c 
# tacf6 <- td60 Add Var(t3f70)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })"] }
# 01754 Instruction { source: "tacf6 <- td60 Add Var(t3f70)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01755 Instruction { source: "tacf6 <- td60 Add Var(t3f70)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x3c), Register(0x3c)], resolved: None }
30 40 3c 3c 
# 01759 Instruction { source: "tacf6 <- td60 Add Var(t3f70)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[t6e8e] <- tacf6 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }"] }
# 0175a Instruction { source: "mem[t6e8e] <- tacf6 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\"] }", opcode: Store32_1, args: [Register(0x3c), Register(0x4c)], resolved: None }
23 3c 4c 
# 0175d Instruction { source: "mem[t6e8e] <- tacf6 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto RpnCalc_handle_if_end_49
# 	SourceContext { contexts: [] }
# 0175e Instruction { source: "goto RpnCalc_handle_if_end_49\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_49)], resolved: None }
70 62 17 00 
# :RpnCalc_handle_if_else_0_51
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_51
# :RpnCalc_handle_if_end_49
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_49
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 01762 Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 66 17 00 
# :RpnCalc_handle_if_else_10_48
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_10_48
# :RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_23
# tfcd <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 1)) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 01766 Instruction { source: "tfcd <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 1)) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x01=1)], resolved: None }
04 64 01 
# return Some(tfcd)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 1)) }"] }
# 01769 Instruction { source: "return Some(tfcd)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x00)], resolved: None }
0b 64 00 
# 0176c Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_RpnCalc_handle
# 	SourceContext { contexts: [] }
# function_end_RpnCalc_handle
# Unreachable
# 	SourceContext { contexts: [] }
# 0176e Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :RpnCalc_run
# Ret Some(U8)
# Arg0=calc
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var calc (Arg0 calc Ptr(Struct("RpnCalc"))) Reg(U32) Some([120, 121, 122, 123])
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_run_getchar_39_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([128, 129, 130, 131])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t1d36 (t1d36 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([136])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed (t44ed Ident("value")) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([128, 129, 130, 131])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t565a (t565a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([128, 129, 130, 131])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t6fdb (t6fdb Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 (tae11 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 (tb469 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) Reg(U32) Some([140, 141, 142, 143])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd (tb6dd PtrFieldDeref("s", "first")) Reg(U8) Some([144])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 (tb702 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([148, 149, 150, 151])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value (Local value Number(U8) Reg(U8)) Reg(U8) Some([136])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n (Arg1 n Number(U8)) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t1d36 (t1d36 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([140, 141, 142, 143])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 (t2187 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([140, 141, 142, 143])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([152])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t531d (t531d Ident("n")) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t565a (t565a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([148, 149, 150, 151])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t6778 (t6778 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([156, 157, 158, 159])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([140, 141, 142, 143])
# Var inline_RpnCalc_run_getchar_39_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_run_getchar_39_t0 (static "stdin") Reg(U32) Some([128, 129, 130, 131])
# Var inline_RpnCalc_run_getchar_39_t1 (static "stdin") Reg(U32) Some([128, 129, 130, 131])
# Var inline_RpnCalc_run_getchar_39_t861f (t861f Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([136])
# Var inline_RpnCalc_run_getchar_39_tb816 (tb816 TtyIn) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_tc9d5 (tc9d5 Call(Call { function: "Keyboard_poll", parameters: [] })) Reg(U8) Some([160])
# Var inline_RpnCalc_run_getchar_39_tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_te31 (te31 Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })) Reg(U8) Some([160])
# Var inline_RpnCalc_run_getchar_39_tf0b5 (tf0b5 Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_tfff6 (tfff6 AddressOf(Ident("stdin"))) Reg(U32) Some([132, 133, 134, 135])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var result (Local result Number(U8) Reg(U8)) Reg(U8) Some([124])
# Var t57fd (t57fd Ident("result")) Reg(U8) Some([124])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([136])
# Var td337 (td337 Ident("calc")) Reg(U32) Some([120, 121, 122, 123])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([124])
# 01773 Instruction { source: "Save function parameter 'calc' registers [0, 1, 2, 3] to locals [120, 121, 122, 123].", opcode: Copy32, args: [Register(0x00), Register(0x78)], resolved: None }
21 00 78 
# :RpnCalc_run_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }"] }
# RpnCalc_run_while_predicate_0
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01776 Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x88), Constant8(0x00=0)], resolved: None }
04 88 00 
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01779 Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x88), Constant8(0x00=0)], resolved: None }
04 88 00 
# if tb36e == tb36e then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }"] }
# 0177c Instruction { source: "if tb36e == tb36e then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x88), Register(0x88)], resolved: None }
15 88 88 
# 0177f Instruction { source: "if tb36e == tb36e then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_run_while_body_1)], resolved: None }
72 87 17 00 
# 01783 Instruction { source: "if tb36e == tb36e then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_run_while_end_2)], resolved: None }
70 3a 19 00 
# :RpnCalc_run_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }"] }
# RpnCalc_run_while_body_1
# inline_RpnCalc_run_getchar_39_ch <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 01787 Instruction { source: "inline_RpnCalc_run_getchar_39_ch <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x7c), Constant8(0x00=0)], resolved: None }
04 7c 00 
# :inline_RpnCalc_run_getchar_39_getchar_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }"] }
# inline_RpnCalc_run_getchar_39_getchar_while_predicate_0
# inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_RpnCalc_run_getchar_39_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0178a Instruction { source: "inline_RpnCalc_run_getchar_39_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x88), Constant8(0x00=0)], resolved: None }
04 88 00 
# if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }"] }
# 0178d Instruction { source: "if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x7c), Register(0x88)], resolved: None }
15 7c 88 
# 01790 Instruction { source: "if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_RpnCalc_run_getchar_39_getchar_while_body_1)], resolved: None }
72 98 17 00 
# 01794 Instruction { source: "if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_getchar_while_end_2)], resolved: None }
70 95 18 00 
# :inline_RpnCalc_run_getchar_39_getchar_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }"] }
# inline_RpnCalc_run_getchar_39_getchar_while_body_1
# Some(inline_RpnCalc_run_getchar_39_t861f) <= call io_ready_to_read()
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Call(Call { function: \"io_ready_to_read\", parameters: [] })", "Call(Call { function: \"io_ready_to_read\", parameters: [] })"] }
# 01798 Instruction { source: "ReadyToRead", opcode: IoReadyToRead, args: [Register(0x7c)], resolved: None }
79 7c 
# inline_RpnCalc_run_getchar_39_tf0b5 <- inline_RpnCalc_run_getchar_39_t861f BitwiseAnd Number(0n1/0x01u8)
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))"] }
# 0179a Instruction { source: "inline_RpnCalc_run_getchar_39_tf0b5 <- inline_RpnCalc_run_getchar_39_t861f BitwiseAnd Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 0179d Instruction { source: "inline_RpnCalc_run_getchar_39_tf0b5 <- inline_RpnCalc_run_getchar_39_t861f BitwiseAnd Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\"] }", opcode: And8, args: [Register(0x7c), Register(0x00), Register(0x7c)], resolved: None }
1b 7c 00 7c 
# inline_RpnCalc_run_getchar_39_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 017a1 Instruction { source: "inline_RpnCalc_run_getchar_39_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x88), Constant8(0x00=0)], resolved: None }
04 88 00 
# if inline_RpnCalc_run_getchar_39_tf0b5 != inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }"] }
# 017a4 Instruction { source: "if inline_RpnCalc_run_getchar_39_tf0b5 != inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x7c), Register(0x88)], resolved: None }
15 7c 88 
# 017a7 Instruction { source: "if inline_RpnCalc_run_getchar_39_tf0b5 != inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_RpnCalc_run_getchar_39_getchar_if_else_0_5)], resolved: None }
72 fa 17 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_run_getchar_39_tf0b5 != inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_getchar_if_true_0_4)], resolved: None }
# :inline_RpnCalc_run_getchar_39_getchar_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }"] }
# inline_RpnCalc_run_getchar_39_getchar_if_true_0_4
# inline_RpnCalc_run_getchar_39_t0 <- 0n987228/0x000f105cu32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))"] }
# 017ab Instruction { source: "inline_RpnCalc_run_getchar_39_t0 <- 0n987228/0x000f105cu32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\", \"AddressOf(Ident(\\\"stdin\\\"))\", \"AddressOf(Ident(\\\"stdin\\\"))\"] }", opcode: LoadImm32, args: [Register(0x80), Constant32(0x000f105c=987228)], resolved: None }
20 80 5c 10 0f 00 
# inline_RpnCalc_run_getchar_39_tfff6 <- inline_RpnCalc_run_getchar_39_t0 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))"] }
# 017b1 Instruction { source: "inline_RpnCalc_run_getchar_39_tfff6 <- inline_RpnCalc_run_getchar_39_t0 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\", \"AddressOf(Ident(\\\"stdin\\\"))\", \"AddressOf(Ident(\\\"stdin\\\"))\"] }", opcode: Copy32, args: [Register(0x80), Register(0x84)], resolved: None }
21 80 84 
# inline_RpnCalc_run_getchar_39_tb816 <- ttyin
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "TtyIn", "TtyIn"] }
# 017b4 Instruction { source: "inline_RpnCalc_run_getchar_39_tb816 <- ttyin\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\", \"TtyIn\", \"TtyIn\"] }", opcode: In0, args: [Register(0x7c)], resolved: None }
60 7c 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- inline_RpnCalc_run_getchar_39_tfff6 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- inline_RpnCalc_run_getchar_39_tfff6 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\"] }", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n <- inline_RpnCalc_run_getchar_39_tb816 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n <- inline_RpnCalc_run_getchar_39_tb816 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\"] }", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t565a <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t565a <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_values <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t565a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 017b6 Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_values <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t565a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x84), Register(0x8c)], resolved: None }
21 84 8c 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t1d36 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t1d36 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x8c), Register(0x8c)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 017b9 Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: Copy32, args: [Register(0x84), Register(0x9c)], resolved: None }
21 84 9c 
# 017bc Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x9c), Constant32(0x00000104=260)], resolved: None }
32 9c 04 01 00 00 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")"] }
# 017c2 Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\"] }", opcode: Load8, args: [Register(0x9c), Register(0x98)], resolved: None }
05 9c 98 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }"] }
# 017c5 Instruction { source: "Zero-pad for inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: LoadImm32, args: [Register(0x94), Constant32(0x00000000=0)], resolved: None }
20 94 00 00 00 00 
# 017cb Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: Copy8, args: [Register(0x98), Register(0x94)], resolved: None }
0b 98 94 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t1d36 Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7)
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })"] }
# 017ce Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t1d36 Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 017cf Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t1d36 Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0x8c), Register(0x94), Register(0x8c)], resolved: None }
30 8c 94 8c 
# 017d3 Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t1d36 Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t531d <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t531d <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t531d U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }"] }
# 017d4 Instruction { source: "mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t531d U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store8, args: [Register(0x7c), Register(0x8c)], resolved: None }
06 7c 8c 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 017d7 Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: Copy32, args: [Register(0x84), Register(0x9c)], resolved: None }
21 84 9c 
# 017da Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x9c), Constant32(0x00000104=260)], resolved: None }
32 9c 04 01 00 00 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 017e0 Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: Copy32, args: [Register(0x84), Register(0x9c)], resolved: None }
21 84 9c 
# 017e3 Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x9c), Constant32(0x00000104=260)], resolved: None }
32 9c 04 01 00 00 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")"] }
# 017e9 Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\"] }", opcode: Load8, args: [Register(0x9c), Register(0x98)], resolved: None }
05 9c 98 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t6778 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))"] }
# 017ec Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t6778 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 017ef Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t6778 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x98), Register(0x00), Register(0x7c)], resolved: None }
14 98 00 7c 
# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t6778 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }"] }
# 017f3 Instruction { source: "mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t6778 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\"] }", opcode: Store8, args: [Register(0x7c), Register(0x9c)], resolved: None }
06 7c 9c 
# goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push)], resolved: None }
# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push
# goto inline_RpnCalc_run_getchar_39_getchar_if_end_3
# 	SourceContext { contexts: [] }
# 017f6 Instruction { source: "goto inline_RpnCalc_run_getchar_39_getchar_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_getchar_if_end_3)], resolved: None }
70 10 18 00 
# :inline_RpnCalc_run_getchar_39_getchar_if_else_0_5
# 	SourceContext { contexts: [] }
# inline_RpnCalc_run_getchar_39_getchar_if_else_0_5
# None <= call Keyboard_poll()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }", "Call(Call { function: \"Keyboard_poll\", parameters: [] })", "Call(Call { function: \"Keyboard_poll\", parameters: [] })"] }
# Registers used by this function: {120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 156, 157, 158, 159, 160}
# Registers used by callee tree: {24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57}
# Registers to save: []
# 017fa Instruction { source: "PseudoCall(Label24(:Keyboard_poll))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 01800 Instruction { source: "PseudoCall(Label24(:Keyboard_poll))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 0a 18 00 00 
# 01806 Instruction { source: "PseudoCall(Label24(:Keyboard_poll))", opcode: JmpImm, args: [Label24(:Keyboard_poll)], resolved: None }
70 46 04 00 
# 0180a Instruction { source: "PseudoCall(Label24(:Keyboard_poll))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# :inline_RpnCalc_run_getchar_39_getchar_if_end_3
# 	SourceContext { contexts: [] }
# inline_RpnCalc_run_getchar_39_getchar_if_end_3
# inline_RpnCalc_run_getchar_39_t1 <- 0n987228/0x000f105cu32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))"] }
# 01810 Instruction { source: "inline_RpnCalc_run_getchar_39_t1 <- 0n987228/0x000f105cu32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\", \"AddressOf(Ident(\\\"stdin\\\"))\", \"AddressOf(Ident(\\\"stdin\\\"))\"] }", opcode: LoadImm32, args: [Register(0x80), Constant32(0x000f105c=987228)], resolved: None }
20 80 5c 10 0f 00 
# inline_RpnCalc_run_getchar_39_tfff6 <- inline_RpnCalc_run_getchar_39_t1 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))"] }
# 01816 Instruction { source: "inline_RpnCalc_run_getchar_39_tfff6 <- inline_RpnCalc_run_getchar_39_t1 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\", \"AddressOf(Ident(\\\"stdin\\\"))\", \"AddressOf(Ident(\\\"stdin\\\"))\"] }", opcode: Copy32, args: [Register(0x80), Register(0x84)], resolved: None }
21 80 84 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- inline_RpnCalc_run_getchar_39_tfff6 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] })"] }
# 01819 Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- inline_RpnCalc_run_getchar_39_tfff6 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\"] }", opcode: Copy32, args: [Register(0x84), Register(0x80)], resolved: None }
21 84 80 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 0181c Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: Copy32, args: [Register(0x80), Register(0x94)], resolved: None }
21 80 94 
# 0181f Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x94), Constant32(0x00000100=256)], resolved: None }
32 94 00 01 00 00 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")"] }
# 01825 Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\"] }", opcode: Load8, args: [Register(0x94), Register(0x90)], resolved: None }
05 94 90 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32)
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 01828 Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: Copy32, args: [Register(0x80), Register(0x84)], resolved: None }
21 80 84 
# 0182b Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x84), Constant32(0x00000104=260)], resolved: None }
32 84 04 01 00 00 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")"] }
# 01831 Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\"] }", opcode: Load8, args: [Register(0x84), Register(0x88)], resolved: None }
05 84 88 
# if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }"] }
# 01834 Instruction { source: "if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: Cmp8, args: [Register(0x90), Register(0x88)], resolved: None }
15 90 88 
# 01837 Instruction { source: "if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: JzImm, args: [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1)], resolved: None }
72 3f 18 00 
# 0183b Instruction { source: "if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2)], resolved: None }
70 4a 18 00 
# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }"] }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0183f Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x7c), Constant8(0x00=0)], resolved: None }
04 7c 00 
# inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb36e U8
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb36e U8\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 01842 Instruction { source: "goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop)], resolved: None }
70 91 18 00 
# goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0
# 	SourceContext { contexts: [] }
# 01846 Instruction { source: "goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0)], resolved: None }
70 4a 18 00 
# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2
# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0
# 	SourceContext { contexts: [] }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t565a <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t565a <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_values <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t565a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 0184a Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_values <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t565a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x80), Register(0x84)], resolved: None }
21 80 84 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t1d36 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_values U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t1d36 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_values U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 0184d Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: Copy32, args: [Register(0x80), Register(0x94)], resolved: None }
21 80 94 
# 01850 Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x94), Constant32(0x00000100=256)], resolved: None }
32 94 00 01 00 00 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")"] }
# 01856 Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\"] }", opcode: Load8, args: [Register(0x94), Register(0x90)], resolved: None }
05 94 90 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }"] }
# 01859 Instruction { source: "Zero-pad for inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\"] }", opcode: LoadImm32, args: [Register(0x8c), Constant32(0x00000000=0)], resolved: None }
20 8c 00 00 00 00 
# 0185f Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\"] }", opcode: Copy8, args: [Register(0x90), Register(0x8c)], resolved: None }
0b 90 8c 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t1d36 Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469)
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })"] }
# 01862 Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t1d36 Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01863 Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t1d36 Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0x84), Register(0x8c), Register(0x84)], resolved: None }
30 84 8c 84 
# 01867 Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t1d36 Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))"] }
# 01868 Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\"] }", opcode: Load8, args: [Register(0x84), Register(0x88)], resolved: None }
05 84 88 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 0186b Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: Copy32, args: [Register(0x80), Register(0x94)], resolved: None }
21 80 94 
# 0186e Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x94), Constant32(0x00000100=256)], resolved: None }
32 94 00 01 00 00 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 01874 Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: Copy32, args: [Register(0x80), Register(0x94)], resolved: None }
21 80 94 
# 01877 Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x94), Constant32(0x00000100=256)], resolved: None }
32 94 00 01 00 00 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")"] }
# 0187d Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\"] }", opcode: Load8, args: [Register(0x94), Register(0x90)], resolved: None }
05 94 90 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t6fdb <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))"] }
# 01880 Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t6fdb <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 01883 Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t6fdb <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x90), Register(0x00), Register(0x7c)], resolved: None }
14 90 00 7c 
# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t6fdb U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }"] }
# 01887 Instruction { source: "mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t6fdb U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\"] }", opcode: Store8, args: [Register(0x7c), Register(0x94)], resolved: None }
06 7c 94 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"value\")) }", "Ident(\"value\")", "Ident(\"value\")"] }
# 0188a Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"value\\\")) }\", \"Ident(\\\"value\\\")\", \"Ident(\\\"value\\\")\"] }", opcode: Copy8, args: [Register(0x88), Register(0x7c)], resolved: None }
0b 88 7c 
# inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"value\")) }"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"value\\\")) }\"] }", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"value\")) }"] }
# 0188d Instruction { source: "goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"value\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop)], resolved: None }
70 91 18 00 
# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop
# 	SourceContext { contexts: [] }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop
# goto inline_RpnCalc_run_getchar_39_getchar_while_predicate_0
# 	SourceContext { contexts: [] }
# 01891 Instruction { source: "goto inline_RpnCalc_run_getchar_39_getchar_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_getchar_while_predicate_0)], resolved: None }
70 8a 17 00 
# :inline_RpnCalc_run_getchar_39_getchar_while_end_2
# 	SourceContext { contexts: [] }
# inline_RpnCalc_run_getchar_39_getchar_while_end_2
# inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"ch\")) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"ch\\\")) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# ch <- inline_RpnCalc_run_getchar_39_tdcd9 U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"ch\")) }"] }
# optimized away noop copy Instruction { source: "ch <- inline_RpnCalc_run_getchar_39_tdcd9 U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"ch\\\")) }\"] }", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# goto inline_RpnCalc_run_getchar_39_function_end_getchar
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"ch\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_run_getchar_39_function_end_getchar\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"ch\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_function_end_getchar)], resolved: None }
# :inline_RpnCalc_run_getchar_39_function_end_getchar
# 	SourceContext { contexts: [] }
# inline_RpnCalc_run_getchar_39_function_end_getchar
# td337 <- calc U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }", "Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] })", "Ident(\"calc\")", "Ident(\"calc\")"] }
# optimized away noop copy Instruction { source: "td337 <- calc U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\", \"Ident(\\\"calc\\\")\", \"Ident(\\\"calc\\\")\"] }", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }", "Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] })", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# Some(result) <= call RpnCalc_handle(td337,tdcd9,)
# 	SourceContext { contexts: ["Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }", "Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] })"] }
# 01895 Instruction { source: "Arg0[c]=td337 Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Copy32, args: [Register(0x78), Register(0x00)], resolved: None }
21 78 00 
# 01898 Instruction { source: "Arg1[ch]=tdcd9 Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Copy8, args: [Register(0x7c), Register(0x04)], resolved: None }
0b 7c 04 
# Registers used by this function: {120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 156, 157, 158, 159, 160}
# Registers used by callee tree: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 156, 160]
# 0189b Instruction { source: "Saving reg0xa0 before Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0xa0)], resolved: None }
09 a0 
# 0189d Instruction { source: "Saving reg0x9c before Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x9c)], resolved: None }
09 9c 
# 0189f Instruction { source: "Saving reg0x98 before Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x98)], resolved: None }
09 98 
# 018a1 Instruction { source: "Saving reg0x97 before Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x97)], resolved: None }
09 97 
# 018a3 Instruction { source: "Saving reg0x96 before Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x96)], resolved: None }
09 96 
# 018a5 Instruction { source: "Saving reg0x95 before Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x95)], resolved: None }
09 95 
# 018a7 Instruction { source: "Saving reg0x94 before Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x94)], resolved: None }
09 94 
# 018a9 Instruction { source: "Saving reg0x90 before Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x90)], resolved: None }
09 90 
# 018ab Instruction { source: "Saving reg0x8f before Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x8f)], resolved: None }
09 8f 
# 018ad Instruction { source: "Saving reg0x8e before Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x8e)], resolved: None }
09 8e 
# 018af Instruction { source: "Saving reg0x8d before Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x8d)], resolved: None }
09 8d 
# 018b1 Instruction { source: "Saving reg0x8c before Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x8c)], resolved: None }
09 8c 
# 018b3 Instruction { source: "Saving reg0x88 before Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x88)], resolved: None }
09 88 
# 018b5 Instruction { source: "Saving reg0x87 before Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x87)], resolved: None }
09 87 
# 018b7 Instruction { source: "Saving reg0x86 before Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x86)], resolved: None }
09 86 
# 018b9 Instruction { source: "Saving reg0x85 before Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x85)], resolved: None }
09 85 
# 018bb Instruction { source: "Saving reg0x84 before Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x84)], resolved: None }
09 84 
# 018bd Instruction { source: "Saving reg0x83 before Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x83)], resolved: None }
09 83 
# 018bf Instruction { source: "Saving reg0x82 before Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x82)], resolved: None }
09 82 
# 018c1 Instruction { source: "Saving reg0x81 before Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x81)], resolved: None }
09 81 
# 018c3 Instruction { source: "Saving reg0x80 before Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x80)], resolved: None }
09 80 
# 018c5 Instruction { source: "Saving reg0x7c before Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x7c)], resolved: None }
09 7c 
# 018c7 Instruction { source: "Saving reg0x7b before Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x7b)], resolved: None }
09 7b 
# 018c9 Instruction { source: "Saving reg0x7a before Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x7a)], resolved: None }
09 7a 
# 018cb Instruction { source: "Saving reg0x79 before Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x79)], resolved: None }
09 79 
# 018cd Instruction { source: "Saving reg0x78 before Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x78)], resolved: None }
09 78 
# 018cf Instruction { source: "PseudoCall(Label24(:RpnCalc_handle))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 018d5 Instruction { source: "PseudoCall(Label24(:RpnCalc_handle))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c df 18 00 00 
# 018db Instruction { source: "PseudoCall(Label24(:RpnCalc_handle))", opcode: JmpImm, args: [Label24(:RpnCalc_handle)], resolved: None }
70 b4 05 00 
# 018df Instruction { source: "PseudoCall(Label24(:RpnCalc_handle))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 018e5 Instruction { source: "Restoring reg0x78 after Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x78)], resolved: None }
0a 78 
# 018e7 Instruction { source: "Restoring reg0x79 after Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x79)], resolved: None }
0a 79 
# 018e9 Instruction { source: "Restoring reg0x7a after Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x7a)], resolved: None }
0a 7a 
# 018eb Instruction { source: "Restoring reg0x7b after Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x7b)], resolved: None }
0a 7b 
# 018ed Instruction { source: "Restoring reg0x7c after Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x7c)], resolved: None }
0a 7c 
# 018ef Instruction { source: "Restoring reg0x80 after Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x80)], resolved: None }
0a 80 
# 018f1 Instruction { source: "Restoring reg0x81 after Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x81)], resolved: None }
0a 81 
# 018f3 Instruction { source: "Restoring reg0x82 after Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x82)], resolved: None }
0a 82 
# 018f5 Instruction { source: "Restoring reg0x83 after Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x83)], resolved: None }
0a 83 
# 018f7 Instruction { source: "Restoring reg0x84 after Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x84)], resolved: None }
0a 84 
# 018f9 Instruction { source: "Restoring reg0x85 after Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x85)], resolved: None }
0a 85 
# 018fb Instruction { source: "Restoring reg0x86 after Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x86)], resolved: None }
0a 86 
# 018fd Instruction { source: "Restoring reg0x87 after Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x87)], resolved: None }
0a 87 
# 018ff Instruction { source: "Restoring reg0x88 after Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x88)], resolved: None }
0a 88 
# 01901 Instruction { source: "Restoring reg0x8c after Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x8c)], resolved: None }
0a 8c 
# 01903 Instruction { source: "Restoring reg0x8d after Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x8d)], resolved: None }
0a 8d 
# 01905 Instruction { source: "Restoring reg0x8e after Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x8e)], resolved: None }
0a 8e 
# 01907 Instruction { source: "Restoring reg0x8f after Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x8f)], resolved: None }
0a 8f 
# 01909 Instruction { source: "Restoring reg0x90 after Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x90)], resolved: None }
0a 90 
# 0190b Instruction { source: "Restoring reg0x94 after Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x94)], resolved: None }
0a 94 
# 0190d Instruction { source: "Restoring reg0x95 after Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x95)], resolved: None }
0a 95 
# 0190f Instruction { source: "Restoring reg0x96 after Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x96)], resolved: None }
0a 96 
# 01911 Instruction { source: "Restoring reg0x97 after Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x97)], resolved: None }
0a 97 
# 01913 Instruction { source: "Restoring reg0x98 after Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x98)], resolved: None }
0a 98 
# 01915 Instruction { source: "Restoring reg0x9c after Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x9c)], resolved: None }
0a 9c 
# 01917 Instruction { source: "Restoring reg0xa0 after Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0xa0)], resolved: None }
0a a0 
# 01919 Instruction { source: "Some(result) <= call RpnCalc_handle(td337,tdcd9,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Copy8, args: [Register(0x00), Register(0x7c)], resolved: None }
0b 00 7c 
# t57fd <- result U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }", "Ident(\"result\")", "Ident(\"result\")"] }
# optimized away noop copy Instruction { source: "t57fd <- result U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }\", \"Ident(\\\"result\\\")\", \"Ident(\\\"result\\\")\"] }", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0191c Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x88), Constant8(0x00=0)], resolved: None }
04 88 00 
# if t57fd == tb36e then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }"] }
# 0191f Instruction { source: "if t57fd == tb36e then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x7c), Register(0x88)], resolved: None }
15 7c 88 
# 01922 Instruction { source: "if t57fd == tb36e then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_run_if_true_0_4)], resolved: None }
72 2a 19 00 
# 01926 Instruction { source: "if t57fd == tb36e then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_run_if_else_0_5)], resolved: None }
70 36 19 00 
# :RpnCalc_run_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }"] }
# RpnCalc_run_if_true_0_4
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0192a Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x88), Constant8(0x00=0)], resolved: None }
04 88 00 
# return Some(tb36e)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 0192d Instruction { source: "return Some(tb36e)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x88), Register(0x00)], resolved: None }
0b 88 00 
# 01930 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto RpnCalc_run_if_end_3
# 	SourceContext { contexts: [] }
# 01932 Instruction { source: "goto RpnCalc_run_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_run_if_end_3)], resolved: None }
70 36 19 00 
# :RpnCalc_run_if_else_0_5
# 	SourceContext { contexts: [] }
# RpnCalc_run_if_else_0_5
# :RpnCalc_run_if_end_3
# 	SourceContext { contexts: [] }
# RpnCalc_run_if_end_3
# goto RpnCalc_run_while_predicate_0
# 	SourceContext { contexts: [] }
# 01936 Instruction { source: "goto RpnCalc_run_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_run_while_predicate_0)], resolved: None }
70 76 17 00 
# :RpnCalc_run_while_end_2
# 	SourceContext { contexts: [] }
# RpnCalc_run_while_end_2
# :function_end_RpnCalc_run
# 	SourceContext { contexts: [] }
# function_end_RpnCalc_run
# Unreachable
# 	SourceContext { contexts: [] }
# 0193a Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :delay
# Ret None
# Arg0=x
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([164, 165, 166, 167])
# Var tad57 (tad57 Ident("x")) Reg(U32) Some([168, 169, 170, 171])
# Var x (Arg0 x Number(USIZE)) Reg(U32) Some([168, 169, 170, 171])
# 0193f Instruction { source: "Save function parameter 'x' registers [0, 1, 2, 3] to locals [168, 169, 170, 171].", opcode: Copy32, args: [Register(0x00), Register(0xa8)], resolved: None }
21 00 a8 
# :delay_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }] }"] }
# delay_while_predicate_0
# tad57 <- x U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "tad57 <- x U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# t60ec <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 01942 Instruction { source: "t60ec <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0xa4), Constant32(0x00000000=0)], resolved: None }
20 a4 00 00 00 00 
# if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }"] }
# 01948 Instruction { source: "if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8, args: [Register(0xab), Register(0xa7)], resolved: None }
15 ab a7 
# 0194b Instruction { source: "if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0xaa), Register(0xa6)], resolved: None }
16 aa a6 
# 0194e Instruction { source: "if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0xa9), Register(0xa5)], resolved: None }
16 a9 a5 
# 01951 Instruction { source: "if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0xa8), Register(0xa4)], resolved: None }
16 a8 a4 
# 01954 Instruction { source: "if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }\"] }", opcode: JzImm, args: [Label24(delay_while_end_2)], resolved: None }
72 62 19 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }\"] }", opcode: JmpImm, args: [Label24(delay_while_body_1)], resolved: None }
# :delay_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }] }"] }
# delay_while_body_1
# tad57 <- x U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1))", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "tad57 <- x U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1))\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# x <- tad57 Subtract Number(0n1/0x00000001u32)
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1))"] }
# 01958 Instruction { source: "x <- tad57 Subtract Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0xa8), Constant32(0xffffffff=4294967295)], resolved: None }
32 a8 ff ff ff ff 
# goto delay_while_predicate_0
# 	SourceContext { contexts: [] }
# 0195e Instruction { source: "goto delay_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(delay_while_predicate_0)], resolved: None }
70 42 19 00 
# :delay_while_end_2
# 	SourceContext { contexts: [] }
# delay_while_end_2
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 01962 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_delay
# 	SourceContext { contexts: [] }
# function_end_delay
# Unreachable
# 	SourceContext { contexts: [] }
# 01964 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :div32
# Ret Some(U32)
# Arg0=a
# Arg1=b
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var a (Arg0 a Number(USIZE)) Reg(U32) Some([172, 173, 174, 175])
# Var b (Arg1 b Number(USIZE)) Reg(U32) Some([176, 177, 178, 179])
# Var hi (Local hi Number(USIZE) Reg(U32)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_div32_div16_43_a (Arg0 a Number(USIZE)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_b (Arg1 b Number(USIZE)) Reg(U32) Some([176, 177, 178, 179])
# Var inline_div32_div16_43_hi (Local hi Number(USIZE) Reg(U32)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_div32_div16_43_inline_div16_mul16_32_4_a (Arg0 a Number(USIZE)) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_b (Arg1 b Number(USIZE)) Reg(U32) Some([188, 189, 190, 191])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([192, 193, 194, 195])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([196, 197, 198, 199])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([196, 197, 198, 199])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([200])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([200])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t3585 (t3585 Ident("e")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 (t45f5 Ident("d")) Reg(U32) Some([188, 189, 190, 191])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([201])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t8792 (t8792 Ident("a")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tac13 (tac13 Ident("c")) Reg(U32) Some([192, 193, 194, 195])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([200])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tace9 (tace9 Ident("b")) Reg(U32) Some([188, 189, 190, 191])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([203])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([200])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([196, 197, 198, 199])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([201])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([196, 197, 198, 199])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([204, 205, 206, 207])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_div32_div16_43_inline_div16_shiftright1_42_a (Arg0 a Number(USIZE)) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([200])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t1bbf (t1bbf Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t1f15 (t1f15 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t350e (t350e Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t4d1a (t4d1a Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t5a19 (t5a19 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t5a73 (t5a73 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([200])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t8384 (t8384 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t8792 (t8792 Ident("a")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t887d (t887d Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t9144 (t9144 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_ta431 (ta431 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_taa3e (taa3e Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tb911 (tb911 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tc29b (tc29b Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) Reg(U8) Some([208])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([208])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tf572 (tf572 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))) Reg(U8) Some([202])
# Var inline_div32_div16_43_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_div32_div16_43_lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([212, 213, 214, 215])
# Var inline_div32_div16_43_mid (Local mid Number(USIZE) Reg(U32)) Reg(U32) Some([216, 217, 218, 219])
# Var inline_div32_div16_43_r (Local r Number(USIZE) Reg(U32)) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_t1506 (t1506 Ident("lo")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_t3c0e (t3c0e Index("b", Number(U8, 0))) Reg(U8) Some([220])
# Var inline_div32_div16_43_t5508 (t5508 Ident("hi")) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_t8792 (t8792 Ident("a")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_t9c15 (t9c15 Number(USIZE, 256)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_tace9 (tace9 Ident("b")) Reg(U32) Some([176, 177, 178, 179])
# Var inline_div32_div16_43_tad57 (tad57 Ident("x")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_taee0 (taee0 Ident("r")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_tb0a8 (tb0a8 Index("x", Number(U8, 2))) Reg(U8) Some([200])
# Var inline_div32_div16_43_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([202])
# Var inline_div32_div16_43_tda9f (tda9f Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))) Reg(U8) Some([220])
# Var inline_div32_div16_43_tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([221])
# Var inline_div32_div16_43_te264 (te264 Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_tf1d1 (tf1d1 Arithmetic(Add, Ident("lo"), Ident("hi"))) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_tf944 (tf944 Index("x", Number(U8, 3))) Reg(U8) Some([200])
# Var inline_div32_div16_43_tfd7e (tfd7e Ident("mid")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_x (Local x Number(USIZE) Reg(U32)) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_shiftright1_44_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_div32_shiftright1_44_a (Arg0 a Number(USIZE)) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_shiftright1_44_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_div32_shiftright1_44_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([200])
# Var inline_div32_shiftright1_44_t1bbf (t1bbf Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_44_t1f15 (t1f15 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_44_t350e (t350e Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_44_t4d1a (t4d1a Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_44_t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_44_t5a19 (t5a19 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_44_t5a73 (t5a73 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_44_t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([200])
# Var inline_div32_shiftright1_44_t8384 (t8384 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_44_t8792 (t8792 Ident("a")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_shiftright1_44_t887d (t887d Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_44_t9144 (t9144 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_44_ta431 (ta431 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_44_taa3e (taa3e Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_44_tb911 (tb911 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_44_tc29b (tc29b Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) Reg(U8) Some([208])
# Var inline_div32_shiftright1_44_tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([208])
# Var inline_div32_shiftright1_44_tf572 (tf572 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_div32_shiftright1_45_a (Arg0 a Number(USIZE)) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_shiftright1_45_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_div32_shiftright1_45_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([200])
# Var inline_div32_shiftright1_45_t1bbf (t1bbf Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_t1f15 (t1f15 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_t350e (t350e Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_t4d1a (t4d1a Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_t5a19 (t5a19 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_t5a73 (t5a73 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([200])
# Var inline_div32_shiftright1_45_t8384 (t8384 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_t8792 (t8792 Ident("a")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_shiftright1_45_t887d (t887d Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_t9144 (t9144 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_ta431 (ta431 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_taa3e (taa3e Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_tb911 (tb911 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_tc29b (tc29b Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) Reg(U8) Some([208])
# Var inline_div32_shiftright1_45_tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([208])
# Var inline_div32_shiftright1_45_tf572 (tf572 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))) Reg(U8) Some([202])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([196, 197, 198, 199])
# Var mid (Local mid Number(USIZE) Reg(U32)) Reg(U32) Some([184, 185, 186, 187])
# Var r (Local r Number(USIZE) Reg(U32)) Reg(U32) Some([188, 189, 190, 191])
# Var t0 (Stack size negated) Reg(U32) Some([224, 225, 226, 227])
# Var t1506 (t1506 Ident("lo")) Reg(U32) Some([184, 185, 186, 187])
# Var t1a85 (t1a85 Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })) Reg(U8) Some([228])
# Var t3803 (t3803 Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) Reg(U32) Some([184, 185, 186, 187])
# Var t3f2a (t3f2a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }) Reg(U32) Some([188, 189, 190, 191])
# Var t4917 (t4917 Number(USIZE, 65536)) Reg(U32) Some([180, 181, 182, 183])
# Var t4a94 (t4a94 Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))) Reg(U32) Some([188, 189, 190, 191])
# Var t5508 (t5508 Ident("hi")) Reg(U32) Some([180, 181, 182, 183])
# Var t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([188, 189, 190, 191])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([172, 173, 174, 175])
# Var t9599 (t9599 Call(Call { function: "shiftright1", parameters: [Ident("lo")] })) Reg(U32) Some([204, 205, 206, 207])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([176, 177, 178, 179])
# Var tad57 (tad57 Ident("x")) Reg(U32) Some([188, 189, 190, 191])
# Var taee0 (taee0 Ident("r")) Reg(U32) Some([188, 189, 190, 191])
# Var tb608 (tb608 AddressOf(Ident("x64"))) Reg(U32) Some([188, 189, 190, 191])
# Var tb973 (tb973 LocalFieldDeref("x64", "hi")) Reg(U32) Some([192, 193, 194, 195])
# Var te546 (te546 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }) Reg(U32) Some([224, 225, 226, 227])
# Var te81f (te81f Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) Reg(U32) Some([172, 173, 174, 175])
# Var te825 (te825 Ident("__frame_pointer")) Reg(U32) Some([224, 225, 226, 227])
# Var tfd7e (tfd7e Ident("mid")) Reg(U32) Some([184, 185, 186, 187])
# Var x (Local x Number(USIZE) Reg(U32)) Reg(U32) Some([188, 189, 190, 191])
# Var x64 (Local x64 Struct("U64") FrameOffset(0)) FrameOffset(0) None
# 01969 Instruction { source: "reserve 8 bytes of stack space for locals", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffff8=4294967288)], resolved: None }
32 0c f8 ff ff ff 
# 0196f Instruction { source: "Save function parameter 'a' registers [0, 1, 2, 3] to locals [172, 173, 174, 175].", opcode: Copy32, args: [Register(0x00), Register(0xac)], resolved: None }
21 00 ac 
# 01972 Instruction { source: "Save function parameter 'b' registers [4, 5, 6, 7] to locals [176, 177, 178, 179].", opcode: Copy32, args: [Register(0x04), Register(0xb0)], resolved: None }
21 04 b0 
# __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32)
# 	SourceContext { contexts: [] }
# 01975 Instruction { source: "__frame_pointer <- __frame_pointer Add Number(0xfffffff8u32)\n\tSourceContext { contexts: [] }", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffff8=4294967288)], resolved: None }
32 0c f8 ff ff ff 
# t8792 <- a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t8792 <- a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# tace9 <- b U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "tace9 <- b U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }"] }
# 0197b Instruction { source: "if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8, args: [Register(0xb3), Register(0xaf)], resolved: None }
15 b3 af 
# 0197e Instruction { source: "if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb2), Register(0xae)], resolved: None }
16 b2 ae 
# 01981 Instruction { source: "if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb1), Register(0xad)], resolved: None }
16 b1 ad 
# 01984 Instruction { source: "if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb0), Register(0xac)], resolved: None }
16 b0 ac 
# 01987 Instruction { source: "if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JcImm, args: [Label24(div32_if_else_0_2)], resolved: None }
71 a6 19 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JmpImm, args: [Label24(div32_if_true_0_1)], resolved: None }
# :div32_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }"] }
# div32_if_true_0_1
# t60ec <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 0198b Instruction { source: "t60ec <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0xbc), Constant32(0x00000000=0)], resolved: None }
20 bc 00 00 00 00 
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32)
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }"] }
# 01991 Instruction { source: "__frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32)\n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# return Some(t60ec)
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }"] }
# 01997 Instruction { source: "return Some(t60ec)\n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\"] }", opcode: Copy32, args: [Register(0xbc), Register(0x00)], resolved: None }
21 bc 00 
# 0199a Instruction { source: "Dealloc 8 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# 019a0 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto div32_if_end_0
# 	SourceContext { contexts: [] }
# 019a2 Instruction { source: "goto div32_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_if_end_0)], resolved: None }
70 a6 19 00 
# :div32_if_else_0_2
# 	SourceContext { contexts: [] }
# div32_if_else_0_2
# :div32_if_end_0
# 	SourceContext { contexts: [] }
# div32_if_end_0
# t8792 <- a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t8792 <- a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# t4917 <- 0n65536/0x00010000u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }", "Number(USIZE, 65536)", "Number(USIZE, 65536)"] }
# 019a6 Instruction { source: "t4917 <- 0n65536/0x00010000u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\", \"Number(USIZE, 65536)\", \"Number(USIZE, 65536)\"] }", opcode: LoadImm32, args: [Register(0xb4), Constant32(0x00010000=65536)], resolved: None }
20 b4 00 00 01 00 
# if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }"] }
# 019ac Instruction { source: "if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\"] }", opcode: Cmp8, args: [Register(0xb7), Register(0xaf)], resolved: None }
15 b7 af 
# 019af Instruction { source: "if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\"] }", opcode: Cmp8IfZero, args: [Register(0xb6), Register(0xae)], resolved: None }
16 b6 ae 
# 019b2 Instruction { source: "if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\"] }", opcode: Cmp8IfZero, args: [Register(0xb5), Register(0xad)], resolved: None }
16 b5 ad 
# 019b5 Instruction { source: "if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\"] }", opcode: Cmp8IfZero, args: [Register(0xb4), Register(0xac)], resolved: None }
16 b4 ac 
# 019b8 Instruction { source: "if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\"] }", opcode: JcImm, args: [Label24(div32_if_else_0_5)], resolved: None }
71 70 1c 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\"] }", opcode: JmpImm, args: [Label24(div32_if_true_0_4)], resolved: None }
# :div32_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }"] }
# div32_if_true_0_4
# t8792 <- a U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t8792 <- a U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# tace9 <- b U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "tace9 <- b U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_div32_div16_43_a <- t8792 U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_a <- t8792 U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_43_b <- tace9 U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_b <- tace9 U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }"] }
# 019bc Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8, args: [Register(0xb3), Register(0xaf)], resolved: None }
15 b3 af 
# 019bf Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb2), Register(0xae)], resolved: None }
16 b2 ae 
# 019c2 Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb1), Register(0xad)], resolved: None }
16 b1 ad 
# 019c5 Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb0), Register(0xac)], resolved: None }
16 b0 ac 
# 019c8 Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_43_div16_if_else_0_2)], resolved: None }
71 da 19 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_1)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }"] }
# inline_div32_div16_43_div16_if_true_0_1
# inline_div32_div16_43_t60ec <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 019cc Instruction { source: "inline_div32_div16_43_t60ec <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0xac), Constant32(0x00000000=0)], resolved: None }
20 ac 00 00 00 00 
# te81f <- inline_div32_div16_43_t60ec U32
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }"] }
# optimized away noop copy Instruction { source: "te81f <- inline_div32_div16_43_t60ec U32\n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# goto inline_div32_div16_43_function_end_div16
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }"] }
# 019d2 Instruction { source: "goto inline_div32_div16_43_function_end_div16\n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_43_function_end_div16)], resolved: None }
70 5b 1c 00 
# goto inline_div32_div16_43_div16_if_end_0
# 	SourceContext { contexts: [] }
# 019d6 Instruction { source: "goto inline_div32_div16_43_div16_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_end_0)], resolved: None }
70 da 19 00 
# :inline_div32_div16_43_div16_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_div32_div16_43_div16_if_else_0_2
# :inline_div32_div16_43_div16_if_end_0
# 	SourceContext { contexts: [] }
# inline_div32_div16_43_div16_if_end_0
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_43_t9c15 <- 0n256/0x00000100u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }", "Number(USIZE, 256)", "Number(USIZE, 256)"] }
# 019da Instruction { source: "inline_div32_div16_43_t9c15 <- 0n256/0x00000100u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\", \"Number(USIZE, 256)\", \"Number(USIZE, 256)\"] }", opcode: LoadImm32, args: [Register(0xb4), Constant32(0x00000100=256)], resolved: None }
20 b4 00 01 00 00 
# if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }"] }
# 019e0 Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8, args: [Register(0xb7), Register(0xaf)], resolved: None }
15 b7 af 
# 019e3 Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8IfZero, args: [Register(0xb6), Register(0xae)], resolved: None }
16 b6 ae 
# 019e6 Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8IfZero, args: [Register(0xb5), Register(0xad)], resolved: None }
16 b5 ad 
# 019e9 Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8IfZero, args: [Register(0xb4), Register(0xac)], resolved: None }
16 b4 ac 
# 019ec Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_43_div16_if_else_0_5)], resolved: None }
71 0b 1a 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_4)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }])], else_block: [] }"] }
# inline_div32_div16_43_div16_if_true_0_4
# inline_div32_div16_43_tdd9e <- inline_div32_div16_43_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0)))", "Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0)))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 019f0 Instruction { source: "inline_div32_div16_43_tdd9e <- inline_div32_div16_43_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0)))\", \"Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0)))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xac), Register(0xdd)], resolved: None }
0b ac dd 
# inline_div32_div16_43_t3c0e <- inline_div32_div16_43_b[0x00..0x01] U8
# 	SourceContext { contexts: ["Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0)))", "Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0)))", "Index(\"b\", Number(U8, 0))", "Index(\"b\", Number(U8, 0))"] }
# 019f3 Instruction { source: "inline_div32_div16_43_t3c0e <- inline_div32_div16_43_b[0x00..0x01] U8\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0)))\", \"Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0)))\", \"Index(\\\"b\\\", Number(U8, 0))\", \"Index(\\\"b\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xb0), Register(0xdc)], resolved: None }
0b b0 dc 
# inline_div32_div16_43_tda9f <- inline_div32_div16_43_tdd9e Divide Var(inline_div32_div16_43_t3c0e)
# 	SourceContext { contexts: ["Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0)))", "Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0)))"] }
# 019f6 Instruction { source: "inline_div32_div16_43_tda9f <- inline_div32_div16_43_tdd9e Divide Var(inline_div32_div16_43_t3c0e)\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0)))\", \"Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0)))\"] }", opcode: Divide8, args: [Register(0xdd), Register(0xdc), Register(0xdc)], resolved: None }
17 dd dc dc 
# inline_div32_div16_43_te264 U32 <- inline_div32_div16_43_tda9f U8
# 	SourceContext { contexts: ["Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }"] }
# 019fa Instruction { source: "Zero-pad for inline_div32_div16_43_te264 U32 <- inline_div32_div16_43_tda9f U8\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\"] }", opcode: LoadImm32, args: [Register(0xac), Constant32(0x00000000=0)], resolved: None }
20 ac 00 00 00 00 
# 01a00 Instruction { source: "inline_div32_div16_43_te264 U32 <- inline_div32_div16_43_tda9f U8\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\"] }", opcode: Copy8, args: [Register(0xdc), Register(0xac)], resolved: None }
0b dc ac 
# te81f <- inline_div32_div16_43_te264 U32
# 	SourceContext { contexts: ["Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }"] }
# optimized away noop copy Instruction { source: "te81f <- inline_div32_div16_43_te264 U32\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# goto inline_div32_div16_43_function_end_div16
# 	SourceContext { contexts: ["Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }"] }
# 01a03 Instruction { source: "goto inline_div32_div16_43_function_end_div16\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_43_function_end_div16)], resolved: None }
70 5b 1c 00 
# goto inline_div32_div16_43_div16_if_end_3
# 	SourceContext { contexts: [] }
# 01a07 Instruction { source: "goto inline_div32_div16_43_div16_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_end_3)], resolved: None }
70 0b 1a 00 
# :inline_div32_div16_43_div16_if_else_0_5
# 	SourceContext { contexts: [] }
# inline_div32_div16_43_div16_if_else_0_5
# :inline_div32_div16_43_div16_if_end_3
# 	SourceContext { contexts: [] }
# inline_div32_div16_43_div16_if_end_3
# inline_div32_div16_43_lo <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 01a0b Instruction { source: "inline_div32_div16_43_lo <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0xd4), Constant32(0x00000000=0)], resolved: None }
20 d4 00 00 00 00 
# inline_div32_div16_43_hi <- 0n65535/0x0000ffffu32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 65535) }", "Number(USIZE, 65535)"] }
# 01a11 Instruction { source: "inline_div32_div16_43_hi <- 0n65535/0x0000ffffu32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 65535) }\", \"Number(USIZE, 65535)\"] }", opcode: LoadImm32, args: [Register(0xb4), Constant32(0x0000ffff=65535)], resolved: None }
20 b4 ff ff 00 00 
# :inline_div32_div16_43_div16_while_predicate_6
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }"] }
# inline_div32_div16_43_div16_while_predicate_6
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 01a17 Instruction { source: "inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0xd4), Register(0xb8)], resolved: None }
21 d4 b8 
# inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }", "Ident(\"hi\")", "Ident(\"hi\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\", \"Ident(\\\"hi\\\")\", \"Ident(\\\"hi\\\")\"] }", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }"] }
# 01a1a Instruction { source: "if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8, args: [Register(0xb7), Register(0xbb)], resolved: None }
15 b7 bb 
# 01a1d Instruction { source: "if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb6), Register(0xba)], resolved: None }
16 b6 ba 
# 01a20 Instruction { source: "if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb5), Register(0xb9)], resolved: None }
16 b5 b9 
# 01a23 Instruction { source: "if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb4), Register(0xb8)], resolved: None }
16 b4 b8 
# 01a26 Instruction { source: "if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_43_div16_while_end_8)], resolved: None }
71 51 1c 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_while_body_7)], resolved: None }
# :inline_div32_div16_43_div16_while_body_7
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }"] }
# inline_div32_div16_43_div16_while_body_7
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }", "Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })", "Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))", "Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 01a2a Instruction { source: "inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] })\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0xd4), Register(0xb8)], resolved: None }
21 d4 b8 
# inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }", "Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })", "Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))", "Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))", "Ident(\"hi\")", "Ident(\"hi\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] })\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Ident(\\\"hi\\\")\", \"Ident(\\\"hi\\\")\"] }", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508)
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }", "Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })", "Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))", "Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))"] }
# 01a2d Instruction { source: "inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] })\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01a2e Instruction { source: "inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] })\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xb8), Register(0xb4), Register(0xb8)], resolved: None }
30 b8 b4 b8 
# 01a32 Instruction { source: "inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] })\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_div32_div16_43_inline_div16_shiftright1_42_a <- inline_div32_div16_43_tf1d1 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }", "Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_a <- inline_div32_div16_43_tf1d1 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] })\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 01a33 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xb8), Register(0xd0)], resolved: None }
0b b8 d0 
# inline_div32_div16_43_inline_div16_shiftright1_42_t5a19 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e RotateRight Number(0n1/0x01u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))"] }
# 01a36 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t5a19 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e RotateRight Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 01a39 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t5a19 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e RotateRight Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x00), Register(0xd0), Register(0xca)], resolved: None }
1e 04 00 d0 ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_t5a19 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }"] }
# 01a3e Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_t5a19 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xb8)], resolved: None }
0b ca b8 
# inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01a41 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xb9), Register(0xc8)], resolved: None }
0b b9 c8 
# inline_div32_div16_43_inline_div16_shiftright1_42_ta431 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 RotateRight Number(0n1/0x01u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))"] }
# 01a44 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_ta431 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 RotateRight Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 01a47 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_ta431 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 RotateRight Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x00), Register(0xc8), Register(0xca)], resolved: None }
1e 04 00 c8 ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_ta431 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }"] }
# 01a4c Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_ta431 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xb9)], resolved: None }
0b ca b9 
# inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01a4f Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xba), Register(0xca)], resolved: None }
0b ba ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_t350e <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f RotateRight Number(0n1/0x01u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))"] }
# 01a52 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t350e <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f RotateRight Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 01a55 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t350e <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f RotateRight Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x00), Register(0xca), Register(0xca)], resolved: None }
1e 04 00 ca ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t350e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }"] }
# 01a5a Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t350e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xba)], resolved: None }
0b ca ba 
# inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 01a5d Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xbb), Register(0xc8)], resolved: None }
0b bb c8 
# inline_div32_div16_43_inline_div16_shiftright1_42_taa3e <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c RotateRight Number(0n1/0x01u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))"] }
# 01a60 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_taa3e <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c RotateRight Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 01a63 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_taa3e <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c RotateRight Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x00), Register(0xc8), Register(0xca)], resolved: None }
1e 04 00 c8 ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_taa3e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }"] }
# 01a68 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_taa3e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xbb)], resolved: None }
0b ca bb 
# inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 01a6b Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xb8), Register(0xd0)], resolved: None }
0b b8 d0 
# inline_div32_div16_43_inline_div16_shiftright1_42_t9144 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e BitwiseAnd Number(0n127/0x7fu8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))"] }
# 01a6e Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t9144 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e BitwiseAnd Number(0n127/0x7fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x7f=127)], resolved: None }
04 00 7f 
# 01a71 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t9144 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e BitwiseAnd Number(0n127/0x7fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0xd0), Register(0x00), Register(0xca)], resolved: None }
1b d0 00 ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_t9144 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }"] }
# 01a75 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_t9144 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xb8)], resolved: None }
0b ca b8 
# inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 01a78 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xb8), Register(0xd0)], resolved: None }
0b b8 d0 
# inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01a7b Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xb9), Register(0xc8)], resolved: None }
0b b9 c8 
# inline_div32_div16_43_inline_div16_shiftright1_42_t8384 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseAnd Number(0n128/0x80u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))"] }
# 01a7e Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t8384 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseAnd Number(0n128/0x80u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x80=128)], resolved: None }
04 00 80 
# 01a81 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t8384 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseAnd Number(0n128/0x80u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0xc8), Register(0x00), Register(0xca)], resolved: None }
1b c8 00 ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_tf572 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t8384)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))"] }
# 01a85 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_tf572 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t8384)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0xd0), Register(0xca), Register(0xca)], resolved: None }
1c d0 ca ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tf572 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }"] }
# 01a89 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tf572 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xb8)], resolved: None }
0b ca b8 
# inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01a8c Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xb9), Register(0xc8)], resolved: None }
0b b9 c8 
# inline_div32_div16_43_inline_div16_shiftright1_42_t5a73 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseAnd Number(0n127/0x7fu8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))"] }
# 01a8f Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t5a73 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseAnd Number(0n127/0x7fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x7f=127)], resolved: None }
04 00 7f 
# 01a92 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t5a73 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseAnd Number(0n127/0x7fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0xc8), Register(0x00), Register(0xca)], resolved: None }
1b c8 00 ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t5a73 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }"] }
# 01a96 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t5a73 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xb9)], resolved: None }
0b ca b9 
# inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01a99 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xb9), Register(0xc8)], resolved: None }
0b b9 c8 
# inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01a9c Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xba), Register(0xca)], resolved: None }
0b ba ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_t1f15 <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseAnd Number(0n128/0x80u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))"] }
# 01a9f Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t1f15 <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseAnd Number(0n128/0x80u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x80=128)], resolved: None }
04 00 80 
# 01aa2 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t1f15 <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseAnd Number(0n128/0x80u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0xca), Register(0x00), Register(0xca)], resolved: None }
1b ca 00 ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_t4d1a <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t1f15)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))"] }
# 01aa6 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t4d1a <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t1f15)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0xc8), Register(0xca), Register(0xca)], resolved: None }
1c c8 ca ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t4d1a U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }"] }
# 01aaa Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t4d1a U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xb9)], resolved: None }
0b ca b9 
# inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01aad Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xba), Register(0xca)], resolved: None }
0b ba ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_t887d <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseAnd Number(0n127/0x7fu8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))"] }
# 01ab0 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t887d <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseAnd Number(0n127/0x7fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x7f=127)], resolved: None }
04 00 7f 
# 01ab3 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t887d <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseAnd Number(0n127/0x7fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0xca), Register(0x00), Register(0xca)], resolved: None }
1b ca 00 ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t887d U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }"] }
# 01ab7 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t887d U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xba)], resolved: None }
0b ca ba 
# inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01aba Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xba), Register(0xca)], resolved: None }
0b ba ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 01abd Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xbb), Register(0xc8)], resolved: None }
0b bb c8 
# inline_div32_div16_43_inline_div16_shiftright1_42_tc29b <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c BitwiseAnd Number(0n128/0x80u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))"] }
# 01ac0 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_tc29b <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c BitwiseAnd Number(0n128/0x80u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x80=128)], resolved: None }
04 00 80 
# 01ac3 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_tc29b <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c BitwiseAnd Number(0n128/0x80u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0xc8), Register(0x00), Register(0xd0)], resolved: None }
1b c8 00 d0 
# inline_div32_div16_43_inline_div16_shiftright1_42_t1bbf <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_tc29b)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))"] }
# 01ac7 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t1bbf <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_tc29b)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0xca), Register(0xd0), Register(0xca)], resolved: None }
1c ca d0 ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t1bbf U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }"] }
# 01acb Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t1bbf U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xba)], resolved: None }
0b ca ba 
# inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 01ace Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xbb), Register(0xc8)], resolved: None }
0b bb c8 
# inline_div32_div16_43_inline_div16_shiftright1_42_tb911 <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c BitwiseAnd Number(0n127/0x7fu8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))"] }
# 01ad1 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_tb911 <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c BitwiseAnd Number(0n127/0x7fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x7f=127)], resolved: None }
04 00 7f 
# 01ad4 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_tb911 <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c BitwiseAnd Number(0n127/0x7fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0xc8), Register(0x00), Register(0xca)], resolved: None }
1b c8 00 ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_tb911 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }"] }
# 01ad8 Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_tb911 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xbb)], resolved: None }
0b ca bb 
# inline_div32_div16_43_inline_div16_shiftright1_42_t8792 <- inline_div32_div16_43_inline_div16_shiftright1_42_a U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t8792 <- inline_div32_div16_43_inline_div16_shiftright1_42_a U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_43_mid <- inline_div32_div16_43_inline_div16_shiftright1_42_t8792 U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# 01adb Instruction { source: "inline_div32_div16_43_mid <- inline_div32_div16_43_inline_div16_shiftright1_42_t8792 U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xd8)], resolved: None }
21 b8 d8 
# goto inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1)], resolved: None }
# :inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1
# 	SourceContext { contexts: [] }
# inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 01ade Instruction { source: "inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0xd8), Register(0xb8)], resolved: None }
21 d8 b8 
# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_a <- inline_div32_div16_43_tfd7e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_a <- inline_div32_div16_43_tfd7e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_b <- inline_div32_div16_43_tace9 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })"] }
# 01ae1 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_b <- inline_div32_div16_43_tace9 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0xb0), Register(0xbc)], resolved: None }
21 b0 bc 
# inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9)
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 01ae4 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0xb8), Register(0xbc), Register(0xc0)], resolved: None }
11 b8 bc c0 
# 01ae8 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xc2), Constant8(0x00=0)], resolved: None }
04 c2 00 
# 01aeb Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xc3), Constant8(0x00=0)], resolved: None }
04 c3 00 
# inline_div32_div16_43_inline_div16_mul16_32_4_t1539 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01aee Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t1539 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xb9), Register(0xc8)], resolved: None }
0b b9 c8 
# inline_div32_div16_43_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t1539 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 01af1 Instruction { source: "Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xcc), Constant32(0x00000000=0)], resolved: None }
20 cc 00 00 00 00 
# 01af7 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xc8), Register(0xcc)], resolved: None }
0b c8 cc 
# inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 01afa Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xca)], resolved: None }
0b bd ca 
# inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 01afd Instruction { source: "Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xc4), Constant32(0x00000000=0)], resolved: None }
20 c4 00 00 00 00 
# 01b03 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xc4)], resolved: None }
0b ca c4 
# inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 01b06 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0xcc), Register(0xc4), Register(0xc4)], resolved: None }
11 cc c4 c4 
# 01b0a Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xc6), Constant8(0x00=0)], resolved: None }
04 c6 00 
# 01b0d Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xc7), Constant8(0x00=0)], resolved: None }
04 c7 00 
# inline_div32_div16_43_inline_div16_mul16_32_4_t5d8 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 01b10 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t5d8 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xc5), Register(0xc9)], resolved: None }
0b c5 c9 
# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t5d8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 01b13 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_f[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t5d8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xc9), Register(0xc7)], resolved: None }
0b c9 c7 
# inline_div32_div16_43_inline_div16_mul16_32_4_te25f <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 01b16 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_te25f <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xc4), Register(0xc9)], resolved: None }
0b c4 c9 
# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_te25f U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 01b19 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_f[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_te25f U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0xc9), Register(0xc6)], resolved: None }
0b c9 c6 
# inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01b1c Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xcb), Constant8(0x00=0)], resolved: None }
04 cb 00 
# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 01b1f Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xcb), Register(0xc5)], resolved: None }
0b cb c5 
# inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01b22 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xcb), Constant8(0x00=0)], resolved: None }
04 cb 00 
# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 01b25 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xcb), Register(0xc4)], resolved: None }
0b cb c4 
# inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xc0), Register(0xc0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 <- inline_div32_div16_43_inline_div16_mul16_32_4_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 <- inline_div32_div16_43_inline_div16_mul16_32_4_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0xc4), Register(0xc4)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4)
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 01b28 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01b29 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xc0), Register(0xc4), Register(0xc0)], resolved: None }
30 c0 c4 c0 
# 01b2d Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 01b2e Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xca)], resolved: None }
0b bd ca 
# inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 01b31 Instruction { source: "Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xc4), Constant32(0x00000000=0)], resolved: None }
20 c4 00 00 00 00 
# 01b37 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xc4)], resolved: None }
0b ca c4 
# inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 01b3a Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0xb8), Register(0xc4), Register(0xc4)], resolved: None }
11 b8 c4 c4 
# 01b3e Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xc6), Constant8(0x00=0)], resolved: None }
04 c6 00 
# 01b41 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xc7), Constant8(0x00=0)], resolved: None }
04 c7 00 
# inline_div32_div16_43_inline_div16_mul16_32_4_t1539 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01b44 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t1539 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xb9), Register(0xc8)], resolved: None }
0b b9 c8 
# inline_div32_div16_43_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t1539 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 01b47 Instruction { source: "Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xcc), Constant32(0x00000000=0)], resolved: None }
20 cc 00 00 00 00 
# 01b4d Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xc8), Register(0xcc)], resolved: None }
0b c8 cc 
# inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9)
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 01b50 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0xcc), Register(0xbc), Register(0xb8)], resolved: None }
11 cc bc b8 
# 01b54 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xba), Constant8(0x00=0)], resolved: None }
04 ba 00 
# 01b57 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xbb), Constant8(0x00=0)], resolved: None }
04 bb 00 
# inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 01b5a Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0xc4), Register(0xbc)], resolved: None }
21 c4 bc 
# inline_div32_div16_43_inline_div16_mul16_32_4_t3585 <- inline_div32_div16_43_inline_div16_mul16_32_4_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t3585 <- inline_div32_div16_43_inline_div16_mul16_32_4_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585)
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 01b5d Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01b5e Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xbc), Register(0xb8), Register(0xc4)], resolved: None }
30 bc b8 c4 
# 01b62 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_div32_div16_43_inline_div16_mul16_32_4_t2d6f <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 01b63 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t2d6f <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xc6), Register(0xc8)], resolved: None }
0b c6 c8 
# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t2d6f U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 01b66 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_d[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t2d6f U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0xc8), Register(0xc7)], resolved: None }
0b c8 c7 
# inline_div32_div16_43_inline_div16_mul16_32_4_tbd6 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 01b69 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tbd6 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xc5), Register(0xc8)], resolved: None }
0b c5 c8 
# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_tbd6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 01b6c Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_tbd6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xc8), Register(0xc6)], resolved: None }
0b c8 c6 
# inline_div32_div16_43_inline_div16_mul16_32_4_tac23 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 01b6f Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tac23 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xc4), Register(0xc8)], resolved: None }
0b c4 c8 
# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_tac23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 01b72 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_tac23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0xc8), Register(0xc5)], resolved: None }
0b c8 c5 
# inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01b75 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xcb), Constant8(0x00=0)], resolved: None }
04 cb 00 
# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 01b78 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xcb), Register(0xc4)], resolved: None }
0b cb c4 
# inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xc0), Register(0xc0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 01b7b Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0xc4), Register(0xbc)], resolved: None }
21 c4 bc 
# inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5)
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 01b7e Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01b7f Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xc0), Register(0xbc), Register(0xb8)], resolved: None }
30 c0 bc b8 
# 01b83 Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_div32_div16_43_x <- inline_div32_div16_43_inline_div16_mul16_32_4_ta65d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_x <- inline_div32_div16_43_inline_div16_mul16_32_4_ta65d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# goto inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32)], resolved: None }
# :inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32
# inline_div32_div16_43_tb0a8 <- inline_div32_div16_43_x[0x02..0x03] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }", "Index(\"x\", Number(U8, 2))", "Index(\"x\", Number(U8, 2))"] }
# 01b84 Instruction { source: "inline_div32_div16_43_tb0a8 <- inline_div32_div16_43_x[0x02..0x03] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }\", \"Index(\\\"x\\\", Number(U8, 2))\", \"Index(\\\"x\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xba), Register(0xc8)], resolved: None }
0b ba c8 
# inline_div32_div16_43_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01b87 Instruction { source: "inline_div32_div16_43_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xca), Constant8(0x00=0)], resolved: None }
04 ca 00 
# if inline_div32_div16_43_tb0a8 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }"] }
# 01b8a Instruction { source: "if inline_div32_div16_43_tb0a8 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0xc8), Register(0xca)], resolved: None }
15 c8 ca 
# 01b8d Instruction { source: "if inline_div32_div16_43_tb0a8 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_43_div16_if_else_0_11)], resolved: None }
71 a5 1b 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_tb0a8 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_10)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_10
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }"] }
# inline_div32_div16_43_div16_if_true_0_10
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 01b91 Instruction { source: "inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0xd8), Register(0xb8)], resolved: None }
21 d8 b8 
# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32)
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))"] }
# 01b94 Instruction { source: "inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb4)], resolved: None }
21 b8 b4 
# 01b97 Instruction { source: "inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0xb4), Constant32(0xffffffff=4294967295)], resolved: None }
32 b4 ff ff ff ff 
# goto inline_div32_div16_43_div16_while_predicate_6
# 	SourceContext { contexts: ["Continue"] }
# 01b9d Instruction { source: "goto inline_div32_div16_43_div16_while_predicate_6\n\tSourceContext { contexts: [\"Continue\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_while_predicate_6)], resolved: None }
70 17 1a 00 
# goto inline_div32_div16_43_div16_if_end_9
# 	SourceContext { contexts: [] }
# 01ba1 Instruction { source: "goto inline_div32_div16_43_div16_if_end_9\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_end_9)], resolved: None }
70 a5 1b 00 
# :inline_div32_div16_43_div16_if_else_0_11
# 	SourceContext { contexts: [] }
# inline_div32_div16_43_div16_if_else_0_11
# :inline_div32_div16_43_div16_if_end_9
# 	SourceContext { contexts: [] }
# inline_div32_div16_43_div16_if_end_9
# inline_div32_div16_43_tf944 <- inline_div32_div16_43_x[0x03..0x04] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }", "Index(\"x\", Number(U8, 3))", "Index(\"x\", Number(U8, 3))"] }
# 01ba5 Instruction { source: "inline_div32_div16_43_tf944 <- inline_div32_div16_43_x[0x03..0x04] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }\", \"Index(\\\"x\\\", Number(U8, 3))\", \"Index(\\\"x\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xbb), Register(0xc8)], resolved: None }
0b bb c8 
# inline_div32_div16_43_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01ba8 Instruction { source: "inline_div32_div16_43_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xca), Constant8(0x00=0)], resolved: None }
04 ca 00 
# if inline_div32_div16_43_tf944 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }"] }
# 01bab Instruction { source: "if inline_div32_div16_43_tf944 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0xc8), Register(0xca)], resolved: None }
15 c8 ca 
# 01bae Instruction { source: "if inline_div32_div16_43_tf944 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_43_div16_if_else_0_14)], resolved: None }
71 c6 1b 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_tf944 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_13)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_13
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }"] }
# inline_div32_div16_43_div16_if_true_0_13
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 01bb2 Instruction { source: "inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0xd8), Register(0xb8)], resolved: None }
21 d8 b8 
# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32)
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))"] }
# 01bb5 Instruction { source: "inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb4)], resolved: None }
21 b8 b4 
# 01bb8 Instruction { source: "inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0xb4), Constant32(0xffffffff=4294967295)], resolved: None }
32 b4 ff ff ff ff 
# goto inline_div32_div16_43_div16_while_predicate_6
# 	SourceContext { contexts: ["Continue"] }
# 01bbe Instruction { source: "goto inline_div32_div16_43_div16_while_predicate_6\n\tSourceContext { contexts: [\"Continue\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_while_predicate_6)], resolved: None }
70 17 1a 00 
# goto inline_div32_div16_43_div16_if_end_12
# 	SourceContext { contexts: [] }
# 01bc2 Instruction { source: "goto inline_div32_div16_43_div16_if_end_12\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_end_12)], resolved: None }
70 c6 1b 00 
# :inline_div32_div16_43_div16_if_else_0_14
# 	SourceContext { contexts: [] }
# inline_div32_div16_43_div16_if_else_0_14
# :inline_div32_div16_43_div16_if_end_12
# 	SourceContext { contexts: [] }
# inline_div32_div16_43_div16_if_end_12
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }"] }
# 01bc6 Instruction { source: "if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8, args: [Register(0xbb), Register(0xaf)], resolved: None }
15 bb af 
# 01bc9 Instruction { source: "if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xba), Register(0xae)], resolved: None }
16 ba ae 
# 01bcc Instruction { source: "if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb9), Register(0xad)], resolved: None }
16 b9 ad 
# 01bcf Instruction { source: "if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb8), Register(0xac)], resolved: None }
16 b8 ac 
# 01bd2 Instruction { source: "if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_43_div16_if_else_0_17)], resolved: None }
71 ea 1b 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_16)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_16
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }"] }
# inline_div32_div16_43_div16_if_true_0_16
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 01bd6 Instruction { source: "inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0xd8), Register(0xb8)], resolved: None }
21 d8 b8 
# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32)
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))"] }
# 01bd9 Instruction { source: "inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb4)], resolved: None }
21 b8 b4 
# 01bdc Instruction { source: "inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0xb4), Constant32(0xffffffff=4294967295)], resolved: None }
32 b4 ff ff ff ff 
# goto inline_div32_div16_43_div16_while_predicate_6
# 	SourceContext { contexts: ["Continue"] }
# 01be2 Instruction { source: "goto inline_div32_div16_43_div16_while_predicate_6\n\tSourceContext { contexts: [\"Continue\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_while_predicate_6)], resolved: None }
70 17 1a 00 
# goto inline_div32_div16_43_div16_if_end_15
# 	SourceContext { contexts: [] }
# 01be6 Instruction { source: "goto inline_div32_div16_43_div16_if_end_15\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_end_15)], resolved: None }
70 ea 1b 00 
# :inline_div32_div16_43_div16_if_else_0_17
# 	SourceContext { contexts: [] }
# inline_div32_div16_43_div16_if_else_0_17
# :inline_div32_div16_43_div16_if_end_15
# 	SourceContext { contexts: [] }
# inline_div32_div16_43_div16_if_end_15
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }"] }
# 01bea Instruction { source: "if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8, args: [Register(0xbb), Register(0xaf)], resolved: None }
15 bb af 
# 01bed Instruction { source: "if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xba), Register(0xae)], resolved: None }
16 ba ae 
# 01bf0 Instruction { source: "if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb9), Register(0xad)], resolved: None }
16 b9 ad 
# 01bf3 Instruction { source: "if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb8), Register(0xac)], resolved: None }
16 b8 ac 
# 01bf6 Instruction { source: "if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JzImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_19)], resolved: None }
72 fe 1b 00 
# 01bfa Instruction { source: "if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_else_0_20)], resolved: None }
70 0c 1c 00 
# :inline_div32_div16_43_div16_if_true_0_19
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }"] }
# inline_div32_div16_43_div16_if_true_0_19
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 01bfe Instruction { source: "inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0xd8), Register(0xb8)], resolved: None }
21 d8 b8 
# te81f <- inline_div32_div16_43_tfd7e U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01c01 Instruction { source: "te81f <- inline_div32_div16_43_tfd7e U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xac)], resolved: None }
21 b8 ac 
# goto inline_div32_div16_43_function_end_div16
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01c04 Instruction { source: "goto inline_div32_div16_43_function_end_div16\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_43_function_end_div16)], resolved: None }
70 5b 1c 00 
# goto inline_div32_div16_43_div16_if_end_18
# 	SourceContext { contexts: [] }
# 01c08 Instruction { source: "goto inline_div32_div16_43_div16_if_end_18\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_end_18)], resolved: None }
70 0c 1c 00 
# :inline_div32_div16_43_div16_if_else_0_20
# 	SourceContext { contexts: [] }
# inline_div32_div16_43_div16_if_else_0_20
# :inline_div32_div16_43_div16_if_end_18
# 	SourceContext { contexts: [] }
# inline_div32_div16_43_div16_if_end_18
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }", "Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }", "Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57)
# 	SourceContext { contexts: ["Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }", "Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))"] }
# 01c0c Instruction { source: "inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Copy32, args: [Register(0xb8), Register(0x00)], resolved: None }
21 b8 00 
# 01c0f Instruction { source: "inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 01c11 Instruction { source: "inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 01c13 Instruction { source: "inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 01c15 Instruction { source: "inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 01c17 Instruction { source: "inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 01c1d Instruction { source: "inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01c1e Instruction { source: "inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xac), Register(0x00), Register(0xb8)], resolved: None }
30 ac 00 b8 
# 01c22 Instruction { source: "inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_div32_div16_43_taee0 <- inline_div32_div16_43_r U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }", "Ident(\"r\")", "Ident(\"r\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_taee0 <- inline_div32_div16_43_r U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"r\\\")\", \"Ident(\\\"r\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }"] }
# 01c23 Instruction { source: "if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8, args: [Register(0xb3), Register(0xbb)], resolved: None }
15 b3 bb 
# 01c26 Instruction { source: "if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb2), Register(0xba)], resolved: None }
16 b2 ba 
# 01c29 Instruction { source: "if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb1), Register(0xb9)], resolved: None }
16 b1 b9 
# 01c2c Instruction { source: "if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb0), Register(0xb8)], resolved: None }
16 b0 b8 
# 01c2f Instruction { source: "if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_43_div16_if_else_0_23)], resolved: None }
71 41 1c 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_22)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_22
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }"] }
# inline_div32_div16_43_div16_if_true_0_22
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 01c33 Instruction { source: "inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0xd8), Register(0xb8)], resolved: None }
21 d8 b8 
# te81f <- inline_div32_div16_43_tfd7e U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01c36 Instruction { source: "te81f <- inline_div32_div16_43_tfd7e U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xac)], resolved: None }
21 b8 ac 
# goto inline_div32_div16_43_function_end_div16
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01c39 Instruction { source: "goto inline_div32_div16_43_function_end_div16\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_43_function_end_div16)], resolved: None }
70 5b 1c 00 
# goto inline_div32_div16_43_div16_if_end_21
# 	SourceContext { contexts: [] }
# 01c3d Instruction { source: "goto inline_div32_div16_43_div16_if_end_21\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_end_21)], resolved: None }
70 41 1c 00 
# :inline_div32_div16_43_div16_if_else_0_23
# 	SourceContext { contexts: [] }
# inline_div32_div16_43_div16_if_else_0_23
# :inline_div32_div16_43_div16_if_end_21
# 	SourceContext { contexts: [] }
# inline_div32_div16_43_div16_if_end_21
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 01c41 Instruction { source: "inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0xd8), Register(0xb8)], resolved: None }
21 d8 b8 
# inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32)
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"mid\"), Number(U8, 1))"] }
# 01c44 Instruction { source: "inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xd4)], resolved: None }
21 b8 d4 
# 01c47 Instruction { source: "inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0xd4), Constant32(0x00000001=1)], resolved: None }
32 d4 01 00 00 00 
# goto inline_div32_div16_43_div16_while_predicate_6
# 	SourceContext { contexts: [] }
# 01c4d Instruction { source: "goto inline_div32_div16_43_div16_while_predicate_6\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_while_predicate_6)], resolved: None }
70 17 1a 00 
# :inline_div32_div16_43_div16_while_end_8
# 	SourceContext { contexts: [] }
# inline_div32_div16_43_div16_while_end_8
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 01c51 Instruction { source: "inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0xd4), Register(0xb8)], resolved: None }
21 d4 b8 
# te81f <- inline_div32_div16_43_t1506 U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }"] }
# 01c54 Instruction { source: "te81f <- inline_div32_div16_43_t1506 U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xac)], resolved: None }
21 b8 ac 
# goto inline_div32_div16_43_function_end_div16
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }"] }
# 01c57 Instruction { source: "goto inline_div32_div16_43_function_end_div16\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_43_function_end_div16)], resolved: None }
70 5b 1c 00 
# :inline_div32_div16_43_function_end_div16
# 	SourceContext { contexts: [] }
# inline_div32_div16_43_function_end_div16
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32)
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }"] }
# 01c5b Instruction { source: "__frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# return Some(te81f)
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }"] }
# 01c61 Instruction { source: "return Some(te81f)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\"] }", opcode: Copy32, args: [Register(0xac), Register(0x00)], resolved: None }
21 ac 00 
# 01c64 Instruction { source: "Dealloc 8 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# 01c6a Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto div32_if_end_3
# 	SourceContext { contexts: [] }
# 01c6c Instruction { source: "goto div32_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_if_end_3)], resolved: None }
70 70 1c 00 
# :div32_if_else_0_5
# 	SourceContext { contexts: [] }
# div32_if_else_0_5
# :div32_if_end_3
# 	SourceContext { contexts: [] }
# div32_if_end_3
# lo <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 01c70 Instruction { source: "lo <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0xc4), Constant32(0x00000000=0)], resolved: None }
20 c4 00 00 00 00 
# hi <- 0xffffffffu32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 4294967295) }", "Number(USIZE, 4294967295)"] }
# 01c76 Instruction { source: "hi <- 0xffffffffu32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 4294967295) }\", \"Number(USIZE, 4294967295)\"] }", opcode: LoadImm32, args: [Register(0xb4), Constant32(0xffffffff=4294967295)], resolved: None }
20 b4 ff ff ff ff 
# :div32_while_predicate_6
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }"] }
# div32_while_predicate_6
# t1506 <- lo U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 01c7c Instruction { source: "t1506 <- lo U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0xc4), Register(0xb8)], resolved: None }
21 c4 b8 
# t5508 <- hi U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }", "Ident(\"hi\")", "Ident(\"hi\")"] }
# optimized away noop copy Instruction { source: "t5508 <- hi U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\", \"Ident(\\\"hi\\\")\", \"Ident(\\\"hi\\\")\"] }", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }"] }
# 01c7f Instruction { source: "if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8, args: [Register(0xb7), Register(0xbb)], resolved: None }
15 b7 bb 
# 01c82 Instruction { source: "if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb6), Register(0xba)], resolved: None }
16 b6 ba 
# 01c85 Instruction { source: "if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb5), Register(0xb9)], resolved: None }
16 b5 b9 
# 01c88 Instruction { source: "if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb4), Register(0xb8)], resolved: None }
16 b4 b8 
# 01c8b Instruction { source: "if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: JcImm, args: [Label24(div32_while_end_8)], resolved: None }
71 e8 1e 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: JmpImm, args: [Label24(div32_while_body_7)], resolved: None }
# :div32_while_body_7
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }"] }
# div32_while_body_7
# t1506 <- lo U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] })", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] })", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 01c8f Instruction { source: "t1506 <- lo U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] })\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] })\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0xc4), Register(0xb8)], resolved: None }
21 c4 b8 
# inline_div32_shiftright1_44_a <- t1506 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] })", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] })"] }
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_44_a <- t1506 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] })\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] })\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 01c92 Instruction { source: "inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xb8), Register(0xd0)], resolved: None }
0b b8 d0 
# inline_div32_shiftright1_44_t5a19 <- inline_div32_shiftright1_44_tdd9e RotateRight Number(0n1/0x01u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))"] }
# 01c95 Instruction { source: "inline_div32_shiftright1_44_t5a19 <- inline_div32_shiftright1_44_tdd9e RotateRight Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 01c98 Instruction { source: "inline_div32_shiftright1_44_t5a19 <- inline_div32_shiftright1_44_tdd9e RotateRight Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x00), Register(0xd0), Register(0xca)], resolved: None }
1e 04 00 d0 ca 
# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_t5a19 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }"] }
# 01c9d Instruction { source: "inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_t5a19 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xb8)], resolved: None }
0b ca b8 
# inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01ca0 Instruction { source: "inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xb9), Register(0xc8)], resolved: None }
0b b9 c8 
# inline_div32_shiftright1_44_ta431 <- inline_div32_shiftright1_44_t1539 RotateRight Number(0n1/0x01u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))"] }
# 01ca3 Instruction { source: "inline_div32_shiftright1_44_ta431 <- inline_div32_shiftright1_44_t1539 RotateRight Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 01ca6 Instruction { source: "inline_div32_shiftright1_44_ta431 <- inline_div32_shiftright1_44_t1539 RotateRight Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x00), Register(0xc8), Register(0xca)], resolved: None }
1e 04 00 c8 ca 
# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_ta431 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }"] }
# 01cab Instruction { source: "inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_ta431 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xb9)], resolved: None }
0b ca b9 
# inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01cae Instruction { source: "inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xba), Register(0xca)], resolved: None }
0b ba ca 
# inline_div32_shiftright1_44_t350e <- inline_div32_shiftright1_44_t577f RotateRight Number(0n1/0x01u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))"] }
# 01cb1 Instruction { source: "inline_div32_shiftright1_44_t350e <- inline_div32_shiftright1_44_t577f RotateRight Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 01cb4 Instruction { source: "inline_div32_shiftright1_44_t350e <- inline_div32_shiftright1_44_t577f RotateRight Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x00), Register(0xca), Register(0xca)], resolved: None }
1e 04 00 ca ca 
# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t350e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }"] }
# 01cb9 Instruction { source: "inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t350e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xba)], resolved: None }
0b ca ba 
# inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 01cbc Instruction { source: "inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xbb), Register(0xc8)], resolved: None }
0b bb c8 
# inline_div32_shiftright1_44_taa3e <- inline_div32_shiftright1_44_t5b7c RotateRight Number(0n1/0x01u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))"] }
# 01cbf Instruction { source: "inline_div32_shiftright1_44_taa3e <- inline_div32_shiftright1_44_t5b7c RotateRight Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 01cc2 Instruction { source: "inline_div32_shiftright1_44_taa3e <- inline_div32_shiftright1_44_t5b7c RotateRight Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x00), Register(0xc8), Register(0xca)], resolved: None }
1e 04 00 c8 ca 
# inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_taa3e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }"] }
# 01cc7 Instruction { source: "inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_taa3e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xbb)], resolved: None }
0b ca bb 
# inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 01cca Instruction { source: "inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xb8), Register(0xd0)], resolved: None }
0b b8 d0 
# inline_div32_shiftright1_44_t9144 <- inline_div32_shiftright1_44_tdd9e BitwiseAnd Number(0n127/0x7fu8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))"] }
# 01ccd Instruction { source: "inline_div32_shiftright1_44_t9144 <- inline_div32_shiftright1_44_tdd9e BitwiseAnd Number(0n127/0x7fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x7f=127)], resolved: None }
04 00 7f 
# 01cd0 Instruction { source: "inline_div32_shiftright1_44_t9144 <- inline_div32_shiftright1_44_tdd9e BitwiseAnd Number(0n127/0x7fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0xd0), Register(0x00), Register(0xca)], resolved: None }
1b d0 00 ca 
# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_t9144 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }"] }
# 01cd4 Instruction { source: "inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_t9144 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xb8)], resolved: None }
0b ca b8 
# inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 01cd7 Instruction { source: "inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xb8), Register(0xd0)], resolved: None }
0b b8 d0 
# inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01cda Instruction { source: "inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xb9), Register(0xc8)], resolved: None }
0b b9 c8 
# inline_div32_shiftright1_44_t8384 <- inline_div32_shiftright1_44_t1539 BitwiseAnd Number(0n128/0x80u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))"] }
# 01cdd Instruction { source: "inline_div32_shiftright1_44_t8384 <- inline_div32_shiftright1_44_t1539 BitwiseAnd Number(0n128/0x80u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x80=128)], resolved: None }
04 00 80 
# 01ce0 Instruction { source: "inline_div32_shiftright1_44_t8384 <- inline_div32_shiftright1_44_t1539 BitwiseAnd Number(0n128/0x80u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0xc8), Register(0x00), Register(0xca)], resolved: None }
1b c8 00 ca 
# inline_div32_shiftright1_44_tf572 <- inline_div32_shiftright1_44_tdd9e BitwiseOr Var(inline_div32_shiftright1_44_t8384)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))"] }
# 01ce4 Instruction { source: "inline_div32_shiftright1_44_tf572 <- inline_div32_shiftright1_44_tdd9e BitwiseOr Var(inline_div32_shiftright1_44_t8384)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0xd0), Register(0xca), Register(0xca)], resolved: None }
1c d0 ca ca 
# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tf572 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }"] }
# 01ce8 Instruction { source: "inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tf572 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xb8)], resolved: None }
0b ca b8 
# inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01ceb Instruction { source: "inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xb9), Register(0xc8)], resolved: None }
0b b9 c8 
# inline_div32_shiftright1_44_t5a73 <- inline_div32_shiftright1_44_t1539 BitwiseAnd Number(0n127/0x7fu8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))"] }
# 01cee Instruction { source: "inline_div32_shiftright1_44_t5a73 <- inline_div32_shiftright1_44_t1539 BitwiseAnd Number(0n127/0x7fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x7f=127)], resolved: None }
04 00 7f 
# 01cf1 Instruction { source: "inline_div32_shiftright1_44_t5a73 <- inline_div32_shiftright1_44_t1539 BitwiseAnd Number(0n127/0x7fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0xc8), Register(0x00), Register(0xca)], resolved: None }
1b c8 00 ca 
# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t5a73 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }"] }
# 01cf5 Instruction { source: "inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t5a73 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xb9)], resolved: None }
0b ca b9 
# inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01cf8 Instruction { source: "inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xb9), Register(0xc8)], resolved: None }
0b b9 c8 
# inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01cfb Instruction { source: "inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xba), Register(0xca)], resolved: None }
0b ba ca 
# inline_div32_shiftright1_44_t1f15 <- inline_div32_shiftright1_44_t577f BitwiseAnd Number(0n128/0x80u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))"] }
# 01cfe Instruction { source: "inline_div32_shiftright1_44_t1f15 <- inline_div32_shiftright1_44_t577f BitwiseAnd Number(0n128/0x80u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x80=128)], resolved: None }
04 00 80 
# 01d01 Instruction { source: "inline_div32_shiftright1_44_t1f15 <- inline_div32_shiftright1_44_t577f BitwiseAnd Number(0n128/0x80u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0xca), Register(0x00), Register(0xca)], resolved: None }
1b ca 00 ca 
# inline_div32_shiftright1_44_t4d1a <- inline_div32_shiftright1_44_t1539 BitwiseOr Var(inline_div32_shiftright1_44_t1f15)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))"] }
# 01d05 Instruction { source: "inline_div32_shiftright1_44_t4d1a <- inline_div32_shiftright1_44_t1539 BitwiseOr Var(inline_div32_shiftright1_44_t1f15)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0xc8), Register(0xca), Register(0xca)], resolved: None }
1c c8 ca ca 
# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t4d1a U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }"] }
# 01d09 Instruction { source: "inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t4d1a U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xb9)], resolved: None }
0b ca b9 
# inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01d0c Instruction { source: "inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xba), Register(0xca)], resolved: None }
0b ba ca 
# inline_div32_shiftright1_44_t887d <- inline_div32_shiftright1_44_t577f BitwiseAnd Number(0n127/0x7fu8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))"] }
# 01d0f Instruction { source: "inline_div32_shiftright1_44_t887d <- inline_div32_shiftright1_44_t577f BitwiseAnd Number(0n127/0x7fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x7f=127)], resolved: None }
04 00 7f 
# 01d12 Instruction { source: "inline_div32_shiftright1_44_t887d <- inline_div32_shiftright1_44_t577f BitwiseAnd Number(0n127/0x7fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0xca), Register(0x00), Register(0xca)], resolved: None }
1b ca 00 ca 
# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t887d U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }"] }
# 01d16 Instruction { source: "inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t887d U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xba)], resolved: None }
0b ca ba 
# inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01d19 Instruction { source: "inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xba), Register(0xca)], resolved: None }
0b ba ca 
# inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 01d1c Instruction { source: "inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xbb), Register(0xc8)], resolved: None }
0b bb c8 
# inline_div32_shiftright1_44_tc29b <- inline_div32_shiftright1_44_t5b7c BitwiseAnd Number(0n128/0x80u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))"] }
# 01d1f Instruction { source: "inline_div32_shiftright1_44_tc29b <- inline_div32_shiftright1_44_t5b7c BitwiseAnd Number(0n128/0x80u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x80=128)], resolved: None }
04 00 80 
# 01d22 Instruction { source: "inline_div32_shiftright1_44_tc29b <- inline_div32_shiftright1_44_t5b7c BitwiseAnd Number(0n128/0x80u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0xc8), Register(0x00), Register(0xd0)], resolved: None }
1b c8 00 d0 
# inline_div32_shiftright1_44_t1bbf <- inline_div32_shiftright1_44_t577f BitwiseOr Var(inline_div32_shiftright1_44_tc29b)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))"] }
# 01d26 Instruction { source: "inline_div32_shiftright1_44_t1bbf <- inline_div32_shiftright1_44_t577f BitwiseOr Var(inline_div32_shiftright1_44_tc29b)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0xca), Register(0xd0), Register(0xca)], resolved: None }
1c ca d0 ca 
# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t1bbf U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }"] }
# 01d2a Instruction { source: "inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t1bbf U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xba)], resolved: None }
0b ca ba 
# inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 01d2d Instruction { source: "inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xbb), Register(0xc8)], resolved: None }
0b bb c8 
# inline_div32_shiftright1_44_tb911 <- inline_div32_shiftright1_44_t5b7c BitwiseAnd Number(0n127/0x7fu8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))"] }
# 01d30 Instruction { source: "inline_div32_shiftright1_44_tb911 <- inline_div32_shiftright1_44_t5b7c BitwiseAnd Number(0n127/0x7fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x7f=127)], resolved: None }
04 00 7f 
# 01d33 Instruction { source: "inline_div32_shiftright1_44_tb911 <- inline_div32_shiftright1_44_t5b7c BitwiseAnd Number(0n127/0x7fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0xc8), Register(0x00), Register(0xca)], resolved: None }
1b c8 00 ca 
# inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_tb911 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }"] }
# 01d37 Instruction { source: "inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_tb911 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xbb)], resolved: None }
0b ca bb 
# inline_div32_shiftright1_44_t8792 <- inline_div32_shiftright1_44_a U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_44_t8792 <- inline_div32_shiftright1_44_a U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# t9599 <- inline_div32_shiftright1_44_t8792 U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# 01d3a Instruction { source: "t9599 <- inline_div32_shiftright1_44_t8792 U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xcc)], resolved: None }
21 b8 cc 
# goto inline_div32_shiftright1_44_function_end_shiftright1
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_shiftright1_44_function_end_shiftright1\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_shiftright1_44_function_end_shiftright1)], resolved: None }
# :inline_div32_shiftright1_44_function_end_shiftright1
# 	SourceContext { contexts: [] }
# inline_div32_shiftright1_44_function_end_shiftright1
# t5508 <- hi U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })", "Ident(\"hi\")", "Ident(\"hi\")"] }
# optimized away noop copy Instruction { source: "t5508 <- hi U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })\", \"Ident(\\\"hi\\\")\", \"Ident(\\\"hi\\\")\"] }", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_div32_shiftright1_45_a <- t5508 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })"] }
# 01d3d Instruction { source: "inline_div32_shiftright1_45_a <- t5508 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })\"] }", opcode: Copy32, args: [Register(0xb4), Register(0xb8)], resolved: None }
21 b4 b8 
# inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 01d40 Instruction { source: "inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xb8), Register(0xd0)], resolved: None }
0b b8 d0 
# inline_div32_shiftright1_45_t5a19 <- inline_div32_shiftright1_45_tdd9e RotateRight Number(0n1/0x01u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))"] }
# 01d43 Instruction { source: "inline_div32_shiftright1_45_t5a19 <- inline_div32_shiftright1_45_tdd9e RotateRight Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 01d46 Instruction { source: "inline_div32_shiftright1_45_t5a19 <- inline_div32_shiftright1_45_tdd9e RotateRight Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x00), Register(0xd0), Register(0xca)], resolved: None }
1e 04 00 d0 ca 
# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_t5a19 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }"] }
# 01d4b Instruction { source: "inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_t5a19 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xb8)], resolved: None }
0b ca b8 
# inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01d4e Instruction { source: "inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xb9), Register(0xc8)], resolved: None }
0b b9 c8 
# inline_div32_shiftright1_45_ta431 <- inline_div32_shiftright1_45_t1539 RotateRight Number(0n1/0x01u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))"] }
# 01d51 Instruction { source: "inline_div32_shiftright1_45_ta431 <- inline_div32_shiftright1_45_t1539 RotateRight Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 01d54 Instruction { source: "inline_div32_shiftright1_45_ta431 <- inline_div32_shiftright1_45_t1539 RotateRight Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x00), Register(0xc8), Register(0xca)], resolved: None }
1e 04 00 c8 ca 
# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_ta431 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }"] }
# 01d59 Instruction { source: "inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_ta431 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xb9)], resolved: None }
0b ca b9 
# inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01d5c Instruction { source: "inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xba), Register(0xca)], resolved: None }
0b ba ca 
# inline_div32_shiftright1_45_t350e <- inline_div32_shiftright1_45_t577f RotateRight Number(0n1/0x01u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))"] }
# 01d5f Instruction { source: "inline_div32_shiftright1_45_t350e <- inline_div32_shiftright1_45_t577f RotateRight Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 01d62 Instruction { source: "inline_div32_shiftright1_45_t350e <- inline_div32_shiftright1_45_t577f RotateRight Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x00), Register(0xca), Register(0xca)], resolved: None }
1e 04 00 ca ca 
# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t350e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }"] }
# 01d67 Instruction { source: "inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t350e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xba)], resolved: None }
0b ca ba 
# inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 01d6a Instruction { source: "inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xbb), Register(0xc8)], resolved: None }
0b bb c8 
# inline_div32_shiftright1_45_taa3e <- inline_div32_shiftright1_45_t5b7c RotateRight Number(0n1/0x01u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))"] }
# 01d6d Instruction { source: "inline_div32_shiftright1_45_taa3e <- inline_div32_shiftright1_45_t5b7c RotateRight Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 01d70 Instruction { source: "inline_div32_shiftright1_45_taa3e <- inline_div32_shiftright1_45_t5b7c RotateRight Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x00), Register(0xc8), Register(0xca)], resolved: None }
1e 04 00 c8 ca 
# inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_taa3e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }"] }
# 01d75 Instruction { source: "inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_taa3e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xbb)], resolved: None }
0b ca bb 
# inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 01d78 Instruction { source: "inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xb8), Register(0xd0)], resolved: None }
0b b8 d0 
# inline_div32_shiftright1_45_t9144 <- inline_div32_shiftright1_45_tdd9e BitwiseAnd Number(0n127/0x7fu8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))"] }
# 01d7b Instruction { source: "inline_div32_shiftright1_45_t9144 <- inline_div32_shiftright1_45_tdd9e BitwiseAnd Number(0n127/0x7fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x7f=127)], resolved: None }
04 00 7f 
# 01d7e Instruction { source: "inline_div32_shiftright1_45_t9144 <- inline_div32_shiftright1_45_tdd9e BitwiseAnd Number(0n127/0x7fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0xd0), Register(0x00), Register(0xca)], resolved: None }
1b d0 00 ca 
# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_t9144 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }"] }
# 01d82 Instruction { source: "inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_t9144 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xb8)], resolved: None }
0b ca b8 
# inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 01d85 Instruction { source: "inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xb8), Register(0xd0)], resolved: None }
0b b8 d0 
# inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01d88 Instruction { source: "inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xb9), Register(0xc8)], resolved: None }
0b b9 c8 
# inline_div32_shiftright1_45_t8384 <- inline_div32_shiftright1_45_t1539 BitwiseAnd Number(0n128/0x80u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))"] }
# 01d8b Instruction { source: "inline_div32_shiftright1_45_t8384 <- inline_div32_shiftright1_45_t1539 BitwiseAnd Number(0n128/0x80u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x80=128)], resolved: None }
04 00 80 
# 01d8e Instruction { source: "inline_div32_shiftright1_45_t8384 <- inline_div32_shiftright1_45_t1539 BitwiseAnd Number(0n128/0x80u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0xc8), Register(0x00), Register(0xca)], resolved: None }
1b c8 00 ca 
# inline_div32_shiftright1_45_tf572 <- inline_div32_shiftright1_45_tdd9e BitwiseOr Var(inline_div32_shiftright1_45_t8384)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))"] }
# 01d92 Instruction { source: "inline_div32_shiftright1_45_tf572 <- inline_div32_shiftright1_45_tdd9e BitwiseOr Var(inline_div32_shiftright1_45_t8384)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0xd0), Register(0xca), Register(0xca)], resolved: None }
1c d0 ca ca 
# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tf572 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }"] }
# 01d96 Instruction { source: "inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tf572 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xb8)], resolved: None }
0b ca b8 
# inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01d99 Instruction { source: "inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xb9), Register(0xc8)], resolved: None }
0b b9 c8 
# inline_div32_shiftright1_45_t5a73 <- inline_div32_shiftright1_45_t1539 BitwiseAnd Number(0n127/0x7fu8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))"] }
# 01d9c Instruction { source: "inline_div32_shiftright1_45_t5a73 <- inline_div32_shiftright1_45_t1539 BitwiseAnd Number(0n127/0x7fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x7f=127)], resolved: None }
04 00 7f 
# 01d9f Instruction { source: "inline_div32_shiftright1_45_t5a73 <- inline_div32_shiftright1_45_t1539 BitwiseAnd Number(0n127/0x7fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0xc8), Register(0x00), Register(0xca)], resolved: None }
1b c8 00 ca 
# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t5a73 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }"] }
# 01da3 Instruction { source: "inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t5a73 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xb9)], resolved: None }
0b ca b9 
# inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01da6 Instruction { source: "inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xb9), Register(0xc8)], resolved: None }
0b b9 c8 
# inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01da9 Instruction { source: "inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xba), Register(0xca)], resolved: None }
0b ba ca 
# inline_div32_shiftright1_45_t1f15 <- inline_div32_shiftright1_45_t577f BitwiseAnd Number(0n128/0x80u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))"] }
# 01dac Instruction { source: "inline_div32_shiftright1_45_t1f15 <- inline_div32_shiftright1_45_t577f BitwiseAnd Number(0n128/0x80u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x80=128)], resolved: None }
04 00 80 
# 01daf Instruction { source: "inline_div32_shiftright1_45_t1f15 <- inline_div32_shiftright1_45_t577f BitwiseAnd Number(0n128/0x80u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0xca), Register(0x00), Register(0xca)], resolved: None }
1b ca 00 ca 
# inline_div32_shiftright1_45_t4d1a <- inline_div32_shiftright1_45_t1539 BitwiseOr Var(inline_div32_shiftright1_45_t1f15)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))"] }
# 01db3 Instruction { source: "inline_div32_shiftright1_45_t4d1a <- inline_div32_shiftright1_45_t1539 BitwiseOr Var(inline_div32_shiftright1_45_t1f15)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0xc8), Register(0xca), Register(0xca)], resolved: None }
1c c8 ca ca 
# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t4d1a U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }"] }
# 01db7 Instruction { source: "inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t4d1a U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xb9)], resolved: None }
0b ca b9 
# inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01dba Instruction { source: "inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xba), Register(0xca)], resolved: None }
0b ba ca 
# inline_div32_shiftright1_45_t887d <- inline_div32_shiftright1_45_t577f BitwiseAnd Number(0n127/0x7fu8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))"] }
# 01dbd Instruction { source: "inline_div32_shiftright1_45_t887d <- inline_div32_shiftright1_45_t577f BitwiseAnd Number(0n127/0x7fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x7f=127)], resolved: None }
04 00 7f 
# 01dc0 Instruction { source: "inline_div32_shiftright1_45_t887d <- inline_div32_shiftright1_45_t577f BitwiseAnd Number(0n127/0x7fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0xca), Register(0x00), Register(0xca)], resolved: None }
1b ca 00 ca 
# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t887d U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }"] }
# 01dc4 Instruction { source: "inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t887d U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xba)], resolved: None }
0b ca ba 
# inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01dc7 Instruction { source: "inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xba), Register(0xca)], resolved: None }
0b ba ca 
# inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 01dca Instruction { source: "inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xbb), Register(0xc8)], resolved: None }
0b bb c8 
# inline_div32_shiftright1_45_tc29b <- inline_div32_shiftright1_45_t5b7c BitwiseAnd Number(0n128/0x80u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))"] }
# 01dcd Instruction { source: "inline_div32_shiftright1_45_tc29b <- inline_div32_shiftright1_45_t5b7c BitwiseAnd Number(0n128/0x80u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x80=128)], resolved: None }
04 00 80 
# 01dd0 Instruction { source: "inline_div32_shiftright1_45_tc29b <- inline_div32_shiftright1_45_t5b7c BitwiseAnd Number(0n128/0x80u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0xc8), Register(0x00), Register(0xd0)], resolved: None }
1b c8 00 d0 
# inline_div32_shiftright1_45_t1bbf <- inline_div32_shiftright1_45_t577f BitwiseOr Var(inline_div32_shiftright1_45_tc29b)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))"] }
# 01dd4 Instruction { source: "inline_div32_shiftright1_45_t1bbf <- inline_div32_shiftright1_45_t577f BitwiseOr Var(inline_div32_shiftright1_45_tc29b)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0xca), Register(0xd0), Register(0xca)], resolved: None }
1c ca d0 ca 
# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t1bbf U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }"] }
# 01dd8 Instruction { source: "inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t1bbf U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xba)], resolved: None }
0b ca ba 
# inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 01ddb Instruction { source: "inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xbb), Register(0xc8)], resolved: None }
0b bb c8 
# inline_div32_shiftright1_45_tb911 <- inline_div32_shiftright1_45_t5b7c BitwiseAnd Number(0n127/0x7fu8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))"] }
# 01dde Instruction { source: "inline_div32_shiftright1_45_tb911 <- inline_div32_shiftright1_45_t5b7c BitwiseAnd Number(0n127/0x7fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x7f=127)], resolved: None }
04 00 7f 
# 01de1 Instruction { source: "inline_div32_shiftright1_45_tb911 <- inline_div32_shiftright1_45_t5b7c BitwiseAnd Number(0n127/0x7fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0xc8), Register(0x00), Register(0xca)], resolved: None }
1b c8 00 ca 
# inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_tb911 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }"] }
# 01de5 Instruction { source: "inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_tb911 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0xca), Register(0xbb)], resolved: None }
0b ca bb 
# inline_div32_shiftright1_45_t8792 <- inline_div32_shiftright1_45_a U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_45_t8792 <- inline_div32_shiftright1_45_a U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# t3803 <- inline_div32_shiftright1_45_t8792 U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# optimized away noop copy Instruction { source: "t3803 <- inline_div32_shiftright1_45_t8792 U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# goto inline_div32_shiftright1_45_function_end_shiftright1
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_shiftright1_45_function_end_shiftright1\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_shiftright1_45_function_end_shiftright1)], resolved: None }
# :inline_div32_shiftright1_45_function_end_shiftright1
# 	SourceContext { contexts: [] }
# inline_div32_shiftright1_45_function_end_shiftright1
# mid <- t9599 Add Var(t3803)
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))"] }
# 01de8 Instruction { source: "mid <- t9599 Add Var(t3803)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01de9 Instruction { source: "mid <- t9599 Add Var(t3803)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\"] }", opcode: AddCarry32_1, args: [Register(0xcc), Register(0xb8), Register(0xb8)], resolved: None }
30 cc b8 b8 
# 01ded Instruction { source: "mid <- t9599 Add Var(t3803)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# tfd7e <- mid U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Ident(\"mid\")", "Ident(\"mid\")"] }
# optimized away noop copy Instruction { source: "tfd7e <- mid U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# tace9 <- b U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "tace9 <- b U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# te825 <- __frame_pointer U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "AddressOf(Ident(\"x64\"))", "AddressOf(Ident(\"x64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 01dee Instruction { source: "te825 <- __frame_pointer U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"AddressOf(Ident(\\\"x64\\\"))\", \"AddressOf(Ident(\\\"x64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0xe0)], resolved: None }
21 0c e0 
# t4a94 <- te825 Add Number(0n0/0x00000000u32)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "AddressOf(Ident(\"x64\"))", "AddressOf(Ident(\"x64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))"] }
# 01df1 Instruction { source: "t4a94 <- te825 Add Number(0n0/0x00000000u32)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"AddressOf(Ident(\\\"x64\\\"))\", \"AddressOf(Ident(\\\"x64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: Copy32, args: [Register(0xe0), Register(0xbc)], resolved: None }
21 e0 bc 
# 01df4 Instruction { source: "t4a94 <- te825 Add Number(0n0/0x00000000u32)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"AddressOf(Ident(\\\"x64\\\"))\", \"AddressOf(Ident(\\\"x64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0xbc), Constant32(0x00000000=0)], resolved: None }
32 bc 00 00 00 00 
# tb608 <- t4a94 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "AddressOf(Ident(\"x64\"))", "AddressOf(Ident(\"x64\"))"] }
# optimized away noop copy Instruction { source: "tb608 <- t4a94 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"AddressOf(Ident(\\\"x64\\\"))\", \"AddressOf(Ident(\\\"x64\\\"))\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# None <= call mul32_64(tfd7e,tace9,tb608,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })"] }
# 01dfa Instruction { source: "Arg0[a]=tfd7e None <= call mul32_64(tfd7e,tace9,tb608,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\"] }", opcode: Copy32, args: [Register(0xb8), Register(0x00)], resolved: None }
21 b8 00 
# 01dfd Instruction { source: "Arg1[b]=tace9 None <= call mul32_64(tfd7e,tace9,tb608,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\"] }", opcode: Copy32, args: [Register(0xb0), Register(0x04)], resolved: None }
21 b0 04 
# 01e00 Instruction { source: "Arg2[c]=tb608 None <= call mul32_64(tfd7e,tace9,tb608,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\"] }", opcode: Copy32, args: [Register(0xbc), Register(0x08)], resolved: None }
21 bc 08 
# Registers used by this function: {172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228}
# Registers used by callee tree: {96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163}
# Registers to save: []
# 01e03 Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 01e09 Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 13 1e 00 00 
# 01e0f Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: JmpImm, args: [Label24(:mul32_64)], resolved: None }
70 1a 24 00 
# 01e13 Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# te825 <- __frame_pointer U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }", "LocalFieldDeref(\"x64\", \"hi\")", "LocalFieldDeref(\"x64\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 01e19 Instruction { source: "te825 <- __frame_pointer U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0xe0)], resolved: None }
21 0c e0 
# t3f2a <- te825 Add Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }", "LocalFieldDeref(\"x64\", \"hi\")", "LocalFieldDeref(\"x64\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))"] }
# 01e1c Instruction { source: "t3f2a <- te825 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: Copy32, args: [Register(0xe0), Register(0xbc)], resolved: None }
21 e0 bc 
# 01e1f Instruction { source: "t3f2a <- te825 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0xbc), Constant32(0x00000004=4)], resolved: None }
32 bc 04 00 00 00 
# tb973 <- mem[t3f2a] U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }", "LocalFieldDeref(\"x64\", \"hi\")", "LocalFieldDeref(\"x64\", \"hi\")"] }
# 01e25 Instruction { source: "tb973 <- mem[t3f2a] U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0xbc), Register(0xc0)], resolved: None }
22 bc c0 
# t60ec <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 01e28 Instruction { source: "t60ec <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0xbc), Constant32(0x00000000=0)], resolved: None }
20 bc 00 00 00 00 
# if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }"] }
# 01e2e Instruction { source: "if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8, args: [Register(0xc3), Register(0xbf)], resolved: None }
15 c3 bf 
# 01e31 Instruction { source: "if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0xc2), Register(0xbe)], resolved: None }
16 c2 be 
# 01e34 Instruction { source: "if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0xc1), Register(0xbd)], resolved: None }
16 c1 bd 
# 01e37 Instruction { source: "if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0xc0), Register(0xbc)], resolved: None }
16 c0 bc 
# 01e3a Instruction { source: "if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\"] }", opcode: JcImm, args: [Label24(div32_if_else_0_11)], resolved: None }
71 4f 1e 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\"] }", opcode: JmpImm, args: [Label24(div32_if_true_0_10)], resolved: None }
# :div32_if_true_0_10
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }"] }
# div32_if_true_0_10
# tfd7e <- mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# optimized away noop copy Instruction { source: "tfd7e <- mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# hi <- tfd7e Subtract Number(0n1/0x00000001u32)
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))"] }
# 01e3e Instruction { source: "hi <- tfd7e Subtract Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb4)], resolved: None }
21 b8 b4 
# 01e41 Instruction { source: "hi <- tfd7e Subtract Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0xb4), Constant32(0xffffffff=4294967295)], resolved: None }
32 b4 ff ff ff ff 
# goto div32_while_predicate_6
# 	SourceContext { contexts: ["Continue"] }
# 01e47 Instruction { source: "goto div32_while_predicate_6\n\tSourceContext { contexts: [\"Continue\"] }", opcode: JmpImm, args: [Label24(div32_while_predicate_6)], resolved: None }
70 7c 1c 00 
# goto div32_if_end_9
# 	SourceContext { contexts: [] }
# 01e4b Instruction { source: "goto div32_if_end_9\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_if_end_9)], resolved: None }
70 4f 1e 00 
# :div32_if_else_0_11
# 	SourceContext { contexts: [] }
# div32_if_else_0_11
# :div32_if_end_9
# 	SourceContext { contexts: [] }
# div32_if_end_9
# te546 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }", "LocalFieldDeref(\"x64\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\"__frame_pointer\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\"__frame_pointer\") }", "Ident(\"__frame_pointer\")"] }
# 01e4f Instruction { source: "te546 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }\", \"LocalFieldDeref(\\\"x64\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\\\"__frame_pointer\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\\\"__frame_pointer\\\") }\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0xe0)], resolved: None }
21 0c e0 
# x <- mem[te546] U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }", "LocalFieldDeref(\"x64\", \"lo\")"] }
# 01e52 Instruction { source: "x <- mem[te546] U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }\", \"LocalFieldDeref(\\\"x64\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0xe0), Register(0xbc)], resolved: None }
22 e0 bc 
# tad57 <- x U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "tad57 <- x U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# t8792 <- a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t8792 <- a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }"] }
# 01e55 Instruction { source: "if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8, args: [Register(0xbf), Register(0xaf)], resolved: None }
15 bf af 
# 01e58 Instruction { source: "if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xbe), Register(0xae)], resolved: None }
16 be ae 
# 01e5b Instruction { source: "if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xbd), Register(0xad)], resolved: None }
16 bd ad 
# 01e5e Instruction { source: "if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xbc), Register(0xac)], resolved: None }
16 bc ac 
# 01e61 Instruction { source: "if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JcImm, args: [Label24(div32_if_else_0_14)], resolved: None }
71 76 1e 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JmpImm, args: [Label24(div32_if_true_0_13)], resolved: None }
# :div32_if_true_0_13
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }"] }
# div32_if_true_0_13
# tfd7e <- mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# optimized away noop copy Instruction { source: "tfd7e <- mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# hi <- tfd7e Subtract Number(0n1/0x00000001u32)
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))"] }
# 01e65 Instruction { source: "hi <- tfd7e Subtract Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb4)], resolved: None }
21 b8 b4 
# 01e68 Instruction { source: "hi <- tfd7e Subtract Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0xb4), Constant32(0xffffffff=4294967295)], resolved: None }
32 b4 ff ff ff ff 
# goto div32_while_predicate_6
# 	SourceContext { contexts: ["Continue"] }
# 01e6e Instruction { source: "goto div32_while_predicate_6\n\tSourceContext { contexts: [\"Continue\"] }", opcode: JmpImm, args: [Label24(div32_while_predicate_6)], resolved: None }
70 7c 1c 00 
# goto div32_if_end_12
# 	SourceContext { contexts: [] }
# 01e72 Instruction { source: "goto div32_if_end_12\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_if_end_12)], resolved: None }
70 76 1e 00 
# :div32_if_else_0_14
# 	SourceContext { contexts: [] }
# div32_if_else_0_14
# :div32_if_end_12
# 	SourceContext { contexts: [] }
# div32_if_end_12
# tad57 <- x U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "tad57 <- x U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# t8792 <- a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t8792 <- a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }"] }
# 01e76 Instruction { source: "if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8, args: [Register(0xbf), Register(0xaf)], resolved: None }
15 bf af 
# 01e79 Instruction { source: "if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xbe), Register(0xae)], resolved: None }
16 be ae 
# 01e7c Instruction { source: "if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xbd), Register(0xad)], resolved: None }
16 bd ad 
# 01e7f Instruction { source: "if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xbc), Register(0xac)], resolved: None }
16 bc ac 
# 01e82 Instruction { source: "if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JzImm, args: [Label24(div32_if_true_0_16)], resolved: None }
72 8a 1e 00 
# 01e86 Instruction { source: "if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JmpImm, args: [Label24(div32_if_else_0_17)], resolved: None }
70 9f 1e 00 
# :div32_if_true_0_16
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }"] }
# div32_if_true_0_16
# tfd7e <- mid U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }", "Ident(\"mid\")", "Ident(\"mid\")"] }
# optimized away noop copy Instruction { source: "tfd7e <- mid U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32)
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01e8a Instruction { source: "__frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32)\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# return Some(tfd7e)
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01e90 Instruction { source: "return Some(tfd7e)\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: Copy32, args: [Register(0xb8), Register(0x00)], resolved: None }
21 b8 00 
# 01e93 Instruction { source: "Dealloc 8 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# 01e99 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto div32_if_end_15
# 	SourceContext { contexts: [] }
# 01e9b Instruction { source: "goto div32_if_end_15\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_if_end_15)], resolved: None }
70 9f 1e 00 
# :div32_if_else_0_17
# 	SourceContext { contexts: [] }
# div32_if_else_0_17
# :div32_if_end_15
# 	SourceContext { contexts: [] }
# div32_if_end_15
# t8792 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }", "Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t8792 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# tad57 <- x U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }", "Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "tad57 <- x U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# r <- t8792 Subtract Var(tad57)
# 	SourceContext { contexts: ["Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }", "Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))"] }
# 01e9f Instruction { source: "r <- t8792 Subtract Var(tad57)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Copy32, args: [Register(0xbc), Register(0x00)], resolved: None }
21 bc 00 
# 01ea2 Instruction { source: "r <- t8792 Subtract Var(tad57)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 01ea4 Instruction { source: "r <- t8792 Subtract Var(tad57)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 01ea6 Instruction { source: "r <- t8792 Subtract Var(tad57)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 01ea8 Instruction { source: "r <- t8792 Subtract Var(tad57)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 01eaa Instruction { source: "r <- t8792 Subtract Var(tad57)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 01eb0 Instruction { source: "r <- t8792 Subtract Var(tad57)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01eb1 Instruction { source: "r <- t8792 Subtract Var(tad57)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xac), Register(0x00), Register(0xbc)], resolved: None }
30 ac 00 bc 
# 01eb5 Instruction { source: "r <- t8792 Subtract Var(tad57)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# taee0 <- r U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }", "Ident(\"r\")", "Ident(\"r\")"] }
# optimized away noop copy Instruction { source: "taee0 <- r U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"r\\\")\", \"Ident(\\\"r\\\")\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# tace9 <- b U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "tace9 <- b U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }"] }
# 01eb6 Instruction { source: "if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8, args: [Register(0xb3), Register(0xbf)], resolved: None }
15 b3 bf 
# 01eb9 Instruction { source: "if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb2), Register(0xbe)], resolved: None }
16 b2 be 
# 01ebc Instruction { source: "if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb1), Register(0xbd)], resolved: None }
16 b1 bd 
# 01ebf Instruction { source: "if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb0), Register(0xbc)], resolved: None }
16 b0 bc 
# 01ec2 Instruction { source: "if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JcImm, args: [Label24(div32_if_else_0_20)], resolved: None }
71 db 1e 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JmpImm, args: [Label24(div32_if_true_0_19)], resolved: None }
# :div32_if_true_0_19
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }"] }
# div32_if_true_0_19
# tfd7e <- mid U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }", "Ident(\"mid\")", "Ident(\"mid\")"] }
# optimized away noop copy Instruction { source: "tfd7e <- mid U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32)
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01ec6 Instruction { source: "__frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32)\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# return Some(tfd7e)
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01ecc Instruction { source: "return Some(tfd7e)\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: Copy32, args: [Register(0xb8), Register(0x00)], resolved: None }
21 b8 00 
# 01ecf Instruction { source: "Dealloc 8 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# 01ed5 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto div32_if_end_18
# 	SourceContext { contexts: [] }
# 01ed7 Instruction { source: "goto div32_if_end_18\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_if_end_18)], resolved: None }
70 db 1e 00 
# :div32_if_else_0_20
# 	SourceContext { contexts: [] }
# div32_if_else_0_20
# :div32_if_end_18
# 	SourceContext { contexts: [] }
# div32_if_end_18
# tfd7e <- mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# optimized away noop copy Instruction { source: "tfd7e <- mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# lo <- tfd7e Add Number(0n1/0x00000001u32)
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"mid\"), Number(U8, 1))"] }
# 01edb Instruction { source: "lo <- tfd7e Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xc4)], resolved: None }
21 b8 c4 
# 01ede Instruction { source: "lo <- tfd7e Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0xc4), Constant32(0x00000001=1)], resolved: None }
32 c4 01 00 00 00 
# goto div32_while_predicate_6
# 	SourceContext { contexts: [] }
# 01ee4 Instruction { source: "goto div32_while_predicate_6\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_while_predicate_6)], resolved: None }
70 7c 1c 00 
# :div32_while_end_8
# 	SourceContext { contexts: [] }
# div32_while_end_8
# t1506 <- lo U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 01ee8 Instruction { source: "t1506 <- lo U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0xc4), Register(0xb8)], resolved: None }
21 c4 b8 
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32)
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }"] }
# 01eeb Instruction { source: "__frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32)\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# return Some(t1506)
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }"] }
# 01ef1 Instruction { source: "return Some(t1506)\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\"] }", opcode: Copy32, args: [Register(0xb8), Register(0x00)], resolved: None }
21 b8 00 
# 01ef4 Instruction { source: "Dealloc 8 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# 01efa Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_div32
# 	SourceContext { contexts: [] }
# function_end_div32
# Unreachable
# 	SourceContext { contexts: [] }
# 01efc Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :lcd_draw_char
# Ret None
# Arg0=i
# Arg1=ch
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var ch (Arg1 ch Number(U8)) Reg(U8) Some([231])
# Var i (Arg0 i Number(U8)) Reg(U8) Some([232])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_col (Local col Number(U8) Reg(U8)) Reg(U8) Some([232])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_i (Arg0 i Number(U8)) Reg(U8) Some([232])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_row (Local row Number(U8) Reg(U8)) Reg(U8) Some([233])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd (t1acd Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) Reg(U8) Some([232])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 (t2f80 Index("lcd_row_start", Ident("row"))) Reg(U8) Some([233])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7 (t38c7 Arithmetic(Multiply, Ident("row"), Number(U8, 20))) Reg(U8) Some([232])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd (t50bd Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) Reg(U32) Some([236, 237, 238, 239])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf (t9eaf Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }) Reg(U32) Some([236, 237, 238, 239])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 (tb1b6 Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }) Reg(U32) Some([240, 241, 242, 243])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_td007 (td007 Ident("row")) Reg(U8) Some([233])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 (td0f3 Ident("i")) Reg(U8) Some([244])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 (tfee9 Ident("col")) Reg(U8) Some([232])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var pos (Local pos Number(U8) Reg(U8)) Reg(U8) Some([232])
# Var t1261 (t1261 Arithmetic(And, Ident("ch"), Number(U8, 15))) Reg(U8) Some([231])
# Var t136d (t136d Ident("pos")) Reg(U8) Some([232])
# Var t263d (t263d Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })) Reg(U8) Some([231])
# Var t3024 (t3024 Number(U8, 128)) Reg(U8) Some([232])
# Var t38dc (t38dc Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })) Reg(U8) Some([231])
# Var t62fa (t62fa Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })) Reg(U8) Some([231])
# Var t6e3a (t6e3a Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))) Reg(U8) Some([233])
# Var t7d80 (t7d80 Arithmetic(And, Ident("pos"), Number(U8, 15))) Reg(U8) Some([232])
# Var t8d12 (t8d12 Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4))) Reg(U8) Some([233])
# Var t9498 (t9498 Number(USIZE, 2)) Reg(U32) Some([248, 249, 250, 251])
# Var t9f32 (t9f32 Number(U8, 8)) Reg(U8) Some([244])
# Var tb875 (tb875 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))) Reg(U8) Some([231])
# Var tbd94 (tbd94 Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })) Reg(U8) Some([231])
# Var tcd38 (tcd38 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))) Reg(U8) Some([232])
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([232])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([231])
# Var tdf0 (tdf0 Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] })) Reg(U8) Some([231])
# Var tec9e (tec9e Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4))) Reg(U8) Some([233])
# 01f01 Instruction { source: "Save function parameter 'i' registers [0] to locals [232].", opcode: Copy8, args: [Register(0x00), Register(0xe8)], resolved: None }
0b 00 e8 
# 01f04 Instruction { source: "Save function parameter 'ch' registers [4] to locals [231].", opcode: Copy8, args: [Register(0x04), Register(0xe7)], resolved: None }
0b 04 e7 
# td0f3 <- i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"pos\"), var_type: Some(Number(U8)), value: Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] }) }", "Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "td0f3 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"pos\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0xe8), Register(0xe8)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_i <- td0f3 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"pos\"), var_type: Some(Number(U8)), value: Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] }) }", "Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })"] }
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_i <- td0f3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"pos\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Copy8, args: [Register(0xe8), Register(0xe8)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- inline_lcd_draw_char_lcd_logical_to_physical_3_i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"row\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"i\"), Number(U8, 20)) }", "Arithmetic(Divide, Ident(\"i\"), Number(U8, 20))", "Ident(\"i\")", "Ident(\"i\")"] }
# 01f07 Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- inline_lcd_draw_char_lcd_logical_to_physical_3_i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"row\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0xe8), Register(0xf4)], resolved: None }
0b e8 f4 
# inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"row\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"i\"), Number(U8, 20)) }", "Arithmetic(Divide, Ident(\"i\"), Number(U8, 20))"] }
# 01f0a Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"row\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x14=20)], resolved: None }
04 00 14 
# 01f0d Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"row\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20))\"] }", opcode: Divide8, args: [Register(0xf4), Register(0x00), Register(0xe9)], resolved: None }
17 f4 00 e9 
# inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- inline_lcd_draw_char_lcd_logical_to_physical_3_i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }", "Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))", "Ident(\"i\")", "Ident(\"i\")"] }
# 01f11 Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- inline_lcd_draw_char_lcd_logical_to_physical_3_i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0xe8), Register(0xf4)], resolved: None }
0b e8 f4 
# inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }", "Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))", "Ident(\"row\")", "Ident(\"row\")"] }
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\", \"Ident(\\\"row\\\")\", \"Ident(\\\"row\\\")\"] }", opcode: Copy8, args: [Register(0xe9), Register(0xe9)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }", "Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))"] }
# 01f14 Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x14=20)], resolved: None }
04 00 14 
# 01f17 Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\"] }", opcode: Mul8_8, args: [Register(0xe9), Register(0x00), Register(0xe8)], resolved: None }
10 e9 00 e8 
# inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7)
# 	SourceContext { contexts: ["Assign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }", "Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))"] }
# 01f1b Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\"] }", opcode: Copy8, args: [Register(0xe8), Register(0x00)], resolved: None }
0b e8 00 
# 01f1e Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 01f20 Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\"] }", opcode: Add8NoCarryIn, args: [Register(0xf4), Register(0x00), Register(0xe8)], resolved: None }
14 f4 00 e8 
# inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 <- const &lcd_row_start
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") })", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }", "Ident(\"lcd_row_start\")"] }
# 01f24 Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 <- const &lcd_row_start\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }\", \"Ident(\\\"lcd_row_start\\\")\"] }", opcode: LoadImm32, args: [Register(0xf0), Label32(:lcd_row_start)], resolved: None }
20 f0 23 04 00 00 
# inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }", "Ident(\"row\")", "Ident(\"row\")"] }
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\", \"Ident(\\\"row\\\")\", \"Ident(\\\"row\\\")\"] }", opcode: Copy8, args: [Register(0xe9), Register(0xe9)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }"] }
# 01f2a Instruction { source: "Zero-pad for inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\"] }", opcode: LoadImm32, args: [Register(0xec), Constant32(0x00000000=0)], resolved: None }
20 ec 00 00 00 00 
# 01f30 Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\"] }", opcode: Copy8, args: [Register(0xe9), Register(0xec)], resolved: None }
0b e9 ec 
# inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd)
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") })"] }
# 01f33 Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01f34 Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0xf0), Register(0xec), Register(0xec)], resolved: None }
30 f0 ec ec 
# 01f38 Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf] U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Index(\"lcd_row_start\", Ident(\"row\"))"] }
# 01f39 Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf] U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\"] }", opcode: Load8, args: [Register(0xec), Register(0xe9)], resolved: None }
05 ec e9 
# inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_3_col U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Ident(\"col\")", "Ident(\"col\")"] }
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_3_col U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Ident(\\\"col\\\")\", \"Ident(\\\"col\\\")\"] }", opcode: Copy8, args: [Register(0xe8), Register(0xe8)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9)
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))"] }
# 01f3c Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\"] }", opcode: Add8NoCarryIn, args: [Register(0xe9), Register(0xe8), Register(0xe8)], resolved: None }
14 e9 e8 e8 
# pos <- inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }"] }
# optimized away noop copy Instruction { source: "pos <- inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\"] }", opcode: Copy8, args: [Register(0xe8), Register(0xe8)], resolved: None }
# goto inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical)], resolved: None }
# :inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical
# 	SourceContext { contexts: [] }
# inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical
# t9f32 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))", "Number(U8, 8)", "Number(U8, 8)"] }
# 01f40 Instruction { source: "t9f32 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0xf4), Constant8(0x08=8)], resolved: None }
04 f4 08 
# t136d <- pos U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4))", "Ident(\"pos\")", "Ident(\"pos\")"] }
# optimized away noop copy Instruction { source: "t136d <- pos U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4))\", \"Ident(\\\"pos\\\")\", \"Ident(\\\"pos\\\")\"] }", opcode: Copy8, args: [Register(0xe8), Register(0xe8)], resolved: None }
# t8d12 <- t136d ShiftRight Number(0n4/0x04u8)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4))"] }
# 01f43 Instruction { source: "t8d12 <- t136d ShiftRight Number(0n4/0x04u8)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x04=4)], resolved: None }
04 00 04 
# 01f46 Instruction { source: "t8d12 <- t136d ShiftRight Number(0n4/0x04u8)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x00), Register(0xe8), Register(0xe9)], resolved: None }
1e 05 00 e8 e9 
# t6e3a <- t9f32 BitwiseOr Var(t8d12)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))"] }
# 01f4b Instruction { source: "t6e3a <- t9f32 BitwiseOr Var(t8d12)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0xf4), Register(0xe9), Register(0xe9)], resolved: None }
1c f4 e9 e9 
# None <= call io_write1(t6e3a,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })"] }
# 01f4f Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0xe9)], resolved: None }
69 e9 
# t136d <- pos U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] })", "Arithmetic(And, Ident(\"pos\"), Number(U8, 15))", "Arithmetic(And, Ident(\"pos\"), Number(U8, 15))", "Ident(\"pos\")", "Ident(\"pos\")"] }
# optimized away noop copy Instruction { source: "t136d <- pos U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] })\", \"Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))\", \"Ident(\\\"pos\\\")\", \"Ident(\\\"pos\\\")\"] }", opcode: Copy8, args: [Register(0xe8), Register(0xe8)], resolved: None }
# t7d80 <- t136d BitwiseAnd Number(0n15/0x0fu8)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] })", "Arithmetic(And, Ident(\"pos\"), Number(U8, 15))", "Arithmetic(And, Ident(\"pos\"), Number(U8, 15))"] }
# 01f51 Instruction { source: "t7d80 <- t136d BitwiseAnd Number(0n15/0x0fu8)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] })\", \"Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x0f=15)], resolved: None }
04 00 0f 
# 01f54 Instruction { source: "t7d80 <- t136d BitwiseAnd Number(0n15/0x0fu8)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] })\", \"Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0xe8), Register(0x00), Register(0xe8)], resolved: None }
1b e8 00 e8 
# None <= call io_write1(t7d80,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] })"] }
# 01f58 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0xe8)], resolved: None }
69 e8 
# t9498 <- 0n2/0x00000002u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Number(USIZE, 2)", "Number(USIZE, 2)"] }
# 01f5a Instruction { source: "t9498 <- 0n2/0x00000002u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Number(USIZE, 2)\", \"Number(USIZE, 2)\"] }", opcode: LoadImm32, args: [Register(0xf8), Constant32(0x00000002=2)], resolved: None }
20 f8 02 00 00 00 
# None <= call delay(t9498,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })"] }
# 01f60 Instruction { source: "Arg0[x]=t9498 None <= call delay(t9498,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\"] }", opcode: Copy32, args: [Register(0xf8), Register(0x00)], resolved: None }
21 f8 00 
# Registers used by this function: {231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 01f63 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 01f69 Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 73 1f 00 00 
# 01f6f Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 3f 19 00 
# 01f73 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t3024 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 01f79 Instruction { source: "t3024 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0xe8), Constant8(0x80=128)], resolved: None }
04 e8 80 
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0xe7), Register(0xe7)], resolved: None }
# tec9e <- tdcd9 ShiftRight Number(0n4/0x04u8)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4))"] }
# 01f7c Instruction { source: "tec9e <- tdcd9 ShiftRight Number(0n4/0x04u8)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x04=4)], resolved: None }
04 00 04 
# 01f7f Instruction { source: "tec9e <- tdcd9 ShiftRight Number(0n4/0x04u8)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x00), Register(0xe7), Register(0xe9)], resolved: None }
1e 05 00 e7 e9 
# tcd38 <- t3024 BitwiseOr Var(tec9e)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))"] }
# 01f84 Instruction { source: "tcd38 <- t3024 BitwiseOr Var(tec9e)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0xe8), Register(0xe9), Register(0xe8)], resolved: None }
1c e8 e9 e8 
# None <= call io_write1(tcd38,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })"] }
# 01f88 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0xe8)], resolved: None }
69 e8 
# t3024 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 01f8a Instruction { source: "t3024 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0xe8), Constant8(0x80=128)], resolved: None }
04 e8 80 
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"ch\"), Number(U8, 15))", "Arithmetic(And, Ident(\"ch\"), Number(U8, 15))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0xe7), Register(0xe7)], resolved: None }
# t1261 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"ch\"), Number(U8, 15))", "Arithmetic(And, Ident(\"ch\"), Number(U8, 15))"] }
# 01f8d Instruction { source: "t1261 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x0f=15)], resolved: None }
04 00 0f 
# 01f90 Instruction { source: "t1261 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0xe7), Register(0x00), Register(0xe7)], resolved: None }
1b e7 00 e7 
# tb875 <- t3024 BitwiseOr Var(t1261)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))"] }
# 01f94 Instruction { source: "tb875 <- t3024 BitwiseOr Var(t1261)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0xe8), Register(0xe7), Register(0xe7)], resolved: None }
1c e8 e7 e7 
# None <= call io_write1(tb875,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })"] }
# 01f98 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0xe7)], resolved: None }
69 e7 
# t9498 <- 0n2/0x00000002u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Number(USIZE, 2)", "Number(USIZE, 2)"] }
# 01f9a Instruction { source: "t9498 <- 0n2/0x00000002u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Number(USIZE, 2)\", \"Number(USIZE, 2)\"] }", opcode: LoadImm32, args: [Register(0xf8), Constant32(0x00000002=2)], resolved: None }
20 f8 02 00 00 00 
# None <= call delay(t9498,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })"] }
# 01fa0 Instruction { source: "Arg0[x]=t9498 None <= call delay(t9498,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\"] }", opcode: Copy32, args: [Register(0xf8), Register(0x00)], resolved: None }
21 f8 00 
# Registers used by this function: {231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 01fa3 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 01fa9 Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c b3 1f 00 00 
# 01faf Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 3f 19 00 
# 01fb3 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 01fb9 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_lcd_draw_char
# 	SourceContext { contexts: [] }
# function_end_lcd_draw_char
# Unreachable
# 	SourceContext { contexts: [] }
# 01fbb Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :lcd_init
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([252])
# Var lcd_current (Local lcd_current Number(U8) Reg(U8)) Reg(U8) Some([252])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t1f11 (t1f11 Call(Call { function: "io_write1", parameters: [Number(U8, 1)] })) Reg(U8) Some([252])
# Var t2bc4 (t2bc4 Call(Call { function: "io_write1", parameters: [Number(U8, 8)] })) Reg(U8) Some([252])
# Var t385d (t385d Number(USIZE, 1)) Reg(U32) Some([16, 17, 18, 19])
# Var t40c1 (t40c1 Number(U8, 2)) Reg(U8) Some([252])
# Var t7bb3 (t7bb3 Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })) Reg(U8) Some([252])
# Var t80a1 (t80a1 Number(U8, 12)) Reg(U8) Some([252])
# Var t8820 (t8820 Number(U8, 3)) Reg(U8) Some([252])
# Var t8fe0 (t8fe0 Number(U8, 80)) Reg(U8) Some([20])
# Var t9498 (t9498 Number(USIZE, 2)) Reg(U32) Some([16, 17, 18, 19])
# Var t9725 (t9725 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) Reg(U32) Some([24, 25, 26, 27])
# Var t9bbb (t9bbb Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })) Reg(U8) Some([252])
# Var t9e70 (t9e70 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }) Reg(U32) Some([24, 25, 26, 27])
# Var t9f32 (t9f32 Number(U8, 8)) Reg(U8) Some([252])
# Var tac5f (tac5f Number(U8, 32)) Reg(U8) Some([28])
# Var tb018 (tb018 Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })) Reg(U8) Some([252])
# Var tb1c (tb1c Number(USIZE, 987148)) Reg(U32) Some([32, 33, 34, 35])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([252])
# Var tb9f6 (tb9f6 Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })) Reg(U8) Some([252])
# Var tbd94 (tbd94 Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })) Reg(U8) Some([252])
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([252])
# Var td623 (td623 Call(Call { function: "io_write1", parameters: [Number(U8, 12)] })) Reg(U8) Some([252])
# Var tfcd (tfcd Number(U8, 1)) Reg(U8) Some([252])
# lcd_current <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)"] }
# 01fc0 Instruction { source: "lcd_current <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xfc), Constant8(0x00=0)], resolved: None }
04 fc 00 
# i <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 01fc3 Instruction { source: "i <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xfc), Constant8(0x00=0)], resolved: None }
04 fc 00 
# :lcd_init_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }"] }
# lcd_init_while_predicate_0
# td0f3 <- i U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "td0f3 <- i U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0xfc), Register(0xfc)], resolved: None }
# t8fe0 <- 0n80/0x50u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }", "Number(U8, 80)", "Number(U8, 80)"] }
# 01fc6 Instruction { source: "t8fe0 <- 0n80/0x50u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\", \"Number(U8, 80)\", \"Number(U8, 80)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x50=80)], resolved: None }
04 14 50 
# if td0f3 < t8fe0 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }"] }
# 01fc9 Instruction { source: "if td0f3 < t8fe0 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\"] }", opcode: Cmp8, args: [Register(0x14), Register(0xfc)], resolved: None }
15 14 fc 
# 01fcc Instruction { source: "if td0f3 < t8fe0 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\"] }", opcode: JcImm, args: [Label24(lcd_init_while_end_2)], resolved: None }
71 f6 1f 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t8fe0 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\"] }", opcode: JmpImm, args: [Label24(lcd_init_while_body_1)], resolved: None }
# :lcd_init_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }"] }
# lcd_init_while_body_1
# tb1c <- 0n987148/0x000f100cu32 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Number(USIZE, 987148)", "Number(USIZE, 987148)"] }
# 01fd0 Instruction { source: "tb1c <- 0n987148/0x000f100cu32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Number(USIZE, 987148)\", \"Number(USIZE, 987148)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x000f100c=987148)], resolved: None }
20 20 0c 10 0f 00 
# td0f3 <- i U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "td0f3 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0xfc), Register(0xfc)], resolved: None }
# t9725 U32 <- td0f3 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }"] }
# 01fd6 Instruction { source: "Zero-pad for t9725 U32 <- td0f3 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000000=0)], resolved: None }
20 18 00 00 00 00 
# 01fdc Instruction { source: "t9725 U32 <- td0f3 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\"] }", opcode: Copy8, args: [Register(0xfc), Register(0x18)], resolved: None }
0b fc 18 
# t9e70 <- tb1c Add Var(t9725)
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })"] }
# 01fdf Instruction { source: "t9e70 <- tb1c Add Var(t9725)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01fe0 Instruction { source: "t9e70 <- tb1c Add Var(t9725)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x18), Register(0x18)], resolved: None }
30 20 18 18 
# 01fe4 Instruction { source: "t9e70 <- tb1c Add Var(t9725)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# tac5f <- 0n32/0x20u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Number(U8, 32)", "Number(U8, 32)"] }
# 01fe5 Instruction { source: "tac5f <- 0n32/0x20u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Number(U8, 32)\", \"Number(U8, 32)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x20=32)], resolved: None }
04 1c 20 
# mem[t9e70] <- tac5f U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }"] }
# 01fe8 Instruction { source: "mem[t9e70] <- tac5f U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\"] }", opcode: Store8, args: [Register(0x1c), Register(0x18)], resolved: None }
06 1c 18 
# td0f3 <- i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "td0f3 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0xfc), Register(0xfc)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))"] }
# 01feb Instruction { source: "i <- td0f3 Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 01fee Instruction { source: "i <- td0f3 Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0xfc), Register(0x00), Register(0xfc)], resolved: None }
14 fc 00 fc 
# goto lcd_init_while_predicate_0
# 	SourceContext { contexts: [] }
# 01ff2 Instruction { source: "goto lcd_init_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(lcd_init_while_predicate_0)], resolved: None }
70 c6 1f 00 
# :lcd_init_while_end_2
# 	SourceContext { contexts: [] }
# lcd_init_while_end_2
# t8820 <- 0n3/0x03u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Number(U8, 3)", "Number(U8, 3)"] }
# 01ff6 Instruction { source: "t8820 <- 0n3/0x03u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] })\", \"Number(U8, 3)\", \"Number(U8, 3)\"] }", opcode: LoadImm8, args: [Register(0xfc), Constant8(0x03=3)], resolved: None }
04 fc 03 
# None <= call io_write1(t8820,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })"] }
# 01ff9 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0xfc)], resolved: None }
69 fc 
# t385d <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 01ffb Instruction { source: "t385d <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x10), Constant32(0x00000001=1)], resolved: None }
20 10 01 00 00 00 
# None <= call delay(t385d,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })"] }
# 02001 Instruction { source: "Arg0[x]=t385d None <= call delay(t385d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x00)], resolved: None }
21 10 00 
# Registers used by this function: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 32, 33, 34, 35, 252}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 02004 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 0200a Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 14 20 00 00 
# 02010 Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 3f 19 00 
# 02014 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t8820 <- 0n3/0x03u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Number(U8, 3)", "Number(U8, 3)"] }
# 0201a Instruction { source: "t8820 <- 0n3/0x03u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] })\", \"Number(U8, 3)\", \"Number(U8, 3)\"] }", opcode: LoadImm8, args: [Register(0xfc), Constant8(0x03=3)], resolved: None }
04 fc 03 
# None <= call io_write1(t8820,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })"] }
# 0201d Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0xfc)], resolved: None }
69 fc 
# t385d <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 0201f Instruction { source: "t385d <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x10), Constant32(0x00000001=1)], resolved: None }
20 10 01 00 00 00 
# None <= call delay(t385d,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })"] }
# 02025 Instruction { source: "Arg0[x]=t385d None <= call delay(t385d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x00)], resolved: None }
21 10 00 
# Registers used by this function: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 32, 33, 34, 35, 252}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 02028 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 0202e Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 38 20 00 00 
# 02034 Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 3f 19 00 
# 02038 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t8820 <- 0n3/0x03u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Number(U8, 3)", "Number(U8, 3)"] }
# 0203e Instruction { source: "t8820 <- 0n3/0x03u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] })\", \"Number(U8, 3)\", \"Number(U8, 3)\"] }", opcode: LoadImm8, args: [Register(0xfc), Constant8(0x03=3)], resolved: None }
04 fc 03 
# None <= call io_write1(t8820,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })"] }
# 02041 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0xfc)], resolved: None }
69 fc 
# t385d <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 02043 Instruction { source: "t385d <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x10), Constant32(0x00000001=1)], resolved: None }
20 10 01 00 00 00 
# None <= call delay(t385d,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })"] }
# 02049 Instruction { source: "Arg0[x]=t385d None <= call delay(t385d,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x00)], resolved: None }
21 10 00 
# Registers used by this function: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 32, 33, 34, 35, 252}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 0204c Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02052 Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 5c 20 00 00 
# 02058 Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 3f 19 00 
# 0205c Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t40c1 <- 0n2/0x02u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Number(U8, 2)", "Number(U8, 2)"] }
# 02062 Instruction { source: "t40c1 <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] })\", \"Number(U8, 2)\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0xfc), Constant8(0x02=2)], resolved: None }
04 fc 02 
# None <= call io_write1(t40c1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })"] }
# 02065 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0xfc)], resolved: None }
69 fc 
# t9498 <- 0n2/0x00000002u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Number(USIZE, 2)", "Number(USIZE, 2)"] }
# 02067 Instruction { source: "t9498 <- 0n2/0x00000002u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Number(USIZE, 2)\", \"Number(USIZE, 2)\"] }", opcode: LoadImm32, args: [Register(0x10), Constant32(0x00000002=2)], resolved: None }
20 10 02 00 00 00 
# None <= call delay(t9498,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })"] }
# 0206d Instruction { source: "Arg0[x]=t9498 None <= call delay(t9498,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x00)], resolved: None }
21 10 00 
# Registers used by this function: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 32, 33, 34, 35, 252}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 02070 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02076 Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 80 20 00 00 
# 0207c Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 3f 19 00 
# 02080 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t40c1 <- 0n2/0x02u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Number(U8, 2)", "Number(U8, 2)"] }
# 02086 Instruction { source: "t40c1 <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] })\", \"Number(U8, 2)\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0xfc), Constant8(0x02=2)], resolved: None }
04 fc 02 
# None <= call io_write1(t40c1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })"] }
# 02089 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0xfc)], resolved: None }
69 fc 
# t9f32 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })", "Number(U8, 8)", "Number(U8, 8)"] }
# 0208b Instruction { source: "t9f32 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 8)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 8)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 8)] })\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0xfc), Constant8(0x08=8)], resolved: None }
04 fc 08 
# None <= call io_write1(t9f32,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })"] }
# 0208e Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0xfc)], resolved: None }
69 fc 
# t9498 <- 0n2/0x00000002u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Number(USIZE, 2)", "Number(USIZE, 2)"] }
# 02090 Instruction { source: "t9498 <- 0n2/0x00000002u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Number(USIZE, 2)\", \"Number(USIZE, 2)\"] }", opcode: LoadImm32, args: [Register(0x10), Constant32(0x00000002=2)], resolved: None }
20 10 02 00 00 00 
# None <= call delay(t9498,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })"] }
# 02096 Instruction { source: "Arg0[x]=t9498 None <= call delay(t9498,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x00)], resolved: None }
21 10 00 
# Registers used by this function: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 32, 33, 34, 35, 252}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 02099 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 0209f Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c a9 20 00 00 
# 020a5 Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 3f 19 00 
# 020a9 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Number(U8, 0)", "Number(U8, 0)"] }
# 020af Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] })\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xfc), Constant8(0x00=0)], resolved: None }
04 fc 00 
# None <= call io_write1(tb36e,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })"] }
# 020b2 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0xfc)], resolved: None }
69 fc 
# t80a1 <- 0n12/0x0cu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 12)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 12)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 12)] })", "Number(U8, 12)", "Number(U8, 12)"] }
# 020b4 Instruction { source: "t80a1 <- 0n12/0x0cu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 12)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 12)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 12)] })\", \"Number(U8, 12)\", \"Number(U8, 12)\"] }", opcode: LoadImm8, args: [Register(0xfc), Constant8(0x0c=12)], resolved: None }
04 fc 0c 
# None <= call io_write1(t80a1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 12)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 12)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 12)] })"] }
# 020b7 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0xfc)], resolved: None }
69 fc 
# t9498 <- 0n2/0x00000002u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Number(USIZE, 2)", "Number(USIZE, 2)"] }
# 020b9 Instruction { source: "t9498 <- 0n2/0x00000002u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Number(USIZE, 2)\", \"Number(USIZE, 2)\"] }", opcode: LoadImm32, args: [Register(0x10), Constant32(0x00000002=2)], resolved: None }
20 10 02 00 00 00 
# None <= call delay(t9498,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })"] }
# 020bf Instruction { source: "Arg0[x]=t9498 None <= call delay(t9498,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x00)], resolved: None }
21 10 00 
# Registers used by this function: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 32, 33, 34, 35, 252}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 020c2 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 020c8 Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c d2 20 00 00 
# 020ce Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 3f 19 00 
# 020d2 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Number(U8, 0)", "Number(U8, 0)"] }
# 020d8 Instruction { source: "tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] })\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xfc), Constant8(0x00=0)], resolved: None }
04 fc 00 
# None <= call io_write1(tb36e,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })"] }
# 020db Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0xfc)], resolved: None }
69 fc 
# tfcd <- 0n1/0x01u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] })", "Number(U8, 1)", "Number(U8, 1)"] }
# 020dd Instruction { source: "tfcd <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 1)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 1)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 1)] })\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0xfc), Constant8(0x01=1)], resolved: None }
04 fc 01 
# None <= call io_write1(tfcd,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] })"] }
# 020e0 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0xfc)], resolved: None }
69 fc 
# t9498 <- 0n2/0x00000002u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Number(USIZE, 2)", "Number(USIZE, 2)"] }
# 020e2 Instruction { source: "t9498 <- 0n2/0x00000002u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Number(USIZE, 2)\", \"Number(USIZE, 2)\"] }", opcode: LoadImm32, args: [Register(0x10), Constant32(0x00000002=2)], resolved: None }
20 10 02 00 00 00 
# None <= call delay(t9498,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })"] }
# 020e8 Instruction { source: "Arg0[x]=t9498 None <= call delay(t9498,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x00)], resolved: None }
21 10 00 
# Registers used by this function: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 32, 33, 34, 35, 252}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 020eb Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 020f1 Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c fb 20 00 00 
# 020f7 Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 3f 19 00 
# 020fb Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 02101 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_lcd_init
# 	SourceContext { contexts: [] }
# function_end_lcd_init
# Unreachable
# 	SourceContext { contexts: [] }
# 02103 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :lcd_putc
# Ret None
# Arg0=ch
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var ch (Arg0 ch Number(U8)) Reg(U8) Some([36])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var next (Local next Number(U8) Reg(U8)) Reg(U8) Some([36])
# Var t0 (static "lcd_current") Reg(U32) Some([40, 41, 42, 43])
# Var t1 (static "lcd_current") Reg(U32) Some([44, 45, 46, 47])
# Var t164d (t164d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }) Reg(U32) Some([44, 45, 46, 47])
# Var t2 (static "lcd_current") Reg(U32) Some([44, 45, 46, 47])
# Var t3 (static "lcd_current") Reg(U32) Some([44, 45, 46, 47])
# Var t31c0 (t31c0 Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })) Reg(U8) Some([36])
# Var t4 (static "lcd_current") Reg(U32) Some([48, 49, 50, 51])
# Var t4584 (t4584 Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))) Reg(U8) Some([52])
# Var t5 (static "lcd_current") Reg(U32) Some([44, 45, 46, 47])
# Var t5880 (t5880 Call(Call { function: "lcd_scroll_up", parameters: [] })) Reg(U8) Some([36])
# Var t5dda (t5dda Ident("lcd_current")) Reg(U8) Some([52])
# Var t6 (static "lcd_current") Reg(U32) Some([44, 45, 46, 47])
# Var t7 (static "lcd_current") Reg(U32) Some([40, 41, 42, 43])
# Var t8 (static "lcd_current") Reg(U32) Some([44, 45, 46, 47])
# Var t8658 (t8658 Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))) Reg(U8) Some([36])
# Var t8fe0 (t8fe0 Number(U8, 80)) Reg(U8) Some([36])
# Var t9 (static "lcd_current") Reg(U32) Some([40, 41, 42, 43])
# Var ta5ff (ta5ff Ident("next")) Reg(U8) Some([36])
# Var tab78 (tab78 Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))) Reg(U8) Some([36])
# Var tac5f (tac5f Number(U8, 32)) Reg(U8) Some([52])
# Var tad4e (tad4e Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) Reg(U32) Some([44, 45, 46, 47])
# Var tb1c (tb1c Number(USIZE, 987148)) Reg(U32) Some([56, 57, 58, 59])
# Var td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([60])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([36])
# 02108 Instruction { source: "Save function parameter 'ch' registers [0] to locals [36].", opcode: Copy8, args: [Register(0x00), Register(0x24)], resolved: None }
0b 00 24 
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x24), Register(0x24)], resolved: None }
# td7b5 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 0210b Instruction { source: "td7b5 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x0a=10)], resolved: None }
04 3c 0a 
# if tdcd9 == td7b5 then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }"] }
# 0210e Instruction { source: "if tdcd9 == td7b5 then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x24), Register(0x3c)], resolved: None }
15 24 3c 
# 02111 Instruction { source: "if tdcd9 == td7b5 then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: JzImm, args: [Label24(lcd_putc_if_true_0_1)], resolved: None }
72 19 21 00 
# 02115 Instruction { source: "if tdcd9 == td7b5 then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(lcd_putc_if_else_0_2)], resolved: None }
70 8c 21 00 
# :lcd_putc_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }"] }
# lcd_putc_if_true_0_1
# t0 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }", "Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20))", "Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20))", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 02119 Instruction { source: "t0 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }\", \"Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x000f1008=987144)], resolved: None }
20 28 08 10 0f 00 
# t5dda <- mem[t0] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }", "Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20))", "Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20))", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 0211f Instruction { source: "t5dda <- mem[t0] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }\", \"Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: Load8, args: [Register(0x28), Register(0x34)], resolved: None }
05 28 34 
# tab78 <- t5dda Divide Number(0n20/0x14u8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }", "Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20))", "Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20))"] }
# 02122 Instruction { source: "tab78 <- t5dda Divide Number(0n20/0x14u8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }\", \"Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x14=20)], resolved: None }
04 00 14 
# 02125 Instruction { source: "tab78 <- t5dda Divide Number(0n20/0x14u8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }\", \"Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20))\"] }", opcode: Divide8, args: [Register(0x34), Register(0x00), Register(0x24)], resolved: None }
17 34 00 24 
# t8658 <- tab78 Add Number(0n1/0x01u8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }", "Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))"] }
# 02129 Instruction { source: "t8658 <- tab78 Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }\", \"Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 0212c Instruction { source: "t8658 <- tab78 Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }\", \"Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x24), Register(0x00), Register(0x24)], resolved: None }
14 24 00 24 
# next <- t8658 Multiply Number(0n20/0x14u8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }", "Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))"] }
# 02130 Instruction { source: "next <- t8658 Multiply Number(0n20/0x14u8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }\", \"Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x14=20)], resolved: None }
04 00 14 
# 02133 Instruction { source: "next <- t8658 Multiply Number(0n20/0x14u8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }\", \"Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))\"] }", opcode: Mul8_8, args: [Register(0x24), Register(0x00), Register(0x24)], resolved: None }
10 24 00 24 
# :lcd_putc_while_predicate_3
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }"] }
# lcd_putc_while_predicate_3
# t1 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 02137 Instruction { source: "t1 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x000f1008=987144)], resolved: None }
20 2c 08 10 0f 00 
# t5dda <- mem[t1] U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 0213d Instruction { source: "t5dda <- mem[t1] U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: Load8, args: [Register(0x2c), Register(0x34)], resolved: None }
05 2c 34 
# ta5ff <- next U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }", "Ident(\"next\")", "Ident(\"next\")"] }
# optimized away noop copy Instruction { source: "ta5ff <- next U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }\", \"Ident(\\\"next\\\")\", \"Ident(\\\"next\\\")\"] }", opcode: Copy8, args: [Register(0x24), Register(0x24)], resolved: None }
# if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }"] }
# 02140 Instruction { source: "if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }\"] }", opcode: Cmp8, args: [Register(0x24), Register(0x34)], resolved: None }
15 24 34 
# 02143 Instruction { source: "if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }\"] }", opcode: JcImm, args: [Label24(lcd_putc_while_end_5)], resolved: None }
71 88 21 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }\"] }", opcode: JmpImm, args: [Label24(lcd_putc_while_body_4)], resolved: None }
# :lcd_putc_while_body_4
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }"] }
# lcd_putc_while_body_4
# tb1c <- 0n987148/0x000f100cu32 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })", "Number(USIZE, 987148)", "Number(USIZE, 987148)"] }
# 02147 Instruction { source: "tb1c <- 0n987148/0x000f100cu32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Number(USIZE, 987148)\", \"Number(USIZE, 987148)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x000f100c=987148)], resolved: None }
20 38 0c 10 0f 00 
# t2 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 0214d Instruction { source: "t2 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x000f1008=987144)], resolved: None }
20 2c 08 10 0f 00 
# t5dda <- mem[t2] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 02153 Instruction { source: "t5dda <- mem[t2] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: Load8, args: [Register(0x2c), Register(0x34)], resolved: None }
05 2c 34 
# tad4e U32 <- t5dda U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }"] }
# 02156 Instruction { source: "Zero-pad for tad4e U32 <- t5dda U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x00000000=0)], resolved: None }
20 2c 00 00 00 00 
# 0215c Instruction { source: "tad4e U32 <- t5dda U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\"] }", opcode: Copy8, args: [Register(0x34), Register(0x2c)], resolved: None }
0b 34 2c 
# t164d <- tb1c Add Var(tad4e)
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })"] }
# 0215f Instruction { source: "t164d <- tb1c Add Var(tad4e)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02160 Instruction { source: "t164d <- tb1c Add Var(tad4e)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x2c), Register(0x2c)], resolved: None }
30 38 2c 2c 
# 02164 Instruction { source: "t164d <- tb1c Add Var(tad4e)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# tac5f <- 0n32/0x20u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }", "Number(U8, 32)", "Number(U8, 32)"] }
# 02165 Instruction { source: "tac5f <- 0n32/0x20u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\", \"Number(U8, 32)\", \"Number(U8, 32)\"] }", opcode: LoadImm8, args: [Register(0x34), Constant8(0x20=32)], resolved: None }
04 34 20 
# mem[t164d] <- tac5f U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }"] }
# 02168 Instruction { source: "mem[t164d] <- tac5f U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\"] }", opcode: Store8, args: [Register(0x34), Register(0x2c)], resolved: None }
06 34 2c 
# t3 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }"] }
# 0216b Instruction { source: "t3 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x000f1008=987144)], resolved: None }
20 2c 08 10 0f 00 
# t4 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 02171 Instruction { source: "t4 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: LoadImm32, args: [Register(0x30), Constant32(0x000f1008=987144)], resolved: None }
20 30 08 10 0f 00 
# t5dda <- mem[t4] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 02177 Instruction { source: "t5dda <- mem[t4] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: Load8, args: [Register(0x30), Register(0x34)], resolved: None }
05 30 34 
# t4584 <- t5dda Add Number(0n1/0x01u8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))"] }
# 0217a Instruction { source: "t4584 <- t5dda Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 0217d Instruction { source: "t4584 <- t5dda Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x34), Register(0x00), Register(0x34)], resolved: None }
14 34 00 34 
# mem[t3] <- t4584 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }"] }
# 02181 Instruction { source: "mem[t3] <- t4584 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\"] }", opcode: Store8, args: [Register(0x34), Register(0x2c)], resolved: None }
06 34 2c 
# goto lcd_putc_while_predicate_3
# 	SourceContext { contexts: [] }
# 02184 Instruction { source: "goto lcd_putc_while_predicate_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(lcd_putc_while_predicate_3)], resolved: None }
70 37 21 00 
# :lcd_putc_while_end_5
# 	SourceContext { contexts: [] }
# lcd_putc_while_end_5
# goto lcd_putc_if_end_0
# 	SourceContext { contexts: [] }
# 02188 Instruction { source: "goto lcd_putc_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(lcd_putc_if_end_0)], resolved: None }
70 eb 21 00 
# :lcd_putc_if_else_0_2
# 	SourceContext { contexts: [] }
# lcd_putc_if_else_0_2
# tb1c <- 0n987148/0x000f100cu32 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })", "Number(USIZE, 987148)", "Number(USIZE, 987148)"] }
# 0218c Instruction { source: "tb1c <- 0n987148/0x000f100cu32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Number(USIZE, 987148)\", \"Number(USIZE, 987148)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x000f100c=987148)], resolved: None }
20 38 0c 10 0f 00 
# t5 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 02192 Instruction { source: "t5 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x000f1008=987144)], resolved: None }
20 2c 08 10 0f 00 
# t5dda <- mem[t5] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 02198 Instruction { source: "t5dda <- mem[t5] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: Load8, args: [Register(0x2c), Register(0x34)], resolved: None }
05 2c 34 
# tad4e U32 <- t5dda U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }"] }
# 0219b Instruction { source: "Zero-pad for tad4e U32 <- t5dda U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x00000000=0)], resolved: None }
20 2c 00 00 00 00 
# 021a1 Instruction { source: "tad4e U32 <- t5dda U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\"] }", opcode: Copy8, args: [Register(0x34), Register(0x2c)], resolved: None }
0b 34 2c 
# t164d <- tb1c Add Var(tad4e)
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })"] }
# 021a4 Instruction { source: "t164d <- tb1c Add Var(tad4e)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 021a5 Instruction { source: "t164d <- tb1c Add Var(tad4e)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x2c), Register(0x2c)], resolved: None }
30 38 2c 2c 
# 021a9 Instruction { source: "t164d <- tb1c Add Var(tad4e)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x24), Register(0x24)], resolved: None }
# mem[t164d] <- tdcd9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }"] }
# 021aa Instruction { source: "mem[t164d] <- tdcd9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\"] }", opcode: Store8, args: [Register(0x24), Register(0x2c)], resolved: None }
06 24 2c 
# t6 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 021ad Instruction { source: "t6 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] })\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x000f1008=987144)], resolved: None }
20 2c 08 10 0f 00 
# t5dda <- mem[t6] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 021b3 Instruction { source: "t5dda <- mem[t6] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] })\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: Load8, args: [Register(0x2c), Register(0x34)], resolved: None }
05 2c 34 
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] })\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x24), Register(0x24)], resolved: None }
# None <= call lcd_draw_char(t5dda,tdcd9,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })"] }
# 021b6 Instruction { source: "Arg0[i]=t5dda None <= call lcd_draw_char(t5dda,tdcd9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Copy8, args: [Register(0x34), Register(0x00)], resolved: None }
0b 34 00 
# 021b9 Instruction { source: "Arg1[ch]=tdcd9 None <= call lcd_draw_char(t5dda,tdcd9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Copy8, args: [Register(0x24), Register(0x04)], resolved: None }
0b 24 04 
# Registers used by this function: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 021bc Instruction { source: "PseudoCall(Label24(:lcd_draw_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 021c2 Instruction { source: "PseudoCall(Label24(:lcd_draw_char))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c cc 21 00 00 
# 021c8 Instruction { source: "PseudoCall(Label24(:lcd_draw_char))", opcode: JmpImm, args: [Label24(:lcd_draw_char)], resolved: None }
70 01 1f 00 
# 021cc Instruction { source: "PseudoCall(Label24(:lcd_draw_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t7 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }"] }
# 021d2 Instruction { source: "t7 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x000f1008=987144)], resolved: None }
20 28 08 10 0f 00 
# t8 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 021d8 Instruction { source: "t8 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x000f1008=987144)], resolved: None }
20 2c 08 10 0f 00 
# t5dda <- mem[t8] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 021de Instruction { source: "t5dda <- mem[t8] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: Load8, args: [Register(0x2c), Register(0x34)], resolved: None }
05 2c 34 
# t4584 <- t5dda Add Number(0n1/0x01u8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))"] }
# 021e1 Instruction { source: "t4584 <- t5dda Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 021e4 Instruction { source: "t4584 <- t5dda Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x34), Register(0x00), Register(0x34)], resolved: None }
14 34 00 34 
# mem[t7] <- t4584 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }"] }
# 021e8 Instruction { source: "mem[t7] <- t4584 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\"] }", opcode: Store8, args: [Register(0x34), Register(0x28)], resolved: None }
06 34 28 
# :lcd_putc_if_end_0
# 	SourceContext { contexts: [] }
# lcd_putc_if_end_0
# t9 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \"lcd_scroll_up\", parameters: [] }) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 021eb Instruction { source: "t9 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x000f1008=987144)], resolved: None }
20 28 08 10 0f 00 
# t5dda <- mem[t9] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \"lcd_scroll_up\", parameters: [] }) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 021f1 Instruction { source: "t5dda <- mem[t9] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: Load8, args: [Register(0x28), Register(0x34)], resolved: None }
05 28 34 
# t8fe0 <- 0n80/0x50u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \"lcd_scroll_up\", parameters: [] }) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }", "Number(U8, 80)", "Number(U8, 80)"] }
# 021f4 Instruction { source: "t8fe0 <- 0n80/0x50u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }\", \"Number(U8, 80)\", \"Number(U8, 80)\"] }", opcode: LoadImm8, args: [Register(0x24), Constant8(0x50=80)], resolved: None }
04 24 50 
# if t5dda >= t8fe0 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \"lcd_scroll_up\", parameters: [] }) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }"] }
# 021f7 Instruction { source: "if t5dda >= t8fe0 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }\"] }", opcode: Cmp8, args: [Register(0x24), Register(0x34)], resolved: None }
15 24 34 
# 021fa Instruction { source: "if t5dda >= t8fe0 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }\"] }", opcode: JcImm, args: [Label24(lcd_putc_if_true_0_7)], resolved: None }
71 02 22 00 
# 021fe Instruction { source: "if t5dda >= t8fe0 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }\"] }", opcode: JmpImm, args: [Label24(lcd_putc_if_else_0_8)], resolved: None }
70 1c 22 00 
# :lcd_putc_if_true_0_7
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \"lcd_scroll_up\", parameters: [] }) }])], else_block: [] }"] }
# lcd_putc_if_true_0_7
# None <= call lcd_scroll_up()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_scroll_up\", parameters: [] }) }", "Call(Call { function: \"lcd_scroll_up\", parameters: [] })", "Call(Call { function: \"lcd_scroll_up\", parameters: [] })"] }
# Registers used by this function: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60}
# Registers used by callee tree: {61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02202 Instruction { source: "PseudoCall(Label24(:lcd_scroll_up))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02208 Instruction { source: "PseudoCall(Label24(:lcd_scroll_up))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 12 22 00 00 
# 0220e Instruction { source: "PseudoCall(Label24(:lcd_scroll_up))", opcode: JmpImm, args: [Label24(:lcd_scroll_up)], resolved: None }
70 23 22 00 
# 02212 Instruction { source: "PseudoCall(Label24(:lcd_scroll_up))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto lcd_putc_if_end_6
# 	SourceContext { contexts: [] }
# 02218 Instruction { source: "goto lcd_putc_if_end_6\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(lcd_putc_if_end_6)], resolved: None }
70 1c 22 00 
# :lcd_putc_if_else_0_8
# 	SourceContext { contexts: [] }
# lcd_putc_if_else_0_8
# :lcd_putc_if_end_6
# 	SourceContext { contexts: [] }
# lcd_putc_if_end_6
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 0221c Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_lcd_putc
# 	SourceContext { contexts: [] }
# function_end_lcd_putc
# Unreachable
# 	SourceContext { contexts: [] }
# 0221e Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :lcd_scroll_up
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([61])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([62])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (static "lcd_current") Reg(U32) Some([64, 65, 66, 67])
# Var t1 (static "lcd_current") Reg(U32) Some([68, 69, 70, 71])
# Var t21b4 (t21b4 Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })) Reg(U8) Some([61])
# Var t2aa3 (t2aa3 Number(U8, 60)) Reg(U8) Some([61])
# Var t5dda (t5dda Ident("lcd_current")) Reg(U8) Some([62])
# Var t763a (t763a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }) Reg(U32) Some([64, 65, 66, 67])
# Var t7e9 (t7e9 Arithmetic(Add, Ident("i"), Number(U8, 20))) Reg(U8) Some([61])
# Var t8fe0 (t8fe0 Number(U8, 80)) Reg(U8) Some([61])
# Var t9725 (t9725 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) Reg(U32) Some([72, 73, 74, 75])
# Var t9e70 (t9e70 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }) Reg(U32) Some([72, 73, 74, 75])
# Var tac5f (tac5f Number(U8, 32)) Reg(U8) Some([61])
# Var tb02d (tb02d Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })) Reg(U8) Some([61])
# Var tb175 (tb175 Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))) Reg(U8) Some([62])
# Var tb1c (tb1c Number(USIZE, 987148)) Reg(U32) Some([76, 77, 78, 79])
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([62])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([61])
# Var tfd7d (tfd7d Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) Reg(U32) Some([64, 65, 66, 67])
# t0 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20)) }"] }
# 02223 Instruction { source: "t0 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20)) }\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x000f1008=987144)], resolved: None }
20 40 08 10 0f 00 
# t1 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20)) }", "Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20))", "Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20))", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 02229 Instruction { source: "t1 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20)) }\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: LoadImm32, args: [Register(0x44), Constant32(0x000f1008=987144)], resolved: None }
20 44 08 10 0f 00 
# t5dda <- mem[t1] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20)) }", "Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20))", "Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20))", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 0222f Instruction { source: "t5dda <- mem[t1] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20)) }\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: Load8, args: [Register(0x44), Register(0x3e)], resolved: None }
05 44 3e 
# tb175 <- t5dda Subtract Number(0n20/0x14u8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20)) }", "Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20))", "Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20))"] }
# 02232 Instruction { source: "tb175 <- t5dda Subtract Number(0n20/0x14u8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20)) }\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0xec=236)], resolved: None }
04 00 ec 
# 02235 Instruction { source: "tb175 <- t5dda Subtract Number(0n20/0x14u8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20)) }\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\"] }", opcode: Add8NoCarryIn, args: [Register(0x3e), Register(0x00), Register(0x3e)], resolved: None }
14 3e 00 3e 
# mem[t0] <- tb175 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20)) }"] }
# 02239 Instruction { source: "mem[t0] <- tb175 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20)) }\"] }", opcode: Store8, args: [Register(0x3e), Register(0x40)], resolved: None }
06 3e 40 
# i <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 0223c Instruction { source: "i <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3e), Constant8(0x00=0)], resolved: None }
04 3e 00 
# :lcd_scroll_up_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }, Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }"] }
# lcd_scroll_up_while_predicate_0
# td0f3 <- i U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }, Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "td0f3 <- i U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }, Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x3e), Register(0x3e)], resolved: None }
# t2aa3 <- 0n60/0x3cu8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }, Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }", "Number(U8, 60)", "Number(U8, 60)"] }
# 0223f Instruction { source: "t2aa3 <- 0n60/0x3cu8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }, Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }\", \"Number(U8, 60)\", \"Number(U8, 60)\"] }", opcode: LoadImm8, args: [Register(0x3d), Constant8(0x3c=60)], resolved: None }
04 3d 3c 
# if td0f3 < t2aa3 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }, Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }"] }
# 02242 Instruction { source: "if td0f3 < t2aa3 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }, Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }\"] }", opcode: Cmp8, args: [Register(0x3d), Register(0x3e)], resolved: None }
15 3d 3e 
# 02245 Instruction { source: "if td0f3 < t2aa3 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }, Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }\"] }", opcode: JcImm, args: [Label24(lcd_scroll_up_while_end_2)], resolved: None }
71 a7 22 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t2aa3 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }, Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }\"] }", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_1)], resolved: None }
# :lcd_scroll_up_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }, Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }"] }
# lcd_scroll_up_while_body_1
# tb1c <- 0n987148/0x000f100cu32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }", "Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) })", "Number(USIZE, 987148)", "Number(USIZE, 987148)"] }
# 02249 Instruction { source: "tb1c <- 0n987148/0x000f100cu32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) })\", \"Number(USIZE, 987148)\", \"Number(USIZE, 987148)\"] }", opcode: LoadImm32, args: [Register(0x4c), Constant32(0x000f100c=987148)], resolved: None }
20 4c 0c 10 0f 00 
# td0f3 <- i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }", "Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 20))", "Arithmetic(Add, Ident(\"i\"), Number(U8, 20))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "td0f3 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x3e), Register(0x3e)], resolved: None }
# t7e9 <- td0f3 Add Number(0n20/0x14u8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }", "Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 20))", "Arithmetic(Add, Ident(\"i\"), Number(U8, 20))"] }
# 0224f Instruction { source: "t7e9 <- td0f3 Add Number(0n20/0x14u8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x14=20)], resolved: None }
04 00 14 
# 02252 Instruction { source: "t7e9 <- td0f3 Add Number(0n20/0x14u8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))\"] }", opcode: Add8NoCarryIn, args: [Register(0x3e), Register(0x00), Register(0x3d)], resolved: None }
14 3e 00 3d 
# tfd7d U32 <- t7e9 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }", "Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }"] }
# 02256 Instruction { source: "Zero-pad for tfd7d U32 <- t7e9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000000=0)], resolved: None }
20 40 00 00 00 00 
# 0225c Instruction { source: "tfd7d U32 <- t7e9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\"] }", opcode: Copy8, args: [Register(0x3d), Register(0x40)], resolved: None }
0b 3d 40 
# t763a <- tb1c Add Var(tfd7d)
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }", "Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) })"] }
# 0225f Instruction { source: "t763a <- tb1c Add Var(tfd7d)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02260 Instruction { source: "t763a <- tb1c Add Var(tfd7d)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) })\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x40), Register(0x40)], resolved: None }
30 4c 40 40 
# 02264 Instruction { source: "t763a <- tb1c Add Var(tfd7d)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# ch <- mem[t763a] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }", "Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20)))"] }
# 02265 Instruction { source: "ch <- mem[t763a] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\"] }", opcode: Load8, args: [Register(0x40), Register(0x3d)], resolved: None }
05 40 3d 
# tb1c <- 0n987148/0x000f100cu32 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Number(USIZE, 987148)", "Number(USIZE, 987148)"] }
# 02268 Instruction { source: "tb1c <- 0n987148/0x000f100cu32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Number(USIZE, 987148)\", \"Number(USIZE, 987148)\"] }", opcode: LoadImm32, args: [Register(0x4c), Constant32(0x000f100c=987148)], resolved: None }
20 4c 0c 10 0f 00 
# td0f3 <- i U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "td0f3 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x3e), Register(0x3e)], resolved: None }
# t9725 U32 <- td0f3 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }"] }
# 0226e Instruction { source: "Zero-pad for t9725 U32 <- td0f3 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\"] }", opcode: LoadImm32, args: [Register(0x48), Constant32(0x00000000=0)], resolved: None }
20 48 00 00 00 00 
# 02274 Instruction { source: "t9725 U32 <- td0f3 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\"] }", opcode: Copy8, args: [Register(0x3e), Register(0x48)], resolved: None }
0b 3e 48 
# t9e70 <- tb1c Add Var(t9725)
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })"] }
# 02277 Instruction { source: "t9e70 <- tb1c Add Var(t9725)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02278 Instruction { source: "t9e70 <- tb1c Add Var(t9725)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x48), Register(0x48)], resolved: None }
30 4c 48 48 
# 0227c Instruction { source: "t9e70 <- tb1c Add Var(t9725)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x3d), Register(0x3d)], resolved: None }
# mem[t9e70] <- tdcd9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }"] }
# 0227d Instruction { source: "mem[t9e70] <- tdcd9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }\"] }", opcode: Store8, args: [Register(0x3d), Register(0x48)], resolved: None }
06 3d 48 
# td0f3 <- i U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "td0f3 <- i U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] })\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x3e), Register(0x3e)], resolved: None }
# tdcd9 <- ch U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] })\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x3d), Register(0x3d)], resolved: None }
# None <= call lcd_draw_char(td0f3,tdcd9,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })"] }
# 02280 Instruction { source: "Arg0[i]=td0f3 None <= call lcd_draw_char(td0f3,tdcd9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Copy8, args: [Register(0x3e), Register(0x00)], resolved: None }
0b 3e 00 
# 02283 Instruction { source: "Arg1[ch]=tdcd9 None <= call lcd_draw_char(td0f3,tdcd9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Copy8, args: [Register(0x3d), Register(0x04)], resolved: None }
0b 3d 04 
# Registers used by this function: {61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02286 Instruction { source: "PseudoCall(Label24(:lcd_draw_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 0228c Instruction { source: "PseudoCall(Label24(:lcd_draw_char))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 96 22 00 00 
# 02292 Instruction { source: "PseudoCall(Label24(:lcd_draw_char))", opcode: JmpImm, args: [Label24(:lcd_draw_char)], resolved: None }
70 01 1f 00 
# 02296 Instruction { source: "PseudoCall(Label24(:lcd_draw_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# td0f3 <- i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "td0f3 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x3e), Register(0x3e)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))"] }
# 0229c Instruction { source: "i <- td0f3 Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 0229f Instruction { source: "i <- td0f3 Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x3e), Register(0x00), Register(0x3e)], resolved: None }
14 3e 00 3e 
# goto lcd_scroll_up_while_predicate_0
# 	SourceContext { contexts: [] }
# 022a3 Instruction { source: "goto lcd_scroll_up_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_predicate_0)], resolved: None }
70 3f 22 00 
# :lcd_scroll_up_while_end_2
# 	SourceContext { contexts: [] }
# lcd_scroll_up_while_end_2
# :lcd_scroll_up_while_predicate_3
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }"] }
# lcd_scroll_up_while_predicate_3
# td0f3 <- i U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "td0f3 <- i U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x3e), Register(0x3e)], resolved: None }
# t8fe0 <- 0n80/0x50u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }", "Number(U8, 80)", "Number(U8, 80)"] }
# 022a7 Instruction { source: "t8fe0 <- 0n80/0x50u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\", \"Number(U8, 80)\", \"Number(U8, 80)\"] }", opcode: LoadImm8, args: [Register(0x3d), Constant8(0x50=80)], resolved: None }
04 3d 50 
# if td0f3 < t8fe0 then 'lcd_scroll_up_while_body_4' else 'lcd_scroll_up_while_end_5'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }"] }
# 022aa Instruction { source: "if td0f3 < t8fe0 then 'lcd_scroll_up_while_body_4' else 'lcd_scroll_up_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\"] }", opcode: Cmp8, args: [Register(0x3d), Register(0x3e)], resolved: None }
15 3d 3e 
# 022ad Instruction { source: "if td0f3 < t8fe0 then 'lcd_scroll_up_while_body_4' else 'lcd_scroll_up_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\"] }", opcode: JcImm, args: [Label24(lcd_scroll_up_while_end_5)], resolved: None }
71 f6 22 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t8fe0 then 'lcd_scroll_up_while_body_4' else 'lcd_scroll_up_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\"] }", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_4)], resolved: None }
# :lcd_scroll_up_while_body_4
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }"] }
# lcd_scroll_up_while_body_4
# tb1c <- 0n987148/0x000f100cu32 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Number(USIZE, 987148)", "Number(USIZE, 987148)"] }
# 022b1 Instruction { source: "tb1c <- 0n987148/0x000f100cu32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Number(USIZE, 987148)\", \"Number(USIZE, 987148)\"] }", opcode: LoadImm32, args: [Register(0x4c), Constant32(0x000f100c=987148)], resolved: None }
20 4c 0c 10 0f 00 
# td0f3 <- i U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "td0f3 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x3e), Register(0x3e)], resolved: None }
# t9725 U32 <- td0f3 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }"] }
# 022b7 Instruction { source: "Zero-pad for t9725 U32 <- td0f3 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\"] }", opcode: LoadImm32, args: [Register(0x48), Constant32(0x00000000=0)], resolved: None }
20 48 00 00 00 00 
# 022bd Instruction { source: "t9725 U32 <- td0f3 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\"] }", opcode: Copy8, args: [Register(0x3e), Register(0x48)], resolved: None }
0b 3e 48 
# t9e70 <- tb1c Add Var(t9725)
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })"] }
# 022c0 Instruction { source: "t9e70 <- tb1c Add Var(t9725)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 022c1 Instruction { source: "t9e70 <- tb1c Add Var(t9725)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x48), Register(0x48)], resolved: None }
30 4c 48 48 
# 022c5 Instruction { source: "t9e70 <- tb1c Add Var(t9725)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# tac5f <- 0n32/0x20u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Number(U8, 32)", "Number(U8, 32)"] }
# 022c6 Instruction { source: "tac5f <- 0n32/0x20u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Number(U8, 32)\", \"Number(U8, 32)\"] }", opcode: LoadImm8, args: [Register(0x3d), Constant8(0x20=32)], resolved: None }
04 3d 20 
# mem[t9e70] <- tac5f U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }"] }
# 022c9 Instruction { source: "mem[t9e70] <- tac5f U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\"] }", opcode: Store8, args: [Register(0x3d), Register(0x48)], resolved: None }
06 3d 48 
# td0f3 <- i U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] })", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] })", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "td0f3 <- i U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] })\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x3e), Register(0x3e)], resolved: None }
# tac5f <- 0n32/0x20u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] })", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] })", "Number(U8, 32)", "Number(U8, 32)"] }
# 022cc Instruction { source: "tac5f <- 0n32/0x20u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] })\", \"Number(U8, 32)\", \"Number(U8, 32)\"] }", opcode: LoadImm8, args: [Register(0x3d), Constant8(0x20=32)], resolved: None }
04 3d 20 
# None <= call lcd_draw_char(td0f3,tac5f,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] })", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] })"] }
# 022cf Instruction { source: "Arg0[i]=td0f3 None <= call lcd_draw_char(td0f3,tac5f,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] })\"] }", opcode: Copy8, args: [Register(0x3e), Register(0x00)], resolved: None }
0b 3e 00 
# 022d2 Instruction { source: "Arg1[ch]=tac5f None <= call lcd_draw_char(td0f3,tac5f,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] })\"] }", opcode: Copy8, args: [Register(0x3d), Register(0x04)], resolved: None }
0b 3d 04 
# Registers used by this function: {61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 022d5 Instruction { source: "PseudoCall(Label24(:lcd_draw_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 022db Instruction { source: "PseudoCall(Label24(:lcd_draw_char))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c e5 22 00 00 
# 022e1 Instruction { source: "PseudoCall(Label24(:lcd_draw_char))", opcode: JmpImm, args: [Label24(:lcd_draw_char)], resolved: None }
70 01 1f 00 
# 022e5 Instruction { source: "PseudoCall(Label24(:lcd_draw_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# td0f3 <- i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "td0f3 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x3e), Register(0x3e)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))"] }
# 022eb Instruction { source: "i <- td0f3 Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 022ee Instruction { source: "i <- td0f3 Add Number(0n1/0x01u8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x3e), Register(0x00), Register(0x3e)], resolved: None }
14 3e 00 3e 
# goto lcd_scroll_up_while_predicate_3
# 	SourceContext { contexts: [] }
# 022f2 Instruction { source: "goto lcd_scroll_up_while_predicate_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_predicate_3)], resolved: None }
70 a7 22 00 
# :lcd_scroll_up_while_end_5
# 	SourceContext { contexts: [] }
# lcd_scroll_up_while_end_5
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 022f6 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_lcd_scroll_up
# 	SourceContext { contexts: [] }
# function_end_lcd_scroll_up
# Unreachable
# 	SourceContext { contexts: [] }
# 022f8 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :main
# Ret Some(U8)
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var calc (Local calc Struct("RpnCalc") Static(987500)) Static(987500) None
# Var inline_main_RpnCalc_init_51_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_RpnCalc_init_51_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([84, 85, 86, 87])
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_main_RpnCalc_init_51_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_RpnCalc_init_51_s (Local s Ptr(Struct("Stack")) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_main_RpnCalc_init_51_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_main_RpnCalc_init_51_t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_main_RpnCalc_init_51_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_main_RpnCalc_init_51_tb2e9 (tb2e9 Ident("s")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_main_RpnCalc_init_51_tbc15 (tbc15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_main_RpnCalc_init_51_tf462 (tf462 Call(Call { function: "stack_init", parameters: [Ident("s")] })) Reg(U8) Some([92])
# Var inline_main_putc_25_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_25_c (Arg0 c Number(U8)) Reg(U8) Some([92])
# Var inline_main_putc_25_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_25_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([92])
# Var inline_main_putc_25_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([92])
# Var inline_main_putc_25_tac13 (tac13 Ident("c")) Reg(U8) Some([92])
# Var inline_main_putc_26_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_26_c (Arg0 c Number(U8)) Reg(U8) Some([92])
# Var inline_main_putc_26_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_26_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([92])
# Var inline_main_putc_26_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([92])
# Var inline_main_putc_26_tac13 (tac13 Ident("c")) Reg(U8) Some([92])
# Var inline_main_putc_27_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_27_c (Arg0 c Number(U8)) Reg(U8) Some([92])
# Var inline_main_putc_27_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_27_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([92])
# Var inline_main_putc_27_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([92])
# Var inline_main_putc_27_tac13 (tac13 Ident("c")) Reg(U8) Some([92])
# Var inline_main_putc_28_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_28_c (Arg0 c Number(U8)) Reg(U8) Some([92])
# Var inline_main_putc_28_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_28_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([92])
# Var inline_main_putc_28_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([92])
# Var inline_main_putc_28_tac13 (tac13 Ident("c")) Reg(U8) Some([92])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (static "calc") Reg(U32) Some([80, 81, 82, 83])
# Var t1 (static "calc") Reg(U32) Some([80, 81, 82, 83])
# Var t2a99 (t2a99 Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) Reg(U8) Some([92])
# Var t71d9 (t71d9 Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })) Reg(U8) Some([92])
# Var t7ddc (t7ddc Call(Call { function: "putc", parameters: [Number(U8, 78)] })) Reg(U8) Some([92])
# Var t8fe0 (t8fe0 Number(U8, 80)) Reg(U8) Some([92])
# Var t9c38 (t9c38 Number(U8, 82)) Reg(U8) Some([92])
# Var tb303 (tb303 Call(Call { function: "putc", parameters: [Number(U8, 82)] })) Reg(U8) Some([92])
# Var tca8 (tca8 AddressOf(Ident("calc"))) Reg(U32) Some([80, 81, 82, 83])
# Var td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([92])
# Var tdcaa (tdcaa Call(Call { function: "stdio_init", parameters: [] })) Reg(U8) Some([92])
# Var te6fd (te6fd Number(U8, 78)) Reg(U8) Some([92])
# Var te7a4 (te7a4 Call(Call { function: "putc", parameters: [Number(U8, 80)] })) Reg(U8) Some([92])
# Var tec99 (tec99 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([92])
# None <= call stdio_init()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stdio_init\", parameters: [] }) }", "Call(Call { function: \"stdio_init\", parameters: [] })", "Call(Call { function: \"stdio_init\", parameters: [] })"] }
# Registers used by this function: {80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 32, 33, 34, 35, 164, 165, 166, 167, 168, 169, 170, 171, 188, 189, 190, 191, 192, 196, 197, 198, 199, 200, 230, 252}
# Registers to save: []
# 022fd Instruction { source: "PseudoCall(Label24(:stdio_init))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02303 Instruction { source: "PseudoCall(Label24(:stdio_init))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 0d 23 00 00 
# 02309 Instruction { source: "PseudoCall(Label24(:stdio_init))", opcode: JmpImm, args: [Label24(:stdio_init)], resolved: None }
70 53 2b 00 
# 0230d Instruction { source: "PseudoCall(Label24(:stdio_init))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t9c38 <- 0n82/0x52u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Number(U8, 82)", "Number(U8, 82)"] }
# 02313 Instruction { source: "t9c38 <- 0n82/0x52u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Number(U8, 82)\", \"Number(U8, 82)\"] }", opcode: LoadImm8, args: [Register(0x5c), Constant8(0x52=82)], resolved: None }
04 5c 52 
# inline_main_putc_25_c <- t9c38 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })"] }
# optimized away noop copy Instruction { source: "inline_main_putc_25_c <- t9c38 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_putc_25_tac13 <- inline_main_putc_25_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_putc_25_tac13 <- inline_main_putc_25_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x5c)], resolved: None }
# None <= call io_write0(inline_main_putc_25_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 02316 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x5c)], resolved: None }
68 5c 
# inline_main_putc_25_tac13 <- inline_main_putc_25_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_putc_25_tac13 <- inline_main_putc_25_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x5c)], resolved: None }
# None <= call lcd_putc(inline_main_putc_25_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })"] }
# 02318 Instruction { source: "Arg0[ch]=inline_main_putc_25_tac13 None <= call lcd_putc(inline_main_putc_25_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x00)], resolved: None }
0b 5c 00 
# Registers used by this function: {80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92}
# Registers used by callee tree: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 0231b Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02321 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 2b 23 00 00 
# 02327 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: JmpImm, args: [Label24(:lcd_putc)], resolved: None }
70 08 21 00 
# 0232b Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto inline_main_putc_25_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_25_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_putc_25_function_end_putc)], resolved: None }
# :inline_main_putc_25_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_putc_25_function_end_putc
# t8fe0 <- 0n80/0x50u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 80)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 80)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 80)] })", "Number(U8, 80)", "Number(U8, 80)"] }
# 02331 Instruction { source: "t8fe0 <- 0n80/0x50u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 80)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 80)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 80)] })\", \"Number(U8, 80)\", \"Number(U8, 80)\"] }", opcode: LoadImm8, args: [Register(0x5c), Constant8(0x50=80)], resolved: None }
04 5c 50 
# inline_main_putc_26_c <- t8fe0 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 80)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 80)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 80)] })"] }
# optimized away noop copy Instruction { source: "inline_main_putc_26_c <- t8fe0 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 80)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 80)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 80)] })\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_putc_26_tac13 <- inline_main_putc_26_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_putc_26_tac13 <- inline_main_putc_26_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x5c)], resolved: None }
# None <= call io_write0(inline_main_putc_26_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 02334 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x5c)], resolved: None }
68 5c 
# inline_main_putc_26_tac13 <- inline_main_putc_26_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_putc_26_tac13 <- inline_main_putc_26_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x5c)], resolved: None }
# None <= call lcd_putc(inline_main_putc_26_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })"] }
# 02336 Instruction { source: "Arg0[ch]=inline_main_putc_26_tac13 None <= call lcd_putc(inline_main_putc_26_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x00)], resolved: None }
0b 5c 00 
# Registers used by this function: {80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92}
# Registers used by callee tree: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02339 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 0233f Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 49 23 00 00 
# 02345 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: JmpImm, args: [Label24(:lcd_putc)], resolved: None }
70 08 21 00 
# 02349 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto inline_main_putc_26_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_26_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_putc_26_function_end_putc)], resolved: None }
# :inline_main_putc_26_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_putc_26_function_end_putc
# t0 <- 0n987500/0x000f116cu32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "AddressOf(Ident(\"calc\"))", "AddressOf(Ident(\"calc\"))"] }
# 0234f Instruction { source: "t0 <- 0n987500/0x000f116cu32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"AddressOf(Ident(\\\"calc\\\"))\", \"AddressOf(Ident(\\\"calc\\\"))\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x000f116c=987500)], resolved: None }
20 50 6c 11 0f 00 
# tca8 <- t0 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "AddressOf(Ident(\"calc\"))", "AddressOf(Ident(\"calc\"))"] }
# optimized away noop copy Instruction { source: "tca8 <- t0 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"AddressOf(Ident(\\\"calc\\\"))\", \"AddressOf(Ident(\\\"calc\\\"))\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_main_RpnCalc_init_51_c <- tca8 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })"] }
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_51_c <- tca8 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_main_RpnCalc_init_51_tbc15 <- inline_main_RpnCalc_init_51_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"s\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_51_tbc15 <- inline_main_RpnCalc_init_51_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"s\\\"), var_type: Some(Ptr(Struct(\\\"Stack\\\"))), value: AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_main_RpnCalc_init_51_s <- inline_main_RpnCalc_init_51_tbc15 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"s\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))"] }
# 02355 Instruction { source: "inline_main_RpnCalc_init_51_s <- inline_main_RpnCalc_init_51_tbc15 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"s\\\"), var_type: Some(Ptr(Struct(\\\"Stack\\\"))), value: AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\"] }", opcode: Copy32, args: [Register(0x50), Register(0x54)], resolved: None }
21 50 54 
# inline_main_RpnCalc_init_51_tb2e9 <- inline_main_RpnCalc_init_51_s U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Ident(\"s\")", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_51_tb2e9 <- inline_main_RpnCalc_init_51_s U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] }) }\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\", \"Ident(\\\"s\\\")\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- inline_main_RpnCalc_init_51_tb2e9 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- inline_main_RpnCalc_init_51_tb2e9 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] }) }\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t4bb9 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t4bb9 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t4bb9 Add Number(0n64/0x00000040u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 02358 Instruction { source: "inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: Copy32, args: [Register(0x54), Register(0x58)], resolved: None }
21 54 58 
# 0235b Instruction { source: "inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t4bb9 Add Number(0n64/0x00000040u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x58), Constant32(0x00000040=64)], resolved: None }
32 58 40 00 00 00 
# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 02361 Instruction { source: "inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x54), Constant32(0x00000000=0)], resolved: None }
20 54 00 00 00 00 
# mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }"] }
# 02367 Instruction { source: "mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x54), Register(0x58)], resolved: None }
23 54 58 
# 0236a Instruction { source: "mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init)], resolved: None }
# :inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# 	SourceContext { contexts: [] }
# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# inline_main_RpnCalc_init_51_tb1ed <- inline_main_RpnCalc_init_51_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_51_tb1ed <- inline_main_RpnCalc_init_51_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_tb1ed Add Number(0n68/0x00000044u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 0236b Instruction { source: "inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_tb1ed Add Number(0n68/0x00000044u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: Copy32, args: [Register(0x50), Register(0x54)], resolved: None }
21 50 54 
# 0236e Instruction { source: "inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_tb1ed Add Number(0n68/0x00000044u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x54), Constant32(0x00000044=68)], resolved: None }
32 54 44 00 00 00 
# inline_main_RpnCalc_init_51_t60ec <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 02374 Instruction { source: "inline_main_RpnCalc_init_51_t60ec <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000000=0)], resolved: None }
20 50 00 00 00 00 
# mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }"] }
# 0237a Instruction { source: "mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x50), Register(0x54)], resolved: None }
23 50 54 
# 0237d Instruction { source: "mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_main_RpnCalc_init_51_function_end_RpnCalc_init
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_RpnCalc_init_51_function_end_RpnCalc_init\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_RpnCalc_init_51_function_end_RpnCalc_init)], resolved: None }
# :inline_main_RpnCalc_init_51_function_end_RpnCalc_init
# 	SourceContext { contexts: [] }
# inline_main_RpnCalc_init_51_function_end_RpnCalc_init
# te6fd <- 0n78/0x4eu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 78)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 78)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 78)] })", "Number(U8, 78)", "Number(U8, 78)"] }
# 0237e Instruction { source: "te6fd <- 0n78/0x4eu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 78)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 78)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 78)] })\", \"Number(U8, 78)\", \"Number(U8, 78)\"] }", opcode: LoadImm8, args: [Register(0x5c), Constant8(0x4e=78)], resolved: None }
04 5c 4e 
# inline_main_putc_27_c <- te6fd U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 78)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 78)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 78)] })"] }
# optimized away noop copy Instruction { source: "inline_main_putc_27_c <- te6fd U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 78)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 78)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 78)] })\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_putc_27_tac13 <- inline_main_putc_27_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_putc_27_tac13 <- inline_main_putc_27_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x5c)], resolved: None }
# None <= call io_write0(inline_main_putc_27_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 02381 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x5c)], resolved: None }
68 5c 
# inline_main_putc_27_tac13 <- inline_main_putc_27_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_putc_27_tac13 <- inline_main_putc_27_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x5c)], resolved: None }
# None <= call lcd_putc(inline_main_putc_27_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })"] }
# 02383 Instruction { source: "Arg0[ch]=inline_main_putc_27_tac13 None <= call lcd_putc(inline_main_putc_27_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x00)], resolved: None }
0b 5c 00 
# Registers used by this function: {80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92}
# Registers used by callee tree: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02386 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 0238c Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 96 23 00 00 
# 02392 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: JmpImm, args: [Label24(:lcd_putc)], resolved: None }
70 08 21 00 
# 02396 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto inline_main_putc_27_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_27_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_putc_27_function_end_putc)], resolved: None }
# :inline_main_putc_27_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_putc_27_function_end_putc
# td7b5 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 0239c Instruction { source: "td7b5 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x5c), Constant8(0x0a=10)], resolved: None }
04 5c 0a 
# inline_main_putc_28_c <- td7b5 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# optimized away noop copy Instruction { source: "inline_main_putc_28_c <- td7b5 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_main_putc_28_tac13 <- inline_main_putc_28_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_putc_28_tac13 <- inline_main_putc_28_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x5c)], resolved: None }
# None <= call io_write0(inline_main_putc_28_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 0239f Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x5c)], resolved: None }
68 5c 
# inline_main_putc_28_tac13 <- inline_main_putc_28_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_putc_28_tac13 <- inline_main_putc_28_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x5c)], resolved: None }
# None <= call lcd_putc(inline_main_putc_28_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })"] }
# 023a1 Instruction { source: "Arg0[ch]=inline_main_putc_28_tac13 None <= call lcd_putc(inline_main_putc_28_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x00)], resolved: None }
0b 5c 00 
# Registers used by this function: {80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92}
# Registers used by callee tree: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 023a4 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 023aa Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c b4 23 00 00 
# 023b0 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: JmpImm, args: [Label24(:lcd_putc)], resolved: None }
70 08 21 00 
# 023b4 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto inline_main_putc_28_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_28_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_putc_28_function_end_putc)], resolved: None }
# :inline_main_putc_28_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_putc_28_function_end_putc
# t1 <- 0n987500/0x000f116cu32 
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })) }", "Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })", "AddressOf(Ident(\"calc\"))", "AddressOf(Ident(\"calc\"))"] }
# 023ba Instruction { source: "t1 <- 0n987500/0x000f116cu32 \n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"AddressOf(Ident(\\\"calc\\\"))\", \"AddressOf(Ident(\\\"calc\\\"))\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x000f116c=987500)], resolved: None }
20 50 6c 11 0f 00 
# tca8 <- t1 U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })) }", "Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })", "AddressOf(Ident(\"calc\"))", "AddressOf(Ident(\"calc\"))"] }
# optimized away noop copy Instruction { source: "tca8 <- t1 U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"AddressOf(Ident(\\\"calc\\\"))\", \"AddressOf(Ident(\\\"calc\\\"))\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# Some(t2a99) <= call RpnCalc_run(tca8,)
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })) }", "Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })"] }
# 023c0 Instruction { source: "Arg0[calc]=tca8 Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Copy32, args: [Register(0x50), Register(0x00)], resolved: None }
21 50 00 
# Registers used by this function: {80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92}
# Registers used by callee tree: {24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92]
# 023c3 Instruction { source: "Saving reg0x5c before Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Push8, args: [Register(0x5c)], resolved: None }
09 5c 
# 023c5 Instruction { source: "Saving reg0x5b before Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Push8, args: [Register(0x5b)], resolved: None }
09 5b 
# 023c7 Instruction { source: "Saving reg0x5a before Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Push8, args: [Register(0x5a)], resolved: None }
09 5a 
# 023c9 Instruction { source: "Saving reg0x59 before Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Push8, args: [Register(0x59)], resolved: None }
09 59 
# 023cb Instruction { source: "Saving reg0x58 before Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Push8, args: [Register(0x58)], resolved: None }
09 58 
# 023cd Instruction { source: "Saving reg0x57 before Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Push8, args: [Register(0x57)], resolved: None }
09 57 
# 023cf Instruction { source: "Saving reg0x56 before Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Push8, args: [Register(0x56)], resolved: None }
09 56 
# 023d1 Instruction { source: "Saving reg0x55 before Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Push8, args: [Register(0x55)], resolved: None }
09 55 
# 023d3 Instruction { source: "Saving reg0x54 before Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Push8, args: [Register(0x54)], resolved: None }
09 54 
# 023d5 Instruction { source: "Saving reg0x53 before Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Push8, args: [Register(0x53)], resolved: None }
09 53 
# 023d7 Instruction { source: "Saving reg0x52 before Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Push8, args: [Register(0x52)], resolved: None }
09 52 
# 023d9 Instruction { source: "Saving reg0x51 before Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Push8, args: [Register(0x51)], resolved: None }
09 51 
# 023db Instruction { source: "Saving reg0x50 before Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Push8, args: [Register(0x50)], resolved: None }
09 50 
# 023dd Instruction { source: "PseudoCall(Label24(:RpnCalc_run))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 023e3 Instruction { source: "PseudoCall(Label24(:RpnCalc_run))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c ed 23 00 00 
# 023e9 Instruction { source: "PseudoCall(Label24(:RpnCalc_run))", opcode: JmpImm, args: [Label24(:RpnCalc_run)], resolved: None }
70 73 17 00 
# 023ed Instruction { source: "PseudoCall(Label24(:RpnCalc_run))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 023f3 Instruction { source: "Restoring reg0x50 after Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Pop8, args: [Register(0x50)], resolved: None }
0a 50 
# 023f5 Instruction { source: "Restoring reg0x51 after Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Pop8, args: [Register(0x51)], resolved: None }
0a 51 
# 023f7 Instruction { source: "Restoring reg0x52 after Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Pop8, args: [Register(0x52)], resolved: None }
0a 52 
# 023f9 Instruction { source: "Restoring reg0x53 after Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Pop8, args: [Register(0x53)], resolved: None }
0a 53 
# 023fb Instruction { source: "Restoring reg0x54 after Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Pop8, args: [Register(0x54)], resolved: None }
0a 54 
# 023fd Instruction { source: "Restoring reg0x55 after Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Pop8, args: [Register(0x55)], resolved: None }
0a 55 
# 023ff Instruction { source: "Restoring reg0x56 after Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Pop8, args: [Register(0x56)], resolved: None }
0a 56 
# 02401 Instruction { source: "Restoring reg0x57 after Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Pop8, args: [Register(0x57)], resolved: None }
0a 57 
# 02403 Instruction { source: "Restoring reg0x58 after Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Pop8, args: [Register(0x58)], resolved: None }
0a 58 
# 02405 Instruction { source: "Restoring reg0x59 after Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Pop8, args: [Register(0x59)], resolved: None }
0a 59 
# 02407 Instruction { source: "Restoring reg0x5a after Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Pop8, args: [Register(0x5a)], resolved: None }
0a 5a 
# 02409 Instruction { source: "Restoring reg0x5b after Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Pop8, args: [Register(0x5b)], resolved: None }
0a 5b 
# 0240b Instruction { source: "Restoring reg0x5c after Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Pop8, args: [Register(0x5c)], resolved: None }
0a 5c 
# 0240d Instruction { source: "Some(t2a99) <= call RpnCalc_run(tca8,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Copy8, args: [Register(0x00), Register(0x5c)], resolved: None }
0b 00 5c 
# return Some(t2a99)
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })) }"] }
# 02410 Instruction { source: "return Some(t2a99)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\"] }", opcode: Copy8, args: [Register(0x5c), Register(0x00)], resolved: None }
0b 5c 00 
# 02413 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_main
# 	SourceContext { contexts: [] }
# function_end_main
# Unreachable
# 	SourceContext { contexts: [] }
# 02415 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :mul32_64
# Ret None
# Arg0=a
# Arg1=b
# Arg2=c
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var a (Arg0 a Number(USIZE)) Reg(U32) Some([96, 97, 98, 99])
# Var a_hi (Local a_hi Number(USIZE) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var b (Arg1 b Number(USIZE)) Reg(U32) Some([104, 105, 106, 107])
# Var b_hi (Local b_hi Number(USIZE) Reg(U32)) Reg(U32) Some([108, 109, 110, 111])
# Var c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_add_U64_0_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_mul32_64_add_U64_0_a (Arg0 a Ptr(Struct("U64"))) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_add_U64_0_b (Arg1 b Ptr(Struct("U64"))) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_add_U64_0_c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_add_U64_0_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_mul32_64_add_U64_0_lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([120, 121, 122, 123])
# Var inline_mul32_64_add_U64_0_t1335 (t1335 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([124, 125, 126, 127])
# Var inline_mul32_64_add_U64_0_t144a (t144a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_add_U64_0_t1506 (t1506 Ident("lo")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_add_U64_0_t153d (t153d PtrFieldDeref("b", "hi")) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_add_U64_0_t24ae (t24ae Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") } }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_add_U64_0_t2558 (t2558 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_add_U64_0_t3203 (t3203 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_add_U64_0_t6f1c (t6f1c Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_add_U64_0_t809 (t809 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_add_U64_0_t8956 (t8956 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_add_U64_0_t90ac (t90ac PtrFieldDeref("c", "lo")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_add_U64_0_ta95f (ta95f Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_add_U64_0_tbeec (tbeec Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_add_U64_0_tcbd1 (tcbd1 Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_add_U64_0_td5bf (td5bf PtrFieldDeref("b", "lo")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_add_U64_0_td868 (td868 PtrFieldDeref("a", "lo")) Reg(U32) Some([124, 125, 126, 127])
# Var inline_mul32_64_add_U64_0_te24c (te24c PtrFieldDeref("a", "hi")) Reg(U32) Some([132, 133, 134, 135])
# Var inline_mul32_64_add_U64_0_teec0 (teec0 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_add_U64_0_tf677 (tf677 PtrFieldDeref("c", "hi")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_add_U64_1_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_mul32_64_add_U64_1_a (Arg0 a Ptr(Struct("U64"))) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_add_U64_1_b (Arg1 b Ptr(Struct("U64"))) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_add_U64_1_c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_add_U64_1_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_mul32_64_add_U64_1_lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_add_U64_1_t1335 (t1335 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_add_U64_1_t144a (t144a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_add_U64_1_t1506 (t1506 Ident("lo")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_add_U64_1_t153d (t153d PtrFieldDeref("b", "hi")) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_add_U64_1_t24ae (t24ae Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") } }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_add_U64_1_t2558 (t2558 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_add_U64_1_t3203 (t3203 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_add_U64_1_t6f1c (t6f1c Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_add_U64_1_t809 (t809 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_add_U64_1_t8956 (t8956 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_add_U64_1_t90ac (t90ac PtrFieldDeref("c", "lo")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_add_U64_1_ta95f (ta95f Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_add_U64_1_tbeec (tbeec Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_add_U64_1_tcbd1 (tcbd1 Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_add_U64_1_td5bf (td5bf PtrFieldDeref("b", "lo")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_add_U64_1_td868 (td868 PtrFieldDeref("a", "lo")) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_add_U64_1_te24c (te24c PtrFieldDeref("a", "hi")) Reg(U32) Some([120, 121, 122, 123])
# Var inline_mul32_64_add_U64_1_teec0 (teec0 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_add_U64_1_tf677 (tf677 PtrFieldDeref("c", "hi")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_10_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_mul32_64_mul16_32_10_a (Arg0 a Number(USIZE)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_10_b (Arg1 b Number(USIZE)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_10_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_mul16_32_10_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([120, 121, 122, 123])
# Var inline_mul32_64_mul16_32_10_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_10_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([120, 121, 122, 123])
# Var inline_mul32_64_mul16_32_10_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_mul32_64_mul16_32_10_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([136])
# Var inline_mul32_64_mul16_32_10_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([136])
# Var inline_mul32_64_mul16_32_10_t3585 (t3585 Ident("e")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_10_t45f5 (t45f5 Ident("d")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_10_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([137])
# Var inline_mul32_64_mul16_32_10_t8792 (t8792 Ident("a")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_10_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([138])
# Var inline_mul32_64_mul16_32_10_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_10_tac13 (tac13 Ident("c")) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_mul16_32_10_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([136])
# Var inline_mul32_64_mul16_32_10_tace9 (tace9 Ident("b")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_10_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([139])
# Var inline_mul32_64_mul16_32_10_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([136])
# Var inline_mul32_64_mul16_32_10_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([120, 121, 122, 123])
# Var inline_mul32_64_mul16_32_10_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([137])
# Var inline_mul32_64_mul16_32_10_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([120, 121, 122, 123])
# Var inline_mul32_64_mul16_32_10_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([124, 125, 126, 127])
# Var inline_mul32_64_mul16_32_11_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_mul32_64_mul16_32_11_a (Arg0 a Number(USIZE)) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_11_b (Arg1 b Number(USIZE)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_11_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_11_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_11_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_11_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_11_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_mul32_64_mul16_32_11_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([140])
# Var inline_mul32_64_mul16_32_11_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([140])
# Var inline_mul32_64_mul16_32_11_t3585 (t3585 Ident("e")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_11_t45f5 (t45f5 Ident("d")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_11_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([141])
# Var inline_mul32_64_mul16_32_11_t8792 (t8792 Ident("a")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_11_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([136])
# Var inline_mul32_64_mul16_32_11_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_11_tac13 (tac13 Ident("c")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_11_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([140])
# Var inline_mul32_64_mul16_32_11_tace9 (tace9 Ident("b")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_11_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([142])
# Var inline_mul32_64_mul16_32_11_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([140])
# Var inline_mul32_64_mul16_32_11_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_11_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([141])
# Var inline_mul32_64_mul16_32_11_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_11_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_mul16_32_8_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_mul32_64_mul16_32_8_a (Arg0 a Number(USIZE)) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_mul16_32_8_b (Arg1 b Number(USIZE)) Reg(U32) Some([120, 121, 122, 123])
# Var inline_mul32_64_mul16_32_8_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([124, 125, 126, 127])
# Var inline_mul32_64_mul16_32_8_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_mul16_32_8_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_mul16_32_8_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_mul16_32_8_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_mul32_64_mul16_32_8_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([142])
# Var inline_mul32_64_mul16_32_8_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([142])
# Var inline_mul32_64_mul16_32_8_t3585 (t3585 Ident("e")) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_mul16_32_8_t45f5 (t45f5 Ident("d")) Reg(U32) Some([120, 121, 122, 123])
# Var inline_mul32_64_mul16_32_8_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([143])
# Var inline_mul32_64_mul16_32_8_t8792 (t8792 Ident("a")) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_mul16_32_8_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([137])
# Var inline_mul32_64_mul16_32_8_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_mul16_32_8_tac13 (tac13 Ident("c")) Reg(U32) Some([124, 125, 126, 127])
# Var inline_mul32_64_mul16_32_8_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([142])
# Var inline_mul32_64_mul16_32_8_tace9 (tace9 Ident("b")) Reg(U32) Some([120, 121, 122, 123])
# Var inline_mul32_64_mul16_32_8_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([144])
# Var inline_mul32_64_mul16_32_8_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([142])
# Var inline_mul32_64_mul16_32_8_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_mul16_32_8_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([143])
# Var inline_mul32_64_mul16_32_8_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_mul16_32_8_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_mul32_64_mul16_32_9_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_mul32_64_mul16_32_9_a (Arg0 a Number(USIZE)) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_mul16_32_9_b (Arg1 b Number(USIZE)) Reg(U32) Some([120, 121, 122, 123])
# Var inline_mul32_64_mul16_32_9_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([124, 125, 126, 127])
# Var inline_mul32_64_mul16_32_9_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_mul16_32_9_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_mul16_32_9_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_mul16_32_9_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_mul32_64_mul16_32_9_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([142])
# Var inline_mul32_64_mul16_32_9_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([142])
# Var inline_mul32_64_mul16_32_9_t3585 (t3585 Ident("e")) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_mul16_32_9_t45f5 (t45f5 Ident("d")) Reg(U32) Some([120, 121, 122, 123])
# Var inline_mul32_64_mul16_32_9_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([143])
# Var inline_mul32_64_mul16_32_9_t8792 (t8792 Ident("a")) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_mul16_32_9_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([137])
# Var inline_mul32_64_mul16_32_9_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_mul16_32_9_tac13 (tac13 Ident("c")) Reg(U32) Some([124, 125, 126, 127])
# Var inline_mul32_64_mul16_32_9_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([142])
# Var inline_mul32_64_mul16_32_9_tace9 (tace9 Ident("b")) Reg(U32) Some([120, 121, 122, 123])
# Var inline_mul32_64_mul16_32_9_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([144])
# Var inline_mul32_64_mul16_32_9_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([142])
# Var inline_mul32_64_mul16_32_9_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_mul16_32_9_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([143])
# Var inline_mul32_64_mul16_32_9_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_mul16_32_9_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([132, 133, 134, 135])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (Stack size negated) Reg(U32) Some([148, 149, 150, 151])
# Var t1335 (t1335 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([152, 153, 154, 155])
# Var t1f52 (t1f52 Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })) Reg(U8) Some([156])
# Var t2558 (t2558 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([112, 113, 114, 115])
# Var t3308 (t3308 Ident("temp_lo")) Reg(U32) Some([100, 101, 102, 103])
# Var t3f2a (t3f2a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }) Reg(U32) Some([100, 101, 102, 103])
# Var t41f5 (t41f5 Ident("temp_hi")) Reg(U32) Some([104, 105, 106, 107])
# Var t4a94 (t4a94 Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))) Reg(U32) Some([100, 101, 102, 103])
# Var t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([140])
# Var t5a04 (t5a04 Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })) Reg(U32) Some([116, 117, 118, 119])
# Var t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([140])
# Var t5cca (t5cca Ident("b_hi")) Reg(U32) Some([108, 109, 110, 111])
# Var t720d (t720d Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })) Reg(U32) Some([116, 117, 118, 119])
# Var t811a (t811a Index("b", Number(U8, 2))) Reg(U8) Some([138])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([96, 97, 98, 99])
# Var t8956 (t8956 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([112, 113, 114, 115])
# Var t8fbd (t8fbd Ident("a_hi")) Reg(U32) Some([100, 101, 102, 103])
# Var t9829 (t9829 Index("b", Number(U8, 3))) Reg(U8) Some([138])
# Var tac13 (tac13 Ident("c")) Reg(U32) Some([112, 113, 114, 115])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([104, 105, 106, 107])
# Var tb6b4 (tb6b4 Index("temp", Number(U8, 3))) Reg(U8) Some([136])
# Var tc89e (tc89e Index("temp", Number(U8, 0))) Reg(U8) Some([136])
# Var tdc08 (tdc08 Index("temp", Number(U8, 1))) Reg(U8) Some([136])
# Var te546 (te546 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }) Reg(U32) Some([148, 149, 150, 151])
# Var te825 (te825 Ident("__frame_pointer")) Reg(U32) Some([148, 149, 150, 151])
# Var temp (Local temp Number(USIZE) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var temp64 (Local temp64 Struct("U64") FrameOffset(0)) FrameOffset(0) None
# Var temp_hi (Local temp_hi Number(USIZE) Reg(U32)) Reg(U32) Some([152, 153, 154, 155])
# Var temp_lo (Local temp_lo Number(USIZE) Reg(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var tf338 (tf338 Index("temp", Number(U8, 2))) Reg(U8) Some([136])
# Var tf4b2 (tf4b2 AddressOf(Ident("temp64"))) Reg(U32) Some([104, 105, 106, 107])
# 0241a Instruction { source: "reserve 8 bytes of stack space for locals", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffff8=4294967288)], resolved: None }
32 0c f8 ff ff ff 
# 02420 Instruction { source: "Save function parameter 'a' registers [0, 1, 2, 3] to locals [96, 97, 98, 99].", opcode: Copy32, args: [Register(0x00), Register(0x60)], resolved: None }
21 00 60 
# 02423 Instruction { source: "Save function parameter 'b' registers [4, 5, 6, 7] to locals [104, 105, 106, 107].", opcode: Copy32, args: [Register(0x04), Register(0x68)], resolved: None }
21 04 68 
# 02426 Instruction { source: "Save function parameter 'c' registers [8, 9, 10, 11] to locals [112, 113, 114, 115].", opcode: Copy32, args: [Register(0x08), Register(0x70)], resolved: None }
21 08 70 
# __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32)
# 	SourceContext { contexts: [] }
# 02429 Instruction { source: "__frame_pointer <- __frame_pointer Add Number(0xfffffff8u32)\n\tSourceContext { contexts: [] }", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffff8=4294967288)], resolved: None }
32 0c f8 ff ff ff 
# a_hi <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a_hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 0242f Instruction { source: "a_hi <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a_hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000000=0)], resolved: None }
20 64 00 00 00 00 
# t5b7c <- a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 1)), var_type: None, value: Index(\"a\", Number(U8, 3)) }", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 02435 Instruction { source: "t5b7c <- a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"a\\\", Number(U8, 3)) }\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x63), Register(0x8c)], resolved: None }
0b 63 8c 
# a_hi[0x01..0x02] <- t5b7c U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 1)), var_type: None, value: Index(\"a\", Number(U8, 3)) }"] }
# 02438 Instruction { source: "a_hi[0x01..0x02] <- t5b7c U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"a\\\", Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0x8c), Register(0x65)], resolved: None }
0b 8c 65 
# t577f <- a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 0)), var_type: None, value: Index(\"a\", Number(U8, 2)) }", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 0243b Instruction { source: "t577f <- a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"a\\\", Number(U8, 2)) }\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x62), Register(0x8c)], resolved: None }
0b 62 8c 
# a_hi[0x00..0x01] <- t577f U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 0)), var_type: None, value: Index(\"a\", Number(U8, 2)) }"] }
# 0243e Instruction { source: "a_hi[0x00..0x01] <- t577f U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"a\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x8c), Register(0x64)], resolved: None }
0b 8c 64 
# b_hi <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b_hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 02441 Instruction { source: "b_hi <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b_hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x6c), Constant32(0x00000000=0)], resolved: None }
20 6c 00 00 00 00 
# t9829 <- b[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 1)), var_type: None, value: Index(\"b\", Number(U8, 3)) }", "Index(\"b\", Number(U8, 3))", "Index(\"b\", Number(U8, 3))"] }
# 02447 Instruction { source: "t9829 <- b[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"b\\\", Number(U8, 3)) }\", \"Index(\\\"b\\\", Number(U8, 3))\", \"Index(\\\"b\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x6b), Register(0x8a)], resolved: None }
0b 6b 8a 
# b_hi[0x01..0x02] <- t9829 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 1)), var_type: None, value: Index(\"b\", Number(U8, 3)) }"] }
# 0244a Instruction { source: "b_hi[0x01..0x02] <- t9829 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"b\\\", Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0x8a), Register(0x6d)], resolved: None }
0b 8a 6d 
# t811a <- b[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 0)), var_type: None, value: Index(\"b\", Number(U8, 2)) }", "Index(\"b\", Number(U8, 2))", "Index(\"b\", Number(U8, 2))"] }
# 0244d Instruction { source: "t811a <- b[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"b\\\", Number(U8, 2)) }\", \"Index(\\\"b\\\", Number(U8, 2))\", \"Index(\\\"b\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x6a), Register(0x8a)], resolved: None }
0b 6a 8a 
# b_hi[0x00..0x01] <- t811a U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 0)), var_type: None, value: Index(\"b\", Number(U8, 2)) }"] }
# 02450 Instruction { source: "b_hi[0x00..0x01] <- t811a U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"b\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x8a), Register(0x6c)], resolved: None }
0b 8a 6c 
# t8956 <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "t8956 <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# t8792 <- a U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t8792 <- a U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# tace9 <- b U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "tace9 <- b U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_mul32_64_mul16_32_8_a <- t8792 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })"] }
# 02453 Instruction { source: "inline_mul32_64_mul16_32_8_a <- t8792 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x60), Register(0x74)], resolved: None }
21 60 74 
# inline_mul32_64_mul16_32_8_b <- tace9 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })"] }
# 02456 Instruction { source: "inline_mul32_64_mul16_32_8_b <- tace9 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x68), Register(0x78)], resolved: None }
21 68 78 
# inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9)
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 02459 Instruction { source: "inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x74), Register(0x78), Register(0x7c)], resolved: None }
11 74 78 7c 
# 0245d Instruction { source: "inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x7e), Constant8(0x00=0)], resolved: None }
04 7e 00 
# 02460 Instruction { source: "inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x7f), Constant8(0x00=0)], resolved: None }
04 7f 00 
# inline_mul32_64_mul16_32_8_t1539 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 02463 Instruction { source: "inline_mul32_64_mul16_32_8_t1539 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x75), Register(0x8e)], resolved: None }
0b 75 8e 
# inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 02466 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x84), Constant32(0x00000000=0)], resolved: None }
20 84 00 00 00 00 
# 0246c Instruction { source: "inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x8e), Register(0x84)], resolved: None }
0b 8e 84 
# inline_mul32_64_mul16_32_8_t8b9 <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 0246f Instruction { source: "inline_mul32_64_mul16_32_8_t8b9 <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x79), Register(0x89)], resolved: None }
0b 79 89 
# inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 02472 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x80), Constant32(0x00000000=0)], resolved: None }
20 80 00 00 00 00 
# 02478 Instruction { source: "inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x89), Register(0x80)], resolved: None }
0b 89 80 
# inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_te8d8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 0247b Instruction { source: "inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x84), Register(0x80), Register(0x80)], resolved: None }
11 84 80 80 
# 0247f Instruction { source: "inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x82), Constant8(0x00=0)], resolved: None }
04 82 00 
# 02482 Instruction { source: "inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x83), Constant8(0x00=0)], resolved: None }
04 83 00 
# inline_mul32_64_mul16_32_8_t5d8 <- inline_mul32_64_mul16_32_8_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 02485 Instruction { source: "inline_mul32_64_mul16_32_8_t5d8 <- inline_mul32_64_mul16_32_8_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x81), Register(0x8f)], resolved: None }
0b 81 8f 
# inline_mul32_64_mul16_32_8_f[0x03..0x04] <- inline_mul32_64_mul16_32_8_t5d8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 02488 Instruction { source: "inline_mul32_64_mul16_32_8_f[0x03..0x04] <- inline_mul32_64_mul16_32_8_t5d8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x8f), Register(0x83)], resolved: None }
0b 8f 83 
# inline_mul32_64_mul16_32_8_te25f <- inline_mul32_64_mul16_32_8_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 0248b Instruction { source: "inline_mul32_64_mul16_32_8_te25f <- inline_mul32_64_mul16_32_8_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x80), Register(0x8f)], resolved: None }
0b 80 8f 
# inline_mul32_64_mul16_32_8_f[0x02..0x03] <- inline_mul32_64_mul16_32_8_te25f U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 0248e Instruction { source: "inline_mul32_64_mul16_32_8_f[0x02..0x03] <- inline_mul32_64_mul16_32_8_te25f U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x8f), Register(0x82)], resolved: None }
0b 8f 82 
# inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 02491 Instruction { source: "inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x00=0)], resolved: None }
04 90 00 
# inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_8_tb36e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 02494 Instruction { source: "inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_8_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x90), Register(0x81)], resolved: None }
0b 90 81 
# inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 02497 Instruction { source: "inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x00=0)], resolved: None }
04 90 00 
# inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_8_tb36e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 0249a Instruction { source: "inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_8_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x90), Register(0x80)], resolved: None }
0b 90 80 
# inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_mul32_64_mul16_32_8_tcbd4 <- inline_mul32_64_mul16_32_8_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tcbd4 <- inline_mul32_64_mul16_32_8_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4)
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 0249d Instruction { source: "inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0249e Instruction { source: "inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x7c), Register(0x80), Register(0x7c)], resolved: None }
30 7c 80 7c 
# 024a2 Instruction { source: "inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_mul16_32_8_t8b9 <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 024a3 Instruction { source: "inline_mul32_64_mul16_32_8_t8b9 <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x79), Register(0x89)], resolved: None }
0b 79 89 
# inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 024a6 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x80), Constant32(0x00000000=0)], resolved: None }
20 80 00 00 00 00 
# 024ac Instruction { source: "inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x89), Register(0x80)], resolved: None }
0b 89 80 
# inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_te8d8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 024af Instruction { source: "inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x74), Register(0x80), Register(0x80)], resolved: None }
11 74 80 80 
# 024b3 Instruction { source: "inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x82), Constant8(0x00=0)], resolved: None }
04 82 00 
# 024b6 Instruction { source: "inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x83), Constant8(0x00=0)], resolved: None }
04 83 00 
# inline_mul32_64_mul16_32_8_t1539 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 024b9 Instruction { source: "inline_mul32_64_mul16_32_8_t1539 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x75), Register(0x8e)], resolved: None }
0b 75 8e 
# inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 024bc Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x84), Constant32(0x00000000=0)], resolved: None }
20 84 00 00 00 00 
# 024c2 Instruction { source: "inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x8e), Register(0x84)], resolved: None }
0b 8e 84 
# inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_tace9)
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 024c5 Instruction { source: "inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x84), Register(0x78), Register(0x74)], resolved: None }
11 84 78 74 
# 024c9 Instruction { source: "inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x76), Constant8(0x00=0)], resolved: None }
04 76 00 
# 024cc Instruction { source: "inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x77), Constant8(0x00=0)], resolved: None }
04 77 00 
# inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 024cf Instruction { source: "inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x80), Register(0x78)], resolved: None }
21 80 78 
# inline_mul32_64_mul16_32_8_t3585 <- inline_mul32_64_mul16_32_8_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t3585 <- inline_mul32_64_mul16_32_8_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585)
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 024d2 Instruction { source: "inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 024d3 Instruction { source: "inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x78), Register(0x74), Register(0x80)], resolved: None }
30 78 74 80 
# 024d7 Instruction { source: "inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_8_t2d6f <- inline_mul32_64_mul16_32_8_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 024d8 Instruction { source: "inline_mul32_64_mul16_32_8_t2d6f <- inline_mul32_64_mul16_32_8_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x82), Register(0x8e)], resolved: None }
0b 82 8e 
# inline_mul32_64_mul16_32_8_d[0x03..0x04] <- inline_mul32_64_mul16_32_8_t2d6f U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 024db Instruction { source: "inline_mul32_64_mul16_32_8_d[0x03..0x04] <- inline_mul32_64_mul16_32_8_t2d6f U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x8e), Register(0x83)], resolved: None }
0b 8e 83 
# inline_mul32_64_mul16_32_8_tbd6 <- inline_mul32_64_mul16_32_8_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 024de Instruction { source: "inline_mul32_64_mul16_32_8_tbd6 <- inline_mul32_64_mul16_32_8_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x81), Register(0x8e)], resolved: None }
0b 81 8e 
# inline_mul32_64_mul16_32_8_d[0x02..0x03] <- inline_mul32_64_mul16_32_8_tbd6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 024e1 Instruction { source: "inline_mul32_64_mul16_32_8_d[0x02..0x03] <- inline_mul32_64_mul16_32_8_tbd6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x8e), Register(0x82)], resolved: None }
0b 8e 82 
# inline_mul32_64_mul16_32_8_tac23 <- inline_mul32_64_mul16_32_8_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 024e4 Instruction { source: "inline_mul32_64_mul16_32_8_tac23 <- inline_mul32_64_mul16_32_8_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x80), Register(0x8e)], resolved: None }
0b 80 8e 
# inline_mul32_64_mul16_32_8_d[0x01..0x02] <- inline_mul32_64_mul16_32_8_tac23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 024e7 Instruction { source: "inline_mul32_64_mul16_32_8_d[0x01..0x02] <- inline_mul32_64_mul16_32_8_tac23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x8e), Register(0x81)], resolved: None }
0b 8e 81 
# inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 024ea Instruction { source: "inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x00=0)], resolved: None }
04 90 00 
# inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_8_tb36e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 024ed Instruction { source: "inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_8_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x90), Register(0x80)], resolved: None }
0b 90 80 
# inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 024f0 Instruction { source: "inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x80), Register(0x78)], resolved: None }
21 80 78 
# inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5)
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 024f3 Instruction { source: "inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 024f4 Instruction { source: "inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x7c), Register(0x78), Register(0x74)], resolved: None }
30 7c 78 74 
# 024f8 Instruction { source: "inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t720d <- inline_mul32_64_mul16_32_8_ta65d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# optimized away noop copy Instruction { source: "t720d <- inline_mul32_64_mul16_32_8_ta65d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# goto inline_mul32_64_mul16_32_8_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_8_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_8_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_8_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_mul32_64_mul16_32_8_function_end_mul16_32
# mem[t8956] <- t720d U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }"] }
# 024f9 Instruction { source: "mem[t8956] <- t720d U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\"] }", opcode: Store32_1, args: [Register(0x74), Register(0x70)], resolved: None }
23 74 70 
# 024fc Instruction { source: "mem[t8956] <- t720d U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# t2558 <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "t2558 <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# t1335 <- t2558 Add Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 024fd Instruction { source: "t1335 <- t2558 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: Copy32, args: [Register(0x70), Register(0x98)], resolved: None }
21 70 98 
# 02500 Instruction { source: "t1335 <- t2558 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x98), Constant32(0x00000004=4)], resolved: None }
32 98 04 00 00 00 
# t8fbd <- a_hi U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })", "Ident(\"a_hi\")", "Ident(\"a_hi\")"] }
# optimized away noop copy Instruction { source: "t8fbd <- a_hi U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\", \"Ident(\\\"a_hi\\\")\", \"Ident(\\\"a_hi\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# t5cca <- b_hi U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })", "Ident(\"b_hi\")", "Ident(\"b_hi\")"] }
# optimized away noop copy Instruction { source: "t5cca <- b_hi U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\", \"Ident(\\\"b_hi\\\")\", \"Ident(\\\"b_hi\\\")\"] }", opcode: Copy32, args: [Register(0x6c), Register(0x6c)], resolved: None }
# inline_mul32_64_mul16_32_9_a <- t8fbd U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })"] }
# 02506 Instruction { source: "inline_mul32_64_mul16_32_9_a <- t8fbd U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\"] }", opcode: Copy32, args: [Register(0x64), Register(0x74)], resolved: None }
21 64 74 
# inline_mul32_64_mul16_32_9_b <- t5cca U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })"] }
# 02509 Instruction { source: "inline_mul32_64_mul16_32_9_b <- t5cca U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\"] }", opcode: Copy32, args: [Register(0x6c), Register(0x78)], resolved: None }
21 6c 78 
# inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9)
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 0250c Instruction { source: "inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x74), Register(0x78), Register(0x7c)], resolved: None }
11 74 78 7c 
# 02510 Instruction { source: "inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x7e), Constant8(0x00=0)], resolved: None }
04 7e 00 
# 02513 Instruction { source: "inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x7f), Constant8(0x00=0)], resolved: None }
04 7f 00 
# inline_mul32_64_mul16_32_9_t1539 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 02516 Instruction { source: "inline_mul32_64_mul16_32_9_t1539 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x75), Register(0x8e)], resolved: None }
0b 75 8e 
# inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 02519 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x84), Constant32(0x00000000=0)], resolved: None }
20 84 00 00 00 00 
# 0251f Instruction { source: "inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x8e), Register(0x84)], resolved: None }
0b 8e 84 
# inline_mul32_64_mul16_32_9_t8b9 <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 02522 Instruction { source: "inline_mul32_64_mul16_32_9_t8b9 <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x79), Register(0x89)], resolved: None }
0b 79 89 
# inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 02525 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x80), Constant32(0x00000000=0)], resolved: None }
20 80 00 00 00 00 
# 0252b Instruction { source: "inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x89), Register(0x80)], resolved: None }
0b 89 80 
# inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_te8d8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 0252e Instruction { source: "inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x84), Register(0x80), Register(0x80)], resolved: None }
11 84 80 80 
# 02532 Instruction { source: "inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x82), Constant8(0x00=0)], resolved: None }
04 82 00 
# 02535 Instruction { source: "inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x83), Constant8(0x00=0)], resolved: None }
04 83 00 
# inline_mul32_64_mul16_32_9_t5d8 <- inline_mul32_64_mul16_32_9_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 02538 Instruction { source: "inline_mul32_64_mul16_32_9_t5d8 <- inline_mul32_64_mul16_32_9_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x81), Register(0x8f)], resolved: None }
0b 81 8f 
# inline_mul32_64_mul16_32_9_f[0x03..0x04] <- inline_mul32_64_mul16_32_9_t5d8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 0253b Instruction { source: "inline_mul32_64_mul16_32_9_f[0x03..0x04] <- inline_mul32_64_mul16_32_9_t5d8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x8f), Register(0x83)], resolved: None }
0b 8f 83 
# inline_mul32_64_mul16_32_9_te25f <- inline_mul32_64_mul16_32_9_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 0253e Instruction { source: "inline_mul32_64_mul16_32_9_te25f <- inline_mul32_64_mul16_32_9_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x80), Register(0x8f)], resolved: None }
0b 80 8f 
# inline_mul32_64_mul16_32_9_f[0x02..0x03] <- inline_mul32_64_mul16_32_9_te25f U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 02541 Instruction { source: "inline_mul32_64_mul16_32_9_f[0x02..0x03] <- inline_mul32_64_mul16_32_9_te25f U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x8f), Register(0x82)], resolved: None }
0b 8f 82 
# inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 02544 Instruction { source: "inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x00=0)], resolved: None }
04 90 00 
# inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_9_tb36e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 02547 Instruction { source: "inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_9_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x90), Register(0x81)], resolved: None }
0b 90 81 
# inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0254a Instruction { source: "inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x00=0)], resolved: None }
04 90 00 
# inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_9_tb36e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 0254d Instruction { source: "inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_9_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x90), Register(0x80)], resolved: None }
0b 90 80 
# inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_mul32_64_mul16_32_9_tcbd4 <- inline_mul32_64_mul16_32_9_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tcbd4 <- inline_mul32_64_mul16_32_9_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4)
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 02550 Instruction { source: "inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02551 Instruction { source: "inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x7c), Register(0x80), Register(0x7c)], resolved: None }
30 7c 80 7c 
# 02555 Instruction { source: "inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_mul16_32_9_t8b9 <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 02556 Instruction { source: "inline_mul32_64_mul16_32_9_t8b9 <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x79), Register(0x89)], resolved: None }
0b 79 89 
# inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 02559 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x80), Constant32(0x00000000=0)], resolved: None }
20 80 00 00 00 00 
# 0255f Instruction { source: "inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x89), Register(0x80)], resolved: None }
0b 89 80 
# inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_te8d8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 02562 Instruction { source: "inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x74), Register(0x80), Register(0x80)], resolved: None }
11 74 80 80 
# 02566 Instruction { source: "inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x82), Constant8(0x00=0)], resolved: None }
04 82 00 
# 02569 Instruction { source: "inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x83), Constant8(0x00=0)], resolved: None }
04 83 00 
# inline_mul32_64_mul16_32_9_t1539 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 0256c Instruction { source: "inline_mul32_64_mul16_32_9_t1539 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x75), Register(0x8e)], resolved: None }
0b 75 8e 
# inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 0256f Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x84), Constant32(0x00000000=0)], resolved: None }
20 84 00 00 00 00 
# 02575 Instruction { source: "inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x8e), Register(0x84)], resolved: None }
0b 8e 84 
# inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_tace9)
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 02578 Instruction { source: "inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x84), Register(0x78), Register(0x74)], resolved: None }
11 84 78 74 
# 0257c Instruction { source: "inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x76), Constant8(0x00=0)], resolved: None }
04 76 00 
# 0257f Instruction { source: "inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x77), Constant8(0x00=0)], resolved: None }
04 77 00 
# inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 02582 Instruction { source: "inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x80), Register(0x78)], resolved: None }
21 80 78 
# inline_mul32_64_mul16_32_9_t3585 <- inline_mul32_64_mul16_32_9_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t3585 <- inline_mul32_64_mul16_32_9_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585)
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 02585 Instruction { source: "inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02586 Instruction { source: "inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x78), Register(0x74), Register(0x80)], resolved: None }
30 78 74 80 
# 0258a Instruction { source: "inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_9_t2d6f <- inline_mul32_64_mul16_32_9_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 0258b Instruction { source: "inline_mul32_64_mul16_32_9_t2d6f <- inline_mul32_64_mul16_32_9_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x82), Register(0x8e)], resolved: None }
0b 82 8e 
# inline_mul32_64_mul16_32_9_d[0x03..0x04] <- inline_mul32_64_mul16_32_9_t2d6f U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 0258e Instruction { source: "inline_mul32_64_mul16_32_9_d[0x03..0x04] <- inline_mul32_64_mul16_32_9_t2d6f U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x8e), Register(0x83)], resolved: None }
0b 8e 83 
# inline_mul32_64_mul16_32_9_tbd6 <- inline_mul32_64_mul16_32_9_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 02591 Instruction { source: "inline_mul32_64_mul16_32_9_tbd6 <- inline_mul32_64_mul16_32_9_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x81), Register(0x8e)], resolved: None }
0b 81 8e 
# inline_mul32_64_mul16_32_9_d[0x02..0x03] <- inline_mul32_64_mul16_32_9_tbd6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 02594 Instruction { source: "inline_mul32_64_mul16_32_9_d[0x02..0x03] <- inline_mul32_64_mul16_32_9_tbd6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x8e), Register(0x82)], resolved: None }
0b 8e 82 
# inline_mul32_64_mul16_32_9_tac23 <- inline_mul32_64_mul16_32_9_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 02597 Instruction { source: "inline_mul32_64_mul16_32_9_tac23 <- inline_mul32_64_mul16_32_9_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x80), Register(0x8e)], resolved: None }
0b 80 8e 
# inline_mul32_64_mul16_32_9_d[0x01..0x02] <- inline_mul32_64_mul16_32_9_tac23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 0259a Instruction { source: "inline_mul32_64_mul16_32_9_d[0x01..0x02] <- inline_mul32_64_mul16_32_9_tac23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x8e), Register(0x81)], resolved: None }
0b 8e 81 
# inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0259d Instruction { source: "inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x00=0)], resolved: None }
04 90 00 
# inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_9_tb36e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 025a0 Instruction { source: "inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_9_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x90), Register(0x80)], resolved: None }
0b 90 80 
# inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 025a3 Instruction { source: "inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x80), Register(0x78)], resolved: None }
21 80 78 
# inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5)
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 025a6 Instruction { source: "inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 025a7 Instruction { source: "inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x7c), Register(0x78), Register(0x74)], resolved: None }
30 7c 78 74 
# 025ab Instruction { source: "inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t5a04 <- inline_mul32_64_mul16_32_9_ta65d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# optimized away noop copy Instruction { source: "t5a04 <- inline_mul32_64_mul16_32_9_ta65d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# goto inline_mul32_64_mul16_32_9_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_9_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_9_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_9_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_mul32_64_mul16_32_9_function_end_mul16_32
# mem[t1335] <- t5a04 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }"] }
# 025ac Instruction { source: "mem[t1335] <- t5a04 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\"] }", opcode: Store32_1, args: [Register(0x74), Register(0x98)], resolved: None }
23 74 98 
# 025af Instruction { source: "mem[t1335] <- t5a04 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# temp_lo <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp_lo\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 025b0 Instruction { source: "temp_lo <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp_lo\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0xa0), Constant32(0x00000000=0)], resolved: None }
20 a0 00 00 00 00 
# temp_hi <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp_hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 025b6 Instruction { source: "temp_hi <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp_hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x98), Constant32(0x00000000=0)], resolved: None }
20 98 00 00 00 00 
# t8fbd <- a_hi U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Ident(\"a_hi\")", "Ident(\"a_hi\")"] }
# optimized away noop copy Instruction { source: "t8fbd <- a_hi U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"a_hi\\\")\", \"Ident(\\\"a_hi\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# tace9 <- b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "tace9 <- b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_mul32_64_mul16_32_10_a <- t8fbd U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_a <- t8fbd U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_mul32_64_mul16_32_10_b <- tace9 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_b <- tace9 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9)
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 025bc Instruction { source: "inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x64), Register(0x68), Register(0x74)], resolved: None }
11 64 68 74 
# 025c0 Instruction { source: "inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x76), Constant8(0x00=0)], resolved: None }
04 76 00 
# 025c3 Instruction { source: "inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x77), Constant8(0x00=0)], resolved: None }
04 77 00 
# inline_mul32_64_mul16_32_10_t1539 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 025c6 Instruction { source: "inline_mul32_64_mul16_32_10_t1539 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x65), Register(0x88)], resolved: None }
0b 65 88 
# inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 025c9 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x7c), Constant32(0x00000000=0)], resolved: None }
20 7c 00 00 00 00 
# 025cf Instruction { source: "inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x88), Register(0x7c)], resolved: None }
0b 88 7c 
# inline_mul32_64_mul16_32_10_t8b9 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 025d2 Instruction { source: "inline_mul32_64_mul16_32_10_t8b9 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x69), Register(0x8a)], resolved: None }
0b 69 8a 
# inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 025d5 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x78), Constant32(0x00000000=0)], resolved: None }
20 78 00 00 00 00 
# 025db Instruction { source: "inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x8a), Register(0x78)], resolved: None }
0b 8a 78 
# inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_te8d8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 025de Instruction { source: "inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x7c), Register(0x78), Register(0x78)], resolved: None }
11 7c 78 78 
# 025e2 Instruction { source: "inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x7a), Constant8(0x00=0)], resolved: None }
04 7a 00 
# 025e5 Instruction { source: "inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x7b), Constant8(0x00=0)], resolved: None }
04 7b 00 
# inline_mul32_64_mul16_32_10_t5d8 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 025e8 Instruction { source: "inline_mul32_64_mul16_32_10_t5d8 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x79), Register(0x89)], resolved: None }
0b 79 89 
# inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t5d8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 025eb Instruction { source: "inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t5d8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x89), Register(0x7b)], resolved: None }
0b 89 7b 
# inline_mul32_64_mul16_32_10_te25f <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 025ee Instruction { source: "inline_mul32_64_mul16_32_10_te25f <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x78), Register(0x89)], resolved: None }
0b 78 89 
# inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_te25f U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 025f1 Instruction { source: "inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_te25f U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x89), Register(0x7a)], resolved: None }
0b 89 7a 
# inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 025f4 Instruction { source: "inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x8b), Constant8(0x00=0)], resolved: None }
04 8b 00 
# inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_tb36e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 025f7 Instruction { source: "inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x8b), Register(0x79)], resolved: None }
0b 8b 79 
# inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 025fa Instruction { source: "inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x8b), Constant8(0x00=0)], resolved: None }
04 8b 00 
# inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_tb36e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 025fd Instruction { source: "inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x8b), Register(0x78)], resolved: None }
0b 8b 78 
# inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_mul16_32_10_tcbd4 <- inline_mul32_64_mul16_32_10_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tcbd4 <- inline_mul32_64_mul16_32_10_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4)
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 02600 Instruction { source: "inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02601 Instruction { source: "inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x74), Register(0x78), Register(0x74)], resolved: None }
30 74 78 74 
# 02605 Instruction { source: "inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_mul32_64_mul16_32_10_t8b9 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 02606 Instruction { source: "inline_mul32_64_mul16_32_10_t8b9 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x69), Register(0x8a)], resolved: None }
0b 69 8a 
# inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 02609 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x78), Constant32(0x00000000=0)], resolved: None }
20 78 00 00 00 00 
# 0260f Instruction { source: "inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x8a), Register(0x78)], resolved: None }
0b 8a 78 
# inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_te8d8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 02612 Instruction { source: "inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x64), Register(0x78), Register(0x78)], resolved: None }
11 64 78 78 
# 02616 Instruction { source: "inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x7a), Constant8(0x00=0)], resolved: None }
04 7a 00 
# 02619 Instruction { source: "inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x7b), Constant8(0x00=0)], resolved: None }
04 7b 00 
# inline_mul32_64_mul16_32_10_t1539 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 0261c Instruction { source: "inline_mul32_64_mul16_32_10_t1539 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x65), Register(0x88)], resolved: None }
0b 65 88 
# inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 0261f Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x7c), Constant32(0x00000000=0)], resolved: None }
20 7c 00 00 00 00 
# 02625 Instruction { source: "inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x88), Register(0x7c)], resolved: None }
0b 88 7c 
# inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_tace9)
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 02628 Instruction { source: "inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x7c), Register(0x68), Register(0x64)], resolved: None }
11 7c 68 64 
# 0262c Instruction { source: "inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x66), Constant8(0x00=0)], resolved: None }
04 66 00 
# 0262f Instruction { source: "inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x67), Constant8(0x00=0)], resolved: None }
04 67 00 
# inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 02632 Instruction { source: "inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x78), Register(0x68)], resolved: None }
21 78 68 
# inline_mul32_64_mul16_32_10_t3585 <- inline_mul32_64_mul16_32_10_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t3585 <- inline_mul32_64_mul16_32_10_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585)
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 02635 Instruction { source: "inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02636 Instruction { source: "inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x68), Register(0x64), Register(0x78)], resolved: None }
30 68 64 78 
# 0263a Instruction { source: "inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_10_t2d6f <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 0263b Instruction { source: "inline_mul32_64_mul16_32_10_t2d6f <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x7a), Register(0x88)], resolved: None }
0b 7a 88 
# inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t2d6f U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 0263e Instruction { source: "inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t2d6f U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x88), Register(0x7b)], resolved: None }
0b 88 7b 
# inline_mul32_64_mul16_32_10_tbd6 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 02641 Instruction { source: "inline_mul32_64_mul16_32_10_tbd6 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x79), Register(0x88)], resolved: None }
0b 79 88 
# inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_tbd6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 02644 Instruction { source: "inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_tbd6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x88), Register(0x7a)], resolved: None }
0b 88 7a 
# inline_mul32_64_mul16_32_10_tac23 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 02647 Instruction { source: "inline_mul32_64_mul16_32_10_tac23 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x78), Register(0x88)], resolved: None }
0b 78 88 
# inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_tac23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 0264a Instruction { source: "inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_tac23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x88), Register(0x79)], resolved: None }
0b 88 79 
# inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0264d Instruction { source: "inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x8b), Constant8(0x00=0)], resolved: None }
04 8b 00 
# inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_tb36e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 02650 Instruction { source: "inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x8b), Register(0x78)], resolved: None }
0b 8b 78 
# inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 02653 Instruction { source: "inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x78), Register(0x68)], resolved: None }
21 78 68 
# inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5)
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 02656 Instruction { source: "inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02657 Instruction { source: "inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x74), Register(0x68), Register(0x64)], resolved: None }
30 74 68 64 
# 0265b Instruction { source: "inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# temp <- inline_mul32_64_mul16_32_10_ta65d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# optimized away noop copy Instruction { source: "temp <- inline_mul32_64_mul16_32_10_ta65d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# goto inline_mul32_64_mul16_32_10_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_10_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_10_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_10_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_mul32_64_mul16_32_10_function_end_mul16_32
# tc89e <- temp[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 2)), var_type: None, value: Index(\"temp\", Number(U8, 0)) }", "Index(\"temp\", Number(U8, 0))", "Index(\"temp\", Number(U8, 0))"] }
# 0265c Instruction { source: "tc89e <- temp[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 2)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 0)) }\", \"Index(\\\"temp\\\", Number(U8, 0))\", \"Index(\\\"temp\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x64), Register(0x88)], resolved: None }
0b 64 88 
# temp_lo[0x02..0x03] <- tc89e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 2)), var_type: None, value: Index(\"temp\", Number(U8, 0)) }"] }
# 0265f Instruction { source: "temp_lo[0x02..0x03] <- tc89e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 2)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x88), Register(0xa2)], resolved: None }
0b 88 a2 
# tdc08 <- temp[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 3)), var_type: None, value: Index(\"temp\", Number(U8, 1)) }", "Index(\"temp\", Number(U8, 1))", "Index(\"temp\", Number(U8, 1))"] }
# 02662 Instruction { source: "tdc08 <- temp[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 3)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 1)) }\", \"Index(\\\"temp\\\", Number(U8, 1))\", \"Index(\\\"temp\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x65), Register(0x88)], resolved: None }
0b 65 88 
# temp_lo[0x03..0x04] <- tdc08 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 3)), var_type: None, value: Index(\"temp\", Number(U8, 1)) }"] }
# 02665 Instruction { source: "temp_lo[0x03..0x04] <- tdc08 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 3)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x88), Register(0xa3)], resolved: None }
0b 88 a3 
# tf338 <- temp[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 0)), var_type: None, value: Index(\"temp\", Number(U8, 2)) }", "Index(\"temp\", Number(U8, 2))", "Index(\"temp\", Number(U8, 2))"] }
# 02668 Instruction { source: "tf338 <- temp[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 2)) }\", \"Index(\\\"temp\\\", Number(U8, 2))\", \"Index(\\\"temp\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x66), Register(0x88)], resolved: None }
0b 66 88 
# temp_hi[0x00..0x01] <- tf338 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 0)), var_type: None, value: Index(\"temp\", Number(U8, 2)) }"] }
# 0266b Instruction { source: "temp_hi[0x00..0x01] <- tf338 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x88), Register(0x98)], resolved: None }
0b 88 98 
# tb6b4 <- temp[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 1)), var_type: None, value: Index(\"temp\", Number(U8, 3)) }", "Index(\"temp\", Number(U8, 3))", "Index(\"temp\", Number(U8, 3))"] }
# 0266e Instruction { source: "tb6b4 <- temp[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 3)) }\", \"Index(\\\"temp\\\", Number(U8, 3))\", \"Index(\\\"temp\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x67), Register(0x88)], resolved: None }
0b 67 88 
# temp_hi[0x01..0x02] <- tb6b4 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 1)), var_type: None, value: Index(\"temp\", Number(U8, 3)) }"] }
# 02671 Instruction { source: "temp_hi[0x01..0x02] <- tb6b4 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0x88), Register(0x99)], resolved: None }
0b 88 99 
# te546 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"lo\"), var_type: None, value: Ident(\"temp_lo\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\"__frame_pointer\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\"__frame_pointer\") }", "Ident(\"__frame_pointer\")"] }
# 02674 Instruction { source: "te546 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\\\"__frame_pointer\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\\\"__frame_pointer\\\") }\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x94)], resolved: None }
21 0c 94 
# t3308 <- temp_lo U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"lo\"), var_type: None, value: Ident(\"temp_lo\") }", "Ident(\"temp_lo\")", "Ident(\"temp_lo\")"] }
# 02677 Instruction { source: "t3308 <- temp_lo U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\", \"Ident(\\\"temp_lo\\\")\", \"Ident(\\\"temp_lo\\\")\"] }", opcode: Copy32, args: [Register(0xa0), Register(0x64)], resolved: None }
21 a0 64 
# mem[te546] <- t3308 U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"lo\"), var_type: None, value: Ident(\"temp_lo\") }"] }
# 0267a Instruction { source: "mem[te546] <- t3308 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\"] }", opcode: Store32_1, args: [Register(0x64), Register(0x94)], resolved: None }
23 64 94 
# 0267d Instruction { source: "mem[te546] <- t3308 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# te825 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 0267e Instruction { source: "te825 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x94)], resolved: None }
21 0c 94 
# t3f2a <- te825 Add Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))"] }
# 02681 Instruction { source: "t3f2a <- te825 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: Copy32, args: [Register(0x94), Register(0x64)], resolved: None }
21 94 64 
# 02684 Instruction { source: "t3f2a <- te825 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x64), Constant32(0x00000004=4)], resolved: None }
32 64 04 00 00 00 
# t41f5 <- temp_hi U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Ident(\"temp_hi\")", "Ident(\"temp_hi\")"] }
# 0268a Instruction { source: "t41f5 <- temp_hi U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Ident(\\\"temp_hi\\\")\", \"Ident(\\\"temp_hi\\\")\"] }", opcode: Copy32, args: [Register(0x98), Register(0x68)], resolved: None }
21 98 68 
# mem[t3f2a] <- t41f5 U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }"] }
# 0268d Instruction { source: "mem[t3f2a] <- t41f5 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\"] }", opcode: Store32_1, args: [Register(0x68), Register(0x64)], resolved: None }
23 68 64 
# 02690 Instruction { source: "mem[t3f2a] <- t41f5 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# tac13 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "tac13 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# te825 <- __frame_pointer U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 02691 Instruction { source: "te825 <- __frame_pointer U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x94)], resolved: None }
21 0c 94 
# t4a94 <- te825 Add Number(0n0/0x00000000u32)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))"] }
# 02694 Instruction { source: "t4a94 <- te825 Add Number(0n0/0x00000000u32)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: Copy32, args: [Register(0x94), Register(0x64)], resolved: None }
21 94 64 
# 02697 Instruction { source: "t4a94 <- te825 Add Number(0n0/0x00000000u32)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x64), Constant32(0x00000000=0)], resolved: None }
32 64 00 00 00 00 
# tf4b2 <- t4a94 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))"] }
# 0269d Instruction { source: "tf4b2 <- t4a94 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\"] }", opcode: Copy32, args: [Register(0x64), Register(0x68)], resolved: None }
21 64 68 
# tac13 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "tac13 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_mul32_64_add_U64_0_a <- tac13 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })"] }
# 026a0 Instruction { source: "inline_mul32_64_add_U64_0_a <- tac13 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x70), Register(0x64)], resolved: None }
21 70 64 
# inline_mul32_64_add_U64_0_b <- tf4b2 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_b <- tf4b2 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_mul32_64_add_U64_0_c <- tac13 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })"] }
# 026a3 Instruction { source: "inline_mul32_64_add_U64_0_c <- tac13 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x70), Register(0x74)], resolved: None }
21 70 74 
# inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"a\", \"lo\") }", "PtrFieldDeref(\"a\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"a\\\", \\\"lo\\\") }\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_tbeec] U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"a\", \"lo\") }", "PtrFieldDeref(\"a\", \"lo\")"] }
# 026a6 Instruction { source: "inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_tbeec] U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"a\\\", \\\"lo\\\") }\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0x64), Register(0x78)], resolved: None }
22 64 78 
# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 026a9 Instruction { source: "inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: Copy32, args: [Register(0x74), Register(0x7c)], resolved: None }
21 74 7c 
# 026ac Instruction { source: "inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x7c), Constant32(0x00000004=4)], resolved: None }
32 7c 04 00 00 00 
# inline_mul32_64_add_U64_0_t3203 <- inline_mul32_64_add_U64_0_a U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t3203 <- inline_mul32_64_add_U64_0_a U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_t3203 Add Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))"] }
# 026b2 Instruction { source: "inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_t3203 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\"] }", opcode: Copy32, args: [Register(0x64), Register(0x80)], resolved: None }
21 64 80 
# 026b5 Instruction { source: "inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_t3203 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x80), Constant32(0x00000004=4)], resolved: None }
32 80 04 00 00 00 
# inline_mul32_64_add_U64_0_te24c <- mem[inline_mul32_64_add_U64_0_t144a] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")"] }
# 026bb Instruction { source: "inline_mul32_64_add_U64_0_te24c <- mem[inline_mul32_64_add_U64_0_t144a] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0x80), Register(0x84)], resolved: None }
22 80 84 
# inline_mul32_64_add_U64_0_teec0 <- inline_mul32_64_add_U64_0_b U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_teec0 <- inline_mul32_64_add_U64_0_b U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_teec0 Add Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))"] }
# 026be Instruction { source: "inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_teec0 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\"] }", opcode: Copy32, args: [Register(0x68), Register(0x80)], resolved: None }
21 68 80 
# 026c1 Instruction { source: "inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_teec0 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x80), Constant32(0x00000004=4)], resolved: None }
32 80 04 00 00 00 
# inline_mul32_64_add_U64_0_t153d <- mem[inline_mul32_64_add_U64_0_t809] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")"] }
# 026c7 Instruction { source: "inline_mul32_64_add_U64_0_t153d <- mem[inline_mul32_64_add_U64_0_t809] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0x80), Register(0x80)], resolved: None }
22 80 80 
# inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))"] }
# 026ca Instruction { source: "inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 026cb Instruction { source: "inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x84), Register(0x80), Register(0x80)], resolved: None }
30 84 80 80 
# 026cf Instruction { source: "inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }"] }
# 026d0 Instruction { source: "mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\"] }", opcode: Store32_1, args: [Register(0x80), Register(0x7c)], resolved: None }
23 80 7c 
# 026d3 Instruction { source: "mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"a\", \"lo\")", "PtrFieldDeref(\"a\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_mul32_64_add_U64_0_td868 <- mem[inline_mul32_64_add_U64_0_tbeec] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"a\", \"lo\")", "PtrFieldDeref(\"a\", \"lo\")"] }
# 026d4 Instruction { source: "inline_mul32_64_add_U64_0_td868 <- mem[inline_mul32_64_add_U64_0_tbeec] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0x64), Register(0x7c)], resolved: None }
22 64 7c 
# inline_mul32_64_add_U64_0_t24ae <- inline_mul32_64_add_U64_0_b U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"b\", \"lo\")", "PtrFieldDeref(\"b\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }", "Ident(\"b\")"] }
# 026d7 Instruction { source: "inline_mul32_64_add_U64_0_t24ae <- inline_mul32_64_add_U64_0_b U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x64)], resolved: None }
21 68 64 
# inline_mul32_64_add_U64_0_td5bf <- mem[inline_mul32_64_add_U64_0_t24ae] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"b\", \"lo\")", "PtrFieldDeref(\"b\", \"lo\")"] }
# 026da Instruction { source: "inline_mul32_64_add_U64_0_td5bf <- mem[inline_mul32_64_add_U64_0_t24ae] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0x64), Register(0x64)], resolved: None }
22 64 64 
# inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))"] }
# 026dd Instruction { source: "inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 026de Instruction { source: "inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x7c), Register(0x64), Register(0x64)], resolved: None }
30 7c 64 64 
# 026e2 Instruction { source: "inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }"] }
# 026e3 Instruction { source: "mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\"] }", opcode: Store32_1, args: [Register(0x64), Register(0x74)], resolved: None }
23 64 74 
# 026e6 Instruction { source: "mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }", "PtrFieldDeref(\"c\", \"lo\")", "PtrFieldDeref(\"c\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_add_U64_0_t90ac <- mem[inline_mul32_64_add_U64_0_t8956] U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }", "PtrFieldDeref(\"c\", \"lo\")", "PtrFieldDeref(\"c\", \"lo\")"] }
# 026e7 Instruction { source: "inline_mul32_64_add_U64_0_t90ac <- mem[inline_mul32_64_add_U64_0_t8956] U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0x74), Register(0x68)], resolved: None }
22 74 68 
# inline_mul32_64_add_U64_0_t1506 <- inline_mul32_64_add_U64_0_lo U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 026ea Instruction { source: "inline_mul32_64_add_U64_0_t1506 <- inline_mul32_64_add_U64_0_lo U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0x78), Register(0x64)], resolved: None }
21 78 64 
# if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }"] }
# 026ed Instruction { source: "if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8, args: [Register(0x67), Register(0x6b)], resolved: None }
15 67 6b 
# 026f0 Instruction { source: "if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x66), Register(0x6a)], resolved: None }
16 66 6a 
# 026f3 Instruction { source: "if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x65), Register(0x69)], resolved: None }
16 65 69 
# 026f6 Instruction { source: "if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x64), Register(0x68)], resolved: None }
16 64 68 
# 026f9 Instruction { source: "if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: JcImm, args: [Label24(inline_mul32_64_add_U64_0_add_U64_if_else_0_2)], resolved: None }
71 20 27 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_0_add_U64_if_true_0_1)], resolved: None }
# :inline_mul32_64_add_U64_0_add_U64_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }"] }
# inline_mul32_64_add_U64_0_add_U64_if_true_0_1
# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 026fd Instruction { source: "inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: Copy32, args: [Register(0x74), Register(0x7c)], resolved: None }
21 74 7c 
# 02700 Instruction { source: "inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x7c), Constant32(0x00000004=4)], resolved: None }
32 7c 04 00 00 00 
# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 02706 Instruction { source: "inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: Copy32, args: [Register(0x74), Register(0x7c)], resolved: None }
21 74 7c 
# 02709 Instruction { source: "inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x7c), Constant32(0x00000004=4)], resolved: None }
32 7c 04 00 00 00 
# inline_mul32_64_add_U64_0_tf677 <- mem[inline_mul32_64_add_U64_0_t1335] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")"] }
# 0270f Instruction { source: "inline_mul32_64_add_U64_0_tf677 <- mem[inline_mul32_64_add_U64_0_t1335] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0x7c), Register(0x64)], resolved: None }
22 7c 64 
# inline_mul32_64_add_U64_0_tcbd1 <- inline_mul32_64_add_U64_0_tf677 Add Number(0n1/0x00000001u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))"] }
# 02712 Instruction { source: "inline_mul32_64_add_U64_0_tcbd1 <- inline_mul32_64_add_U64_0_tf677 Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x64), Constant32(0x00000001=1)], resolved: None }
32 64 01 00 00 00 
# mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }"] }
# 02718 Instruction { source: "mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\"] }", opcode: Store32_1, args: [Register(0x64), Register(0x7c)], resolved: None }
23 64 7c 
# 0271b Instruction { source: "mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_mul32_64_add_U64_0_add_U64_if_end_0
# 	SourceContext { contexts: [] }
# 0271c Instruction { source: "goto inline_mul32_64_add_U64_0_add_U64_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_0_add_U64_if_end_0)], resolved: None }
70 20 27 00 
# :inline_mul32_64_add_U64_0_add_U64_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_mul32_64_add_U64_0_add_U64_if_else_0_2
# :inline_mul32_64_add_U64_0_add_U64_if_end_0
# 	SourceContext { contexts: [] }
# inline_mul32_64_add_U64_0_add_U64_if_end_0
# goto inline_mul32_64_add_U64_0_function_end_add_U64
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_add_U64_0_function_end_add_U64\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_0_function_end_add_U64)], resolved: None }
# :inline_mul32_64_add_U64_0_function_end_add_U64
# 	SourceContext { contexts: [] }
# inline_mul32_64_add_U64_0_function_end_add_U64
# t8792 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t8792 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# t5cca <- b_hi U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Ident(\"b_hi\")", "Ident(\"b_hi\")"] }
# optimized away noop copy Instruction { source: "t5cca <- b_hi U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Ident(\\\"b_hi\\\")\", \"Ident(\\\"b_hi\\\")\"] }", opcode: Copy32, args: [Register(0x6c), Register(0x6c)], resolved: None }
# inline_mul32_64_mul16_32_11_a <- t8792 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_a <- t8792 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\"] }", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_mul16_32_11_b <- t5cca U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })"] }
# 02720 Instruction { source: "inline_mul32_64_mul16_32_11_b <- t5cca U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\"] }", opcode: Copy32, args: [Register(0x6c), Register(0x64)], resolved: None }
21 6c 64 
# inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9)
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 02723 Instruction { source: "inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x60), Register(0x64), Register(0x68)], resolved: None }
11 60 64 68 
# 02727 Instruction { source: "inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x6a), Constant8(0x00=0)], resolved: None }
04 6a 00 
# 0272a Instruction { source: "inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x6b), Constant8(0x00=0)], resolved: None }
04 6b 00 
# inline_mul32_64_mul16_32_11_t1539 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 0272d Instruction { source: "inline_mul32_64_mul16_32_11_t1539 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x61), Register(0x8c)], resolved: None }
0b 61 8c 
# inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 02730 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x74), Constant32(0x00000000=0)], resolved: None }
20 74 00 00 00 00 
# 02736 Instruction { source: "inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x8c), Register(0x74)], resolved: None }
0b 8c 74 
# inline_mul32_64_mul16_32_11_t8b9 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 02739 Instruction { source: "inline_mul32_64_mul16_32_11_t8b9 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x65), Register(0x88)], resolved: None }
0b 65 88 
# inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 0273c Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x6c), Constant32(0x00000000=0)], resolved: None }
20 6c 00 00 00 00 
# 02742 Instruction { source: "inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x88), Register(0x6c)], resolved: None }
0b 88 6c 
# inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_te8d8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 02745 Instruction { source: "inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x74), Register(0x6c), Register(0x6c)], resolved: None }
11 74 6c 6c 
# 02749 Instruction { source: "inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x6e), Constant8(0x00=0)], resolved: None }
04 6e 00 
# 0274c Instruction { source: "inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x6f), Constant8(0x00=0)], resolved: None }
04 6f 00 
# inline_mul32_64_mul16_32_11_t5d8 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 0274f Instruction { source: "inline_mul32_64_mul16_32_11_t5d8 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x6d), Register(0x8d)], resolved: None }
0b 6d 8d 
# inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t5d8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 02752 Instruction { source: "inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t5d8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x8d), Register(0x6f)], resolved: None }
0b 8d 6f 
# inline_mul32_64_mul16_32_11_te25f <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 02755 Instruction { source: "inline_mul32_64_mul16_32_11_te25f <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x8d)], resolved: None }
0b 6c 8d 
# inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_te25f U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 02758 Instruction { source: "inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_te25f U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x8d), Register(0x6e)], resolved: None }
0b 8d 6e 
# inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0275b Instruction { source: "inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x8e), Constant8(0x00=0)], resolved: None }
04 8e 00 
# inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_tb36e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 0275e Instruction { source: "inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x8e), Register(0x6d)], resolved: None }
0b 8e 6d 
# inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 02761 Instruction { source: "inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x8e), Constant8(0x00=0)], resolved: None }
04 8e 00 
# inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_tb36e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 02764 Instruction { source: "inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x8e), Register(0x6c)], resolved: None }
0b 8e 6c 
# inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_mul32_64_mul16_32_11_tcbd4 <- inline_mul32_64_mul16_32_11_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tcbd4 <- inline_mul32_64_mul16_32_11_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0x6c), Register(0x6c)], resolved: None }
# inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4)
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 02767 Instruction { source: "inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02768 Instruction { source: "inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x68), Register(0x6c), Register(0x68)], resolved: None }
30 68 6c 68 
# 0276c Instruction { source: "inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_mul16_32_11_t8b9 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 0276d Instruction { source: "inline_mul32_64_mul16_32_11_t8b9 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x65), Register(0x88)], resolved: None }
0b 65 88 
# inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 02770 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x6c), Constant32(0x00000000=0)], resolved: None }
20 6c 00 00 00 00 
# 02776 Instruction { source: "inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x88), Register(0x6c)], resolved: None }
0b 88 6c 
# inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_te8d8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 02779 Instruction { source: "inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x60), Register(0x6c), Register(0x6c)], resolved: None }
11 60 6c 6c 
# 0277d Instruction { source: "inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x6e), Constant8(0x00=0)], resolved: None }
04 6e 00 
# 02780 Instruction { source: "inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_te8d8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x6f), Constant8(0x00=0)], resolved: None }
04 6f 00 
# inline_mul32_64_mul16_32_11_t1539 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 02783 Instruction { source: "inline_mul32_64_mul16_32_11_t1539 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x61), Register(0x8c)], resolved: None }
0b 61 8c 
# inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 02786 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x74), Constant32(0x00000000=0)], resolved: None }
20 74 00 00 00 00 
# 0278c Instruction { source: "inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x8c), Register(0x74)], resolved: None }
0b 8c 74 
# inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_tace9)
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 0278f Instruction { source: "inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x74), Register(0x64), Register(0x60)], resolved: None }
11 74 64 60 
# 02793 Instruction { source: "inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x62), Constant8(0x00=0)], resolved: None }
04 62 00 
# 02796 Instruction { source: "inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x63), Constant8(0x00=0)], resolved: None }
04 63 00 
# inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 02799 Instruction { source: "inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x6c), Register(0x64)], resolved: None }
21 6c 64 
# inline_mul32_64_mul16_32_11_t3585 <- inline_mul32_64_mul16_32_11_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t3585 <- inline_mul32_64_mul16_32_11_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585)
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 0279c Instruction { source: "inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0279d Instruction { source: "inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x64), Register(0x60), Register(0x6c)], resolved: None }
30 64 60 6c 
# 027a1 Instruction { source: "inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_11_t2d6f <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 027a2 Instruction { source: "inline_mul32_64_mul16_32_11_t2d6f <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x6e), Register(0x8c)], resolved: None }
0b 6e 8c 
# inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t2d6f U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 027a5 Instruction { source: "inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t2d6f U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x8c), Register(0x6f)], resolved: None }
0b 8c 6f 
# inline_mul32_64_mul16_32_11_tbd6 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 027a8 Instruction { source: "inline_mul32_64_mul16_32_11_tbd6 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x6d), Register(0x8c)], resolved: None }
0b 6d 8c 
# inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_tbd6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 027ab Instruction { source: "inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_tbd6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x8c), Register(0x6e)], resolved: None }
0b 8c 6e 
# inline_mul32_64_mul16_32_11_tac23 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 027ae Instruction { source: "inline_mul32_64_mul16_32_11_tac23 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x8c)], resolved: None }
0b 6c 8c 
# inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_tac23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 027b1 Instruction { source: "inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_tac23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x8c), Register(0x6d)], resolved: None }
0b 8c 6d 
# inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 027b4 Instruction { source: "inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x8e), Constant8(0x00=0)], resolved: None }
04 8e 00 
# inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_tb36e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 027b7 Instruction { source: "inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x8e), Register(0x6c)], resolved: None }
0b 8e 6c 
# inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 027ba Instruction { source: "inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x6c), Register(0x64)], resolved: None }
21 6c 64 
# inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5)
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 027bd Instruction { source: "inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 027be Instruction { source: "inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x68), Register(0x64), Register(0x60)], resolved: None }
30 68 64 60 
# 027c2 Instruction { source: "inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# temp <- inline_mul32_64_mul16_32_11_ta65d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# 027c3 Instruction { source: "temp <- inline_mul32_64_mul16_32_11_ta65d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x60), Register(0x64)], resolved: None }
21 60 64 
# goto inline_mul32_64_mul16_32_11_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_11_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_11_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_11_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_mul32_64_mul16_32_11_function_end_mul16_32
# tc89e <- temp[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 2)), var_type: None, value: Index(\"temp\", Number(U8, 0)) }", "Index(\"temp\", Number(U8, 0))", "Index(\"temp\", Number(U8, 0))"] }
# 027c6 Instruction { source: "tc89e <- temp[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 2)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 0)) }\", \"Index(\\\"temp\\\", Number(U8, 0))\", \"Index(\\\"temp\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x64), Register(0x88)], resolved: None }
0b 64 88 
# temp_lo[0x02..0x03] <- tc89e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 2)), var_type: None, value: Index(\"temp\", Number(U8, 0)) }"] }
# 027c9 Instruction { source: "temp_lo[0x02..0x03] <- tc89e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 2)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x88), Register(0xa2)], resolved: None }
0b 88 a2 
# tdc08 <- temp[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 3)), var_type: None, value: Index(\"temp\", Number(U8, 1)) }", "Index(\"temp\", Number(U8, 1))", "Index(\"temp\", Number(U8, 1))"] }
# 027cc Instruction { source: "tdc08 <- temp[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 3)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 1)) }\", \"Index(\\\"temp\\\", Number(U8, 1))\", \"Index(\\\"temp\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x65), Register(0x88)], resolved: None }
0b 65 88 
# temp_lo[0x03..0x04] <- tdc08 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 3)), var_type: None, value: Index(\"temp\", Number(U8, 1)) }"] }
# 027cf Instruction { source: "temp_lo[0x03..0x04] <- tdc08 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 3)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x88), Register(0xa3)], resolved: None }
0b 88 a3 
# tf338 <- temp[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 0)), var_type: None, value: Index(\"temp\", Number(U8, 2)) }", "Index(\"temp\", Number(U8, 2))", "Index(\"temp\", Number(U8, 2))"] }
# 027d2 Instruction { source: "tf338 <- temp[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 2)) }\", \"Index(\\\"temp\\\", Number(U8, 2))\", \"Index(\\\"temp\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x66), Register(0x88)], resolved: None }
0b 66 88 
# temp_hi[0x00..0x01] <- tf338 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 0)), var_type: None, value: Index(\"temp\", Number(U8, 2)) }"] }
# 027d5 Instruction { source: "temp_hi[0x00..0x01] <- tf338 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x88), Register(0x98)], resolved: None }
0b 88 98 
# tb6b4 <- temp[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 1)), var_type: None, value: Index(\"temp\", Number(U8, 3)) }", "Index(\"temp\", Number(U8, 3))", "Index(\"temp\", Number(U8, 3))"] }
# 027d8 Instruction { source: "tb6b4 <- temp[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 3)) }\", \"Index(\\\"temp\\\", Number(U8, 3))\", \"Index(\\\"temp\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x67), Register(0x88)], resolved: None }
0b 67 88 
# temp_hi[0x01..0x02] <- tb6b4 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 1)), var_type: None, value: Index(\"temp\", Number(U8, 3)) }"] }
# 027db Instruction { source: "temp_hi[0x01..0x02] <- tb6b4 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0x88), Register(0x99)], resolved: None }
0b 88 99 
# te546 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"lo\"), var_type: None, value: Ident(\"temp_lo\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\"__frame_pointer\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\"__frame_pointer\") }", "Ident(\"__frame_pointer\")"] }
# 027de Instruction { source: "te546 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\\\"__frame_pointer\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\\\"__frame_pointer\\\") }\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x94)], resolved: None }
21 0c 94 
# t3308 <- temp_lo U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"lo\"), var_type: None, value: Ident(\"temp_lo\") }", "Ident(\"temp_lo\")", "Ident(\"temp_lo\")"] }
# 027e1 Instruction { source: "t3308 <- temp_lo U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\", \"Ident(\\\"temp_lo\\\")\", \"Ident(\\\"temp_lo\\\")\"] }", opcode: Copy32, args: [Register(0xa0), Register(0x64)], resolved: None }
21 a0 64 
# mem[te546] <- t3308 U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"lo\"), var_type: None, value: Ident(\"temp_lo\") }"] }
# 027e4 Instruction { source: "mem[te546] <- t3308 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\"] }", opcode: Store32_1, args: [Register(0x64), Register(0x94)], resolved: None }
23 64 94 
# 027e7 Instruction { source: "mem[te546] <- t3308 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# te825 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 027e8 Instruction { source: "te825 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x94)], resolved: None }
21 0c 94 
# t3f2a <- te825 Add Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))"] }
# 027eb Instruction { source: "t3f2a <- te825 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: Copy32, args: [Register(0x94), Register(0x64)], resolved: None }
21 94 64 
# 027ee Instruction { source: "t3f2a <- te825 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x64), Constant32(0x00000004=4)], resolved: None }
32 64 04 00 00 00 
# t41f5 <- temp_hi U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Ident(\"temp_hi\")", "Ident(\"temp_hi\")"] }
# 027f4 Instruction { source: "t41f5 <- temp_hi U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Ident(\\\"temp_hi\\\")\", \"Ident(\\\"temp_hi\\\")\"] }", opcode: Copy32, args: [Register(0x98), Register(0x68)], resolved: None }
21 98 68 
# mem[t3f2a] <- t41f5 U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }"] }
# 027f7 Instruction { source: "mem[t3f2a] <- t41f5 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\"] }", opcode: Store32_1, args: [Register(0x68), Register(0x64)], resolved: None }
23 68 64 
# 027fa Instruction { source: "mem[t3f2a] <- t41f5 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# tac13 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "tac13 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# te825 <- __frame_pointer U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 027fb Instruction { source: "te825 <- __frame_pointer U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x94)], resolved: None }
21 0c 94 
# t4a94 <- te825 Add Number(0n0/0x00000000u32)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))"] }
# 027fe Instruction { source: "t4a94 <- te825 Add Number(0n0/0x00000000u32)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: Copy32, args: [Register(0x94), Register(0x64)], resolved: None }
21 94 64 
# 02801 Instruction { source: "t4a94 <- te825 Add Number(0n0/0x00000000u32)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x64), Constant32(0x00000000=0)], resolved: None }
32 64 00 00 00 00 
# tf4b2 <- t4a94 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))"] }
# 02807 Instruction { source: "tf4b2 <- t4a94 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\"] }", opcode: Copy32, args: [Register(0x64), Register(0x68)], resolved: None }
21 64 68 
# tac13 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "tac13 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_mul32_64_add_U64_1_a <- tac13 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })"] }
# 0280a Instruction { source: "inline_mul32_64_add_U64_1_a <- tac13 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x70), Register(0x60)], resolved: None }
21 70 60 
# inline_mul32_64_add_U64_1_b <- tf4b2 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })"] }
# 0280d Instruction { source: "inline_mul32_64_add_U64_1_b <- tf4b2 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x68), Register(0x64)], resolved: None }
21 68 64 
# inline_mul32_64_add_U64_1_c <- tac13 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })"] }
# 02810 Instruction { source: "inline_mul32_64_add_U64_1_c <- tac13 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x70), Register(0x68)], resolved: None }
21 70 68 
# inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"a\", \"lo\") }", "PtrFieldDeref(\"a\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"a\\\", \\\"lo\\\") }\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_tbeec] U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"a\", \"lo\") }", "PtrFieldDeref(\"a\", \"lo\")"] }
# 02813 Instruction { source: "inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_tbeec] U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"a\\\", \\\"lo\\\") }\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0x60), Register(0x6c)], resolved: None }
22 60 6c 
# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 02816 Instruction { source: "inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: Copy32, args: [Register(0x68), Register(0x70)], resolved: None }
21 68 70 
# 02819 Instruction { source: "inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x70), Constant32(0x00000004=4)], resolved: None }
32 70 04 00 00 00 
# inline_mul32_64_add_U64_1_t3203 <- inline_mul32_64_add_U64_1_a U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t3203 <- inline_mul32_64_add_U64_1_a U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_t3203 Add Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))"] }
# 0281f Instruction { source: "inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_t3203 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\"] }", opcode: Copy32, args: [Register(0x60), Register(0x74)], resolved: None }
21 60 74 
# 02822 Instruction { source: "inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_t3203 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x74), Constant32(0x00000004=4)], resolved: None }
32 74 04 00 00 00 
# inline_mul32_64_add_U64_1_te24c <- mem[inline_mul32_64_add_U64_1_t144a] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")"] }
# 02828 Instruction { source: "inline_mul32_64_add_U64_1_te24c <- mem[inline_mul32_64_add_U64_1_t144a] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0x74), Register(0x78)], resolved: None }
22 74 78 
# inline_mul32_64_add_U64_1_teec0 <- inline_mul32_64_add_U64_1_b U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_teec0 <- inline_mul32_64_add_U64_1_b U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_teec0 Add Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))"] }
# 0282b Instruction { source: "inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_teec0 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\"] }", opcode: Copy32, args: [Register(0x64), Register(0x74)], resolved: None }
21 64 74 
# 0282e Instruction { source: "inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_teec0 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x74), Constant32(0x00000004=4)], resolved: None }
32 74 04 00 00 00 
# inline_mul32_64_add_U64_1_t153d <- mem[inline_mul32_64_add_U64_1_t809] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")"] }
# 02834 Instruction { source: "inline_mul32_64_add_U64_1_t153d <- mem[inline_mul32_64_add_U64_1_t809] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0x74), Register(0x74)], resolved: None }
22 74 74 
# inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))"] }
# 02837 Instruction { source: "inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02838 Instruction { source: "inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x78), Register(0x74), Register(0x74)], resolved: None }
30 78 74 74 
# 0283c Instruction { source: "inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }"] }
# 0283d Instruction { source: "mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\"] }", opcode: Store32_1, args: [Register(0x74), Register(0x70)], resolved: None }
23 74 70 
# 02840 Instruction { source: "mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"a\", \"lo\")", "PtrFieldDeref(\"a\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_add_U64_1_td868 <- mem[inline_mul32_64_add_U64_1_tbeec] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"a\", \"lo\")", "PtrFieldDeref(\"a\", \"lo\")"] }
# 02841 Instruction { source: "inline_mul32_64_add_U64_1_td868 <- mem[inline_mul32_64_add_U64_1_tbeec] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0x60), Register(0x70)], resolved: None }
22 60 70 
# inline_mul32_64_add_U64_1_t24ae <- inline_mul32_64_add_U64_1_b U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"b\", \"lo\")", "PtrFieldDeref(\"b\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }", "Ident(\"b\")"] }
# 02844 Instruction { source: "inline_mul32_64_add_U64_1_t24ae <- inline_mul32_64_add_U64_1_b U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x60)], resolved: None }
21 64 60 
# inline_mul32_64_add_U64_1_td5bf <- mem[inline_mul32_64_add_U64_1_t24ae] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"b\", \"lo\")", "PtrFieldDeref(\"b\", \"lo\")"] }
# 02847 Instruction { source: "inline_mul32_64_add_U64_1_td5bf <- mem[inline_mul32_64_add_U64_1_t24ae] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0x60), Register(0x60)], resolved: None }
22 60 60 
# inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))"] }
# 0284a Instruction { source: "inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0284b Instruction { source: "inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x70), Register(0x60), Register(0x60)], resolved: None }
30 70 60 60 
# 0284f Instruction { source: "inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }"] }
# 02850 Instruction { source: "mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\"] }", opcode: Store32_1, args: [Register(0x60), Register(0x68)], resolved: None }
23 60 68 
# 02853 Instruction { source: "mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }", "PtrFieldDeref(\"c\", \"lo\")", "PtrFieldDeref(\"c\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_mul32_64_add_U64_1_t90ac <- mem[inline_mul32_64_add_U64_1_t8956] U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }", "PtrFieldDeref(\"c\", \"lo\")", "PtrFieldDeref(\"c\", \"lo\")"] }
# 02854 Instruction { source: "inline_mul32_64_add_U64_1_t90ac <- mem[inline_mul32_64_add_U64_1_t8956] U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0x68), Register(0x64)], resolved: None }
22 68 64 
# inline_mul32_64_add_U64_1_t1506 <- inline_mul32_64_add_U64_1_lo U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 02857 Instruction { source: "inline_mul32_64_add_U64_1_t1506 <- inline_mul32_64_add_U64_1_lo U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0x6c), Register(0x60)], resolved: None }
21 6c 60 
# if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }"] }
# 0285a Instruction { source: "if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8, args: [Register(0x63), Register(0x67)], resolved: None }
15 63 67 
# 0285d Instruction { source: "if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x62), Register(0x66)], resolved: None }
16 62 66 
# 02860 Instruction { source: "if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x61), Register(0x65)], resolved: None }
16 61 65 
# 02863 Instruction { source: "if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x60), Register(0x64)], resolved: None }
16 60 64 
# 02866 Instruction { source: "if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: JcImm, args: [Label24(inline_mul32_64_add_U64_1_add_U64_if_else_0_2)], resolved: None }
71 8d 28 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_1_add_U64_if_true_0_1)], resolved: None }
# :inline_mul32_64_add_U64_1_add_U64_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }"] }
# inline_mul32_64_add_U64_1_add_U64_if_true_0_1
# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 0286a Instruction { source: "inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: Copy32, args: [Register(0x68), Register(0x70)], resolved: None }
21 68 70 
# 0286d Instruction { source: "inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x70), Constant32(0x00000004=4)], resolved: None }
32 70 04 00 00 00 
# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 02873 Instruction { source: "inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: Copy32, args: [Register(0x68), Register(0x70)], resolved: None }
21 68 70 
# 02876 Instruction { source: "inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x70), Constant32(0x00000004=4)], resolved: None }
32 70 04 00 00 00 
# inline_mul32_64_add_U64_1_tf677 <- mem[inline_mul32_64_add_U64_1_t1335] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")"] }
# 0287c Instruction { source: "inline_mul32_64_add_U64_1_tf677 <- mem[inline_mul32_64_add_U64_1_t1335] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0x70), Register(0x60)], resolved: None }
22 70 60 
# inline_mul32_64_add_U64_1_tcbd1 <- inline_mul32_64_add_U64_1_tf677 Add Number(0n1/0x00000001u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))"] }
# 0287f Instruction { source: "inline_mul32_64_add_U64_1_tcbd1 <- inline_mul32_64_add_U64_1_tf677 Add Number(0n1/0x00000001u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x60), Constant32(0x00000001=1)], resolved: None }
32 60 01 00 00 00 
# mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }"] }
# 02885 Instruction { source: "mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\"] }", opcode: Store32_1, args: [Register(0x60), Register(0x70)], resolved: None }
23 60 70 
# 02888 Instruction { source: "mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_mul32_64_add_U64_1_add_U64_if_end_0
# 	SourceContext { contexts: [] }
# 02889 Instruction { source: "goto inline_mul32_64_add_U64_1_add_U64_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_1_add_U64_if_end_0)], resolved: None }
70 8d 28 00 
# :inline_mul32_64_add_U64_1_add_U64_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_mul32_64_add_U64_1_add_U64_if_else_0_2
# :inline_mul32_64_add_U64_1_add_U64_if_end_0
# 	SourceContext { contexts: [] }
# inline_mul32_64_add_U64_1_add_U64_if_end_0
# goto inline_mul32_64_add_U64_1_function_end_add_U64
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_add_U64_1_function_end_add_U64\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_1_function_end_add_U64)], resolved: None }
# :inline_mul32_64_add_U64_1_function_end_add_U64
# 	SourceContext { contexts: [] }
# inline_mul32_64_add_U64_1_function_end_add_U64
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32)
# 	SourceContext { contexts: ["Return { value: None }"] }
# 0288d Instruction { source: "__frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32)\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 02893 Instruction { source: "Dealloc 8 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# 02899 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_mul32_64
# 	SourceContext { contexts: [] }
# function_end_mul32_64
# Unreachable
# 	SourceContext { contexts: [] }
# 0289b Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :print_dec32
# Ret None
# Arg0=a
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var a (Arg0 a Number(USIZE)) Reg(U32) Some([164, 165, 166, 167])
# Var b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_print_dec32_div32_by10_47_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_print_dec32_div32_by10_47_a (Arg0 a Number(USIZE)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a (Arg0 a Number(USIZE)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([172])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1c22 (t1c22 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31))) Reg(U8) Some([173])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t2574 (t2574 Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))) Reg(U8) Some([173])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f28 (t3f28 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))) Reg(U8) Some([173])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f9e (t3f9e Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))) Reg(U8) Some([173])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([173])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([172])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5eed (t5eed Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) Reg(U8) Some([173])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t6274 (t6274 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))) Reg(U8) Some([173])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8119 (t8119 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))) Reg(U8) Some([173])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8772 (t8772 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))) Reg(U8) Some([173])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 (t8792 Ident("a")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8e91 (t8e91 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))) Reg(U8) Some([173])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t9450 (t9450 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) Reg(U8) Some([174])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t96e8 (t96e8 Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))) Reg(U8) Some([173])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta620 (ta620 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) Reg(U8) Some([173])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([174])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te046 (te046 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))) Reg(U8) Some([173])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tea96 (tea96 Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))) Reg(U8) Some([173])
# Var inline_print_dec32_div32_by10_47_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_print_dec32_div32_by10_47_prod (Local prod Struct("U64") Static(987492)) Static(987492) None
# Var inline_print_dec32_div32_by10_47_t0 (static "prod") Reg(U32) Some([168, 169, 170, 171])
# Var inline_print_dec32_div32_by10_47_t1c61 (t1c61 AddressOf(Ident("prod"))) Reg(U32) Some([168, 169, 170, 171])
# Var inline_print_dec32_div32_by10_47_t45ae (t45ae Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) Reg(U32) Some([168, 169, 170, 171])
# Var inline_print_dec32_div32_by10_47_t8792 (t8792 Ident("a")) Reg(U32) Some([176, 177, 178, 179])
# Var inline_print_dec32_div32_by10_47_t9514 (t9514 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }) Reg(U32) Some([168, 169, 170, 171])
# Var inline_print_dec32_div32_by10_47_tb354 (tb354 LocalFieldDeref("prod", "hi")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_print_dec32_div32_by10_47_tef1a (tef1a Number(USIZE, 3435973837)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_print_dec32_div32_by10_47_tfc6a (tfc6a Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })) Reg(U8) Some([184])
# Var inline_print_dec32_mul32_by10_14_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_print_dec32_mul32_by10_14_a (Arg0 a Number(USIZE)) Reg(U32) Some([164, 165, 166, 167])
# Var inline_print_dec32_mul32_by10_14_b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_print_dec32_mul32_by10_14_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_print_dec32_mul32_by10_14_t7eaf (t7eaf Arithmetic(Add, Ident("b"), Ident("a"))) Reg(U32) Some([164, 165, 166, 167])
# Var inline_print_dec32_mul32_by10_14_t8792 (t8792 Ident("a")) Reg(U32) Some([164, 165, 166, 167])
# Var inline_print_dec32_mul32_by10_14_tace9 (tace9 Ident("b")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_print_dec32_putc_29_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_print_dec32_putc_29_c (Arg0 c Number(U8)) Reg(U8) Some([184])
# Var inline_print_dec32_putc_29_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_print_dec32_putc_29_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([184])
# Var inline_print_dec32_putc_29_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([184])
# Var inline_print_dec32_putc_29_tac13 (tac13 Ident("c")) Reg(U8) Some([184])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t1723 (t1723 Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })) Reg(U8) Some([184])
# Var t1a60 (t1a60 Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))) Reg(U8) Some([184])
# Var t86e2 (t86e2 Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) Reg(U32) Some([164, 165, 166, 167])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([176, 177, 178, 179])
# Var t9c15 (t9c15 Number(USIZE, 256)) Reg(U32) Some([168, 169, 170, 171])
# Var ta8fd (ta8fd Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })) Reg(U8) Some([184])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([168, 169, 170, 171])
# Var tc4db (tc4db Call(Call { function: "print_dec32", parameters: [Ident("b")] })) Reg(U8) Some([184])
# Var tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([184])
# 028a0 Instruction { source: "Save function parameter 'a' registers [0, 1, 2, 3] to locals [164, 165, 166, 167].", opcode: Copy32, args: [Register(0x00), Register(0xa4)], resolved: None }
21 00 a4 
# t8792 <- a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }", "Ident(\"a\")", "Ident(\"a\")"] }
# 028a3 Instruction { source: "t8792 <- a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xa4), Register(0xb0)], resolved: None }
21 a4 b0 
# t9c15 <- 0n256/0x00000100u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }", "Number(USIZE, 256)", "Number(USIZE, 256)"] }
# 028a6 Instruction { source: "t9c15 <- 0n256/0x00000100u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\", \"Number(USIZE, 256)\", \"Number(USIZE, 256)\"] }", opcode: LoadImm32, args: [Register(0xa8), Constant32(0x00000100=256)], resolved: None }
20 a8 00 01 00 00 
# if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }"] }
# 028ac Instruction { source: "if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8, args: [Register(0xab), Register(0xb3)], resolved: None }
15 ab b3 
# 028af Instruction { source: "if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8IfZero, args: [Register(0xaa), Register(0xb2)], resolved: None }
16 aa b2 
# 028b2 Instruction { source: "if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8IfZero, args: [Register(0xa9), Register(0xb1)], resolved: None }
16 a9 b1 
# 028b5 Instruction { source: "if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8IfZero, args: [Register(0xa8), Register(0xb0)], resolved: None }
16 a8 b0 
# 028b8 Instruction { source: "if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: JcImm, args: [Label24(print_dec32_if_else_0_2)], resolved: None }
71 fe 28 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: JmpImm, args: [Label24(print_dec32_if_true_0_1)], resolved: None }
# :print_dec32_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }"] }
# print_dec32_if_true_0_1
# tdd9e <- a[0x00..0x01] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }", "Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] })", "Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] })", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 028bc Instruction { source: "tdd9e <- a[0x00..0x01] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xa4), Register(0xb8)], resolved: None }
0b a4 b8 
# None <= call print_dec8(tdd9e,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }", "Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] })", "Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] })"] }
# 028bf Instruction { source: "Arg0[a]=tdd9e None <= call print_dec8(tdd9e,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Copy8, args: [Register(0xb8), Register(0x00)], resolved: None }
0b b8 00 
# Registers used by this function: {164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184}
# Registers used by callee tree: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 164, 165, 166, 167, 168, 169, 170, 171, 185, 186, 187, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [164, 165, 166, 167, 168, 169, 170, 171]
# 028c2 Instruction { source: "Saving reg0xab before None <= call print_dec8(tdd9e,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Push8, args: [Register(0xab)], resolved: None }
09 ab 
# 028c4 Instruction { source: "Saving reg0xaa before None <= call print_dec8(tdd9e,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Push8, args: [Register(0xaa)], resolved: None }
09 aa 
# 028c6 Instruction { source: "Saving reg0xa9 before None <= call print_dec8(tdd9e,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Push8, args: [Register(0xa9)], resolved: None }
09 a9 
# 028c8 Instruction { source: "Saving reg0xa8 before None <= call print_dec8(tdd9e,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Push8, args: [Register(0xa8)], resolved: None }
09 a8 
# 028ca Instruction { source: "Saving reg0xa7 before None <= call print_dec8(tdd9e,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Push8, args: [Register(0xa7)], resolved: None }
09 a7 
# 028cc Instruction { source: "Saving reg0xa6 before None <= call print_dec8(tdd9e,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Push8, args: [Register(0xa6)], resolved: None }
09 a6 
# 028ce Instruction { source: "Saving reg0xa5 before None <= call print_dec8(tdd9e,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Push8, args: [Register(0xa5)], resolved: None }
09 a5 
# 028d0 Instruction { source: "Saving reg0xa4 before None <= call print_dec8(tdd9e,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Push8, args: [Register(0xa4)], resolved: None }
09 a4 
# 028d2 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 028d8 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c e2 28 00 00 
# 028de Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: JmpImm, args: [Label24(:print_dec8)], resolved: None }
70 cd 2a 00 
# 028e2 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 028e8 Instruction { source: "Restoring reg0xa4 after None <= call print_dec8(tdd9e,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Pop8, args: [Register(0xa4)], resolved: None }
0a a4 
# 028ea Instruction { source: "Restoring reg0xa5 after None <= call print_dec8(tdd9e,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Pop8, args: [Register(0xa5)], resolved: None }
0a a5 
# 028ec Instruction { source: "Restoring reg0xa6 after None <= call print_dec8(tdd9e,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Pop8, args: [Register(0xa6)], resolved: None }
0a a6 
# 028ee Instruction { source: "Restoring reg0xa7 after None <= call print_dec8(tdd9e,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Pop8, args: [Register(0xa7)], resolved: None }
0a a7 
# 028f0 Instruction { source: "Restoring reg0xa8 after None <= call print_dec8(tdd9e,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Pop8, args: [Register(0xa8)], resolved: None }
0a a8 
# 028f2 Instruction { source: "Restoring reg0xa9 after None <= call print_dec8(tdd9e,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Pop8, args: [Register(0xa9)], resolved: None }
0a a9 
# 028f4 Instruction { source: "Restoring reg0xaa after None <= call print_dec8(tdd9e,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Pop8, args: [Register(0xaa)], resolved: None }
0a aa 
# 028f6 Instruction { source: "Restoring reg0xab after None <= call print_dec8(tdd9e,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Pop8, args: [Register(0xab)], resolved: None }
0a ab 
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 028f8 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto print_dec32_if_end_0
# 	SourceContext { contexts: [] }
# 028fa Instruction { source: "goto print_dec32_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(print_dec32_if_end_0)], resolved: None }
70 fe 28 00 
# :print_dec32_if_else_0_2
# 	SourceContext { contexts: [] }
# print_dec32_if_else_0_2
# :print_dec32_if_end_0
# 	SourceContext { contexts: [] }
# print_dec32_if_end_0
# t8792 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32_by10\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"div32_by10\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# 028fe Instruction { source: "t8792 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32_by10\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32_by10\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xa4), Register(0xb0)], resolved: None }
21 a4 b0 
# inline_print_dec32_div32_by10_47_a <- t8792 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32_by10\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"div32_by10\", parameters: [Ident(\"a\")] })"] }
# 02901 Instruction { source: "inline_print_dec32_div32_by10_47_a <- t8792 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32_by10\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32_by10\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0xb0), Register(0xa8)], resolved: None }
21 b0 a8 
# inline_print_dec32_div32_by10_47_t8792 <- inline_print_dec32_div32_by10_47_a U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Ident(\"a\")", "Ident(\"a\")"] }
# 02904 Instruction { source: "inline_print_dec32_div32_by10_47_t8792 <- inline_print_dec32_div32_by10_47_a U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xb0)], resolved: None }
21 a8 b0 
# inline_print_dec32_div32_by10_47_tef1a <- 0xcccccccdu32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Number(USIZE, 3435973837)", "Number(USIZE, 3435973837)"] }
# 02907 Instruction { source: "inline_print_dec32_div32_by10_47_tef1a <- 0xcccccccdu32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Number(USIZE, 3435973837)\", \"Number(USIZE, 3435973837)\"] }", opcode: LoadImm32, args: [Register(0xb4), Constant32(0xcccccccd=3435973837)], resolved: None }
20 b4 cd cc cc cc 
# inline_print_dec32_div32_by10_47_t0 <- 0n987492/0x000f1164u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "AddressOf(Ident(\"prod\"))", "AddressOf(Ident(\"prod\"))"] }
# 0290d Instruction { source: "inline_print_dec32_div32_by10_47_t0 <- 0n987492/0x000f1164u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"AddressOf(Ident(\\\"prod\\\"))\", \"AddressOf(Ident(\\\"prod\\\"))\"] }", opcode: LoadImm32, args: [Register(0xa8), Constant32(0x000f1164=987492)], resolved: None }
20 a8 64 11 0f 00 
# inline_print_dec32_div32_by10_47_t1c61 <- inline_print_dec32_div32_by10_47_t0 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "AddressOf(Ident(\"prod\"))", "AddressOf(Ident(\"prod\"))"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_t1c61 <- inline_print_dec32_div32_by10_47_t0 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"AddressOf(Ident(\\\"prod\\\"))\", \"AddressOf(Ident(\\\"prod\\\"))\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# None <= call mul32_64(inline_print_dec32_div32_by10_47_t8792,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })"] }
# 02913 Instruction { source: "Arg0[a]=inline_print_dec32_div32_by10_47_t8792 None <= call mul32_64(inline_print_dec32_div32_by10_47_t8792,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\"] }", opcode: Copy32, args: [Register(0xb0), Register(0x00)], resolved: None }
21 b0 00 
# 02916 Instruction { source: "Arg1[b]=inline_print_dec32_div32_by10_47_tef1a None <= call mul32_64(inline_print_dec32_div32_by10_47_t8792,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\"] }", opcode: Copy32, args: [Register(0xb4), Register(0x04)], resolved: None }
21 b4 04 
# 02919 Instruction { source: "Arg2[c]=inline_print_dec32_div32_by10_47_t1c61 None <= call mul32_64(inline_print_dec32_div32_by10_47_t8792,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\"] }", opcode: Copy32, args: [Register(0xa8), Register(0x08)], resolved: None }
21 a8 08 
# Registers used by this function: {164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184}
# Registers used by callee tree: {96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163}
# Registers to save: []
# 0291c Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02922 Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 2c 29 00 00 
# 02928 Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: JmpImm, args: [Label24(:mul32_64)], resolved: None }
70 1a 24 00 
# 0292c Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# inline_print_dec32_div32_by10_47_t9514 <- 0n987496/0x000f1168u32 
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "LocalFieldDeref(\"prod\", \"hi\")", "LocalFieldDeref(\"prod\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }", "Number(USIZE, 987496)"] }
# 02932 Instruction { source: "inline_print_dec32_div32_by10_47_t9514 <- 0n987496/0x000f1168u32 \n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }\", \"Number(USIZE, 987496)\"] }", opcode: LoadImm32, args: [Register(0xa8), Constant32(0x000f1168=987496)], resolved: None }
20 a8 68 11 0f 00 
# inline_print_dec32_div32_by10_47_tb354 <- mem[inline_print_dec32_div32_by10_47_t9514] U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "LocalFieldDeref(\"prod\", \"hi\")", "LocalFieldDeref(\"prod\", \"hi\")"] }
# 02938 Instruction { source: "inline_print_dec32_div32_by10_47_tb354 <- mem[inline_print_dec32_div32_by10_47_t9514] U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0xa8), Register(0xa8)], resolved: None }
22 a8 a8 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a <- inline_print_dec32_div32_by10_47_tb354 U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a <- inline_print_dec32_div32_by10_47_tb354 U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 0293b Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xa8), Register(0xae)], resolved: None }
0b a8 ae 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f28 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e RotateRight Number(0n3/0x03u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3))"] }
# 0293e Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f28 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e RotateRight Number(0n3/0x03u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x03=3)], resolved: None }
04 00 03 
# 02941 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f28 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e RotateRight Number(0n3/0x03u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x00), Register(0xae), Register(0xad)], resolved: None }
1e 04 00 ae ad 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f28 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3)) }"] }
# 02946 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f28 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0xad), Register(0xa8)], resolved: None }
0b ad a8 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 02949 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xa9), Register(0xac)], resolved: None }
0b a9 ac 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t6274 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 RotateRight Number(0n3/0x03u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3))"] }
# 0294c Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t6274 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 RotateRight Number(0n3/0x03u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x03=3)], resolved: None }
04 00 03 
# 0294f Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t6274 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 RotateRight Number(0n3/0x03u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x00), Register(0xac), Register(0xad)], resolved: None }
1e 04 00 ac ad 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t6274 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3)) }"] }
# 02954 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t6274 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0xad), Register(0xa9)], resolved: None }
0b ad a9 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 02957 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xaa), Register(0xad)], resolved: None }
0b aa ad 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t96e8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f RotateRight Number(0n3/0x03u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3))"] }
# 0295a Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t96e8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f RotateRight Number(0n3/0x03u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x03=3)], resolved: None }
04 00 03 
# 0295d Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t96e8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f RotateRight Number(0n3/0x03u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x00), Register(0xad), Register(0xad)], resolved: None }
1e 04 00 ad ad 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t96e8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3)) }"] }
# 02962 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t96e8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0xad), Register(0xaa)], resolved: None }
0b ad aa 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 02965 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xab), Register(0xac)], resolved: None }
0b ab ac 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c RotateRight Number(0n3/0x03u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3))"] }
# 02968 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c RotateRight Number(0n3/0x03u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x03=3)], resolved: None }
04 00 03 
# 0296b Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c RotateRight Number(0n3/0x03u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x00), Register(0xac), Register(0xad)], resolved: None }
1e 04 00 ac ad 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f9e U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3)) }"] }
# 02970 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f9e U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0xad), Register(0xab)], resolved: None }
0b ad ab 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 02973 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xa8), Register(0xae)], resolved: None }
0b a8 ae 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te046 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e BitwiseAnd Number(0n31/0x1fu8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31))"] }
# 02976 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te046 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e BitwiseAnd Number(0n31/0x1fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x1f=31)], resolved: None }
04 00 1f 
# 02979 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te046 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e BitwiseAnd Number(0n31/0x1fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31))\"] }", opcode: And8, args: [Register(0xae), Register(0x00), Register(0xad)], resolved: None }
1b ae 00 ad 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te046 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31)) }"] }
# 0297d Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te046 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31)) }\"] }", opcode: Copy8, args: [Register(0xad), Register(0xa8)], resolved: None }
0b ad a8 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 02980 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xa8), Register(0xae)], resolved: None }
0b a8 ae 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 02983 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xa9), Register(0xac)], resolved: None }
0b a9 ac 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta620 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseAnd Number(0n224/0xe0u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))"] }
# 02986 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta620 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseAnd Number(0n224/0xe0u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0xe0=224)], resolved: None }
04 00 e0 
# 02989 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta620 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseAnd Number(0n224/0xe0u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))\"] }", opcode: And8, args: [Register(0xac), Register(0x00), Register(0xad)], resolved: None }
1b ac 00 ad 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8772 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta620)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))"] }
# 0298d Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8772 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta620)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\"] }", opcode: Or8, args: [Register(0xae), Register(0xad), Register(0xad)], resolved: None }
1c ae ad ad 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8772 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))) }"] }
# 02991 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8772 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))) }\"] }", opcode: Copy8, args: [Register(0xad), Register(0xa8)], resolved: None }
0b ad a8 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 02994 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xa9), Register(0xac)], resolved: None }
0b a9 ac 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8e91 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseAnd Number(0n31/0x1fu8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31))"] }
# 02997 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8e91 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseAnd Number(0n31/0x1fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x1f=31)], resolved: None }
04 00 1f 
# 0299a Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8e91 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseAnd Number(0n31/0x1fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31))\"] }", opcode: And8, args: [Register(0xac), Register(0x00), Register(0xad)], resolved: None }
1b ac 00 ad 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8e91 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31)) }"] }
# 0299e Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8e91 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31)) }\"] }", opcode: Copy8, args: [Register(0xad), Register(0xa9)], resolved: None }
0b ad a9 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 029a1 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xa9), Register(0xac)], resolved: None }
0b a9 ac 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 029a4 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xaa), Register(0xad)], resolved: None }
0b aa ad 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5eed <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseAnd Number(0n224/0xe0u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))"] }
# 029a7 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5eed <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseAnd Number(0n224/0xe0u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0xe0=224)], resolved: None }
04 00 e0 
# 029aa Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5eed <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseAnd Number(0n224/0xe0u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))\"] }", opcode: And8, args: [Register(0xad), Register(0x00), Register(0xad)], resolved: None }
1b ad 00 ad 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tea96 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5eed)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))"] }
# 029ae Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tea96 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5eed)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\"] }", opcode: Or8, args: [Register(0xac), Register(0xad), Register(0xad)], resolved: None }
1c ac ad ad 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tea96 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))) }"] }
# 029b2 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tea96 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))) }\"] }", opcode: Copy8, args: [Register(0xad), Register(0xa9)], resolved: None }
0b ad a9 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 029b5 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xaa), Register(0xad)], resolved: None }
0b aa ad 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1c22 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseAnd Number(0n31/0x1fu8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31))"] }
# 029b8 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1c22 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseAnd Number(0n31/0x1fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x1f=31)], resolved: None }
04 00 1f 
# 029bb Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1c22 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseAnd Number(0n31/0x1fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31))\"] }", opcode: And8, args: [Register(0xad), Register(0x00), Register(0xad)], resolved: None }
1b ad 00 ad 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1c22 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31)) }"] }
# 029bf Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1c22 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31)) }\"] }", opcode: Copy8, args: [Register(0xad), Register(0xaa)], resolved: None }
0b ad aa 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 029c2 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xaa), Register(0xad)], resolved: None }
0b aa ad 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 029c5 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xab), Register(0xac)], resolved: None }
0b ab ac 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t9450 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c BitwiseAnd Number(0n224/0xe0u8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))"] }
# 029c8 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t9450 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c BitwiseAnd Number(0n224/0xe0u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0xe0=224)], resolved: None }
04 00 e0 
# 029cb Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t9450 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c BitwiseAnd Number(0n224/0xe0u8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))\"] }", opcode: And8, args: [Register(0xac), Register(0x00), Register(0xae)], resolved: None }
1b ac 00 ae 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t2574 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t9450)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))"] }
# 029cf Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t2574 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t9450)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\"] }", opcode: Or8, args: [Register(0xad), Register(0xae), Register(0xad)], resolved: None }
1c ad ae ad 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t2574 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))) }"] }
# 029d3 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t2574 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))) }\"] }", opcode: Copy8, args: [Register(0xad), Register(0xaa)], resolved: None }
0b ad aa 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 029d6 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xab), Register(0xac)], resolved: None }
0b ab ac 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8119 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c BitwiseAnd Number(0n31/0x1fu8)
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31))"] }
# 029d9 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8119 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c BitwiseAnd Number(0n31/0x1fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x1f=31)], resolved: None }
04 00 1f 
# 029dc Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8119 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c BitwiseAnd Number(0n31/0x1fu8)\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31))\"] }", opcode: And8, args: [Register(0xac), Register(0x00), Register(0xad)], resolved: None }
1b ac 00 ad 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8119 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31)) }"] }
# 029e0 Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8119 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31)) }\"] }", opcode: Copy8, args: [Register(0xad), Register(0xab)], resolved: None }
0b ad ab 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_print_dec32_div32_by10_47_t45ae <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_t45ae <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# goto inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3)], resolved: None }
# :inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3
# 	SourceContext { contexts: [] }
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3
# b <- inline_print_dec32_div32_by10_47_t45ae U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }"] }
# optimized away noop copy Instruction { source: "b <- inline_print_dec32_div32_by10_47_t45ae U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# goto inline_print_dec32_div32_by10_47_function_end_div32_by10
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_div32_by10_47_function_end_div32_by10\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\"] }", opcode: JmpImm, args: [Label24(inline_print_dec32_div32_by10_47_function_end_div32_by10)], resolved: None }
# :inline_print_dec32_div32_by10_47_function_end_div32_by10
# 	SourceContext { contexts: [] }
# inline_print_dec32_div32_by10_47_function_end_div32_by10
# tace9 <- b U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "tace9 <- b U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# None <= call print_dec32(tace9,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] })"] }
# 029e3 Instruction { source: "Arg0[a]=tace9 None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0xa8), Register(0x00)], resolved: None }
21 a8 00 
# Registers used by this function: {164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184}
# Registers used by callee tree: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184]
# 029e6 Instruction { source: "Saving reg0xb8 before None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xb8)], resolved: None }
09 b8 
# 029e8 Instruction { source: "Saving reg0xb7 before None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xb7)], resolved: None }
09 b7 
# 029ea Instruction { source: "Saving reg0xb6 before None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xb6)], resolved: None }
09 b6 
# 029ec Instruction { source: "Saving reg0xb5 before None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xb5)], resolved: None }
09 b5 
# 029ee Instruction { source: "Saving reg0xb4 before None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xb4)], resolved: None }
09 b4 
# 029f0 Instruction { source: "Saving reg0xb3 before None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xb3)], resolved: None }
09 b3 
# 029f2 Instruction { source: "Saving reg0xb2 before None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xb2)], resolved: None }
09 b2 
# 029f4 Instruction { source: "Saving reg0xb1 before None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xb1)], resolved: None }
09 b1 
# 029f6 Instruction { source: "Saving reg0xb0 before None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xb0)], resolved: None }
09 b0 
# 029f8 Instruction { source: "Saving reg0xae before None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xae)], resolved: None }
09 ae 
# 029fa Instruction { source: "Saving reg0xad before None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xad)], resolved: None }
09 ad 
# 029fc Instruction { source: "Saving reg0xac before None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xac)], resolved: None }
09 ac 
# 029fe Instruction { source: "Saving reg0xab before None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xab)], resolved: None }
09 ab 
# 02a00 Instruction { source: "Saving reg0xaa before None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xaa)], resolved: None }
09 aa 
# 02a02 Instruction { source: "Saving reg0xa9 before None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xa9)], resolved: None }
09 a9 
# 02a04 Instruction { source: "Saving reg0xa8 before None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xa8)], resolved: None }
09 a8 
# 02a06 Instruction { source: "Saving reg0xa7 before None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xa7)], resolved: None }
09 a7 
# 02a08 Instruction { source: "Saving reg0xa6 before None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xa6)], resolved: None }
09 a6 
# 02a0a Instruction { source: "Saving reg0xa5 before None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xa5)], resolved: None }
09 a5 
# 02a0c Instruction { source: "Saving reg0xa4 before None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xa4)], resolved: None }
09 a4 
# 02a0e Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02a14 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 1e 2a 00 00 
# 02a1a Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: JmpImm, args: [Label24(:print_dec32)], resolved: None }
70 a0 28 00 
# 02a1e Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 02a24 Instruction { source: "Restoring reg0xa4 after None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xa4)], resolved: None }
0a a4 
# 02a26 Instruction { source: "Restoring reg0xa5 after None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xa5)], resolved: None }
0a a5 
# 02a28 Instruction { source: "Restoring reg0xa6 after None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xa6)], resolved: None }
0a a6 
# 02a2a Instruction { source: "Restoring reg0xa7 after None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xa7)], resolved: None }
0a a7 
# 02a2c Instruction { source: "Restoring reg0xa8 after None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xa8)], resolved: None }
0a a8 
# 02a2e Instruction { source: "Restoring reg0xa9 after None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xa9)], resolved: None }
0a a9 
# 02a30 Instruction { source: "Restoring reg0xaa after None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xaa)], resolved: None }
0a aa 
# 02a32 Instruction { source: "Restoring reg0xab after None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xab)], resolved: None }
0a ab 
# 02a34 Instruction { source: "Restoring reg0xac after None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xac)], resolved: None }
0a ac 
# 02a36 Instruction { source: "Restoring reg0xad after None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xad)], resolved: None }
0a ad 
# 02a38 Instruction { source: "Restoring reg0xae after None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xae)], resolved: None }
0a ae 
# 02a3a Instruction { source: "Restoring reg0xb0 after None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xb0)], resolved: None }
0a b0 
# 02a3c Instruction { source: "Restoring reg0xb1 after None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xb1)], resolved: None }
0a b1 
# 02a3e Instruction { source: "Restoring reg0xb2 after None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xb2)], resolved: None }
0a b2 
# 02a40 Instruction { source: "Restoring reg0xb3 after None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xb3)], resolved: None }
0a b3 
# 02a42 Instruction { source: "Restoring reg0xb4 after None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xb4)], resolved: None }
0a b4 
# 02a44 Instruction { source: "Restoring reg0xb5 after None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xb5)], resolved: None }
0a b5 
# 02a46 Instruction { source: "Restoring reg0xb6 after None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xb6)], resolved: None }
0a b6 
# 02a48 Instruction { source: "Restoring reg0xb7 after None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xb7)], resolved: None }
0a b7 
# 02a4a Instruction { source: "Restoring reg0xb8 after None <= call print_dec32(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xb8)], resolved: None }
0a b8 
# t8792 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })) }", "Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] }))", "Ident(\"a\")", "Ident(\"a\")"] }
# 02a4c Instruction { source: "t8792 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xa4), Register(0xb0)], resolved: None }
21 a4 b0 
# tace9 <- b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })) }", "Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] }))", "Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "tace9 <- b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_print_dec32_mul32_by10_14_a <- tace9 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })) }", "Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] }))", "Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })"] }
# 02a4f Instruction { source: "inline_print_dec32_mul32_by10_14_a <- tace9 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa4)], resolved: None }
21 a8 a4 
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792)
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))"] }
# 02a52 Instruction { source: "inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02a53 Instruction { source: "inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xa4), Register(0xa4), Register(0xa4)], resolved: None }
30 a4 a4 a4 
# 02a57 Instruction { source: "inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792)
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))"] }
# 02a58 Instruction { source: "inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02a59 Instruction { source: "inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xa4), Register(0xa4), Register(0xa8)], resolved: None }
30 a4 a4 a8 
# 02a5d Instruction { source: "inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9)
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"b\"))"] }
# 02a5e Instruction { source: "inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02a5f Instruction { source: "inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xa8), Register(0xa8), Register(0xa8)], resolved: None }
30 a8 a8 a8 
# 02a63 Instruction { source: "inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792)
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))"] }
# 02a64 Instruction { source: "inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02a65 Instruction { source: "inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xa8), Register(0xa4), Register(0xa4)], resolved: None }
30 a8 a4 a4 
# 02a69 Instruction { source: "inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792)\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t86e2 <- inline_print_dec32_mul32_by10_14_t7eaf U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }"] }
# optimized away noop copy Instruction { source: "t86e2 <- inline_print_dec32_mul32_by10_14_t7eaf U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\"] }", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# goto inline_print_dec32_mul32_by10_14_function_end_mul32_by10
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_mul32_by10_14_function_end_mul32_by10\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_print_dec32_mul32_by10_14_function_end_mul32_by10)], resolved: None }
# :inline_print_dec32_mul32_by10_14_function_end_mul32_by10
# 	SourceContext { contexts: [] }
# inline_print_dec32_mul32_by10_14_function_end_mul32_by10
# a <- t8792 Subtract Var(t86e2)
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })) }", "Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] }))"] }
# 02a6a Instruction { source: "a <- t8792 Subtract Var(t86e2)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: Copy32, args: [Register(0xa4), Register(0x00)], resolved: None }
21 a4 00 
# 02a6d Instruction { source: "a <- t8792 Subtract Var(t86e2)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 02a6f Instruction { source: "a <- t8792 Subtract Var(t86e2)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 02a71 Instruction { source: "a <- t8792 Subtract Var(t86e2)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 02a73 Instruction { source: "a <- t8792 Subtract Var(t86e2)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 02a75 Instruction { source: "a <- t8792 Subtract Var(t86e2)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 02a7b Instruction { source: "a <- t8792 Subtract Var(t86e2)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02a7c Instruction { source: "a <- t8792 Subtract Var(t86e2)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: AddCarry32_1, args: [Register(0xb0), Register(0x00), Register(0xa4)], resolved: None }
30 b0 00 a4 
# 02a80 Instruction { source: "a <- t8792 Subtract Var(t86e2)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# tdd9e <- a[0x00..0x01] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })", "Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))", "Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 02a81 Instruction { source: "tdd9e <- a[0x00..0x01] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))\", \"Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xa4), Register(0xb8)], resolved: None }
0b a4 b8 
# t1a60 <- tdd9e Add Number(0n48/0x30u8)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })", "Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))", "Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))"] }
# 02a84 Instruction { source: "t1a60 <- tdd9e Add Number(0n48/0x30u8)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))\", \"Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x30=48)], resolved: None }
04 00 30 
# 02a87 Instruction { source: "t1a60 <- tdd9e Add Number(0n48/0x30u8)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))\", \"Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0xb8), Register(0x00), Register(0xb8)], resolved: None }
14 b8 00 b8 
# inline_print_dec32_putc_29_c <- t1a60 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_c <- t1a60 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0xb8), Register(0xb8)], resolved: None }
# None <= call io_write0(inline_print_dec32_putc_29_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 02a8b Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0xb8)], resolved: None }
68 b8 
# inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0xb8), Register(0xb8)], resolved: None }
# None <= call lcd_putc(inline_print_dec32_putc_29_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })"] }
# 02a8d Instruction { source: "Arg0[ch]=inline_print_dec32_putc_29_tac13 None <= call lcd_putc(inline_print_dec32_putc_29_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0xb8), Register(0x00)], resolved: None }
0b b8 00 
# Registers used by this function: {164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184}
# Registers used by callee tree: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [164, 165, 166, 167, 168, 169, 170, 171]
# 02a90 Instruction { source: "Saving reg0xab before None <= call lcd_putc(inline_print_dec32_putc_29_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0xab)], resolved: None }
09 ab 
# 02a92 Instruction { source: "Saving reg0xaa before None <= call lcd_putc(inline_print_dec32_putc_29_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0xaa)], resolved: None }
09 aa 
# 02a94 Instruction { source: "Saving reg0xa9 before None <= call lcd_putc(inline_print_dec32_putc_29_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0xa9)], resolved: None }
09 a9 
# 02a96 Instruction { source: "Saving reg0xa8 before None <= call lcd_putc(inline_print_dec32_putc_29_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0xa8)], resolved: None }
09 a8 
# 02a98 Instruction { source: "Saving reg0xa7 before None <= call lcd_putc(inline_print_dec32_putc_29_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0xa7)], resolved: None }
09 a7 
# 02a9a Instruction { source: "Saving reg0xa6 before None <= call lcd_putc(inline_print_dec32_putc_29_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0xa6)], resolved: None }
09 a6 
# 02a9c Instruction { source: "Saving reg0xa5 before None <= call lcd_putc(inline_print_dec32_putc_29_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0xa5)], resolved: None }
09 a5 
# 02a9e Instruction { source: "Saving reg0xa4 before None <= call lcd_putc(inline_print_dec32_putc_29_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0xa4)], resolved: None }
09 a4 
# 02aa0 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02aa6 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c b0 2a 00 00 
# 02aac Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: JmpImm, args: [Label24(:lcd_putc)], resolved: None }
70 08 21 00 
# 02ab0 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 02ab6 Instruction { source: "Restoring reg0xa4 after None <= call lcd_putc(inline_print_dec32_putc_29_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0xa4)], resolved: None }
0a a4 
# 02ab8 Instruction { source: "Restoring reg0xa5 after None <= call lcd_putc(inline_print_dec32_putc_29_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0xa5)], resolved: None }
0a a5 
# 02aba Instruction { source: "Restoring reg0xa6 after None <= call lcd_putc(inline_print_dec32_putc_29_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0xa6)], resolved: None }
0a a6 
# 02abc Instruction { source: "Restoring reg0xa7 after None <= call lcd_putc(inline_print_dec32_putc_29_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0xa7)], resolved: None }
0a a7 
# 02abe Instruction { source: "Restoring reg0xa8 after None <= call lcd_putc(inline_print_dec32_putc_29_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0xa8)], resolved: None }
0a a8 
# 02ac0 Instruction { source: "Restoring reg0xa9 after None <= call lcd_putc(inline_print_dec32_putc_29_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0xa9)], resolved: None }
0a a9 
# 02ac2 Instruction { source: "Restoring reg0xaa after None <= call lcd_putc(inline_print_dec32_putc_29_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0xaa)], resolved: None }
0a aa 
# 02ac4 Instruction { source: "Restoring reg0xab after None <= call lcd_putc(inline_print_dec32_putc_29_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0xab)], resolved: None }
0a ab 
# goto inline_print_dec32_putc_29_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_putc_29_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_print_dec32_putc_29_function_end_putc)], resolved: None }
# :inline_print_dec32_putc_29_function_end_putc
# 	SourceContext { contexts: [] }
# inline_print_dec32_putc_29_function_end_putc
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 02ac6 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_print_dec32
# 	SourceContext { contexts: [] }
# function_end_print_dec32
# Unreachable
# 	SourceContext { contexts: [] }
# 02ac8 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :print_dec8
# Ret None
# Arg0=a
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var a (Arg0 a Number(U8)) Reg(U8) Some([185])
# Var b (Local b Number(U8) Reg(U8)) Reg(U8) Some([186])
# Var inline_print_dec8_putc_30_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_print_dec8_putc_30_c (Arg0 c Number(U8)) Reg(U8) Some([185])
# Var inline_print_dec8_putc_30_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_print_dec8_putc_30_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([185])
# Var inline_print_dec8_putc_30_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([185])
# Var inline_print_dec8_putc_30_tac13 (tac13 Ident("c")) Reg(U8) Some([185])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t6cb (t6cb Arithmetic(Multiply, Ident("b"), Number(U8, 10))) Reg(U8) Some([185])
# Var t6db1 (t6db1 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([185])
# Var t79c4 (t79c4 Call(Call { function: "print_dec8", parameters: [Ident("b")] })) Reg(U8) Some([185])
# Var t8792 (t8792 Ident("a")) Reg(U8) Some([187])
# Var tace9 (tace9 Ident("b")) Reg(U8) Some([186])
# Var td36e (td36e Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([185])
# Var td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([186])
# 02acd Instruction { source: "Save function parameter 'a' registers [0] to locals [185].", opcode: Copy8, args: [Register(0x00), Register(0xb9)], resolved: None }
0b 00 b9 
# t8792 <- a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# 02ad0 Instruction { source: "t8792 <- a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xb9), Register(0xbb)], resolved: None }
0b b9 bb 
# td7b5 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 02ad3 Instruction { source: "td7b5 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xba), Constant8(0x0a=10)], resolved: None }
04 ba 0a 
# if t8792 >= td7b5 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 02ad6 Instruction { source: "if t8792 >= td7b5 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0xba), Register(0xbb)], resolved: None }
15 ba bb 
# 02ad9 Instruction { source: "if t8792 >= td7b5 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(print_dec8_if_true_0_1)], resolved: None }
71 e1 2a 00 
# 02add Instruction { source: "if t8792 >= td7b5 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(print_dec8_if_else_0_2)], resolved: None }
70 27 2b 00 
# :print_dec8_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }])], else_block: [] }"] }
# print_dec8_if_true_0_1
# t8792 <- a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# 02ae1 Instruction { source: "t8792 <- a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xb9), Register(0xbb)], resolved: None }
0b b9 bb 
# b <- t8792 Divide Number(0n10/0x0au8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 10))"] }
# 02ae4 Instruction { source: "b <- t8792 Divide Number(0n10/0x0au8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x0a=10)], resolved: None }
04 00 0a 
# 02ae7 Instruction { source: "b <- t8792 Divide Number(0n10/0x0au8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Divide8, args: [Register(0xbb), Register(0x00), Register(0xba)], resolved: None }
17 bb 00 ba 
# tace9 <- b U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "tace9 <- b U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0xba), Register(0xba)], resolved: None }
# None <= call print_dec8(tace9,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] })"] }
# 02aeb Instruction { source: "Arg0[a]=tace9 None <= call print_dec8(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy8, args: [Register(0xba), Register(0x00)], resolved: None }
0b ba 00 
# Registers used by this function: {185, 186, 187}
# Registers used by callee tree: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 164, 165, 166, 167, 168, 169, 170, 171, 185, 186, 187, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [185, 186, 187]
# 02aee Instruction { source: "Saving reg0xbb before None <= call print_dec8(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xbb)], resolved: None }
09 bb 
# 02af0 Instruction { source: "Saving reg0xba before None <= call print_dec8(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xba)], resolved: None }
09 ba 
# 02af2 Instruction { source: "Saving reg0xb9 before None <= call print_dec8(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xb9)], resolved: None }
09 b9 
# 02af4 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02afa Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 04 2b 00 00 
# 02b00 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: JmpImm, args: [Label24(:print_dec8)], resolved: None }
70 cd 2a 00 
# 02b04 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 02b0a Instruction { source: "Restoring reg0xb9 after None <= call print_dec8(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xb9)], resolved: None }
0a b9 
# 02b0c Instruction { source: "Restoring reg0xba after None <= call print_dec8(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xba)], resolved: None }
0a ba 
# 02b0e Instruction { source: "Restoring reg0xbb after None <= call print_dec8(tace9,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xbb)], resolved: None }
0a bb 
# t8792 <- a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10)))", "Ident(\"a\")", "Ident(\"a\")"] }
# 02b10 Instruction { source: "t8792 <- a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xb9), Register(0xbb)], resolved: None }
0b b9 bb 
# tace9 <- b U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "tace9 <- b U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0xba), Register(0xba)], resolved: None }
# t6cb <- tace9 Multiply Number(0n10/0x0au8)
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))"] }
# 02b13 Instruction { source: "t6cb <- tace9 Multiply Number(0n10/0x0au8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x0a=10)], resolved: None }
04 00 0a 
# 02b16 Instruction { source: "t6cb <- tace9 Multiply Number(0n10/0x0au8)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))\"] }", opcode: Mul8_8, args: [Register(0xba), Register(0x00), Register(0xb9)], resolved: None }
10 ba 00 b9 
# a <- t8792 Subtract Var(t6cb)
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10)))"] }
# 02b1a Instruction { source: "a <- t8792 Subtract Var(t6cb)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\"] }", opcode: Copy8, args: [Register(0xb9), Register(0x00)], resolved: None }
0b b9 00 
# 02b1d Instruction { source: "a <- t8792 Subtract Var(t6cb)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 02b1f Instruction { source: "a <- t8792 Subtract Var(t6cb)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\"] }", opcode: Add8NoCarryIn, args: [Register(0xbb), Register(0x00), Register(0xb9)], resolved: None }
14 bb 00 b9 
# goto print_dec8_if_end_0
# 	SourceContext { contexts: [] }
# 02b23 Instruction { source: "goto print_dec8_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(print_dec8_if_end_0)], resolved: None }
70 27 2b 00 
# :print_dec8_if_else_0_2
# 	SourceContext { contexts: [] }
# print_dec8_if_else_0_2
# :print_dec8_if_end_0
# 	SourceContext { contexts: [] }
# print_dec8_if_end_0
# t8792 <- a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# 02b27 Instruction { source: "t8792 <- a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xb9), Register(0xbb)], resolved: None }
0b b9 bb 
# t6db1 <- t8792 Add Number(0n48/0x30u8)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 02b2a Instruction { source: "t6db1 <- t8792 Add Number(0n48/0x30u8)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: LoadImm8, args: [Register(0x00), Constant8(0x30=48)], resolved: None }
04 00 30 
# 02b2d Instruction { source: "t6db1 <- t8792 Add Number(0n48/0x30u8)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0xbb), Register(0x00), Register(0xb9)], resolved: None }
14 bb 00 b9 
# inline_print_dec8_putc_30_c <- t6db1 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_c <- t6db1 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0xb9), Register(0xb9)], resolved: None }
# inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0xb9), Register(0xb9)], resolved: None }
# None <= call io_write0(inline_print_dec8_putc_30_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 02b31 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0xb9)], resolved: None }
68 b9 
# inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0xb9), Register(0xb9)], resolved: None }
# None <= call lcd_putc(inline_print_dec8_putc_30_tac13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })"] }
# 02b33 Instruction { source: "Arg0[ch]=inline_print_dec8_putc_30_tac13 None <= call lcd_putc(inline_print_dec8_putc_30_tac13,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0xb9), Register(0x00)], resolved: None }
0b b9 00 
# Registers used by this function: {185, 186, 187}
# Registers used by callee tree: {36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02b36 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02b3c Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 46 2b 00 00 
# 02b42 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: JmpImm, args: [Label24(:lcd_putc)], resolved: None }
70 08 21 00 
# 02b46 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto inline_print_dec8_putc_30_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec8_putc_30_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_print_dec8_putc_30_function_end_putc)], resolved: None }
# :inline_print_dec8_putc_30_function_end_putc
# 	SourceContext { contexts: [] }
# inline_print_dec8_putc_30_function_end_putc
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 02b4c Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_print_dec8
# 	SourceContext { contexts: [] }
# function_end_print_dec8
# Unreachable
# 	SourceContext { contexts: [] }
# 02b4e Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :stdio_init
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_stdio_init_queue_init_35_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_stdio_init_queue_init_35_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_stdio_init_queue_init_35_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([188, 189, 190, 191])
# Var inline_stdio_init_queue_init_35_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([188, 189, 190, 191])
# Var inline_stdio_init_queue_init_35_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([192])
# Var inline_stdio_init_queue_init_35_tb702 (tb702 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([196, 197, 198, 199])
# Var inline_stdio_init_queue_init_35_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([188, 189, 190, 191])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (static "stdin") Reg(U32) Some([188, 189, 190, 191])
# Var t5c19 (t5c19 Call(Call { function: "KeyBoard_init", parameters: [] })) Reg(U8) Some([200])
# Var t7567 (t7567 Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] })) Reg(U8) Some([200])
# Var t7b05 (t7b05 Call(Call { function: "lcd_init", parameters: [] })) Reg(U8) Some([200])
# Var tfff6 (tfff6 AddressOf(Ident("stdin"))) Reg(U32) Some([188, 189, 190, 191])
# t0 <- 0n987228/0x000f105cu32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))"] }
# 02b53 Instruction { source: "t0 <- 0n987228/0x000f105cu32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\", \"AddressOf(Ident(\\\"stdin\\\"))\", \"AddressOf(Ident(\\\"stdin\\\"))\"] }", opcode: LoadImm32, args: [Register(0xbc), Constant32(0x000f105c=987228)], resolved: None }
20 bc 5c 10 0f 00 
# tfff6 <- t0 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))"] }
# optimized away noop copy Instruction { source: "tfff6 <- t0 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\", \"AddressOf(Ident(\\\"stdin\\\"))\", \"AddressOf(Ident(\\\"stdin\\\"))\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# inline_stdio_init_queue_init_35_s <- tfff6 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })"] }
# optimized away noop copy Instruction { source: "inline_stdio_init_queue_init_35_s <- tfff6 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 02b59 Instruction { source: "inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xc4)], resolved: None }
21 bc c4 
# 02b5c Instruction { source: "inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0xc4), Constant32(0x00000100=256)], resolved: None }
32 c4 00 01 00 00 
# inline_stdio_init_queue_init_35_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 02b62 Instruction { source: "inline_stdio_init_queue_init_35_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xc0), Constant8(0x00=0)], resolved: None }
04 c0 00 
# mem[inline_stdio_init_queue_init_35_tb702] <- inline_stdio_init_queue_init_35_tb36e U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }"] }
# 02b65 Instruction { source: "mem[inline_stdio_init_queue_init_35_tb702] <- inline_stdio_init_queue_init_35_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0xc0), Register(0xc4)], resolved: None }
06 c0 c4 
# inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# inline_stdio_init_queue_init_35_tc1ff <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n260/0x00000104u32)
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 02b68 Instruction { source: "inline_stdio_init_queue_init_35_tc1ff <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n260/0x00000104u32)\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0xbc), Constant32(0x00000104=260)], resolved: None }
32 bc 04 01 00 00 
# inline_stdio_init_queue_init_35_tb36e <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 02b6e Instruction { source: "inline_stdio_init_queue_init_35_tb36e <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xc0), Constant8(0x00=0)], resolved: None }
04 c0 00 
# mem[inline_stdio_init_queue_init_35_tc1ff] <- inline_stdio_init_queue_init_35_tb36e U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }"] }
# 02b71 Instruction { source: "mem[inline_stdio_init_queue_init_35_tc1ff] <- inline_stdio_init_queue_init_35_tb36e U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0xc0), Register(0xbc)], resolved: None }
06 c0 bc 
# goto inline_stdio_init_queue_init_35_function_end_queue_init
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_stdio_init_queue_init_35_function_end_queue_init\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_stdio_init_queue_init_35_function_end_queue_init)], resolved: None }
# :inline_stdio_init_queue_init_35_function_end_queue_init
# 	SourceContext { contexts: [] }
# inline_stdio_init_queue_init_35_function_end_queue_init
# None <= call lcd_init()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_init\", parameters: [] }) }", "Call(Call { function: \"lcd_init\", parameters: [] })", "Call(Call { function: \"lcd_init\", parameters: [] })"] }
# Registers used by this function: {188, 189, 190, 191, 192, 196, 197, 198, 199, 200}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 32, 33, 34, 35, 164, 165, 166, 167, 168, 169, 170, 171, 230, 252}
# Registers to save: []
# 02b74 Instruction { source: "PseudoCall(Label24(:lcd_init))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02b7a Instruction { source: "PseudoCall(Label24(:lcd_init))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 84 2b 00 00 
# 02b80 Instruction { source: "PseudoCall(Label24(:lcd_init))", opcode: JmpImm, args: [Label24(:lcd_init)], resolved: None }
70 c0 1f 00 
# 02b84 Instruction { source: "PseudoCall(Label24(:lcd_init))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# None <= call KeyBoard_init()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"KeyBoard_init\", parameters: [] }) }", "Call(Call { function: \"KeyBoard_init\", parameters: [] })", "Call(Call { function: \"KeyBoard_init\", parameters: [] })"] }
# Registers used by this function: {188, 189, 190, 191, 192, 196, 197, 198, 199, 200}
# Registers used by callee tree: {16, 20, 21, 22, 23}
# Registers to save: []
# 02b8a Instruction { source: "PseudoCall(Label24(:KeyBoard_init))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02b90 Instruction { source: "PseudoCall(Label24(:KeyBoard_init))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 9a 2b 00 00 
# 02b96 Instruction { source: "PseudoCall(Label24(:KeyBoard_init))", opcode: JmpImm, args: [Label24(:KeyBoard_init)], resolved: None }
70 27 04 00 
# 02b9a Instruction { source: "PseudoCall(Label24(:KeyBoard_init))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 02ba0 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_stdio_init
# 	SourceContext { contexts: [] }
# function_end_stdio_init
# Unreachable
# 	SourceContext { contexts: [] }
# 02ba2 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
