v2.0 raw
# ImageBaseAddress=0x00000000
# entry
# 00000 Instruction { source: "Initialzing flags and internal regs.", opcode: Init, args: [], resolved: None }
00 
# 00001 Instruction { source: "Initialzing stack register to 0x000f0f00.", opcode: LoadImm32, args: [Register(0x0c), Constant32(0x000f0f00=986880)], resolved: None }
20 0c 00 0f 0f 00 
# 00007 Instruction { source: "PseudoCall(Label24(:main))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 0000d Instruction { source: "PseudoCall(Label24(:main))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 17 00 00 00 
# 00013 Instruction { source: "PseudoCall(Label24(:main))", opcode: JmpImm, args: [Label24(:main)], resolved: None }
70 22 00 00 
# 00017 Instruction { source: "PseudoCall(Label24(:main))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 0001d Instruction { source: "Halting after return from entry function.", opcode: Halt, args: [Constant32(0x00000000=0)], resolved: None }
7e 00 00 00 00 
# :main
# Ret Some(U8)
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var addr (Local addr Number(USIZE) Reg(U32)) Reg(U32) Some([20, 21, 22, 23])
# Var buf (Local buf Array(Number(U8), Some(20)) FrameOffset(0)) FrameOffset(0) None
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([24])
# Var i (Local i Number(USIZE) Reg(U32)) Reg(U32) Some([28, 29, 30, 31])
# Var inline_main_parseHex_5_c (Arg0 c Ptr(Number(U8))) Reg(U32) Some([28, 29, 30, 31])
# Var inline_main_parseHex_5_h (Local h Number(U8) Reg(U8)) Reg(U8) Some([32])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_ch (Arg0 ch Number(U8)) Reg(U8) Some([32])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t0 (t0 Ident("ch")) Reg(U8) Some([32])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t1 (t1 Number(U8, 97)) Reg(U8) Some([33])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t10 (t10 Ident("ch")) Reg(U8) Some([32])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t11 (t11 Number(U8, 48)) Reg(U8) Some([33])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t12 (t12 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) Reg(U8) Some([32])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t13 (t13 Arithmetic(Subtract, Ident("ch"), Number(U8, 65))) Reg(U8) Some([32])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t14 (t14 Ident("ch")) Reg(U8) Some([32])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t15 (t15 Number(U8, 65)) Reg(U8) Some([33])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t16 (t16 Number(U8, 10)) Reg(U8) Some([33])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t2 (t2 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) Reg(U8) Some([32])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t3 (t3 Arithmetic(Subtract, Ident("ch"), Number(U8, 97))) Reg(U8) Some([32])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t4 (t4 Ident("ch")) Reg(U8) Some([32])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t5 (t5 Number(U8, 97)) Reg(U8) Some([33])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t6 (t6 Number(U8, 10)) Reg(U8) Some([33])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t7 (t7 Ident("ch")) Reg(U8) Some([32])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t8 (t8 Number(U8, 57)) Reg(U8) Some([33])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t9 (t9 Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) Reg(U8) Some([32])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_ch (Arg0 ch Number(U8)) Reg(U8) Some([24])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t0 (t0 Ident("ch")) Reg(U8) Some([24])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t1 (t1 Number(U8, 97)) Reg(U8) Some([32])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t10 (t10 Ident("ch")) Reg(U8) Some([24])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t11 (t11 Number(U8, 48)) Reg(U8) Some([32])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t12 (t12 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) Reg(U8) Some([24])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t13 (t13 Arithmetic(Subtract, Ident("ch"), Number(U8, 65))) Reg(U8) Some([24])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t14 (t14 Ident("ch")) Reg(U8) Some([24])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t15 (t15 Number(U8, 65)) Reg(U8) Some([32])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t16 (t16 Number(U8, 10)) Reg(U8) Some([32])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t2 (t2 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) Reg(U8) Some([24])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t3 (t3 Arithmetic(Subtract, Ident("ch"), Number(U8, 97))) Reg(U8) Some([24])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t4 (t4 Ident("ch")) Reg(U8) Some([24])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t5 (t5 Number(U8, 97)) Reg(U8) Some([32])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t6 (t6 Number(U8, 10)) Reg(U8) Some([32])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t7 (t7 Ident("ch")) Reg(U8) Some([24])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t8 (t8 Number(U8, 57)) Reg(U8) Some([32])
# Var inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t9 (t9 Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) Reg(U8) Some([24])
# Var inline_main_parseHex_5_t0 (t0 Number(U8, 16)) Reg(U8) Some([34])
# Var inline_main_parseHex_5_t1 (t1 Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) Reg(U8) Some([32])
# Var inline_main_parseHex_5_t10 (t10 Ident("c")) Reg(U32) Some([28, 29, 30, 31])
# Var inline_main_parseHex_5_t11 (t11 Ident("h")) Reg(U8) Some([24])
# Var inline_main_parseHex_5_t2 (t2 Deref(Ident("c"))) Reg(U8) Some([32])
# Var inline_main_parseHex_5_t3 (t3 Ident("c")) Reg(U32) Some([28, 29, 30, 31])
# Var inline_main_parseHex_5_t4 (t4 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 1)) }) Reg(U32) Some([28, 29, 30, 31])
# Var inline_main_parseHex_5_t5 (t5 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([28, 29, 30, 31])
# Var inline_main_parseHex_5_t6 (t6 Number(USIZE, 1)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_main_parseHex_5_t7 (t7 Ident("h")) Reg(U8) Some([33])
# Var inline_main_parseHex_5_t8 (t8 Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) Reg(U8) Some([24])
# Var inline_main_parseHex_5_t9 (t9 Deref(Ident("c"))) Reg(U8) Some([24])
# Var inline_main_parseHex_6_c (Arg0 c Ptr(Number(U8))) Reg(U32) Some([40, 41, 42, 43])
# Var inline_main_parseHex_6_h (Local h Number(U8) Reg(U8)) Reg(U8) Some([33])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_ch (Arg0 ch Number(U8)) Reg(U8) Some([33])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t0 (t0 Ident("ch")) Reg(U8) Some([33])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t1 (t1 Number(U8, 97)) Reg(U8) Some([34])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t10 (t10 Ident("ch")) Reg(U8) Some([33])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t11 (t11 Number(U8, 48)) Reg(U8) Some([34])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t12 (t12 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) Reg(U8) Some([33])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t13 (t13 Arithmetic(Subtract, Ident("ch"), Number(U8, 65))) Reg(U8) Some([33])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t14 (t14 Ident("ch")) Reg(U8) Some([33])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t15 (t15 Number(U8, 65)) Reg(U8) Some([34])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t16 (t16 Number(U8, 10)) Reg(U8) Some([34])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t2 (t2 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) Reg(U8) Some([33])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t3 (t3 Arithmetic(Subtract, Ident("ch"), Number(U8, 97))) Reg(U8) Some([33])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t4 (t4 Ident("ch")) Reg(U8) Some([33])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t5 (t5 Number(U8, 97)) Reg(U8) Some([34])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t6 (t6 Number(U8, 10)) Reg(U8) Some([34])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t7 (t7 Ident("ch")) Reg(U8) Some([33])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t8 (t8 Number(U8, 57)) Reg(U8) Some([34])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t9 (t9 Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) Reg(U8) Some([33])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_ch (Arg0 ch Number(U8)) Reg(U8) Some([32])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t0 (t0 Ident("ch")) Reg(U8) Some([32])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t1 (t1 Number(U8, 97)) Reg(U8) Some([33])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t10 (t10 Ident("ch")) Reg(U8) Some([32])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t11 (t11 Number(U8, 48)) Reg(U8) Some([33])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t12 (t12 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) Reg(U8) Some([32])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t13 (t13 Arithmetic(Subtract, Ident("ch"), Number(U8, 65))) Reg(U8) Some([32])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t14 (t14 Ident("ch")) Reg(U8) Some([32])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t15 (t15 Number(U8, 65)) Reg(U8) Some([33])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t16 (t16 Number(U8, 10)) Reg(U8) Some([33])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t2 (t2 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) Reg(U8) Some([32])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t3 (t3 Arithmetic(Subtract, Ident("ch"), Number(U8, 97))) Reg(U8) Some([32])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t4 (t4 Ident("ch")) Reg(U8) Some([32])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t5 (t5 Number(U8, 97)) Reg(U8) Some([33])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t6 (t6 Number(U8, 10)) Reg(U8) Some([33])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t7 (t7 Ident("ch")) Reg(U8) Some([32])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t8 (t8 Number(U8, 57)) Reg(U8) Some([33])
# Var inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t9 (t9 Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) Reg(U8) Some([32])
# Var inline_main_parseHex_6_t0 (t0 Number(U8, 16)) Reg(U8) Some([44])
# Var inline_main_parseHex_6_t1 (t1 Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) Reg(U8) Some([33])
# Var inline_main_parseHex_6_t10 (t10 Ident("c")) Reg(U32) Some([40, 41, 42, 43])
# Var inline_main_parseHex_6_t11 (t11 Ident("h")) Reg(U8) Some([32])
# Var inline_main_parseHex_6_t2 (t2 Deref(Ident("c"))) Reg(U8) Some([33])
# Var inline_main_parseHex_6_t3 (t3 Ident("c")) Reg(U32) Some([40, 41, 42, 43])
# Var inline_main_parseHex_6_t4 (t4 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 1)) }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_main_parseHex_6_t5 (t5 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_main_parseHex_6_t6 (t6 Number(USIZE, 1)) Reg(U32) Some([48, 49, 50, 51])
# Var inline_main_parseHex_6_t7 (t7 Ident("h")) Reg(U8) Some([34])
# Var inline_main_parseHex_6_t8 (t8 Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) Reg(U8) Some([32])
# Var inline_main_parseHex_6_t9 (t9 Deref(Ident("c"))) Reg(U8) Some([32])
# Var inline_main_printHex_12_a (Arg0 a Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_12_b (Local b Number(U8) Reg(U8)) Reg(U8) Some([32])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_a (Arg0 a Number(U8)) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c (Arg0 c Number(U8)) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c (Arg0 c Number(U8)) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([34])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([34])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 (t2 Number(U8, 8)) Reg(U8) Some([44])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 (t3 Number(U8, 0)) Reg(U8) Some([44])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 (t11 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 (t12 Number(U8, 15)) Reg(U8) Some([34])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([34])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 (t3 Number(U8, 128)) Reg(U8) Some([34])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([44])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 (t5 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 (t6 Number(U8, 4)) Reg(U8) Some([44])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 (t9 Number(U8, 128)) Reg(U8) Some([44])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t1 (t1 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t3 (t3 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c (Arg0 c Number(U8)) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c (Arg0 c Number(U8)) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([34])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([34])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 (t2 Number(U8, 8)) Reg(U8) Some([44])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 (t3 Number(U8, 0)) Reg(U8) Some([44])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 (t11 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 (t12 Number(U8, 15)) Reg(U8) Some([34])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([34])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 (t3 Number(U8, 128)) Reg(U8) Some([34])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([44])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 (t5 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 (t6 Number(U8, 4)) Reg(U8) Some([44])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 (t9 Number(U8, 128)) Reg(U8) Some([44])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t1 (t1 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t3 (t3 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_t0 (t0 Ident("a")) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_t1 (t1 Number(U8, 10)) Reg(U8) Some([34])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_t10 (t10 Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_t11 (t11 Ident("a")) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_t2 (t2 Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_t3 (t3 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_t4 (t4 Ident("a")) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_t5 (t5 Number(U8, 48)) Reg(U8) Some([34])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_t6 (t6 Ident("a")) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_t7 (t7 Number(U8, 10)) Reg(U8) Some([34])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_t8 (t8 Ident("a")) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_10_t9 (t9 Number(U8, 65)) Reg(U8) Some([34])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_a (Arg0 a Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c (Arg0 c Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c (Arg0 c Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([32])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([32])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 (t2 Number(U8, 8)) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 (t3 Number(U8, 0)) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([24])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 (t11 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 (t12 Number(U8, 15)) Reg(U8) Some([32])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([32])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 (t3 Number(U8, 128)) Reg(U8) Some([32])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 (t5 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 (t6 Number(U8, 4)) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([24])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 (t9 Number(U8, 128)) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t1 (t1 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t3 (t3 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c (Arg0 c Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c (Arg0 c Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([32])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([32])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 (t2 Number(U8, 8)) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 (t3 Number(U8, 0)) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([24])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 (t11 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 (t12 Number(U8, 15)) Reg(U8) Some([32])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([32])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 (t3 Number(U8, 128)) Reg(U8) Some([32])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 (t5 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 (t6 Number(U8, 4)) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([24])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 (t9 Number(U8, 128)) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t1 (t1 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t3 (t3 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_t0 (t0 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_t1 (t1 Number(U8, 10)) Reg(U8) Some([32])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_t10 (t10 Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_t11 (t11 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_t2 (t2 Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_t3 (t3 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([24])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_t4 (t4 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_t5 (t5 Number(U8, 48)) Reg(U8) Some([32])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_t6 (t6 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_t7 (t7 Number(U8, 10)) Reg(U8) Some([32])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_t8 (t8 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_12_inline_printHex_printHexDigit_11_t9 (t9 Number(U8, 65)) Reg(U8) Some([32])
# Var inline_main_printHex_12_inline_printHex_putc_7_c (Arg0 c Number(U8)) Reg(U8) Some([32])
# Var inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c (Arg0 c Number(U8)) Reg(U8) Some([32])
# Var inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 (t2 Number(U8, 8)) Reg(U8) Some([34])
# Var inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 (t3 Number(U8, 0)) Reg(U8) Some([34])
# Var inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([32])
# Var inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t11 (t11 Ident("c")) Reg(U8) Some([32])
# Var inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t12 (t12 Number(U8, 15)) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t3 (t3 Number(U8, 128)) Reg(U8) Some([33])
# Var inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([34])
# Var inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t5 (t5 Ident("c")) Reg(U8) Some([32])
# Var inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t6 (t6 Number(U8, 4)) Reg(U8) Some([34])
# Var inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([32])
# Var inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t9 (t9 Number(U8, 128)) Reg(U8) Some([34])
# Var inline_main_printHex_12_inline_printHex_putc_7_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_putc_7_t1 (t1 Ident("c")) Reg(U8) Some([32])
# Var inline_main_printHex_12_inline_printHex_putc_7_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_inline_printHex_putc_7_t3 (t3 Ident("c")) Reg(U8) Some([32])
# Var inline_main_printHex_12_t0 (t0 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_12_t1 (t1 Number(U8, 15)) Reg(U8) Some([32])
# Var inline_main_printHex_12_t10 (t10 Call(Call { function: "putc", parameters: [Number(U8, 48)] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_t11 (t11 Number(U8, 48)) Reg(U8) Some([32])
# Var inline_main_printHex_12_t12 (t12 Call(Call { function: "printHexDigit", parameters: [Ident("a")] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_t13 (t13 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_12_t2 (t2 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_12_t3 (t3 Number(U8, 16)) Reg(U8) Some([32])
# Var inline_main_printHex_12_t4 (t4 Call(Call { function: "printHexDigit", parameters: [Ident("b")] })) Reg(U8) Some([52])
# Var inline_main_printHex_12_t5 (t5 Ident("b")) Reg(U8) Some([32])
# Var inline_main_printHex_12_t6 (t6 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_12_t7 (t7 Arithmetic(Multiply, Ident("b"), Number(U8, 16))) Reg(U8) Some([32])
# Var inline_main_printHex_12_t8 (t8 Ident("b")) Reg(U8) Some([32])
# Var inline_main_printHex_12_t9 (t9 Number(U8, 16)) Reg(U8) Some([33])
# Var inline_main_printHex_13_a (Arg0 a Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_13_b (Local b Number(U8) Reg(U8)) Reg(U8) Some([32])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_a (Arg0 a Number(U8)) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c (Arg0 c Number(U8)) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c (Arg0 c Number(U8)) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([34])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([34])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 (t2 Number(U8, 8)) Reg(U8) Some([44])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 (t3 Number(U8, 0)) Reg(U8) Some([44])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 (t11 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 (t12 Number(U8, 15)) Reg(U8) Some([34])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([34])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 (t3 Number(U8, 128)) Reg(U8) Some([34])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([44])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 (t5 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 (t6 Number(U8, 4)) Reg(U8) Some([44])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 (t9 Number(U8, 128)) Reg(U8) Some([44])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t1 (t1 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t3 (t3 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c (Arg0 c Number(U8)) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c (Arg0 c Number(U8)) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([34])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([34])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 (t2 Number(U8, 8)) Reg(U8) Some([44])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 (t3 Number(U8, 0)) Reg(U8) Some([44])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 (t11 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 (t12 Number(U8, 15)) Reg(U8) Some([34])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([34])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 (t3 Number(U8, 128)) Reg(U8) Some([34])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([44])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 (t5 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 (t6 Number(U8, 4)) Reg(U8) Some([44])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 (t9 Number(U8, 128)) Reg(U8) Some([44])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t1 (t1 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t3 (t3 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_t0 (t0 Ident("a")) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_t1 (t1 Number(U8, 10)) Reg(U8) Some([34])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_t10 (t10 Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_t11 (t11 Ident("a")) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_t2 (t2 Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_t3 (t3 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_t4 (t4 Ident("a")) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_t5 (t5 Number(U8, 48)) Reg(U8) Some([34])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_t6 (t6 Ident("a")) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_t7 (t7 Number(U8, 10)) Reg(U8) Some([34])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_t8 (t8 Ident("a")) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_10_t9 (t9 Number(U8, 65)) Reg(U8) Some([34])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_a (Arg0 a Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c (Arg0 c Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c (Arg0 c Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([32])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([32])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 (t2 Number(U8, 8)) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 (t3 Number(U8, 0)) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([24])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 (t11 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 (t12 Number(U8, 15)) Reg(U8) Some([32])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([32])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 (t3 Number(U8, 128)) Reg(U8) Some([32])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 (t5 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 (t6 Number(U8, 4)) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([24])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 (t9 Number(U8, 128)) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t1 (t1 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t3 (t3 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c (Arg0 c Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c (Arg0 c Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([32])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([32])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 (t2 Number(U8, 8)) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 (t3 Number(U8, 0)) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([24])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 (t11 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 (t12 Number(U8, 15)) Reg(U8) Some([32])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([32])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 (t3 Number(U8, 128)) Reg(U8) Some([32])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 (t5 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 (t6 Number(U8, 4)) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([24])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 (t9 Number(U8, 128)) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t1 (t1 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t3 (t3 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_t0 (t0 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_t1 (t1 Number(U8, 10)) Reg(U8) Some([32])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_t10 (t10 Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_t11 (t11 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_t2 (t2 Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_t3 (t3 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([24])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_t4 (t4 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_t5 (t5 Number(U8, 48)) Reg(U8) Some([32])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_t6 (t6 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_t7 (t7 Number(U8, 10)) Reg(U8) Some([32])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_t8 (t8 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_13_inline_printHex_printHexDigit_11_t9 (t9 Number(U8, 65)) Reg(U8) Some([32])
# Var inline_main_printHex_13_inline_printHex_putc_7_c (Arg0 c Number(U8)) Reg(U8) Some([32])
# Var inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c (Arg0 c Number(U8)) Reg(U8) Some([32])
# Var inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 (t2 Number(U8, 8)) Reg(U8) Some([34])
# Var inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 (t3 Number(U8, 0)) Reg(U8) Some([34])
# Var inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([32])
# Var inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t11 (t11 Ident("c")) Reg(U8) Some([32])
# Var inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t12 (t12 Number(U8, 15)) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t3 (t3 Number(U8, 128)) Reg(U8) Some([33])
# Var inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([34])
# Var inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t5 (t5 Ident("c")) Reg(U8) Some([32])
# Var inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t6 (t6 Number(U8, 4)) Reg(U8) Some([34])
# Var inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([32])
# Var inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t9 (t9 Number(U8, 128)) Reg(U8) Some([34])
# Var inline_main_printHex_13_inline_printHex_putc_7_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_putc_7_t1 (t1 Ident("c")) Reg(U8) Some([32])
# Var inline_main_printHex_13_inline_printHex_putc_7_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_inline_printHex_putc_7_t3 (t3 Ident("c")) Reg(U8) Some([32])
# Var inline_main_printHex_13_t0 (t0 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_13_t1 (t1 Number(U8, 15)) Reg(U8) Some([32])
# Var inline_main_printHex_13_t10 (t10 Call(Call { function: "putc", parameters: [Number(U8, 48)] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_t11 (t11 Number(U8, 48)) Reg(U8) Some([32])
# Var inline_main_printHex_13_t12 (t12 Call(Call { function: "printHexDigit", parameters: [Ident("a")] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_t13 (t13 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_13_t2 (t2 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_13_t3 (t3 Number(U8, 16)) Reg(U8) Some([32])
# Var inline_main_printHex_13_t4 (t4 Call(Call { function: "printHexDigit", parameters: [Ident("b")] })) Reg(U8) Some([52])
# Var inline_main_printHex_13_t5 (t5 Ident("b")) Reg(U8) Some([32])
# Var inline_main_printHex_13_t6 (t6 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_13_t7 (t7 Arithmetic(Multiply, Ident("b"), Number(U8, 16))) Reg(U8) Some([32])
# Var inline_main_printHex_13_t8 (t8 Ident("b")) Reg(U8) Some([32])
# Var inline_main_printHex_13_t9 (t9 Number(U8, 16)) Reg(U8) Some([33])
# Var inline_main_printHex_14_a (Arg0 a Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_14_b (Local b Number(U8) Reg(U8)) Reg(U8) Some([32])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_a (Arg0 a Number(U8)) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c (Arg0 c Number(U8)) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c (Arg0 c Number(U8)) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([34])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([34])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 (t2 Number(U8, 8)) Reg(U8) Some([44])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 (t3 Number(U8, 0)) Reg(U8) Some([44])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 (t11 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 (t12 Number(U8, 15)) Reg(U8) Some([34])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([34])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 (t3 Number(U8, 128)) Reg(U8) Some([34])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([44])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 (t5 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 (t6 Number(U8, 4)) Reg(U8) Some([44])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 (t9 Number(U8, 128)) Reg(U8) Some([44])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t1 (t1 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t3 (t3 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c (Arg0 c Number(U8)) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c (Arg0 c Number(U8)) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([34])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([34])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 (t2 Number(U8, 8)) Reg(U8) Some([44])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 (t3 Number(U8, 0)) Reg(U8) Some([44])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 (t11 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 (t12 Number(U8, 15)) Reg(U8) Some([34])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([34])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 (t3 Number(U8, 128)) Reg(U8) Some([34])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([44])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 (t5 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 (t6 Number(U8, 4)) Reg(U8) Some([44])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 (t9 Number(U8, 128)) Reg(U8) Some([44])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t1 (t1 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t3 (t3 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_t0 (t0 Ident("a")) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_t1 (t1 Number(U8, 10)) Reg(U8) Some([34])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_t10 (t10 Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_t11 (t11 Ident("a")) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_t2 (t2 Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_t3 (t3 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_t4 (t4 Ident("a")) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_t5 (t5 Number(U8, 48)) Reg(U8) Some([34])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_t6 (t6 Ident("a")) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_t7 (t7 Number(U8, 10)) Reg(U8) Some([34])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_t8 (t8 Ident("a")) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_10_t9 (t9 Number(U8, 65)) Reg(U8) Some([34])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_a (Arg0 a Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c (Arg0 c Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c (Arg0 c Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([32])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([32])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 (t2 Number(U8, 8)) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 (t3 Number(U8, 0)) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([24])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 (t11 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 (t12 Number(U8, 15)) Reg(U8) Some([32])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([32])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 (t3 Number(U8, 128)) Reg(U8) Some([32])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 (t5 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 (t6 Number(U8, 4)) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([24])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 (t9 Number(U8, 128)) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t1 (t1 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t3 (t3 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c (Arg0 c Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c (Arg0 c Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([32])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([32])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 (t2 Number(U8, 8)) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 (t3 Number(U8, 0)) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([24])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 (t11 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 (t12 Number(U8, 15)) Reg(U8) Some([32])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([32])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 (t3 Number(U8, 128)) Reg(U8) Some([32])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 (t5 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 (t6 Number(U8, 4)) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([24])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 (t9 Number(U8, 128)) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t1 (t1 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t3 (t3 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_t0 (t0 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_t1 (t1 Number(U8, 10)) Reg(U8) Some([32])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_t10 (t10 Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_t11 (t11 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_t2 (t2 Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_t3 (t3 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([24])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_t4 (t4 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_t5 (t5 Number(U8, 48)) Reg(U8) Some([32])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_t6 (t6 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_t7 (t7 Number(U8, 10)) Reg(U8) Some([32])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_t8 (t8 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_14_inline_printHex_printHexDigit_11_t9 (t9 Number(U8, 65)) Reg(U8) Some([32])
# Var inline_main_printHex_14_inline_printHex_putc_7_c (Arg0 c Number(U8)) Reg(U8) Some([32])
# Var inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c (Arg0 c Number(U8)) Reg(U8) Some([32])
# Var inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 (t2 Number(U8, 8)) Reg(U8) Some([34])
# Var inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 (t3 Number(U8, 0)) Reg(U8) Some([34])
# Var inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([32])
# Var inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t11 (t11 Ident("c")) Reg(U8) Some([32])
# Var inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t12 (t12 Number(U8, 15)) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t3 (t3 Number(U8, 128)) Reg(U8) Some([33])
# Var inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([34])
# Var inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t5 (t5 Ident("c")) Reg(U8) Some([32])
# Var inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t6 (t6 Number(U8, 4)) Reg(U8) Some([34])
# Var inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([32])
# Var inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t9 (t9 Number(U8, 128)) Reg(U8) Some([34])
# Var inline_main_printHex_14_inline_printHex_putc_7_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_putc_7_t1 (t1 Ident("c")) Reg(U8) Some([32])
# Var inline_main_printHex_14_inline_printHex_putc_7_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_inline_printHex_putc_7_t3 (t3 Ident("c")) Reg(U8) Some([32])
# Var inline_main_printHex_14_t0 (t0 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_14_t1 (t1 Number(U8, 15)) Reg(U8) Some([32])
# Var inline_main_printHex_14_t10 (t10 Call(Call { function: "putc", parameters: [Number(U8, 48)] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_t11 (t11 Number(U8, 48)) Reg(U8) Some([32])
# Var inline_main_printHex_14_t12 (t12 Call(Call { function: "printHexDigit", parameters: [Ident("a")] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_t13 (t13 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_14_t2 (t2 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_14_t3 (t3 Number(U8, 16)) Reg(U8) Some([32])
# Var inline_main_printHex_14_t4 (t4 Call(Call { function: "printHexDigit", parameters: [Ident("b")] })) Reg(U8) Some([52])
# Var inline_main_printHex_14_t5 (t5 Ident("b")) Reg(U8) Some([32])
# Var inline_main_printHex_14_t6 (t6 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_14_t7 (t7 Arithmetic(Multiply, Ident("b"), Number(U8, 16))) Reg(U8) Some([32])
# Var inline_main_printHex_14_t8 (t8 Ident("b")) Reg(U8) Some([32])
# Var inline_main_printHex_14_t9 (t9 Number(U8, 16)) Reg(U8) Some([33])
# Var inline_main_printHex_15_a (Arg0 a Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_15_b (Local b Number(U8) Reg(U8)) Reg(U8) Some([32])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_a (Arg0 a Number(U8)) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c (Arg0 c Number(U8)) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c (Arg0 c Number(U8)) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([34])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([34])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 (t2 Number(U8, 8)) Reg(U8) Some([44])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 (t3 Number(U8, 0)) Reg(U8) Some([44])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 (t11 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 (t12 Number(U8, 15)) Reg(U8) Some([34])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([34])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 (t3 Number(U8, 128)) Reg(U8) Some([34])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([44])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 (t5 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 (t6 Number(U8, 4)) Reg(U8) Some([44])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 (t9 Number(U8, 128)) Reg(U8) Some([44])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t1 (t1 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t3 (t3 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c (Arg0 c Number(U8)) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c (Arg0 c Number(U8)) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([34])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([34])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 (t2 Number(U8, 8)) Reg(U8) Some([44])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 (t3 Number(U8, 0)) Reg(U8) Some([44])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 (t11 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 (t12 Number(U8, 15)) Reg(U8) Some([34])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([34])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 (t3 Number(U8, 128)) Reg(U8) Some([34])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([44])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 (t5 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 (t6 Number(U8, 4)) Reg(U8) Some([44])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 (t9 Number(U8, 128)) Reg(U8) Some([44])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t1 (t1 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t3 (t3 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_t0 (t0 Ident("a")) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_t1 (t1 Number(U8, 10)) Reg(U8) Some([34])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_t10 (t10 Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_t11 (t11 Ident("a")) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_t2 (t2 Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_t3 (t3 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_t4 (t4 Ident("a")) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_t5 (t5 Number(U8, 48)) Reg(U8) Some([34])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_t6 (t6 Ident("a")) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_t7 (t7 Number(U8, 10)) Reg(U8) Some([34])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_t8 (t8 Ident("a")) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_10_t9 (t9 Number(U8, 65)) Reg(U8) Some([34])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_a (Arg0 a Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c (Arg0 c Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c (Arg0 c Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([32])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([32])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 (t2 Number(U8, 8)) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 (t3 Number(U8, 0)) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([24])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 (t11 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 (t12 Number(U8, 15)) Reg(U8) Some([32])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([32])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 (t3 Number(U8, 128)) Reg(U8) Some([32])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 (t5 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 (t6 Number(U8, 4)) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([24])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 (t9 Number(U8, 128)) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t1 (t1 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t3 (t3 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c (Arg0 c Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c (Arg0 c Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([32])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([32])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 (t2 Number(U8, 8)) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 (t3 Number(U8, 0)) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([24])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 (t11 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 (t12 Number(U8, 15)) Reg(U8) Some([32])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([32])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 (t3 Number(U8, 128)) Reg(U8) Some([32])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 (t5 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 (t6 Number(U8, 4)) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([24])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 (t9 Number(U8, 128)) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t1 (t1 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t3 (t3 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_t0 (t0 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_t1 (t1 Number(U8, 10)) Reg(U8) Some([32])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_t10 (t10 Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_t11 (t11 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_t2 (t2 Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_t3 (t3 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([24])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_t4 (t4 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_t5 (t5 Number(U8, 48)) Reg(U8) Some([32])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_t6 (t6 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_t7 (t7 Number(U8, 10)) Reg(U8) Some([32])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_t8 (t8 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_15_inline_printHex_printHexDigit_11_t9 (t9 Number(U8, 65)) Reg(U8) Some([32])
# Var inline_main_printHex_15_inline_printHex_putc_7_c (Arg0 c Number(U8)) Reg(U8) Some([32])
# Var inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c (Arg0 c Number(U8)) Reg(U8) Some([32])
# Var inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 (t2 Number(U8, 8)) Reg(U8) Some([34])
# Var inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 (t3 Number(U8, 0)) Reg(U8) Some([34])
# Var inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([32])
# Var inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t11 (t11 Ident("c")) Reg(U8) Some([32])
# Var inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t12 (t12 Number(U8, 15)) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t3 (t3 Number(U8, 128)) Reg(U8) Some([33])
# Var inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([34])
# Var inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t5 (t5 Ident("c")) Reg(U8) Some([32])
# Var inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t6 (t6 Number(U8, 4)) Reg(U8) Some([34])
# Var inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([32])
# Var inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t9 (t9 Number(U8, 128)) Reg(U8) Some([34])
# Var inline_main_printHex_15_inline_printHex_putc_7_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_putc_7_t1 (t1 Ident("c")) Reg(U8) Some([32])
# Var inline_main_printHex_15_inline_printHex_putc_7_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_inline_printHex_putc_7_t3 (t3 Ident("c")) Reg(U8) Some([32])
# Var inline_main_printHex_15_t0 (t0 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_15_t1 (t1 Number(U8, 15)) Reg(U8) Some([32])
# Var inline_main_printHex_15_t10 (t10 Call(Call { function: "putc", parameters: [Number(U8, 48)] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_t11 (t11 Number(U8, 48)) Reg(U8) Some([32])
# Var inline_main_printHex_15_t12 (t12 Call(Call { function: "printHexDigit", parameters: [Ident("a")] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_t13 (t13 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_15_t2 (t2 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_15_t3 (t3 Number(U8, 16)) Reg(U8) Some([32])
# Var inline_main_printHex_15_t4 (t4 Call(Call { function: "printHexDigit", parameters: [Ident("b")] })) Reg(U8) Some([52])
# Var inline_main_printHex_15_t5 (t5 Ident("b")) Reg(U8) Some([32])
# Var inline_main_printHex_15_t6 (t6 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_15_t7 (t7 Arithmetic(Multiply, Ident("b"), Number(U8, 16))) Reg(U8) Some([32])
# Var inline_main_printHex_15_t8 (t8 Ident("b")) Reg(U8) Some([32])
# Var inline_main_printHex_15_t9 (t9 Number(U8, 16)) Reg(U8) Some([33])
# Var inline_main_printHex_16_a (Arg0 a Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_16_b (Local b Number(U8) Reg(U8)) Reg(U8) Some([32])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_a (Arg0 a Number(U8)) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c (Arg0 c Number(U8)) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c (Arg0 c Number(U8)) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([34])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([34])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 (t2 Number(U8, 8)) Reg(U8) Some([44])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 (t3 Number(U8, 0)) Reg(U8) Some([44])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 (t11 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 (t12 Number(U8, 15)) Reg(U8) Some([34])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([34])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 (t3 Number(U8, 128)) Reg(U8) Some([34])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([44])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 (t5 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 (t6 Number(U8, 4)) Reg(U8) Some([44])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 (t9 Number(U8, 128)) Reg(U8) Some([44])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t1 (t1 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t3 (t3 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c (Arg0 c Number(U8)) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c (Arg0 c Number(U8)) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([34])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([34])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 (t2 Number(U8, 8)) Reg(U8) Some([44])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 (t3 Number(U8, 0)) Reg(U8) Some([44])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 (t11 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 (t12 Number(U8, 15)) Reg(U8) Some([34])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([34])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 (t3 Number(U8, 128)) Reg(U8) Some([34])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([44])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 (t5 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 (t6 Number(U8, 4)) Reg(U8) Some([44])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 (t9 Number(U8, 128)) Reg(U8) Some([44])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t1 (t1 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t3 (t3 Ident("c")) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_t0 (t0 Ident("a")) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_t1 (t1 Number(U8, 10)) Reg(U8) Some([34])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_t10 (t10 Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_t11 (t11 Ident("a")) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_t2 (t2 Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_t3 (t3 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_t4 (t4 Ident("a")) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_t5 (t5 Number(U8, 48)) Reg(U8) Some([34])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_t6 (t6 Ident("a")) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_t7 (t7 Number(U8, 10)) Reg(U8) Some([34])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_t8 (t8 Ident("a")) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_10_t9 (t9 Number(U8, 65)) Reg(U8) Some([34])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_a (Arg0 a Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c (Arg0 c Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c (Arg0 c Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([32])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([32])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 (t2 Number(U8, 8)) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 (t3 Number(U8, 0)) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([24])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 (t11 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 (t12 Number(U8, 15)) Reg(U8) Some([32])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([32])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 (t3 Number(U8, 128)) Reg(U8) Some([32])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 (t5 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 (t6 Number(U8, 4)) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([24])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 (t9 Number(U8, 128)) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t1 (t1 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t3 (t3 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c (Arg0 c Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c (Arg0 c Number(U8)) Reg(U8) Some([24])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([32])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([32])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 (t2 Number(U8, 8)) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 (t3 Number(U8, 0)) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([24])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 (t11 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 (t12 Number(U8, 15)) Reg(U8) Some([32])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([32])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 (t3 Number(U8, 128)) Reg(U8) Some([32])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 (t5 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 (t6 Number(U8, 4)) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([24])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 (t9 Number(U8, 128)) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t1 (t1 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t3 (t3 Ident("c")) Reg(U8) Some([24])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_t0 (t0 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_t1 (t1 Number(U8, 10)) Reg(U8) Some([32])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_t10 (t10 Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_t11 (t11 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_t2 (t2 Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_t3 (t3 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([24])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_t4 (t4 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_t5 (t5 Number(U8, 48)) Reg(U8) Some([32])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_t6 (t6 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_t7 (t7 Number(U8, 10)) Reg(U8) Some([32])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_t8 (t8 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_16_inline_printHex_printHexDigit_11_t9 (t9 Number(U8, 65)) Reg(U8) Some([32])
# Var inline_main_printHex_16_inline_printHex_putc_7_c (Arg0 c Number(U8)) Reg(U8) Some([32])
# Var inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c (Arg0 c Number(U8)) Reg(U8) Some([32])
# Var inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 (t0 Arithmetic(And, Call(Call { function: "io_read1", parameters: [] }), Number(U8, 8))) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 (t1 Call(Call { function: "io_read1", parameters: [] })) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 (t2 Number(U8, 8)) Reg(U8) Some([34])
# Var inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 (t3 Number(U8, 0)) Reg(U8) Some([34])
# Var inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t0 (t0 Call(Call { function: "lcd_flush", parameters: [] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t10 (t10 Arithmetic(And, Ident("c"), Number(U8, 15))) Reg(U8) Some([32])
# Var inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t11 (t11 Ident("c")) Reg(U8) Some([32])
# Var inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t12 (t12 Number(U8, 15)) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t2 (t2 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("c"), Number(U8, 4)))) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t3 (t3 Number(U8, 128)) Reg(U8) Some([33])
# Var inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t4 (t4 Arithmetic(ShiftRight, Ident("c"), Number(U8, 4))) Reg(U8) Some([34])
# Var inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t5 (t5 Ident("c")) Reg(U8) Some([32])
# Var inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t6 (t6 Number(U8, 4)) Reg(U8) Some([34])
# Var inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t8 (t8 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("c"), Number(U8, 15)))) Reg(U8) Some([32])
# Var inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t9 (t9 Number(U8, 128)) Reg(U8) Some([34])
# Var inline_main_printHex_16_inline_printHex_putc_7_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_putc_7_t1 (t1 Ident("c")) Reg(U8) Some([32])
# Var inline_main_printHex_16_inline_printHex_putc_7_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_inline_printHex_putc_7_t3 (t3 Ident("c")) Reg(U8) Some([32])
# Var inline_main_printHex_16_t0 (t0 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_16_t1 (t1 Number(U8, 15)) Reg(U8) Some([32])
# Var inline_main_printHex_16_t10 (t10 Call(Call { function: "putc", parameters: [Number(U8, 48)] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_t11 (t11 Number(U8, 48)) Reg(U8) Some([32])
# Var inline_main_printHex_16_t12 (t12 Call(Call { function: "printHexDigit", parameters: [Ident("a")] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_t13 (t13 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_16_t2 (t2 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_16_t3 (t3 Number(U8, 16)) Reg(U8) Some([32])
# Var inline_main_printHex_16_t4 (t4 Call(Call { function: "printHexDigit", parameters: [Ident("b")] })) Reg(U8) Some([52])
# Var inline_main_printHex_16_t5 (t5 Ident("b")) Reg(U8) Some([32])
# Var inline_main_printHex_16_t6 (t6 Ident("a")) Reg(U8) Some([24])
# Var inline_main_printHex_16_t7 (t7 Arithmetic(Multiply, Ident("b"), Number(U8, 16))) Reg(U8) Some([32])
# Var inline_main_printHex_16_t8 (t8 Ident("b")) Reg(U8) Some([32])
# Var inline_main_printHex_16_t9 (t9 Number(U8, 16)) Reg(U8) Some([33])
# Var inline_main_readline_21_buf (Arg0 buf Ptr(Number(U8))) Reg(U32) Some([28, 29, 30, 31])
# Var inline_main_readline_21_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([32])
# Var inline_main_readline_21_inline_readline_getchar_0_t0 (t0 Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))) Reg(U8) Some([32])
# Var inline_main_readline_21_inline_readline_getchar_0_t1 (t1 Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([32])
# Var inline_main_readline_21_inline_readline_getchar_0_t2 (t2 Number(U8, 1)) Reg(U8) Some([33])
# Var inline_main_readline_21_inline_readline_getchar_0_t3 (t3 Number(U8, 0)) Reg(U8) Some([33])
# Var inline_main_readline_21_inline_readline_getchar_0_t4 (t4 TtyIn) Reg(U8) Some([32])
# Var inline_main_readline_21_t0 (t0 Number(U8, 0)) Reg(U8) Some([32])
# Var inline_main_readline_21_t1 (t1 Number(U8, 0)) Reg(U8) Some([33])
# Var inline_main_readline_21_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("buf") }, Number(USIZE, 1)) }) Reg(U32) Some([28, 29, 30, 31])
# Var inline_main_readline_21_t11 (t11 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("buf") }) Reg(U32) Some([28, 29, 30, 31])
# Var inline_main_readline_21_t12 (t12 Number(USIZE, 1)) Reg(U32) Some([40, 41, 42, 43])
# Var inline_main_readline_21_t2 (t2 Ident("ch")) Reg(U8) Some([32])
# Var inline_main_readline_21_t3 (t3 Number(U8, 13)) Reg(U8) Some([33])
# Var inline_main_readline_21_t4 (t4 Ident("ch")) Reg(U8) Some([32])
# Var inline_main_readline_21_t5 (t5 Number(U8, 10)) Reg(U8) Some([33])
# Var inline_main_readline_21_t6 (t6 Ident("buf")) Reg(U32) Some([28, 29, 30, 31])
# Var inline_main_readline_21_t7 (t7 Number(U8, 0)) Reg(U8) Some([32])
# Var inline_main_readline_21_t8 (t8 Ident("buf")) Reg(U32) Some([28, 29, 30, 31])
# Var inline_main_readline_21_t9 (t9 Ident("ch")) Reg(U8) Some([32])
# Var p_byte (Local p_byte Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([28, 29, 30, 31])
# Var t0 (Stack size negated) Reg(U32) Some([20, 21, 22, 23])
# Var t1 (t1 Number(U8, 82)) Reg(U8) Some([24])
# Var t10 (t10 AddressOf(Index("buf", Number(U8, 0)))) Reg(U32) Some([28, 29, 30, 31])
# Var t11 (t11 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }) Reg(U32) Some([28, 29, 30, 31])
# Var t12 (t12 Ident("__frame_pointer")) Reg(U32) Some([56, 57, 58, 59])
# Var t13 (t13 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) Reg(U32) Some([28, 29, 30, 31])
# Var t14 (t14 Number(U8, 0)) Reg(U8) Some([24])
# Var t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0)) }) Reg(U32) Some([28, 29, 30, 31])
# Var t16 (t16 Ident("__frame_pointer")) Reg(U32) Some([56, 57, 58, 59])
# Var t17 (t17 Number(USIZE, 0)) Reg(U32) Some([28, 29, 30, 31])
# Var t18 (t18 Ident("ch")) Reg(U8) Some([24])
# Var t19 (t19 Number(U8, 114)) Reg(U8) Some([32])
# Var t2 (t2 Number(U8, 69)) Reg(U8) Some([24])
# Var t20 (t20 Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] })) Reg(U8) Some([52])
# Var t21 (t21 Deref(Ident("p_byte"))) Reg(U8) Some([24])
# Var t22 (t22 Ident("p_byte")) Reg(U32) Some([28, 29, 30, 31])
# Var t23 (t23 Number(U8, 10)) Reg(U8) Some([24])
# Var t24 (t24 Ident("ch")) Reg(U8) Some([24])
# Var t25 (t25 Number(U8, 119)) Reg(U8) Some([32])
# Var t26 (t26 Ident("p_byte")) Reg(U32) Some([60, 61, 62, 63])
# Var t27 (t27 Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] })) Reg(U8) Some([24])
# Var t28 (t28 AddressOf(Index("buf", Number(USIZE, 1)))) Reg(U32) Some([28, 29, 30, 31])
# Var t29 (t29 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 1)) }) Reg(U32) Some([28, 29, 30, 31])
# Var t3 (t3 Number(U8, 65)) Reg(U8) Some([24])
# Var t30 (t30 Ident("__frame_pointer")) Reg(U32) Some([56, 57, 58, 59])
# Var t31 (t31 Number(USIZE, 1)) Reg(U32) Some([28, 29, 30, 31])
# Var t32 (t32 Ident("ch")) Reg(U8) Some([24])
# Var t33 (t33 Number(U8, 110)) Reg(U8) Some([32])
# Var t34 (t34 Ident("addr")) Reg(U32) Some([20, 21, 22, 23])
# Var t35 (t35 Number(USIZE, 1)) Reg(U32) Some([28, 29, 30, 31])
# Var t36 (t36 Ident("ch")) Reg(U8) Some([24])
# Var t37 (t37 Number(U8, 97)) Reg(U8) Some([32])
# Var t38 (t38 Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] })) Reg(U8) Some([52])
# Var t39 (t39 Index("addr", Number(USIZE, 3))) Reg(U8) Some([64])
# Var t4 (t4 Number(U8, 68)) Reg(U8) Some([24])
# Var t40 (t40 Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] })) Reg(U8) Some([52])
# Var t41 (t41 Index("addr", Number(USIZE, 2))) Reg(U8) Some([64])
# Var t42 (t42 Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] })) Reg(U8) Some([52])
# Var t43 (t43 Index("addr", Number(USIZE, 1))) Reg(U8) Some([64])
# Var t44 (t44 Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] })) Reg(U8) Some([52])
# Var t45 (t45 Index("addr", Number(USIZE, 0))) Reg(U8) Some([64])
# Var t46 (t46 Number(U8, 10)) Reg(U8) Some([24])
# Var t47 (t47 Ident("ch")) Reg(U8) Some([24])
# Var t48 (t48 Number(U8, 115)) Reg(U8) Some([32])
# Var t49 (t49 Index("buf", Ident("i"))) Reg(U8) Some([32])
# Var t5 (t5 Number(U8, 89)) Reg(U8) Some([24])
# Var t50 (t50 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Ident("i")) }) Reg(U32) Some([40, 41, 42, 43])
# Var t51 (t51 Ident("__frame_pointer")) Reg(U32) Some([56, 57, 58, 59])
# Var t52 (t52 Ident("i")) Reg(U32) Some([28, 29, 30, 31])
# Var t53 (t53 Number(U8, 0)) Reg(U8) Some([33])
# Var t54 (t54 Index("addr", Number(USIZE, 2))) Reg(U8) Some([64])
# Var t55 (t55 Index("addr", Number(USIZE, 1))) Reg(U8) Some([64])
# Var t56 (t56 Index("addr", Number(USIZE, 0))) Reg(U8) Some([64])
# Var t57 (t57 Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] })) Reg(U8) Some([32])
# Var t58 (t58 AddressOf(Index("buf", Ident("i")))) Reg(U32) Some([40, 41, 42, 43])
# Var t59 (t59 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Ident("i")) }) Reg(U32) Some([40, 41, 42, 43])
# Var t6 (t6 Number(U8, 10)) Reg(U8) Some([24])
# Var t60 (t60 Ident("__frame_pointer")) Reg(U32) Some([56, 57, 58, 59])
# Var t61 (t61 Ident("i")) Reg(U32) Some([28, 29, 30, 31])
# Var t62 (t62 Ident("i")) Reg(U32) Some([28, 29, 30, 31])
# Var t63 (t63 Number(USIZE, 2)) Reg(U32) Some([40, 41, 42, 43])
# Var t64 (t64 Ident("ch")) Reg(U8) Some([24])
# Var t65 (t65 Number(U8, 113)) Reg(U8) Some([32])
# Var t66 (t66 Number(U8, 0)) Reg(U8) Some([64])
# Var t67 (Stack size) Reg(U32) Some([28, 29, 30, 31])
# Var t68 (t68 Ident("ch")) Reg(U8) Some([24])
# Var t69 (t69 Number(U8, 105)) Reg(U8) Some([32])
# Var t7 (t7 Number(U8, 0)) Reg(U8) Some([24])
# Var t70 (t70 Number(U8, 66)) Reg(U8) Some([24])
# Var t71 (t71 Number(U8, 111)) Reg(U8) Some([24])
# Var t72 (t72 Number(U8, 111)) Reg(U8) Some([24])
# Var t73 (t73 Number(U8, 116)) Reg(U8) Some([24])
# Var t74 (t74 Number(U8, 114)) Reg(U8) Some([24])
# Var t75 (t75 Number(U8, 97)) Reg(U8) Some([24])
# Var t76 (t76 Number(U8, 109)) Reg(U8) Some([24])
# Var t77 (t77 Number(U8, 10)) Reg(U8) Some([24])
# Var t78 (t78 Number(U8, 72)) Reg(U8) Some([32])
# Var t79 (t79 Number(U8, 117)) Reg(U8) Some([32])
# Var t8 (t8 Number(U8, 0)) Reg(U8) Some([32])
# Var t80 (t80 Number(U8, 104)) Reg(U8) Some([32])
# Var t81 (t81 Number(U8, 63)) Reg(U8) Some([32])
# Var t82 (t82 Ident("ch")) Reg(U8) Some([24])
# Var t83 (t83 Number(U8, 10)) Reg(U8) Some([24])
# Var t84 (t84 Number(U8, 0)) Reg(U8) Some([64])
# Var t85 (Stack size) Reg(U32) Some([28, 29, 30, 31])
# Var t9 (t9 Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] })) Reg(U8) Some([52])
# 00022 Instruction { source: "reserve 20 bytes of stack space for locals", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xffffffec=4294967276)], resolved: None }
32 0c ec ff ff ff 
# t0 <- 0xffffffecu32 
# 	SourceContext { contexts: [] }
# 00028 Instruction { source: "t0 <- 0xffffffecu32 \n\tSourceContext { contexts: [] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0xffffffec=4294967276)], resolved: None }
20 14 ec ff ff ff 
# __frame_pointer <- __frame_pointer Add t0
# 	SourceContext { contexts: [] }
# 0002e Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0002f Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x14), Register(0x0c)], resolved: None }
30 0c 14 0c 
# 00033 Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# addr <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"addr\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 00034 Instruction { source: "addr <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000000=0)], resolved: None }
20 14 00 00 00 00 
# i <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 0003a Instruction { source: "i <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x1c), Constant32(0x00000000=0)], resolved: None }
20 1c 00 00 00 00 
# ch <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 00040 Instruction { source: "ch <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x18), Constant8(0x00=0)], resolved: None }
04 18 00 
# t1 <- 0n82/0x52u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 82) }", "Number(U8, 82)", "Number(U8, 82)"] }
# 00043 Instruction { source: "t1 <- 0n82/0x52u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 82) }\", \"Number(U8, 82)\", \"Number(U8, 82)\"] }", opcode: LoadImm8, args: [Register(0x18), Constant8(0x52=82)], resolved: None }
04 18 52 
# ttyout <- t1
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 82) }"] }
# 00046 Instruction { source: "ttyout <- t1\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 82) }\"] }", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# t2 <- 0n69/0x45u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 69) }", "Number(U8, 69)", "Number(U8, 69)"] }
# 00048 Instruction { source: "t2 <- 0n69/0x45u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 69) }\", \"Number(U8, 69)\", \"Number(U8, 69)\"] }", opcode: LoadImm8, args: [Register(0x18), Constant8(0x45=69)], resolved: None }
04 18 45 
# ttyout <- t2
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 69) }"] }
# 0004b Instruction { source: "ttyout <- t2\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 69) }\"] }", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# t3 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 65) }", "Number(U8, 65)", "Number(U8, 65)"] }
# 0004d Instruction { source: "t3 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 65) }\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x18), Constant8(0x41=65)], resolved: None }
04 18 41 
# ttyout <- t3
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 65) }"] }
# 00050 Instruction { source: "ttyout <- t3\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 65) }\"] }", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# t4 <- 0n68/0x44u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 68) }", "Number(U8, 68)", "Number(U8, 68)"] }
# 00052 Instruction { source: "t4 <- 0n68/0x44u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 68) }\", \"Number(U8, 68)\", \"Number(U8, 68)\"] }", opcode: LoadImm8, args: [Register(0x18), Constant8(0x44=68)], resolved: None }
04 18 44 
# ttyout <- t4
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 68) }"] }
# 00055 Instruction { source: "ttyout <- t4\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 68) }\"] }", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# t5 <- 0n89/0x59u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 89) }", "Number(U8, 89)", "Number(U8, 89)"] }
# 00057 Instruction { source: "t5 <- 0n89/0x59u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 89) }\", \"Number(U8, 89)\", \"Number(U8, 89)\"] }", opcode: LoadImm8, args: [Register(0x18), Constant8(0x59=89)], resolved: None }
04 18 59 
# ttyout <- t5
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 89) }"] }
# 0005a Instruction { source: "ttyout <- t5\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 89) }\"] }", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 0005c Instruction { source: "t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x18), Constant8(0x0a=10)], resolved: None }
04 18 0a 
# ttyout <- t6
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }"] }
# 0005f Instruction { source: "ttyout <- t6\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\"] }", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# p_byte <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"p_byte\"), var_type: Some(Ptr(Number(U8))), value: Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 0) } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 00061 Instruction { source: "p_byte <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"p_byte\\\"), var_type: Some(Ptr(Number(U8))), value: Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 0) } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x1c), Constant32(0x00000000=0)], resolved: None }
20 1c 00 00 00 00 
# :main_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }] }"] }
# main_while_predicate_0
# t7 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00067 Instruction { source: "t7 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x18), Constant8(0x00=0)], resolved: None }
04 18 00 
# t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0006a Instruction { source: "t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x00=0)], resolved: None }
04 20 00 
# if t7 == t8 then 'main_while_body_1' else 'main_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }"] }
# 0006d Instruction { source: "if t7 == t8 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x18), Register(0x20)], resolved: None }
15 18 20 
# 00070 Instruction { source: "if t7 == t8 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(main_while_body_1)], resolved: None }
72 78 00 00 
# 00074 Instruction { source: "if t7 == t8 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(main_while_end_2)], resolved: None }
70 6c 0c 00 
# :main_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }] }"] }
# main_while_body_1
# t12 <- __frame_pointer U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 00078 Instruction { source: "t12 <- __frame_pointer U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x38)], resolved: None }
21 0c 38 
# t14 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0007b Instruction { source: "t14 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x18), Constant8(0x00=0)], resolved: None }
04 18 00 
# t13 U32 <- t14 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }"] }
# 0007e Instruction { source: "Zero-pad for t13 U32 <- t14 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\"] }", opcode: LoadImm32, args: [Register(0x1c), Constant32(0x00000000=0)], resolved: None }
20 1c 00 00 00 00 
# 00084 Instruction { source: "t13 U32 <- t14 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x18), Register(0x1c)], resolved: None }
0b 18 1c 
# t11 <- t12 Add t13
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })"] }
# 00087 Instruction { source: "t11 <- t12 Add t13\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00088 Instruction { source: "t11 <- t12 Add t13\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x1c), Register(0x1c)], resolved: None }
30 38 1c 1c 
# 0008c Instruction { source: "t11 <- t12 Add t13\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t10 <- t11 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))"] }
# optimized away noop copy Instruction { source: "t10 <- t11 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_readline_21_buf <- t10 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })"] }
# optimized away noop copy Instruction { source: "inline_main_readline_21_buf <- t10 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# :inline_main_readline_21_readline_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }"] }
# inline_main_readline_21_readline_while_predicate_0
# inline_main_readline_21_t0 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0008d Instruction { source: "inline_main_readline_21_t0 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x00=0)], resolved: None }
04 20 00 
# inline_main_readline_21_t1 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00090 Instruction { source: "inline_main_readline_21_t1 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x00=0)], resolved: None }
04 21 00 
# if inline_main_readline_21_t0 == inline_main_readline_21_t1 then 'inline_main_readline_21_readline_while_body_1' else 'inline_main_readline_21_readline_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }"] }
# 00093 Instruction { source: "if inline_main_readline_21_t0 == inline_main_readline_21_t1 then 'inline_main_readline_21_readline_while_body_1' else 'inline_main_readline_21_readline_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x20), Register(0x21)], resolved: None }
15 20 21 
# 00096 Instruction { source: "if inline_main_readline_21_t0 == inline_main_readline_21_t1 then 'inline_main_readline_21_readline_while_body_1' else 'inline_main_readline_21_readline_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_readline_21_readline_while_body_1)], resolved: None }
72 9e 00 00 
# 0009a Instruction { source: "if inline_main_readline_21_t0 == inline_main_readline_21_t1 then 'inline_main_readline_21_readline_while_body_1' else 'inline_main_readline_21_readline_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_21_readline_while_end_2)], resolved: None }
70 fc 00 00 
# :inline_main_readline_21_readline_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }"] }
# inline_main_readline_21_readline_while_body_1
# :inline_main_readline_21_inline_readline_getchar_0_getchar_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_readline_21_inline_readline_getchar_0_getchar_while_predicate_0
# Some(inline_main_readline_21_inline_readline_getchar_0_t1) <= call io_ready_to_read()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Call(Call { function: \"io_ready_to_read\", parameters: [] })", "Call(Call { function: \"io_ready_to_read\", parameters: [] })"] }
# 0009e Instruction { source: "ReadyToRead", opcode: IoReadyToRead, args: [Register(0x20)], resolved: None }
79 20 
# inline_main_readline_21_inline_readline_getchar_0_t2 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 000a0 Instruction { source: "inline_main_readline_21_inline_readline_getchar_0_t2 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x01=1)], resolved: None }
04 21 01 
# inline_main_readline_21_inline_readline_getchar_0_t0 <- inline_main_readline_21_inline_readline_getchar_0_t1 BitwiseAnd inline_main_readline_21_inline_readline_getchar_0_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))"] }
# 000a3 Instruction { source: "inline_main_readline_21_inline_readline_getchar_0_t0 <- inline_main_readline_21_inline_readline_getchar_0_t1 BitwiseAnd inline_main_readline_21_inline_readline_getchar_0_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\"] }", opcode: And8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
1b 20 21 20 
# inline_main_readline_21_inline_readline_getchar_0_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 000a7 Instruction { source: "inline_main_readline_21_inline_readline_getchar_0_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x00=0)], resolved: None }
04 21 00 
# if inline_main_readline_21_inline_readline_getchar_0_t0 == inline_main_readline_21_inline_readline_getchar_0_t3 then 'inline_main_readline_21_inline_readline_getchar_0_getchar_while_body_1' else 'inline_main_readline_21_inline_readline_getchar_0_getchar_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }"] }
# 000aa Instruction { source: "if inline_main_readline_21_inline_readline_getchar_0_t0 == inline_main_readline_21_inline_readline_getchar_0_t3 then 'inline_main_readline_21_inline_readline_getchar_0_getchar_while_body_1' else 'inline_main_readline_21_inline_readline_getchar_0_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x20), Register(0x21)], resolved: None }
15 20 21 
# 000ad Instruction { source: "if inline_main_readline_21_inline_readline_getchar_0_t0 == inline_main_readline_21_inline_readline_getchar_0_t3 then 'inline_main_readline_21_inline_readline_getchar_0_getchar_while_body_1' else 'inline_main_readline_21_inline_readline_getchar_0_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_readline_21_inline_readline_getchar_0_getchar_while_body_1)], resolved: None }
72 b5 00 00 
# 000b1 Instruction { source: "if inline_main_readline_21_inline_readline_getchar_0_t0 == inline_main_readline_21_inline_readline_getchar_0_t3 then 'inline_main_readline_21_inline_readline_getchar_0_getchar_while_body_1' else 'inline_main_readline_21_inline_readline_getchar_0_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_21_inline_readline_getchar_0_getchar_while_end_2)], resolved: None }
70 b9 00 00 
# :inline_main_readline_21_inline_readline_getchar_0_getchar_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_readline_21_inline_readline_getchar_0_getchar_while_body_1
# goto inline_main_readline_21_inline_readline_getchar_0_getchar_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }"] }
# 000b5 Instruction { source: "goto inline_main_readline_21_inline_readline_getchar_0_getchar_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_21_inline_readline_getchar_0_getchar_while_predicate_0)], resolved: None }
70 9e 00 00 
# :inline_main_readline_21_inline_readline_getchar_0_getchar_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_readline_21_inline_readline_getchar_0_getchar_while_end_2
# inline_main_readline_21_inline_readline_getchar_0_t4 <- ttyin
# 	SourceContext { contexts: ["Return { value: Some(TtyIn) }", "TtyIn", "TtyIn"] }
# 000b9 Instruction { source: "inline_main_readline_21_inline_readline_getchar_0_t4 <- ttyin\n\tSourceContext { contexts: [\"Return { value: Some(TtyIn) }\", \"TtyIn\", \"TtyIn\"] }", opcode: In0, args: [Register(0x20)], resolved: None }
60 20 
# inline_main_readline_21_ch <- inline_main_readline_21_inline_readline_getchar_0_t4 U8
# 	SourceContext { contexts: ["Return { value: Some(TtyIn) }"] }
# optimized away noop copy Instruction { source: "inline_main_readline_21_ch <- inline_main_readline_21_inline_readline_getchar_0_t4 U8\n\tSourceContext { contexts: [\"Return { value: Some(TtyIn) }\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# goto inline_main_readline_21_inline_readline_getchar_0_function_end_getchar
# 	SourceContext { contexts: ["Return { value: Some(TtyIn) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_readline_21_inline_readline_getchar_0_function_end_getchar\n\tSourceContext { contexts: [\"Return { value: Some(TtyIn) }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_21_inline_readline_getchar_0_function_end_getchar)], resolved: None }
# :inline_main_readline_21_inline_readline_getchar_0_function_end_getchar
# 	SourceContext { contexts: [] }
# inline_main_readline_21_inline_readline_getchar_0_function_end_getchar
# inline_main_readline_21_t2 <- inline_main_readline_21_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_readline_21_t2 <- inline_main_readline_21_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_readline_21_t3 <- 0n13/0x0du8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }", "Number(U8, 13)", "Number(U8, 13)"] }
# 000bb Instruction { source: "inline_main_readline_21_t3 <- 0n13/0x0du8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\", \"Number(U8, 13)\", \"Number(U8, 13)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x0d=13)], resolved: None }
04 21 0d 
# if inline_main_readline_21_t2 == inline_main_readline_21_t3 then 'inline_main_readline_21_readline_if_true_0_4' else 'inline_main_readline_21_readline_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }"] }
# 000be Instruction { source: "if inline_main_readline_21_t2 == inline_main_readline_21_t3 then 'inline_main_readline_21_readline_if_true_0_4' else 'inline_main_readline_21_readline_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\"] }", opcode: Cmp8, args: [Register(0x20), Register(0x21)], resolved: None }
15 20 21 
# 000c1 Instruction { source: "if inline_main_readline_21_t2 == inline_main_readline_21_t3 then 'inline_main_readline_21_readline_if_true_0_4' else 'inline_main_readline_21_readline_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\"] }", opcode: JzImm, args: [Label24(inline_main_readline_21_readline_if_true_0_4)], resolved: None }
72 c9 00 00 
# 000c5 Instruction { source: "if inline_main_readline_21_t2 == inline_main_readline_21_t3 then 'inline_main_readline_21_readline_if_true_0_4' else 'inline_main_readline_21_readline_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_21_readline_if_else_0_5)], resolved: None }
70 cd 00 00 
# :inline_main_readline_21_readline_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }"] }
# inline_main_readline_21_readline_if_true_0_4
# goto inline_main_readline_21_readline_if_end_3
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }"] }
# 000c9 Instruction { source: "goto inline_main_readline_21_readline_if_end_3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_21_readline_if_end_3)], resolved: None }
70 f8 00 00 
# :inline_main_readline_21_readline_if_else_0_5
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }"] }
# inline_main_readline_21_readline_if_else_0_5
# inline_main_readline_21_t4 <- inline_main_readline_21_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_readline_21_t4 <- inline_main_readline_21_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_readline_21_t5 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 000cd Instruction { source: "inline_main_readline_21_t5 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x0a=10)], resolved: None }
04 21 0a 
# if inline_main_readline_21_t4 == inline_main_readline_21_t5 then 'inline_main_readline_21_readline_if_true_1_6' else 'inline_main_readline_21_readline_if_else_1_7'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }"] }
# 000d0 Instruction { source: "if inline_main_readline_21_t4 == inline_main_readline_21_t5 then 'inline_main_readline_21_readline_if_true_1_6' else 'inline_main_readline_21_readline_if_else_1_7'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x20), Register(0x21)], resolved: None }
15 20 21 
# 000d3 Instruction { source: "if inline_main_readline_21_t4 == inline_main_readline_21_t5 then 'inline_main_readline_21_readline_if_true_1_6' else 'inline_main_readline_21_readline_if_else_1_7'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: JzImm, args: [Label24(inline_main_readline_21_readline_if_true_1_6)], resolved: None }
72 db 00 00 
# 000d7 Instruction { source: "if inline_main_readline_21_t4 == inline_main_readline_21_t5 then 'inline_main_readline_21_readline_if_true_1_6' else 'inline_main_readline_21_readline_if_else_1_7'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_21_readline_if_else_1_7)], resolved: None }
70 e9 00 00 
# :inline_main_readline_21_readline_if_true_1_6
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }"] }
# inline_main_readline_21_readline_if_true_1_6
# inline_main_readline_21_t6 <- inline_main_readline_21_buf U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }", "Ident(\"buf\")", "Ident(\"buf\")"] }
# optimized away noop copy Instruction { source: "inline_main_readline_21_t6 <- inline_main_readline_21_buf U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }\", \"Ident(\\\"buf\\\")\", \"Ident(\\\"buf\\\")\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_readline_21_t7 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 000db Instruction { source: "inline_main_readline_21_t7 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x00=0)], resolved: None }
04 20 00 
# mem[inline_main_readline_21_t6] <- inline_main_readline_21_t7 U8
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }"] }
# 000de Instruction { source: "mem[inline_main_readline_21_t6] <- inline_main_readline_21_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x20), Register(0x1c)], resolved: None }
06 20 1c 
# goto inline_main_readline_21_function_end_readline
# 	SourceContext { contexts: ["Return { value: None }"] }
# 000e1 Instruction { source: "goto inline_main_readline_21_function_end_readline\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_21_function_end_readline)], resolved: None }
70 00 01 00 
# goto inline_main_readline_21_readline_if_end_3
# 	SourceContext { contexts: [] }
# 000e5 Instruction { source: "goto inline_main_readline_21_readline_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_readline_21_readline_if_end_3)], resolved: None }
70 f8 00 00 
# :inline_main_readline_21_readline_if_else_1_7
# 	SourceContext { contexts: [] }
# inline_main_readline_21_readline_if_else_1_7
# inline_main_readline_21_t8 <- inline_main_readline_21_buf U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }", "Ident(\"buf\")", "Ident(\"buf\")"] }
# optimized away noop copy Instruction { source: "inline_main_readline_21_t8 <- inline_main_readline_21_buf U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Ident(\\\"buf\\\")\", \"Ident(\\\"buf\\\")\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_readline_21_t9 <- inline_main_readline_21_ch U8
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_readline_21_t9 <- inline_main_readline_21_ch U8\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# mem[inline_main_readline_21_t8] <- inline_main_readline_21_t9 U8
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }"] }
# 000e9 Instruction { source: "mem[inline_main_readline_21_t8] <- inline_main_readline_21_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }\"] }", opcode: Store8, args: [Register(0x20), Register(0x1c)], resolved: None }
06 20 1c 
# inline_main_readline_21_t11 <- inline_main_readline_21_buf U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1))", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }", "Ident(\"buf\")"] }
# optimized away noop copy Instruction { source: "inline_main_readline_21_t11 <- inline_main_readline_21_buf U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }\", \"Ident(\\\"buf\\\")\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_readline_21_t12 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 000ec Instruction { source: "inline_main_readline_21_t12 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x00000001=1)], resolved: None }
20 28 01 00 00 00 
# inline_main_readline_21_t10 <- inline_main_readline_21_t11 Add inline_main_readline_21_t12
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1))"] }
# 000f2 Instruction { source: "inline_main_readline_21_t10 <- inline_main_readline_21_t11 Add inline_main_readline_21_t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 000f3 Instruction { source: "inline_main_readline_21_t10 <- inline_main_readline_21_t11 Add inline_main_readline_21_t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x1c), Register(0x28), Register(0x1c)], resolved: None }
30 1c 28 1c 
# 000f7 Instruction { source: "inline_main_readline_21_t10 <- inline_main_readline_21_t11 Add inline_main_readline_21_t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_readline_21_buf <- inline_main_readline_21_t10 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }", "AddressOf(Index(\"buf\", Number(USIZE, 1)))"] }
# optimized away noop copy Instruction { source: "inline_main_readline_21_buf <- inline_main_readline_21_t10 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# :inline_main_readline_21_readline_if_end_3
# 	SourceContext { contexts: [] }
# inline_main_readline_21_readline_if_end_3
# goto inline_main_readline_21_readline_while_predicate_0
# 	SourceContext { contexts: [] }
# 000f8 Instruction { source: "goto inline_main_readline_21_readline_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_readline_21_readline_while_predicate_0)], resolved: None }
70 8d 00 00 
# :inline_main_readline_21_readline_while_end_2
# 	SourceContext { contexts: [] }
# inline_main_readline_21_readline_while_end_2
# goto inline_main_readline_21_function_end_readline
# 	SourceContext { contexts: ["Return { value: None }"] }
# 000fc Instruction { source: "goto inline_main_readline_21_function_end_readline\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_21_function_end_readline)], resolved: None }
70 00 01 00 
# :inline_main_readline_21_function_end_readline
# 	SourceContext { contexts: [] }
# inline_main_readline_21_function_end_readline
# t16 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }", "Index(\"buf\", Number(USIZE, 0))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 00100 Instruction { source: "t16 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }\", \"Index(\\\"buf\\\", Number(USIZE, 0))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x38)], resolved: None }
21 0c 38 
# t17 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }", "Index(\"buf\", Number(USIZE, 0))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 00103 Instruction { source: "t17 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }\", \"Index(\\\"buf\\\", Number(USIZE, 0))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x1c), Constant32(0x00000000=0)], resolved: None }
20 1c 00 00 00 00 
# t15 <- t16 Add t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }", "Index(\"buf\", Number(USIZE, 0))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))"] }
# 00109 Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }\", \"Index(\\\"buf\\\", Number(USIZE, 0))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0010a Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }\", \"Index(\\\"buf\\\", Number(USIZE, 0))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x1c), Register(0x1c)], resolved: None }
30 38 1c 1c 
# 0010e Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }\", \"Index(\\\"buf\\\", Number(USIZE, 0))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# ch <- mem[t15] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }", "Index(\"buf\", Number(USIZE, 0))"] }
# 0010f Instruction { source: "ch <- mem[t15] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }\", \"Index(\\\"buf\\\", Number(USIZE, 0))\"] }", opcode: Load8, args: [Register(0x1c), Register(0x18)], resolved: None }
05 1c 18 
# t18 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t18 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# t19 <- 0n114/0x72u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }", "Number(U8, 114)", "Number(U8, 114)"] }
# 00112 Instruction { source: "t19 <- 0n114/0x72u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }\", \"Number(U8, 114)\", \"Number(U8, 114)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x72=114)], resolved: None }
04 20 72 
# if t18 == t19 then 'main_if_true_0_4' else 'main_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }"] }
# 00115 Instruction { source: "if t18 == t19 then 'main_if_true_0_4' else 'main_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }\"] }", opcode: Cmp8, args: [Register(0x18), Register(0x20)], resolved: None }
15 18 20 
# 00118 Instruction { source: "if t18 == t19 then 'main_if_true_0_4' else 'main_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }\"] }", opcode: JzImm, args: [Label24(main_if_true_0_4)], resolved: None }
72 20 01 00 
# 0011c Instruction { source: "if t18 == t19 then 'main_if_true_0_4' else 'main_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_0_5)], resolved: None }
70 cc 02 00 
# :main_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }"] }
# main_if_true_0_4
# p_byte <- addr U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }", "Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") }", "Ident(\"addr\")"] }
# 00120 Instruction { source: "p_byte <- addr U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }\", \"Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") }\", \"Ident(\\\"addr\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x1c)], resolved: None }
21 14 1c 
# t22 <- p_byte U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }", "Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] })", "Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] })", "Deref(Ident(\"p_byte\"))", "Deref(Ident(\"p_byte\"))", "Ident(\"p_byte\")", "Ident(\"p_byte\")"] }
# optimized away noop copy Instruction { source: "t22 <- p_byte U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] })\", \"Deref(Ident(\\\"p_byte\\\"))\", \"Deref(Ident(\\\"p_byte\\\"))\", \"Ident(\\\"p_byte\\\")\", \"Ident(\\\"p_byte\\\")\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t21 <- mem[t22] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }", "Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] })", "Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] })", "Deref(Ident(\"p_byte\"))", "Deref(Ident(\"p_byte\"))"] }
# 00123 Instruction { source: "t21 <- mem[t22] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] })\", \"Deref(Ident(\\\"p_byte\\\"))\", \"Deref(Ident(\\\"p_byte\\\"))\"] }", opcode: Load8, args: [Register(0x1c), Register(0x18)], resolved: None }
05 1c 18 
# inline_main_printHex_12_a <- t21 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }", "Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] })", "Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_a <- t21 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_12_t0 <- inline_main_printHex_12_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_t0 <- inline_main_printHex_12_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_12_t1 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Number(U8, 15)", "Number(U8, 15)"] }
# 00126 Instruction { source: "inline_main_printHex_12_t1 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0f=15)], resolved: None }
04 20 0f 
# if inline_main_printHex_12_t0 > inline_main_printHex_12_t1 then 'inline_main_printHex_12_printHex_if_true_0_1' else 'inline_main_printHex_12_printHex_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }"] }
# 00129 Instruction { source: "if inline_main_printHex_12_t0 > inline_main_printHex_12_t1 then 'inline_main_printHex_12_printHex_if_true_0_1' else 'inline_main_printHex_12_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: Cmp8, args: [Register(0x18), Register(0x20)], resolved: None }
15 18 20 
# 0012c Instruction { source: "if inline_main_printHex_12_t0 > inline_main_printHex_12_t1 then 'inline_main_printHex_12_printHex_if_true_0_1' else 'inline_main_printHex_12_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_12_printHex_if_else_0_2)], resolved: None }
71 ea 01 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_12_t0 > inline_main_printHex_12_t1 then 'inline_main_printHex_12_printHex_if_true_0_1' else 'inline_main_printHex_12_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_printHex_if_true_0_1)], resolved: None }
# :inline_main_printHex_12_printHex_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }"] }
# inline_main_printHex_12_printHex_if_true_0_1
# inline_main_printHex_12_t2 <- inline_main_printHex_12_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_t2 <- inline_main_printHex_12_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_12_t3 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 00130 Instruction { source: "inline_main_printHex_12_t3 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x10=16)], resolved: None }
04 20 10 
# inline_main_printHex_12_b <- inline_main_printHex_12_t2 Divide inline_main_printHex_12_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))"] }
# 00133 Instruction { source: "inline_main_printHex_12_b <- inline_main_printHex_12_t2 Divide inline_main_printHex_12_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\"] }", opcode: Divide8, args: [Register(0x18), Register(0x20), Register(0x20)], resolved: None }
17 18 20 20 
# inline_main_printHex_12_t5 <- inline_main_printHex_12_b U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_t5 <- inline_main_printHex_12_b U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_a <- inline_main_printHex_12_t5 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })"] }
# 00137 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_a <- inline_main_printHex_12_t5 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy8, args: [Register(0x20), Register(0x21)], resolved: None }
0b 20 21 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_t0 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_t0 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 0013a Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x0a=10)], resolved: None }
04 22 0a 
# if inline_main_printHex_12_inline_printHex_printHexDigit_10_t0 < inline_main_printHex_12_inline_printHex_printHexDigit_10_t1 then 'inline_main_printHex_12_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1' else 'inline_main_printHex_12_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 0013d Instruction { source: "if inline_main_printHex_12_inline_printHex_printHexDigit_10_t0 < inline_main_printHex_12_inline_printHex_printHexDigit_10_t1 then 'inline_main_printHex_12_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1' else 'inline_main_printHex_12_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x22), Register(0x21)], resolved: None }
15 22 21 
# 00140 Instruction { source: "if inline_main_printHex_12_inline_printHex_printHexDigit_10_t0 < inline_main_printHex_12_inline_printHex_printHexDigit_10_t1 then 'inline_main_printHex_12_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1' else 'inline_main_printHex_12_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2)], resolved: None }
71 89 01 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_12_inline_printHex_printHexDigit_10_t0 < inline_main_printHex_12_inline_printHex_printHexDigit_10_t1 then 'inline_main_printHex_12_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1' else 'inline_main_printHex_12_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_12_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }"] }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1
# inline_main_printHex_12_inline_printHex_printHexDigit_10_t4 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_t4 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_t5 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 00144 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_t5 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x30=48)], resolved: None }
04 22 30 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_t3 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_t4 Add inline_main_printHex_12_inline_printHex_printHexDigit_10_t5
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 00147 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_t3 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_t4 Add inline_main_printHex_12_inline_printHex_printHexDigit_10_t5\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
14 21 22 21 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c <- inline_main_printHex_12_inline_printHex_printHexDigit_10_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c <- inline_main_printHex_12_inline_printHex_printHexDigit_10_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t1 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t1 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# None <= call io_write0(inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 0014b Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x21)], resolved: None }
68 21 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t3 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t3 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# :inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# Some(inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 0014d Instruction { source: "IoRead1", opcode: In1, args: [Register(0x22)], resolved: None }
61 22 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 0014f Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x08=8)], resolved: None }
04 2c 08 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 00152 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x22), Register(0x2c), Register(0x22)], resolved: None }
1b 22 2c 22 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00156 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x00=0)], resolved: None }
04 2c 00 
# if inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 00159 Instruction { source: "if inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x22), Register(0x2c)], resolved: None }
15 22 2c 
# 0015c Instruction { source: "if inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2)], resolved: None }
72 64 01 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1)], resolved: None }
# :inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# goto inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 00160 Instruction { source: "goto inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0)], resolved: None }
70 4d 01 00 
# :inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# goto inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush)], resolved: None }
# :inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00164 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x80=128)], resolved: None }
04 22 80 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 00167 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x04=4)], resolved: None }
04 2c 04 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 0016a Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x2c), Register(0x21), Register(0x2c)], resolved: None }
1e 05 2c 21 2c 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 0016f Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x22), Register(0x2c), Register(0x22)], resolved: None }
1c 22 2c 22 
# None <= call io_write1(inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 00173 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x22)], resolved: None }
69 22 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00175 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x80=128)], resolved: None }
04 2c 80 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 00178 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x0f=15)], resolved: None }
04 22 0f 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 0017b Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
1b 21 22 21 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 0017f Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x2c), Register(0x21), Register(0x21)], resolved: None }
1c 2c 21 21 
# None <= call io_write1(inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 00183 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x21)], resolved: None }
69 21 
# goto inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char)], resolved: None }
# :inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# goto inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_function_end_putc)], resolved: None }
# :inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_function_end_putc
# goto inline_main_printHex_12_inline_printHex_printHexDigit_10_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 00185 Instruction { source: "goto inline_main_printHex_12_inline_printHex_printHexDigit_10_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_10_printHexDigit_if_end_0)], resolved: None }
70 d6 01 00 
# :inline_main_printHex_12_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2
# inline_main_printHex_12_inline_printHex_printHexDigit_10_t6 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_t6 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_t7 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 00189 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_t7 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x0a=10)], resolved: None }
04 22 0a 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_a <- inline_main_printHex_12_inline_printHex_printHexDigit_10_t6 Subtract inline_main_printHex_12_inline_printHex_printHexDigit_10_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 0018c Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_a <- inline_main_printHex_12_inline_printHex_printHexDigit_10_t6 Subtract inline_main_printHex_12_inline_printHex_printHexDigit_10_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0x22), Register(0x00)], resolved: None }
0b 22 00 
# 0018f Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_a <- inline_main_printHex_12_inline_printHex_printHexDigit_10_t6 Subtract inline_main_printHex_12_inline_printHex_printHexDigit_10_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00191 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_a <- inline_main_printHex_12_inline_printHex_printHexDigit_10_t6 Subtract inline_main_printHex_12_inline_printHex_printHexDigit_10_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x21), Register(0x00), Register(0x21)], resolved: None }
14 21 00 21 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_t8 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_t8 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_t9 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 00195 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_t9 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x41=65)], resolved: None }
04 22 41 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_a <- inline_main_printHex_12_inline_printHex_printHexDigit_10_t8 Add inline_main_printHex_12_inline_printHex_printHexDigit_10_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 00198 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_a <- inline_main_printHex_12_inline_printHex_printHexDigit_10_t8 Add inline_main_printHex_12_inline_printHex_printHexDigit_10_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
14 21 22 21 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_t11 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_t11 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c <- inline_main_printHex_12_inline_printHex_printHexDigit_10_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c <- inline_main_printHex_12_inline_printHex_printHexDigit_10_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t1 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t1 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# None <= call io_write0(inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 0019c Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x21)], resolved: None }
68 21 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t3 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t3 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# :inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# Some(inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 0019e Instruction { source: "IoRead1", opcode: In1, args: [Register(0x22)], resolved: None }
61 22 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 001a0 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x08=8)], resolved: None }
04 2c 08 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 001a3 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x22), Register(0x2c), Register(0x22)], resolved: None }
1b 22 2c 22 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 001a7 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x00=0)], resolved: None }
04 2c 00 
# if inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 001aa Instruction { source: "if inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x22), Register(0x2c)], resolved: None }
15 22 2c 
# 001ad Instruction { source: "if inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2)], resolved: None }
72 b5 01 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1)], resolved: None }
# :inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# goto inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 001b1 Instruction { source: "goto inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0)], resolved: None }
70 9e 01 00 
# :inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# goto inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush)], resolved: None }
# :inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 001b5 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x80=128)], resolved: None }
04 22 80 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 001b8 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x04=4)], resolved: None }
04 2c 04 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 001bb Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x2c), Register(0x21), Register(0x2c)], resolved: None }
1e 05 2c 21 2c 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 001c0 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x22), Register(0x2c), Register(0x22)], resolved: None }
1c 22 2c 22 
# None <= call io_write1(inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 001c4 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x22)], resolved: None }
69 22 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 001c6 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x80=128)], resolved: None }
04 2c 80 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 001c9 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x0f=15)], resolved: None }
04 22 0f 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 001cc Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
1b 21 22 21 
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 001d0 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x2c), Register(0x21), Register(0x21)], resolved: None }
1c 2c 21 21 
# None <= call io_write1(inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 001d4 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x21)], resolved: None }
69 21 
# goto inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char)], resolved: None }
# :inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# goto inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_function_end_putc)], resolved: None }
# :inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_function_end_putc
# :inline_main_printHex_12_inline_printHex_printHexDigit_10_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_printHexDigit_if_end_0
# goto inline_main_printHex_12_inline_printHex_printHexDigit_10_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_12_inline_printHex_printHexDigit_10_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_10_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_12_inline_printHex_printHexDigit_10_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_12_inline_printHex_printHexDigit_10_function_end_printHexDigit
# inline_main_printHex_12_t6 <- inline_main_printHex_12_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_t6 <- inline_main_printHex_12_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_12_t8 <- inline_main_printHex_12_b U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_t8 <- inline_main_printHex_12_b U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_12_t9 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 001d6 Instruction { source: "inline_main_printHex_12_t9 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x10=16)], resolved: None }
04 21 10 
# inline_main_printHex_12_t7 <- inline_main_printHex_12_t8 Multiply inline_main_printHex_12_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))"] }
# 001d9 Instruction { source: "inline_main_printHex_12_t7 <- inline_main_printHex_12_t8 Multiply inline_main_printHex_12_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\"] }", opcode: Mul8_8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
10 20 21 20 
# inline_main_printHex_12_a <- inline_main_printHex_12_t6 Subtract inline_main_printHex_12_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))"] }
# 001dd Instruction { source: "inline_main_printHex_12_a <- inline_main_printHex_12_t6 Subtract inline_main_printHex_12_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Copy8, args: [Register(0x20), Register(0x00)], resolved: None }
0b 20 00 
# 001e0 Instruction { source: "inline_main_printHex_12_a <- inline_main_printHex_12_t6 Subtract inline_main_printHex_12_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 001e2 Instruction { source: "inline_main_printHex_12_a <- inline_main_printHex_12_t6 Subtract inline_main_printHex_12_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Add8NoCarryIn, args: [Register(0x18), Register(0x00), Register(0x18)], resolved: None }
14 18 00 18 
# goto inline_main_printHex_12_printHex_if_end_0
# 	SourceContext { contexts: [] }
# 001e6 Instruction { source: "goto inline_main_printHex_12_printHex_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_printHex_if_end_0)], resolved: None }
70 27 02 00 
# :inline_main_printHex_12_printHex_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_12_printHex_if_else_0_2
# inline_main_printHex_12_t11 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Number(U8, 48)", "Number(U8, 48)"] }
# 001ea Instruction { source: "inline_main_printHex_12_t11 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x30=48)], resolved: None }
04 20 30 
# inline_main_printHex_12_inline_printHex_putc_7_c <- inline_main_printHex_12_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_putc_7_c <- inline_main_printHex_12_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_12_inline_printHex_putc_7_t1 <- inline_main_printHex_12_inline_printHex_putc_7_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_putc_7_t1 <- inline_main_printHex_12_inline_printHex_putc_7_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# None <= call io_write0(inline_main_printHex_12_inline_printHex_putc_7_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 001ed Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x20)], resolved: None }
68 20 
# inline_main_printHex_12_inline_printHex_putc_7_t3 <- inline_main_printHex_12_inline_printHex_putc_7_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_putc_7_t3 <- inline_main_printHex_12_inline_printHex_putc_7_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c <- inline_main_printHex_12_inline_printHex_putc_7_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c <- inline_main_printHex_12_inline_printHex_putc_7_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# :inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# Some(inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 001ef Instruction { source: "IoRead1", opcode: In1, args: [Register(0x21)], resolved: None }
61 21 
# inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 001f1 Instruction { source: "inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x08=8)], resolved: None }
04 22 08 
# inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 001f4 Instruction { source: "inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
1b 21 22 21 
# inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 001f8 Instruction { source: "inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x00=0)], resolved: None }
04 22 00 
# if inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 001fb Instruction { source: "if inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x21), Register(0x22)], resolved: None }
15 21 22 
# 001fe Instruction { source: "if inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2)], resolved: None }
72 06 02 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1)], resolved: None }
# :inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# goto inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 00202 Instruction { source: "goto inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0)], resolved: None }
70 ef 01 00 
# :inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# goto inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush)], resolved: None }
# :inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00206 Instruction { source: "inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x80=128)], resolved: None }
04 21 80 
# inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 00209 Instruction { source: "inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x04=4)], resolved: None }
04 22 04 
# inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 0020c Instruction { source: "inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x22), Register(0x20), Register(0x22)], resolved: None }
1e 05 22 20 22 
# inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 00211 Instruction { source: "inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
1c 21 22 21 
# None <= call io_write1(inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 00215 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x21)], resolved: None }
69 21 
# inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00217 Instruction { source: "inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x80=128)], resolved: None }
04 22 80 
# inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 0021a Instruction { source: "inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x0f=15)], resolved: None }
04 21 0f 
# inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 0021d Instruction { source: "inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
1b 20 21 20 
# inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 00221 Instruction { source: "inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x22), Register(0x20), Register(0x20)], resolved: None }
1c 22 20 20 
# None <= call io_write1(inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 00225 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x20)], resolved: None }
69 20 
# goto inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_function_end_lcd_write_char)], resolved: None }
# :inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_printHex_12_inline_printHex_putc_7_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# goto inline_main_printHex_12_inline_printHex_putc_7_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_12_inline_printHex_putc_7_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_putc_7_function_end_putc)], resolved: None }
# :inline_main_printHex_12_inline_printHex_putc_7_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_12_inline_printHex_putc_7_function_end_putc
# :inline_main_printHex_12_printHex_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_12_printHex_if_end_0
# inline_main_printHex_12_t13 <- inline_main_printHex_12_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_t13 <- inline_main_printHex_12_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_a <- inline_main_printHex_12_t13 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_a <- inline_main_printHex_12_t13 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_t0 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_t0 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 00227 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0a=10)], resolved: None }
04 20 0a 
# if inline_main_printHex_12_inline_printHex_printHexDigit_11_t0 < inline_main_printHex_12_inline_printHex_printHexDigit_11_t1 then 'inline_main_printHex_12_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1' else 'inline_main_printHex_12_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 0022a Instruction { source: "if inline_main_printHex_12_inline_printHex_printHexDigit_11_t0 < inline_main_printHex_12_inline_printHex_printHexDigit_11_t1 then 'inline_main_printHex_12_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1' else 'inline_main_printHex_12_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x20), Register(0x18)], resolved: None }
15 20 18 
# 0022d Instruction { source: "if inline_main_printHex_12_inline_printHex_printHexDigit_11_t0 < inline_main_printHex_12_inline_printHex_printHexDigit_11_t1 then 'inline_main_printHex_12_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1' else 'inline_main_printHex_12_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2)], resolved: None }
71 76 02 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_12_inline_printHex_printHexDigit_11_t0 < inline_main_printHex_12_inline_printHex_printHexDigit_11_t1 then 'inline_main_printHex_12_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1' else 'inline_main_printHex_12_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_12_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }"] }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1
# inline_main_printHex_12_inline_printHex_printHexDigit_11_t4 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_t4 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_t5 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 00231 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_t5 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x30=48)], resolved: None }
04 20 30 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_t3 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_t4 Add inline_main_printHex_12_inline_printHex_printHexDigit_11_t5
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 00234 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_t3 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_t4 Add inline_main_printHex_12_inline_printHex_printHexDigit_11_t5\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x18), Register(0x20), Register(0x18)], resolved: None }
14 18 20 18 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c <- inline_main_printHex_12_inline_printHex_printHexDigit_11_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c <- inline_main_printHex_12_inline_printHex_printHexDigit_11_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t1 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t1 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# None <= call io_write0(inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00238 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t3 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t3 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# :inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# Some(inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 0023a Instruction { source: "IoRead1", opcode: In1, args: [Register(0x20)], resolved: None }
61 20 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 0023c Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x08=8)], resolved: None }
04 21 08 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 0023f Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
1b 20 21 20 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00243 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x00=0)], resolved: None }
04 21 00 
# if inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 00246 Instruction { source: "if inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x20), Register(0x21)], resolved: None }
15 20 21 
# 00249 Instruction { source: "if inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2)], resolved: None }
72 51 02 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1)], resolved: None }
# :inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# goto inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 0024d Instruction { source: "goto inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0)], resolved: None }
70 3a 02 00 
# :inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# goto inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush)], resolved: None }
# :inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00251 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x80=128)], resolved: None }
04 20 80 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 00254 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x04=4)], resolved: None }
04 21 04 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 00257 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x21), Register(0x18), Register(0x21)], resolved: None }
1e 05 21 18 21 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 0025c Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
1c 20 21 20 
# None <= call io_write1(inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 00260 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x20)], resolved: None }
69 20 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00262 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x80=128)], resolved: None }
04 21 80 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 00265 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0f=15)], resolved: None }
04 20 0f 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 00268 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x18), Register(0x20), Register(0x18)], resolved: None }
1b 18 20 18 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 0026c Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x21), Register(0x18), Register(0x18)], resolved: None }
1c 21 18 18 
# None <= call io_write1(inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 00270 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x18)], resolved: None }
69 18 
# goto inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char)], resolved: None }
# :inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# goto inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_function_end_putc)], resolved: None }
# :inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_function_end_putc
# goto inline_main_printHex_12_inline_printHex_printHexDigit_11_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 00272 Instruction { source: "goto inline_main_printHex_12_inline_printHex_printHexDigit_11_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_11_printHexDigit_if_end_0)], resolved: None }
70 c3 02 00 
# :inline_main_printHex_12_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2
# inline_main_printHex_12_inline_printHex_printHexDigit_11_t6 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_t6 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_t7 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 00276 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_t7 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0a=10)], resolved: None }
04 20 0a 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_a <- inline_main_printHex_12_inline_printHex_printHexDigit_11_t6 Subtract inline_main_printHex_12_inline_printHex_printHexDigit_11_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 00279 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_a <- inline_main_printHex_12_inline_printHex_printHexDigit_11_t6 Subtract inline_main_printHex_12_inline_printHex_printHexDigit_11_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0x20), Register(0x00)], resolved: None }
0b 20 00 
# 0027c Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_a <- inline_main_printHex_12_inline_printHex_printHexDigit_11_t6 Subtract inline_main_printHex_12_inline_printHex_printHexDigit_11_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 0027e Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_a <- inline_main_printHex_12_inline_printHex_printHexDigit_11_t6 Subtract inline_main_printHex_12_inline_printHex_printHexDigit_11_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x18), Register(0x00), Register(0x18)], resolved: None }
14 18 00 18 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_t8 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_t8 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_t9 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 00282 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_t9 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x41=65)], resolved: None }
04 20 41 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_a <- inline_main_printHex_12_inline_printHex_printHexDigit_11_t8 Add inline_main_printHex_12_inline_printHex_printHexDigit_11_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 00285 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_a <- inline_main_printHex_12_inline_printHex_printHexDigit_11_t8 Add inline_main_printHex_12_inline_printHex_printHexDigit_11_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x18), Register(0x20), Register(0x18)], resolved: None }
14 18 20 18 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_t11 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_t11 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c <- inline_main_printHex_12_inline_printHex_printHexDigit_11_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c <- inline_main_printHex_12_inline_printHex_printHexDigit_11_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t1 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t1 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# None <= call io_write0(inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00289 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t3 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t3 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# :inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# Some(inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 0028b Instruction { source: "IoRead1", opcode: In1, args: [Register(0x20)], resolved: None }
61 20 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 0028d Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x08=8)], resolved: None }
04 21 08 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 00290 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
1b 20 21 20 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00294 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x00=0)], resolved: None }
04 21 00 
# if inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 00297 Instruction { source: "if inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x20), Register(0x21)], resolved: None }
15 20 21 
# 0029a Instruction { source: "if inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2)], resolved: None }
72 a2 02 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1)], resolved: None }
# :inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# goto inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 0029e Instruction { source: "goto inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0)], resolved: None }
70 8b 02 00 
# :inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# goto inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush)], resolved: None }
# :inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 002a2 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x80=128)], resolved: None }
04 20 80 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 002a5 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x04=4)], resolved: None }
04 21 04 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 002a8 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x21), Register(0x18), Register(0x21)], resolved: None }
1e 05 21 18 21 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 002ad Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
1c 20 21 20 
# None <= call io_write1(inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 002b1 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x20)], resolved: None }
69 20 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 002b3 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x80=128)], resolved: None }
04 21 80 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 002b6 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0f=15)], resolved: None }
04 20 0f 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 002b9 Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x18), Register(0x20), Register(0x18)], resolved: None }
1b 18 20 18 
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 002bd Instruction { source: "inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x21), Register(0x18), Register(0x18)], resolved: None }
1c 21 18 18 
# None <= call io_write1(inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 002c1 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x18)], resolved: None }
69 18 
# goto inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char)], resolved: None }
# :inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# goto inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_function_end_putc)], resolved: None }
# :inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_function_end_putc
# :inline_main_printHex_12_inline_printHex_printHexDigit_11_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_printHexDigit_if_end_0
# goto inline_main_printHex_12_inline_printHex_printHexDigit_11_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_12_inline_printHex_printHexDigit_11_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_inline_printHex_printHexDigit_11_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_12_inline_printHex_printHexDigit_11_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_12_inline_printHex_printHexDigit_11_function_end_printHexDigit
# goto inline_main_printHex_12_function_end_printHex
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_12_function_end_printHex\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_12_function_end_printHex)], resolved: None }
# :inline_main_printHex_12_function_end_printHex
# 	SourceContext { contexts: [] }
# inline_main_printHex_12_function_end_printHex
# t23 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 002c3 Instruction { source: "t23 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x18), Constant8(0x0a=10)], resolved: None }
04 18 0a 
# ttyout <- t23
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }"] }
# 002c6 Instruction { source: "ttyout <- t23\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\"] }", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 002c8 Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
70 68 0c 00 
# :main_if_else_0_5
# 	SourceContext { contexts: [] }
# main_if_else_0_5
# t24 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t24 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# t25 <- 0n119/0x77u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }", "Number(U8, 119)", "Number(U8, 119)"] }
# 002cc Instruction { source: "t25 <- 0n119/0x77u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }\", \"Number(U8, 119)\", \"Number(U8, 119)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x77=119)], resolved: None }
04 20 77 
# if t24 == t25 then 'main_if_true_1_6' else 'main_if_else_1_7'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }"] }
# 002cf Instruction { source: "if t24 == t25 then 'main_if_true_1_6' else 'main_if_else_1_7'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }\"] }", opcode: Cmp8, args: [Register(0x18), Register(0x20)], resolved: None }
15 18 20 
# 002d2 Instruction { source: "if t24 == t25 then 'main_if_true_1_6' else 'main_if_else_1_7'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }\"] }", opcode: JzImm, args: [Label24(main_if_true_1_6)], resolved: None }
72 da 02 00 
# 002d6 Instruction { source: "if t24 == t25 then 'main_if_true_1_6' else 'main_if_else_1_7'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_1_7)], resolved: None }
70 dd 03 00 
# :main_if_true_1_6
# 	SourceContext { contexts: [] }
# main_if_true_1_6
# p_byte <- addr U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }", "Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") }", "Ident(\"addr\")"] }
# 002da Instruction { source: "p_byte <- addr U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }\", \"Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") }\", \"Ident(\\\"addr\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x1c)], resolved: None }
21 14 1c 
# t26 <- p_byte U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }", "Ident(\"p_byte\")", "Ident(\"p_byte\")"] }
# 002dd Instruction { source: "t26 <- p_byte U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Ident(\\\"p_byte\\\")\", \"Ident(\\\"p_byte\\\")\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x3c)], resolved: None }
21 1c 3c 
# t30 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 002e0 Instruction { source: "t30 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x38)], resolved: None }
21 0c 38 
# t31 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 002e3 Instruction { source: "t31 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x1c), Constant32(0x00000001=1)], resolved: None }
20 1c 01 00 00 00 
# t29 <- t30 Add t31
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1))"] }
# 002e9 Instruction { source: "t29 <- t30 Add t31\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 002ea Instruction { source: "t29 <- t30 Add t31\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x1c), Register(0x1c)], resolved: None }
30 38 1c 1c 
# 002ee Instruction { source: "t29 <- t30 Add t31\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t28 <- t29 U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "AddressOf(Index(\"buf\", Number(USIZE, 1)))"] }
# optimized away noop copy Instruction { source: "t28 <- t29 U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_parseHex_5_c <- t28 U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_5_c <- t28 U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_parseHex_5_t0 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Number(U8, 16)", "Number(U8, 16)"] }
# 002ef Instruction { source: "inline_main_parseHex_5_t0 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x10=16)], resolved: None }
04 22 10 
# inline_main_parseHex_5_t3 <- inline_main_parseHex_5_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_5_t3 <- inline_main_parseHex_5_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_parseHex_5_t2 <- mem[inline_main_parseHex_5_t3] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))"] }
# 002f2 Instruction { source: "inline_main_parseHex_5_t2 <- mem[inline_main_parseHex_5_t3] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\"] }", opcode: Load8, args: [Register(0x1c), Register(0x20)], resolved: None }
05 1c 20 
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_ch <- inline_main_parseHex_5_t2 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_ch <- inline_main_parseHex_5_t2 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t0 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t0 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t1 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }", "Number(U8, 97)", "Number(U8, 97)"] }
# 002f5 Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t1 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x61=97)], resolved: None }
04 21 61 
# if inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t0 >= inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t1 then 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }"] }
# 002f8 Instruction { source: "if inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t0 >= inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t1 then 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: Cmp8, args: [Register(0x21), Register(0x20)], resolved: None }
15 21 20 
# 002fb Instruction { source: "if inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t0 >= inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t1 then 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JcImm, args: [Label24(inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_1)], resolved: None }
71 03 03 00 
# 002ff Instruction { source: "if inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t0 >= inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t1 then 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_2)], resolved: None }
70 1e 03 00 
# :inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }"] }
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_1
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t4 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t4 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t5 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Number(U8, 97)", "Number(U8, 97)"] }
# 00303 Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t5 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x61=97)], resolved: None }
04 21 61 
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t3 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t4 Subtract inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t5
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))"] }
# 00306 Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t3 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t4 Subtract inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Copy8, args: [Register(0x21), Register(0x00)], resolved: None }
0b 21 00 
# 00309 Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t3 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t4 Subtract inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 0030b Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t3 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t4 Subtract inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Add8NoCarryIn, args: [Register(0x20), Register(0x00), Register(0x20)], resolved: None }
14 20 00 20 
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 0030f Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x0a=10)], resolved: None }
04 21 0a 
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t2 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t3 Add inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t6
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))"] }
# 00312 Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t2 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t3 Add inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t6\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
14 20 21 20 
# inline_main_parseHex_5_t1 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t2 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_5_t1 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t2 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# goto inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }"] }
# 00316 Instruction { source: "goto inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_function_end_parseHexNibble)], resolved: None }
70 57 03 00 
# goto inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_end_0
# 	SourceContext { contexts: [] }
# 0031a Instruction { source: "goto inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_end_0)], resolved: None }
70 1e 03 00 
# :inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_2
# :inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_end_0
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t7 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t7 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t8 <- 0n57/0x39u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Number(U8, 57)", "Number(U8, 57)"] }
# 0031e Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t8 <- 0n57/0x39u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Number(U8, 57)\", \"Number(U8, 57)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x39=57)], resolved: None }
04 21 39 
# if inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t7 <= inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t8 then 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }"] }
# 00321 Instruction { source: "if inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t7 <= inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t8 then 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: Cmp8, args: [Register(0x20), Register(0x21)], resolved: None }
15 20 21 
# 00324 Instruction { source: "if inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t7 <= inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t8 then 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JcImm, args: [Label24(inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_4)], resolved: None }
71 2c 03 00 
# 00328 Instruction { source: "if inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t7 <= inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t8 then 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_5)], resolved: None }
70 40 03 00 
# :inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }"] }
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_4
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t10 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t10 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t11 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 0032c Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t11 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x30=48)], resolved: None }
04 21 30 
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t9 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t10 Subtract inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t11
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))"] }
# 0032f Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t9 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t10 Subtract inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Copy8, args: [Register(0x21), Register(0x00)], resolved: None }
0b 21 00 
# 00332 Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t9 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t10 Subtract inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00334 Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t9 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t10 Subtract inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x20), Register(0x00), Register(0x20)], resolved: None }
14 20 00 20 
# inline_main_parseHex_5_t1 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t9 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_5_t1 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t9 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# goto inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }"] }
# 00338 Instruction { source: "goto inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_function_end_parseHexNibble)], resolved: None }
70 57 03 00 
# goto inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_end_3
# 	SourceContext { contexts: [] }
# 0033c Instruction { source: "goto inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_end_3)], resolved: None }
70 40 03 00 
# :inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_5
# 	SourceContext { contexts: [] }
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_5
# :inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_end_3
# 	SourceContext { contexts: [] }
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_parseHexNibble_if_end_3
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t14 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t14 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t15 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 00340 Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t15 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x41=65)], resolved: None }
04 21 41 
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t13 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t14 Subtract inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t15
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))"] }
# 00343 Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t13 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t14 Subtract inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Copy8, args: [Register(0x21), Register(0x00)], resolved: None }
0b 21 00 
# 00346 Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t13 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t14 Subtract inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00348 Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t13 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t14 Subtract inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x20), Register(0x00), Register(0x20)], resolved: None }
14 20 00 20 
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t16 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 0034c Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t16 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x0a=10)], resolved: None }
04 21 0a 
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t12 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t13 Add inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t16
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))"] }
# 0034f Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t12 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t13 Add inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t16\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
14 20 21 20 
# inline_main_parseHex_5_t1 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t12 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_5_t1 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_t12 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# goto inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }"] }
# 00353 Instruction { source: "goto inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_function_end_parseHexNibble)], resolved: None }
70 57 03 00 
# :inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_function_end_parseHexNibble
# 	SourceContext { contexts: [] }
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_3_function_end_parseHexNibble
# inline_main_parseHex_5_h <- inline_main_parseHex_5_t0 Multiply inline_main_parseHex_5_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))"] }
# 00357 Instruction { source: "inline_main_parseHex_5_h <- inline_main_parseHex_5_t0 Multiply inline_main_parseHex_5_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\"] }", opcode: Mul8_8, args: [Register(0x22), Register(0x20), Register(0x20)], resolved: None }
10 22 20 20 
# inline_main_parseHex_5_t5 <- inline_main_parseHex_5_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1))", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_5_t5 <- inline_main_parseHex_5_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_parseHex_5_t6 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 0035b Instruction { source: "inline_main_parseHex_5_t6 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000001=1)], resolved: None }
20 24 01 00 00 00 
# inline_main_parseHex_5_t4 <- inline_main_parseHex_5_t5 Add inline_main_parseHex_5_t6
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1))"] }
# 00361 Instruction { source: "inline_main_parseHex_5_t4 <- inline_main_parseHex_5_t5 Add inline_main_parseHex_5_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00362 Instruction { source: "inline_main_parseHex_5_t4 <- inline_main_parseHex_5_t5 Add inline_main_parseHex_5_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x1c), Register(0x24), Register(0x1c)], resolved: None }
30 1c 24 1c 
# 00366 Instruction { source: "inline_main_parseHex_5_t4 <- inline_main_parseHex_5_t5 Add inline_main_parseHex_5_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_parseHex_5_c <- inline_main_parseHex_5_t4 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_5_c <- inline_main_parseHex_5_t4 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_parseHex_5_t7 <- inline_main_parseHex_5_h U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Ident(\"h\")", "Ident(\"h\")"] }
# 00367 Instruction { source: "inline_main_parseHex_5_t7 <- inline_main_parseHex_5_h U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Ident(\\\"h\\\")\", \"Ident(\\\"h\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x21)], resolved: None }
0b 20 21 
# inline_main_parseHex_5_t10 <- inline_main_parseHex_5_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_5_t10 <- inline_main_parseHex_5_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_parseHex_5_t9 <- mem[inline_main_parseHex_5_t10] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))"] }
# 0036a Instruction { source: "inline_main_parseHex_5_t9 <- mem[inline_main_parseHex_5_t10] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\"] }", opcode: Load8, args: [Register(0x1c), Register(0x18)], resolved: None }
05 1c 18 
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_ch <- inline_main_parseHex_5_t9 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_ch <- inline_main_parseHex_5_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t0 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t0 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t1 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }", "Number(U8, 97)", "Number(U8, 97)"] }
# 0036d Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t1 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x61=97)], resolved: None }
04 20 61 
# if inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t0 >= inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t1 then 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }"] }
# 00370 Instruction { source: "if inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t0 >= inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t1 then 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: Cmp8, args: [Register(0x20), Register(0x18)], resolved: None }
15 20 18 
# 00373 Instruction { source: "if inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t0 >= inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t1 then 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JcImm, args: [Label24(inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_1)], resolved: None }
71 7b 03 00 
# 00377 Instruction { source: "if inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t0 >= inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t1 then 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_2)], resolved: None }
70 96 03 00 
# :inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }"] }
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_1
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t4 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t4 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t5 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Number(U8, 97)", "Number(U8, 97)"] }
# 0037b Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t5 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x61=97)], resolved: None }
04 20 61 
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t3 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t4 Subtract inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t5
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))"] }
# 0037e Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t3 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t4 Subtract inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Copy8, args: [Register(0x20), Register(0x00)], resolved: None }
0b 20 00 
# 00381 Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t3 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t4 Subtract inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00383 Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t3 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t4 Subtract inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Add8NoCarryIn, args: [Register(0x18), Register(0x00), Register(0x18)], resolved: None }
14 18 00 18 
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 00387 Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0a=10)], resolved: None }
04 20 0a 
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t2 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t3 Add inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t6
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))"] }
# 0038a Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t2 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t3 Add inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t6\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x18), Register(0x20), Register(0x18)], resolved: None }
14 18 20 18 
# inline_main_parseHex_5_t8 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t2 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_5_t8 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t2 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# goto inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }"] }
# 0038e Instruction { source: "goto inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_function_end_parseHexNibble)], resolved: None }
70 cf 03 00 
# goto inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_end_0
# 	SourceContext { contexts: [] }
# 00392 Instruction { source: "goto inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_end_0)], resolved: None }
70 96 03 00 
# :inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_2
# :inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_end_0
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t7 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t7 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t8 <- 0n57/0x39u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Number(U8, 57)", "Number(U8, 57)"] }
# 00396 Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t8 <- 0n57/0x39u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Number(U8, 57)\", \"Number(U8, 57)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x39=57)], resolved: None }
04 20 39 
# if inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t7 <= inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t8 then 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }"] }
# 00399 Instruction { source: "if inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t7 <= inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t8 then 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: Cmp8, args: [Register(0x18), Register(0x20)], resolved: None }
15 18 20 
# 0039c Instruction { source: "if inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t7 <= inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t8 then 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JcImm, args: [Label24(inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_4)], resolved: None }
71 a4 03 00 
# 003a0 Instruction { source: "if inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t7 <= inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t8 then 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_5)], resolved: None }
70 b8 03 00 
# :inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }"] }
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_4
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t10 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t10 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t11 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 003a4 Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t11 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x30=48)], resolved: None }
04 20 30 
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t9 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t10 Subtract inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t11
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))"] }
# 003a7 Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t9 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t10 Subtract inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Copy8, args: [Register(0x20), Register(0x00)], resolved: None }
0b 20 00 
# 003aa Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t9 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t10 Subtract inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 003ac Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t9 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t10 Subtract inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x18), Register(0x00), Register(0x18)], resolved: None }
14 18 00 18 
# inline_main_parseHex_5_t8 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t9 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_5_t8 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t9 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# goto inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }"] }
# 003b0 Instruction { source: "goto inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_function_end_parseHexNibble)], resolved: None }
70 cf 03 00 
# goto inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_end_3
# 	SourceContext { contexts: [] }
# 003b4 Instruction { source: "goto inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_end_3)], resolved: None }
70 b8 03 00 
# :inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_5
# 	SourceContext { contexts: [] }
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_5
# :inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_end_3
# 	SourceContext { contexts: [] }
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_parseHexNibble_if_end_3
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t14 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t14 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t15 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 003b8 Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t15 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x41=65)], resolved: None }
04 20 41 
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t13 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t14 Subtract inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t15
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))"] }
# 003bb Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t13 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t14 Subtract inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Copy8, args: [Register(0x20), Register(0x00)], resolved: None }
0b 20 00 
# 003be Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t13 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t14 Subtract inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 003c0 Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t13 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t14 Subtract inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x18), Register(0x00), Register(0x18)], resolved: None }
14 18 00 18 
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t16 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 003c4 Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t16 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0a=10)], resolved: None }
04 20 0a 
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t12 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t13 Add inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t16
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))"] }
# 003c7 Instruction { source: "inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t12 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t13 Add inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t16\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x18), Register(0x20), Register(0x18)], resolved: None }
14 18 20 18 
# inline_main_parseHex_5_t8 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t12 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_5_t8 <- inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_t12 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# goto inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }"] }
# 003cb Instruction { source: "goto inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_function_end_parseHexNibble)], resolved: None }
70 cf 03 00 
# :inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_function_end_parseHexNibble
# 	SourceContext { contexts: [] }
# inline_main_parseHex_5_inline_parseHex_parseHexNibble_4_function_end_parseHexNibble
# inline_main_parseHex_5_h <- inline_main_parseHex_5_t7 Add inline_main_parseHex_5_t8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))"] }
# 003cf Instruction { source: "inline_main_parseHex_5_h <- inline_main_parseHex_5_t7 Add inline_main_parseHex_5_t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\"] }", opcode: Add8NoCarryIn, args: [Register(0x21), Register(0x18), Register(0x20)], resolved: None }
14 21 18 20 
# inline_main_parseHex_5_t11 <- inline_main_parseHex_5_h U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"h\")) }", "Ident(\"h\")", "Ident(\"h\")"] }
# 003d3 Instruction { source: "inline_main_parseHex_5_t11 <- inline_main_parseHex_5_h U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"h\\\")) }\", \"Ident(\\\"h\\\")\", \"Ident(\\\"h\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x18)], resolved: None }
0b 20 18 
# t27 <- inline_main_parseHex_5_t11 U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"h\")) }"] }
# optimized away noop copy Instruction { source: "t27 <- inline_main_parseHex_5_t11 U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"h\\\")) }\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# goto inline_main_parseHex_5_function_end_parseHex
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"h\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_parseHex_5_function_end_parseHex\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"h\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_5_function_end_parseHex)], resolved: None }
# :inline_main_parseHex_5_function_end_parseHex
# 	SourceContext { contexts: [] }
# inline_main_parseHex_5_function_end_parseHex
# mem[t26] <- t27 U8
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }"] }
# 003d6 Instruction { source: "mem[t26] <- t27 U8\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\"] }", opcode: Store8, args: [Register(0x18), Register(0x3c)], resolved: None }
06 18 3c 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 003d9 Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
70 68 0c 00 
# :main_if_else_1_7
# 	SourceContext { contexts: [] }
# main_if_else_1_7
# t32 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t32 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# t33 <- 0n110/0x6eu8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }", "Number(U8, 110)", "Number(U8, 110)"] }
# 003dd Instruction { source: "t33 <- 0n110/0x6eu8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }\", \"Number(U8, 110)\", \"Number(U8, 110)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x6e=110)], resolved: None }
04 20 6e 
# if t32 == t33 then 'main_if_true_2_8' else 'main_if_else_2_9'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }"] }
# 003e0 Instruction { source: "if t32 == t33 then 'main_if_true_2_8' else 'main_if_else_2_9'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }\"] }", opcode: Cmp8, args: [Register(0x18), Register(0x20)], resolved: None }
15 18 20 
# 003e3 Instruction { source: "if t32 == t33 then 'main_if_true_2_8' else 'main_if_else_2_9'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }\"] }", opcode: JzImm, args: [Label24(main_if_true_2_8)], resolved: None }
72 eb 03 00 
# 003e7 Instruction { source: "if t32 == t33 then 'main_if_true_2_8' else 'main_if_else_2_9'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_2_9)], resolved: None }
70 fb 03 00 
# :main_if_true_2_8
# 	SourceContext { contexts: [] }
# main_if_true_2_8
# t34 <- addr U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"addr\"), Number(U8, 1))", "Ident(\"addr\")", "Ident(\"addr\")"] }
# optimized away noop copy Instruction { source: "t34 <- addr U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1))\", \"Ident(\\\"addr\\\")\", \"Ident(\\\"addr\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# t35 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"addr\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 003eb Instruction { source: "t35 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x1c), Constant32(0x00000001=1)], resolved: None }
20 1c 01 00 00 00 
# addr <- t34 Add t35
# 	SourceContext { contexts: ["Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"addr\"), Number(U8, 1))"] }
# 003f1 Instruction { source: "addr <- t34 Add t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 003f2 Instruction { source: "addr <- t34 Add t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x1c), Register(0x14)], resolved: None }
30 14 1c 14 
# 003f6 Instruction { source: "addr <- t34 Add t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 003f7 Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
70 68 0c 00 
# :main_if_else_2_9
# 	SourceContext { contexts: [] }
# main_if_else_2_9
# t36 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t36 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# t37 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }", "Number(U8, 97)", "Number(U8, 97)"] }
# 003fb Instruction { source: "t37 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x61=97)], resolved: None }
04 20 61 
# if t36 == t37 then 'main_if_true_3_10' else 'main_if_else_3_11'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }"] }
# 003fe Instruction { source: "if t36 == t37 then 'main_if_true_3_10' else 'main_if_else_3_11'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: Cmp8, args: [Register(0x18), Register(0x20)], resolved: None }
15 18 20 
# 00401 Instruction { source: "if t36 == t37 then 'main_if_true_3_10' else 'main_if_else_3_11'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JzImm, args: [Label24(main_if_true_3_10)], resolved: None }
72 09 04 00 
# 00405 Instruction { source: "if t36 == t37 then 'main_if_true_3_10' else 'main_if_else_3_11'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_3_11)], resolved: None }
70 9e 0a 00 
# :main_if_true_3_10
# 	SourceContext { contexts: [] }
# main_if_true_3_10
# t39 <- addr[0x03..0x04] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] })", "Index(\"addr\", Number(USIZE, 3))", "Index(\"addr\", Number(USIZE, 3))"] }
# 00409 Instruction { source: "t39 <- addr[0x03..0x04] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] })\", \"Index(\\\"addr\\\", Number(USIZE, 3))\", \"Index(\\\"addr\\\", Number(USIZE, 3))\"] }", opcode: Copy8, args: [Register(0x17), Register(0x40)], resolved: None }
0b 17 40 
# inline_main_printHex_13_a <- t39 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] })"] }
# 0040c Instruction { source: "inline_main_printHex_13_a <- t39 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] })\"] }", opcode: Copy8, args: [Register(0x40), Register(0x18)], resolved: None }
0b 40 18 
# inline_main_printHex_13_t0 <- inline_main_printHex_13_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_t0 <- inline_main_printHex_13_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_13_t1 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Number(U8, 15)", "Number(U8, 15)"] }
# 0040f Instruction { source: "inline_main_printHex_13_t1 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0f=15)], resolved: None }
04 20 0f 
# if inline_main_printHex_13_t0 > inline_main_printHex_13_t1 then 'inline_main_printHex_13_printHex_if_true_0_1' else 'inline_main_printHex_13_printHex_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }"] }
# 00412 Instruction { source: "if inline_main_printHex_13_t0 > inline_main_printHex_13_t1 then 'inline_main_printHex_13_printHex_if_true_0_1' else 'inline_main_printHex_13_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: Cmp8, args: [Register(0x18), Register(0x20)], resolved: None }
15 18 20 
# 00415 Instruction { source: "if inline_main_printHex_13_t0 > inline_main_printHex_13_t1 then 'inline_main_printHex_13_printHex_if_true_0_1' else 'inline_main_printHex_13_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_13_printHex_if_else_0_2)], resolved: None }
71 d3 04 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_13_t0 > inline_main_printHex_13_t1 then 'inline_main_printHex_13_printHex_if_true_0_1' else 'inline_main_printHex_13_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_printHex_if_true_0_1)], resolved: None }
# :inline_main_printHex_13_printHex_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }"] }
# inline_main_printHex_13_printHex_if_true_0_1
# inline_main_printHex_13_t2 <- inline_main_printHex_13_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_t2 <- inline_main_printHex_13_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_13_t3 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 00419 Instruction { source: "inline_main_printHex_13_t3 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x10=16)], resolved: None }
04 20 10 
# inline_main_printHex_13_b <- inline_main_printHex_13_t2 Divide inline_main_printHex_13_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))"] }
# 0041c Instruction { source: "inline_main_printHex_13_b <- inline_main_printHex_13_t2 Divide inline_main_printHex_13_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\"] }", opcode: Divide8, args: [Register(0x18), Register(0x20), Register(0x20)], resolved: None }
17 18 20 20 
# inline_main_printHex_13_t5 <- inline_main_printHex_13_b U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_t5 <- inline_main_printHex_13_b U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_a <- inline_main_printHex_13_t5 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })"] }
# 00420 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_a <- inline_main_printHex_13_t5 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy8, args: [Register(0x20), Register(0x21)], resolved: None }
0b 20 21 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_t0 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_t0 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 00423 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x0a=10)], resolved: None }
04 22 0a 
# if inline_main_printHex_13_inline_printHex_printHexDigit_10_t0 < inline_main_printHex_13_inline_printHex_printHexDigit_10_t1 then 'inline_main_printHex_13_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1' else 'inline_main_printHex_13_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 00426 Instruction { source: "if inline_main_printHex_13_inline_printHex_printHexDigit_10_t0 < inline_main_printHex_13_inline_printHex_printHexDigit_10_t1 then 'inline_main_printHex_13_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1' else 'inline_main_printHex_13_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x22), Register(0x21)], resolved: None }
15 22 21 
# 00429 Instruction { source: "if inline_main_printHex_13_inline_printHex_printHexDigit_10_t0 < inline_main_printHex_13_inline_printHex_printHexDigit_10_t1 then 'inline_main_printHex_13_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1' else 'inline_main_printHex_13_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2)], resolved: None }
71 72 04 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_13_inline_printHex_printHexDigit_10_t0 < inline_main_printHex_13_inline_printHex_printHexDigit_10_t1 then 'inline_main_printHex_13_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1' else 'inline_main_printHex_13_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_13_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }"] }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1
# inline_main_printHex_13_inline_printHex_printHexDigit_10_t4 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_t4 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_t5 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 0042d Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_t5 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x30=48)], resolved: None }
04 22 30 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_t3 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_t4 Add inline_main_printHex_13_inline_printHex_printHexDigit_10_t5
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 00430 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_t3 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_t4 Add inline_main_printHex_13_inline_printHex_printHexDigit_10_t5\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
14 21 22 21 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c <- inline_main_printHex_13_inline_printHex_printHexDigit_10_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c <- inline_main_printHex_13_inline_printHex_printHexDigit_10_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t1 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t1 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# None <= call io_write0(inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00434 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x21)], resolved: None }
68 21 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t3 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t3 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# :inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# Some(inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 00436 Instruction { source: "IoRead1", opcode: In1, args: [Register(0x22)], resolved: None }
61 22 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 00438 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x08=8)], resolved: None }
04 2c 08 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 0043b Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x22), Register(0x2c), Register(0x22)], resolved: None }
1b 22 2c 22 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0043f Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x00=0)], resolved: None }
04 2c 00 
# if inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 00442 Instruction { source: "if inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x22), Register(0x2c)], resolved: None }
15 22 2c 
# 00445 Instruction { source: "if inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2)], resolved: None }
72 4d 04 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1)], resolved: None }
# :inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# goto inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 00449 Instruction { source: "goto inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0)], resolved: None }
70 36 04 00 
# :inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# goto inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush)], resolved: None }
# :inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 0044d Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x80=128)], resolved: None }
04 22 80 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 00450 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x04=4)], resolved: None }
04 2c 04 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 00453 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x2c), Register(0x21), Register(0x2c)], resolved: None }
1e 05 2c 21 2c 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 00458 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x22), Register(0x2c), Register(0x22)], resolved: None }
1c 22 2c 22 
# None <= call io_write1(inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 0045c Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x22)], resolved: None }
69 22 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 0045e Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x80=128)], resolved: None }
04 2c 80 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 00461 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x0f=15)], resolved: None }
04 22 0f 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 00464 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
1b 21 22 21 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 00468 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x2c), Register(0x21), Register(0x21)], resolved: None }
1c 2c 21 21 
# None <= call io_write1(inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 0046c Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x21)], resolved: None }
69 21 
# goto inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char)], resolved: None }
# :inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# goto inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_function_end_putc)], resolved: None }
# :inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_function_end_putc
# goto inline_main_printHex_13_inline_printHex_printHexDigit_10_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 0046e Instruction { source: "goto inline_main_printHex_13_inline_printHex_printHexDigit_10_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_10_printHexDigit_if_end_0)], resolved: None }
70 bf 04 00 
# :inline_main_printHex_13_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2
# inline_main_printHex_13_inline_printHex_printHexDigit_10_t6 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_t6 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_t7 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 00472 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_t7 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x0a=10)], resolved: None }
04 22 0a 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_a <- inline_main_printHex_13_inline_printHex_printHexDigit_10_t6 Subtract inline_main_printHex_13_inline_printHex_printHexDigit_10_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 00475 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_a <- inline_main_printHex_13_inline_printHex_printHexDigit_10_t6 Subtract inline_main_printHex_13_inline_printHex_printHexDigit_10_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0x22), Register(0x00)], resolved: None }
0b 22 00 
# 00478 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_a <- inline_main_printHex_13_inline_printHex_printHexDigit_10_t6 Subtract inline_main_printHex_13_inline_printHex_printHexDigit_10_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 0047a Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_a <- inline_main_printHex_13_inline_printHex_printHexDigit_10_t6 Subtract inline_main_printHex_13_inline_printHex_printHexDigit_10_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x21), Register(0x00), Register(0x21)], resolved: None }
14 21 00 21 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_t8 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_t8 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_t9 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 0047e Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_t9 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x41=65)], resolved: None }
04 22 41 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_a <- inline_main_printHex_13_inline_printHex_printHexDigit_10_t8 Add inline_main_printHex_13_inline_printHex_printHexDigit_10_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 00481 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_a <- inline_main_printHex_13_inline_printHex_printHexDigit_10_t8 Add inline_main_printHex_13_inline_printHex_printHexDigit_10_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
14 21 22 21 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_t11 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_t11 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c <- inline_main_printHex_13_inline_printHex_printHexDigit_10_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c <- inline_main_printHex_13_inline_printHex_printHexDigit_10_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t1 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t1 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# None <= call io_write0(inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00485 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x21)], resolved: None }
68 21 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t3 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t3 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# :inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# Some(inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 00487 Instruction { source: "IoRead1", opcode: In1, args: [Register(0x22)], resolved: None }
61 22 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 00489 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x08=8)], resolved: None }
04 2c 08 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 0048c Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x22), Register(0x2c), Register(0x22)], resolved: None }
1b 22 2c 22 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00490 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x00=0)], resolved: None }
04 2c 00 
# if inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 00493 Instruction { source: "if inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x22), Register(0x2c)], resolved: None }
15 22 2c 
# 00496 Instruction { source: "if inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2)], resolved: None }
72 9e 04 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1)], resolved: None }
# :inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# goto inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 0049a Instruction { source: "goto inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0)], resolved: None }
70 87 04 00 
# :inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# goto inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush)], resolved: None }
# :inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 0049e Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x80=128)], resolved: None }
04 22 80 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 004a1 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x04=4)], resolved: None }
04 2c 04 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 004a4 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x2c), Register(0x21), Register(0x2c)], resolved: None }
1e 05 2c 21 2c 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 004a9 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x22), Register(0x2c), Register(0x22)], resolved: None }
1c 22 2c 22 
# None <= call io_write1(inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 004ad Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x22)], resolved: None }
69 22 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 004af Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x80=128)], resolved: None }
04 2c 80 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 004b2 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x0f=15)], resolved: None }
04 22 0f 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 004b5 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
1b 21 22 21 
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 004b9 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x2c), Register(0x21), Register(0x21)], resolved: None }
1c 2c 21 21 
# None <= call io_write1(inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 004bd Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x21)], resolved: None }
69 21 
# goto inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char)], resolved: None }
# :inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# goto inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_function_end_putc)], resolved: None }
# :inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_function_end_putc
# :inline_main_printHex_13_inline_printHex_printHexDigit_10_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_printHexDigit_if_end_0
# goto inline_main_printHex_13_inline_printHex_printHexDigit_10_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_13_inline_printHex_printHexDigit_10_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_10_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_13_inline_printHex_printHexDigit_10_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_13_inline_printHex_printHexDigit_10_function_end_printHexDigit
# inline_main_printHex_13_t6 <- inline_main_printHex_13_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_t6 <- inline_main_printHex_13_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_13_t8 <- inline_main_printHex_13_b U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_t8 <- inline_main_printHex_13_b U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_13_t9 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 004bf Instruction { source: "inline_main_printHex_13_t9 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x10=16)], resolved: None }
04 21 10 
# inline_main_printHex_13_t7 <- inline_main_printHex_13_t8 Multiply inline_main_printHex_13_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))"] }
# 004c2 Instruction { source: "inline_main_printHex_13_t7 <- inline_main_printHex_13_t8 Multiply inline_main_printHex_13_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\"] }", opcode: Mul8_8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
10 20 21 20 
# inline_main_printHex_13_a <- inline_main_printHex_13_t6 Subtract inline_main_printHex_13_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))"] }
# 004c6 Instruction { source: "inline_main_printHex_13_a <- inline_main_printHex_13_t6 Subtract inline_main_printHex_13_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Copy8, args: [Register(0x20), Register(0x00)], resolved: None }
0b 20 00 
# 004c9 Instruction { source: "inline_main_printHex_13_a <- inline_main_printHex_13_t6 Subtract inline_main_printHex_13_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 004cb Instruction { source: "inline_main_printHex_13_a <- inline_main_printHex_13_t6 Subtract inline_main_printHex_13_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Add8NoCarryIn, args: [Register(0x18), Register(0x00), Register(0x18)], resolved: None }
14 18 00 18 
# goto inline_main_printHex_13_printHex_if_end_0
# 	SourceContext { contexts: [] }
# 004cf Instruction { source: "goto inline_main_printHex_13_printHex_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_printHex_if_end_0)], resolved: None }
70 10 05 00 
# :inline_main_printHex_13_printHex_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_13_printHex_if_else_0_2
# inline_main_printHex_13_t11 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Number(U8, 48)", "Number(U8, 48)"] }
# 004d3 Instruction { source: "inline_main_printHex_13_t11 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x30=48)], resolved: None }
04 20 30 
# inline_main_printHex_13_inline_printHex_putc_7_c <- inline_main_printHex_13_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_putc_7_c <- inline_main_printHex_13_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_13_inline_printHex_putc_7_t1 <- inline_main_printHex_13_inline_printHex_putc_7_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_putc_7_t1 <- inline_main_printHex_13_inline_printHex_putc_7_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# None <= call io_write0(inline_main_printHex_13_inline_printHex_putc_7_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 004d6 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x20)], resolved: None }
68 20 
# inline_main_printHex_13_inline_printHex_putc_7_t3 <- inline_main_printHex_13_inline_printHex_putc_7_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_putc_7_t3 <- inline_main_printHex_13_inline_printHex_putc_7_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c <- inline_main_printHex_13_inline_printHex_putc_7_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c <- inline_main_printHex_13_inline_printHex_putc_7_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# :inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# Some(inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 004d8 Instruction { source: "IoRead1", opcode: In1, args: [Register(0x21)], resolved: None }
61 21 
# inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 004da Instruction { source: "inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x08=8)], resolved: None }
04 22 08 
# inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 004dd Instruction { source: "inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
1b 21 22 21 
# inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 004e1 Instruction { source: "inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x00=0)], resolved: None }
04 22 00 
# if inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 004e4 Instruction { source: "if inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x21), Register(0x22)], resolved: None }
15 21 22 
# 004e7 Instruction { source: "if inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2)], resolved: None }
72 ef 04 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1)], resolved: None }
# :inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# goto inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 004eb Instruction { source: "goto inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0)], resolved: None }
70 d8 04 00 
# :inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# goto inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush)], resolved: None }
# :inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 004ef Instruction { source: "inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x80=128)], resolved: None }
04 21 80 
# inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 004f2 Instruction { source: "inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x04=4)], resolved: None }
04 22 04 
# inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 004f5 Instruction { source: "inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x22), Register(0x20), Register(0x22)], resolved: None }
1e 05 22 20 22 
# inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 004fa Instruction { source: "inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
1c 21 22 21 
# None <= call io_write1(inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 004fe Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x21)], resolved: None }
69 21 
# inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00500 Instruction { source: "inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x80=128)], resolved: None }
04 22 80 
# inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 00503 Instruction { source: "inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x0f=15)], resolved: None }
04 21 0f 
# inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 00506 Instruction { source: "inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
1b 20 21 20 
# inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 0050a Instruction { source: "inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x22), Register(0x20), Register(0x20)], resolved: None }
1c 22 20 20 
# None <= call io_write1(inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 0050e Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x20)], resolved: None }
69 20 
# goto inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_function_end_lcd_write_char)], resolved: None }
# :inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_printHex_13_inline_printHex_putc_7_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# goto inline_main_printHex_13_inline_printHex_putc_7_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_13_inline_printHex_putc_7_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_putc_7_function_end_putc)], resolved: None }
# :inline_main_printHex_13_inline_printHex_putc_7_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_13_inline_printHex_putc_7_function_end_putc
# :inline_main_printHex_13_printHex_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_13_printHex_if_end_0
# inline_main_printHex_13_t13 <- inline_main_printHex_13_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_t13 <- inline_main_printHex_13_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_a <- inline_main_printHex_13_t13 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_a <- inline_main_printHex_13_t13 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_t0 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_t0 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 00510 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0a=10)], resolved: None }
04 20 0a 
# if inline_main_printHex_13_inline_printHex_printHexDigit_11_t0 < inline_main_printHex_13_inline_printHex_printHexDigit_11_t1 then 'inline_main_printHex_13_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1' else 'inline_main_printHex_13_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 00513 Instruction { source: "if inline_main_printHex_13_inline_printHex_printHexDigit_11_t0 < inline_main_printHex_13_inline_printHex_printHexDigit_11_t1 then 'inline_main_printHex_13_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1' else 'inline_main_printHex_13_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x20), Register(0x18)], resolved: None }
15 20 18 
# 00516 Instruction { source: "if inline_main_printHex_13_inline_printHex_printHexDigit_11_t0 < inline_main_printHex_13_inline_printHex_printHexDigit_11_t1 then 'inline_main_printHex_13_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1' else 'inline_main_printHex_13_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2)], resolved: None }
71 5f 05 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_13_inline_printHex_printHexDigit_11_t0 < inline_main_printHex_13_inline_printHex_printHexDigit_11_t1 then 'inline_main_printHex_13_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1' else 'inline_main_printHex_13_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_13_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }"] }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1
# inline_main_printHex_13_inline_printHex_printHexDigit_11_t4 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_t4 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_t5 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 0051a Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_t5 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x30=48)], resolved: None }
04 20 30 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_t3 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_t4 Add inline_main_printHex_13_inline_printHex_printHexDigit_11_t5
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 0051d Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_t3 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_t4 Add inline_main_printHex_13_inline_printHex_printHexDigit_11_t5\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x18), Register(0x20), Register(0x18)], resolved: None }
14 18 20 18 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c <- inline_main_printHex_13_inline_printHex_printHexDigit_11_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c <- inline_main_printHex_13_inline_printHex_printHexDigit_11_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t1 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t1 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# None <= call io_write0(inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00521 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t3 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t3 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# :inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# Some(inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 00523 Instruction { source: "IoRead1", opcode: In1, args: [Register(0x20)], resolved: None }
61 20 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 00525 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x08=8)], resolved: None }
04 21 08 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 00528 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
1b 20 21 20 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0052c Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x00=0)], resolved: None }
04 21 00 
# if inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 0052f Instruction { source: "if inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x20), Register(0x21)], resolved: None }
15 20 21 
# 00532 Instruction { source: "if inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2)], resolved: None }
72 3a 05 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1)], resolved: None }
# :inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# goto inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 00536 Instruction { source: "goto inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0)], resolved: None }
70 23 05 00 
# :inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# goto inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush)], resolved: None }
# :inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 0053a Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x80=128)], resolved: None }
04 20 80 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 0053d Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x04=4)], resolved: None }
04 21 04 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 00540 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x21), Register(0x18), Register(0x21)], resolved: None }
1e 05 21 18 21 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 00545 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
1c 20 21 20 
# None <= call io_write1(inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 00549 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x20)], resolved: None }
69 20 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 0054b Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x80=128)], resolved: None }
04 21 80 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 0054e Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0f=15)], resolved: None }
04 20 0f 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 00551 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x18), Register(0x20), Register(0x18)], resolved: None }
1b 18 20 18 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 00555 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x21), Register(0x18), Register(0x18)], resolved: None }
1c 21 18 18 
# None <= call io_write1(inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 00559 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x18)], resolved: None }
69 18 
# goto inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char)], resolved: None }
# :inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# goto inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_function_end_putc)], resolved: None }
# :inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_function_end_putc
# goto inline_main_printHex_13_inline_printHex_printHexDigit_11_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 0055b Instruction { source: "goto inline_main_printHex_13_inline_printHex_printHexDigit_11_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_11_printHexDigit_if_end_0)], resolved: None }
70 ac 05 00 
# :inline_main_printHex_13_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2
# inline_main_printHex_13_inline_printHex_printHexDigit_11_t6 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_t6 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_t7 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 0055f Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_t7 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0a=10)], resolved: None }
04 20 0a 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_a <- inline_main_printHex_13_inline_printHex_printHexDigit_11_t6 Subtract inline_main_printHex_13_inline_printHex_printHexDigit_11_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 00562 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_a <- inline_main_printHex_13_inline_printHex_printHexDigit_11_t6 Subtract inline_main_printHex_13_inline_printHex_printHexDigit_11_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0x20), Register(0x00)], resolved: None }
0b 20 00 
# 00565 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_a <- inline_main_printHex_13_inline_printHex_printHexDigit_11_t6 Subtract inline_main_printHex_13_inline_printHex_printHexDigit_11_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00567 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_a <- inline_main_printHex_13_inline_printHex_printHexDigit_11_t6 Subtract inline_main_printHex_13_inline_printHex_printHexDigit_11_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x18), Register(0x00), Register(0x18)], resolved: None }
14 18 00 18 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_t8 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_t8 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_t9 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 0056b Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_t9 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x41=65)], resolved: None }
04 20 41 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_a <- inline_main_printHex_13_inline_printHex_printHexDigit_11_t8 Add inline_main_printHex_13_inline_printHex_printHexDigit_11_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 0056e Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_a <- inline_main_printHex_13_inline_printHex_printHexDigit_11_t8 Add inline_main_printHex_13_inline_printHex_printHexDigit_11_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x18), Register(0x20), Register(0x18)], resolved: None }
14 18 20 18 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_t11 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_t11 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c <- inline_main_printHex_13_inline_printHex_printHexDigit_11_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c <- inline_main_printHex_13_inline_printHex_printHexDigit_11_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t1 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t1 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# None <= call io_write0(inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00572 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t3 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t3 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# :inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# Some(inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 00574 Instruction { source: "IoRead1", opcode: In1, args: [Register(0x20)], resolved: None }
61 20 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 00576 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x08=8)], resolved: None }
04 21 08 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 00579 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
1b 20 21 20 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0057d Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x00=0)], resolved: None }
04 21 00 
# if inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 00580 Instruction { source: "if inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x20), Register(0x21)], resolved: None }
15 20 21 
# 00583 Instruction { source: "if inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2)], resolved: None }
72 8b 05 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1)], resolved: None }
# :inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# goto inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 00587 Instruction { source: "goto inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0)], resolved: None }
70 74 05 00 
# :inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# goto inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush)], resolved: None }
# :inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 0058b Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x80=128)], resolved: None }
04 20 80 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 0058e Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x04=4)], resolved: None }
04 21 04 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 00591 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x21), Register(0x18), Register(0x21)], resolved: None }
1e 05 21 18 21 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 00596 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
1c 20 21 20 
# None <= call io_write1(inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 0059a Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x20)], resolved: None }
69 20 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 0059c Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x80=128)], resolved: None }
04 21 80 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 0059f Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0f=15)], resolved: None }
04 20 0f 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 005a2 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x18), Register(0x20), Register(0x18)], resolved: None }
1b 18 20 18 
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 005a6 Instruction { source: "inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x21), Register(0x18), Register(0x18)], resolved: None }
1c 21 18 18 
# None <= call io_write1(inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 005aa Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x18)], resolved: None }
69 18 
# goto inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char)], resolved: None }
# :inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# goto inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_function_end_putc)], resolved: None }
# :inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_function_end_putc
# :inline_main_printHex_13_inline_printHex_printHexDigit_11_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_printHexDigit_if_end_0
# goto inline_main_printHex_13_inline_printHex_printHexDigit_11_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_13_inline_printHex_printHexDigit_11_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_inline_printHex_printHexDigit_11_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_13_inline_printHex_printHexDigit_11_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_13_inline_printHex_printHexDigit_11_function_end_printHexDigit
# goto inline_main_printHex_13_function_end_printHex
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_13_function_end_printHex\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_13_function_end_printHex)], resolved: None }
# :inline_main_printHex_13_function_end_printHex
# 	SourceContext { contexts: [] }
# inline_main_printHex_13_function_end_printHex
# t41 <- addr[0x02..0x03] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] })", "Index(\"addr\", Number(USIZE, 2))", "Index(\"addr\", Number(USIZE, 2))"] }
# 005ac Instruction { source: "t41 <- addr[0x02..0x03] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] })\", \"Index(\\\"addr\\\", Number(USIZE, 2))\", \"Index(\\\"addr\\\", Number(USIZE, 2))\"] }", opcode: Copy8, args: [Register(0x16), Register(0x40)], resolved: None }
0b 16 40 
# inline_main_printHex_14_a <- t41 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] })"] }
# 005af Instruction { source: "inline_main_printHex_14_a <- t41 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] })\"] }", opcode: Copy8, args: [Register(0x40), Register(0x18)], resolved: None }
0b 40 18 
# inline_main_printHex_14_t0 <- inline_main_printHex_14_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_t0 <- inline_main_printHex_14_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_14_t1 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Number(U8, 15)", "Number(U8, 15)"] }
# 005b2 Instruction { source: "inline_main_printHex_14_t1 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0f=15)], resolved: None }
04 20 0f 
# if inline_main_printHex_14_t0 > inline_main_printHex_14_t1 then 'inline_main_printHex_14_printHex_if_true_0_1' else 'inline_main_printHex_14_printHex_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }"] }
# 005b5 Instruction { source: "if inline_main_printHex_14_t0 > inline_main_printHex_14_t1 then 'inline_main_printHex_14_printHex_if_true_0_1' else 'inline_main_printHex_14_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: Cmp8, args: [Register(0x18), Register(0x20)], resolved: None }
15 18 20 
# 005b8 Instruction { source: "if inline_main_printHex_14_t0 > inline_main_printHex_14_t1 then 'inline_main_printHex_14_printHex_if_true_0_1' else 'inline_main_printHex_14_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_14_printHex_if_else_0_2)], resolved: None }
71 76 06 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_14_t0 > inline_main_printHex_14_t1 then 'inline_main_printHex_14_printHex_if_true_0_1' else 'inline_main_printHex_14_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_printHex_if_true_0_1)], resolved: None }
# :inline_main_printHex_14_printHex_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }"] }
# inline_main_printHex_14_printHex_if_true_0_1
# inline_main_printHex_14_t2 <- inline_main_printHex_14_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_t2 <- inline_main_printHex_14_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_14_t3 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 005bc Instruction { source: "inline_main_printHex_14_t3 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x10=16)], resolved: None }
04 20 10 
# inline_main_printHex_14_b <- inline_main_printHex_14_t2 Divide inline_main_printHex_14_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))"] }
# 005bf Instruction { source: "inline_main_printHex_14_b <- inline_main_printHex_14_t2 Divide inline_main_printHex_14_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\"] }", opcode: Divide8, args: [Register(0x18), Register(0x20), Register(0x20)], resolved: None }
17 18 20 20 
# inline_main_printHex_14_t5 <- inline_main_printHex_14_b U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_t5 <- inline_main_printHex_14_b U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_a <- inline_main_printHex_14_t5 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })"] }
# 005c3 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_a <- inline_main_printHex_14_t5 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy8, args: [Register(0x20), Register(0x21)], resolved: None }
0b 20 21 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_t0 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_t0 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 005c6 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x0a=10)], resolved: None }
04 22 0a 
# if inline_main_printHex_14_inline_printHex_printHexDigit_10_t0 < inline_main_printHex_14_inline_printHex_printHexDigit_10_t1 then 'inline_main_printHex_14_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1' else 'inline_main_printHex_14_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 005c9 Instruction { source: "if inline_main_printHex_14_inline_printHex_printHexDigit_10_t0 < inline_main_printHex_14_inline_printHex_printHexDigit_10_t1 then 'inline_main_printHex_14_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1' else 'inline_main_printHex_14_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x22), Register(0x21)], resolved: None }
15 22 21 
# 005cc Instruction { source: "if inline_main_printHex_14_inline_printHex_printHexDigit_10_t0 < inline_main_printHex_14_inline_printHex_printHexDigit_10_t1 then 'inline_main_printHex_14_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1' else 'inline_main_printHex_14_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2)], resolved: None }
71 15 06 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_14_inline_printHex_printHexDigit_10_t0 < inline_main_printHex_14_inline_printHex_printHexDigit_10_t1 then 'inline_main_printHex_14_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1' else 'inline_main_printHex_14_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_14_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }"] }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1
# inline_main_printHex_14_inline_printHex_printHexDigit_10_t4 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_t4 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_t5 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 005d0 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_t5 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x30=48)], resolved: None }
04 22 30 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_t3 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_t4 Add inline_main_printHex_14_inline_printHex_printHexDigit_10_t5
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 005d3 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_t3 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_t4 Add inline_main_printHex_14_inline_printHex_printHexDigit_10_t5\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
14 21 22 21 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c <- inline_main_printHex_14_inline_printHex_printHexDigit_10_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c <- inline_main_printHex_14_inline_printHex_printHexDigit_10_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t1 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t1 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# None <= call io_write0(inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 005d7 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x21)], resolved: None }
68 21 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t3 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t3 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# :inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# Some(inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 005d9 Instruction { source: "IoRead1", opcode: In1, args: [Register(0x22)], resolved: None }
61 22 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 005db Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x08=8)], resolved: None }
04 2c 08 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 005de Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x22), Register(0x2c), Register(0x22)], resolved: None }
1b 22 2c 22 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 005e2 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x00=0)], resolved: None }
04 2c 00 
# if inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 005e5 Instruction { source: "if inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x22), Register(0x2c)], resolved: None }
15 22 2c 
# 005e8 Instruction { source: "if inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2)], resolved: None }
72 f0 05 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1)], resolved: None }
# :inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# goto inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 005ec Instruction { source: "goto inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0)], resolved: None }
70 d9 05 00 
# :inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# goto inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush)], resolved: None }
# :inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 005f0 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x80=128)], resolved: None }
04 22 80 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 005f3 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x04=4)], resolved: None }
04 2c 04 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 005f6 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x2c), Register(0x21), Register(0x2c)], resolved: None }
1e 05 2c 21 2c 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 005fb Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x22), Register(0x2c), Register(0x22)], resolved: None }
1c 22 2c 22 
# None <= call io_write1(inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 005ff Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x22)], resolved: None }
69 22 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00601 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x80=128)], resolved: None }
04 2c 80 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 00604 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x0f=15)], resolved: None }
04 22 0f 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 00607 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
1b 21 22 21 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 0060b Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x2c), Register(0x21), Register(0x21)], resolved: None }
1c 2c 21 21 
# None <= call io_write1(inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 0060f Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x21)], resolved: None }
69 21 
# goto inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char)], resolved: None }
# :inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# goto inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_function_end_putc)], resolved: None }
# :inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_function_end_putc
# goto inline_main_printHex_14_inline_printHex_printHexDigit_10_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 00611 Instruction { source: "goto inline_main_printHex_14_inline_printHex_printHexDigit_10_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_10_printHexDigit_if_end_0)], resolved: None }
70 62 06 00 
# :inline_main_printHex_14_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2
# inline_main_printHex_14_inline_printHex_printHexDigit_10_t6 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_t6 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_t7 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 00615 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_t7 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x0a=10)], resolved: None }
04 22 0a 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_a <- inline_main_printHex_14_inline_printHex_printHexDigit_10_t6 Subtract inline_main_printHex_14_inline_printHex_printHexDigit_10_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 00618 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_a <- inline_main_printHex_14_inline_printHex_printHexDigit_10_t6 Subtract inline_main_printHex_14_inline_printHex_printHexDigit_10_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0x22), Register(0x00)], resolved: None }
0b 22 00 
# 0061b Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_a <- inline_main_printHex_14_inline_printHex_printHexDigit_10_t6 Subtract inline_main_printHex_14_inline_printHex_printHexDigit_10_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 0061d Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_a <- inline_main_printHex_14_inline_printHex_printHexDigit_10_t6 Subtract inline_main_printHex_14_inline_printHex_printHexDigit_10_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x21), Register(0x00), Register(0x21)], resolved: None }
14 21 00 21 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_t8 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_t8 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_t9 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 00621 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_t9 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x41=65)], resolved: None }
04 22 41 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_a <- inline_main_printHex_14_inline_printHex_printHexDigit_10_t8 Add inline_main_printHex_14_inline_printHex_printHexDigit_10_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 00624 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_a <- inline_main_printHex_14_inline_printHex_printHexDigit_10_t8 Add inline_main_printHex_14_inline_printHex_printHexDigit_10_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
14 21 22 21 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_t11 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_t11 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c <- inline_main_printHex_14_inline_printHex_printHexDigit_10_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c <- inline_main_printHex_14_inline_printHex_printHexDigit_10_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t1 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t1 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# None <= call io_write0(inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00628 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x21)], resolved: None }
68 21 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t3 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t3 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# :inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# Some(inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 0062a Instruction { source: "IoRead1", opcode: In1, args: [Register(0x22)], resolved: None }
61 22 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 0062c Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x08=8)], resolved: None }
04 2c 08 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 0062f Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x22), Register(0x2c), Register(0x22)], resolved: None }
1b 22 2c 22 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00633 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x00=0)], resolved: None }
04 2c 00 
# if inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 00636 Instruction { source: "if inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x22), Register(0x2c)], resolved: None }
15 22 2c 
# 00639 Instruction { source: "if inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2)], resolved: None }
72 41 06 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1)], resolved: None }
# :inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# goto inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 0063d Instruction { source: "goto inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0)], resolved: None }
70 2a 06 00 
# :inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# goto inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush)], resolved: None }
# :inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00641 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x80=128)], resolved: None }
04 22 80 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 00644 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x04=4)], resolved: None }
04 2c 04 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 00647 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x2c), Register(0x21), Register(0x2c)], resolved: None }
1e 05 2c 21 2c 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 0064c Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x22), Register(0x2c), Register(0x22)], resolved: None }
1c 22 2c 22 
# None <= call io_write1(inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 00650 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x22)], resolved: None }
69 22 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00652 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x80=128)], resolved: None }
04 2c 80 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 00655 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x0f=15)], resolved: None }
04 22 0f 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 00658 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
1b 21 22 21 
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 0065c Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x2c), Register(0x21), Register(0x21)], resolved: None }
1c 2c 21 21 
# None <= call io_write1(inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 00660 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x21)], resolved: None }
69 21 
# goto inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char)], resolved: None }
# :inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# goto inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_function_end_putc)], resolved: None }
# :inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_function_end_putc
# :inline_main_printHex_14_inline_printHex_printHexDigit_10_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_printHexDigit_if_end_0
# goto inline_main_printHex_14_inline_printHex_printHexDigit_10_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_14_inline_printHex_printHexDigit_10_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_10_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_14_inline_printHex_printHexDigit_10_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_14_inline_printHex_printHexDigit_10_function_end_printHexDigit
# inline_main_printHex_14_t6 <- inline_main_printHex_14_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_t6 <- inline_main_printHex_14_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_14_t8 <- inline_main_printHex_14_b U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_t8 <- inline_main_printHex_14_b U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_14_t9 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 00662 Instruction { source: "inline_main_printHex_14_t9 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x10=16)], resolved: None }
04 21 10 
# inline_main_printHex_14_t7 <- inline_main_printHex_14_t8 Multiply inline_main_printHex_14_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))"] }
# 00665 Instruction { source: "inline_main_printHex_14_t7 <- inline_main_printHex_14_t8 Multiply inline_main_printHex_14_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\"] }", opcode: Mul8_8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
10 20 21 20 
# inline_main_printHex_14_a <- inline_main_printHex_14_t6 Subtract inline_main_printHex_14_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))"] }
# 00669 Instruction { source: "inline_main_printHex_14_a <- inline_main_printHex_14_t6 Subtract inline_main_printHex_14_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Copy8, args: [Register(0x20), Register(0x00)], resolved: None }
0b 20 00 
# 0066c Instruction { source: "inline_main_printHex_14_a <- inline_main_printHex_14_t6 Subtract inline_main_printHex_14_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 0066e Instruction { source: "inline_main_printHex_14_a <- inline_main_printHex_14_t6 Subtract inline_main_printHex_14_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Add8NoCarryIn, args: [Register(0x18), Register(0x00), Register(0x18)], resolved: None }
14 18 00 18 
# goto inline_main_printHex_14_printHex_if_end_0
# 	SourceContext { contexts: [] }
# 00672 Instruction { source: "goto inline_main_printHex_14_printHex_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_printHex_if_end_0)], resolved: None }
70 b3 06 00 
# :inline_main_printHex_14_printHex_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_14_printHex_if_else_0_2
# inline_main_printHex_14_t11 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Number(U8, 48)", "Number(U8, 48)"] }
# 00676 Instruction { source: "inline_main_printHex_14_t11 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x30=48)], resolved: None }
04 20 30 
# inline_main_printHex_14_inline_printHex_putc_7_c <- inline_main_printHex_14_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_putc_7_c <- inline_main_printHex_14_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_14_inline_printHex_putc_7_t1 <- inline_main_printHex_14_inline_printHex_putc_7_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_putc_7_t1 <- inline_main_printHex_14_inline_printHex_putc_7_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# None <= call io_write0(inline_main_printHex_14_inline_printHex_putc_7_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00679 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x20)], resolved: None }
68 20 
# inline_main_printHex_14_inline_printHex_putc_7_t3 <- inline_main_printHex_14_inline_printHex_putc_7_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_putc_7_t3 <- inline_main_printHex_14_inline_printHex_putc_7_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c <- inline_main_printHex_14_inline_printHex_putc_7_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c <- inline_main_printHex_14_inline_printHex_putc_7_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# :inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# Some(inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 0067b Instruction { source: "IoRead1", opcode: In1, args: [Register(0x21)], resolved: None }
61 21 
# inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 0067d Instruction { source: "inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x08=8)], resolved: None }
04 22 08 
# inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 00680 Instruction { source: "inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
1b 21 22 21 
# inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00684 Instruction { source: "inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x00=0)], resolved: None }
04 22 00 
# if inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 00687 Instruction { source: "if inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x21), Register(0x22)], resolved: None }
15 21 22 
# 0068a Instruction { source: "if inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2)], resolved: None }
72 92 06 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1)], resolved: None }
# :inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# goto inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 0068e Instruction { source: "goto inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0)], resolved: None }
70 7b 06 00 
# :inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# goto inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush)], resolved: None }
# :inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00692 Instruction { source: "inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x80=128)], resolved: None }
04 21 80 
# inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 00695 Instruction { source: "inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x04=4)], resolved: None }
04 22 04 
# inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 00698 Instruction { source: "inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x22), Register(0x20), Register(0x22)], resolved: None }
1e 05 22 20 22 
# inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 0069d Instruction { source: "inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
1c 21 22 21 
# None <= call io_write1(inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 006a1 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x21)], resolved: None }
69 21 
# inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 006a3 Instruction { source: "inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x80=128)], resolved: None }
04 22 80 
# inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 006a6 Instruction { source: "inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x0f=15)], resolved: None }
04 21 0f 
# inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 006a9 Instruction { source: "inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
1b 20 21 20 
# inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 006ad Instruction { source: "inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x22), Register(0x20), Register(0x20)], resolved: None }
1c 22 20 20 
# None <= call io_write1(inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 006b1 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x20)], resolved: None }
69 20 
# goto inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_function_end_lcd_write_char)], resolved: None }
# :inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_printHex_14_inline_printHex_putc_7_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# goto inline_main_printHex_14_inline_printHex_putc_7_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_14_inline_printHex_putc_7_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_putc_7_function_end_putc)], resolved: None }
# :inline_main_printHex_14_inline_printHex_putc_7_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_14_inline_printHex_putc_7_function_end_putc
# :inline_main_printHex_14_printHex_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_14_printHex_if_end_0
# inline_main_printHex_14_t13 <- inline_main_printHex_14_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_t13 <- inline_main_printHex_14_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_a <- inline_main_printHex_14_t13 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_a <- inline_main_printHex_14_t13 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_t0 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_t0 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 006b3 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0a=10)], resolved: None }
04 20 0a 
# if inline_main_printHex_14_inline_printHex_printHexDigit_11_t0 < inline_main_printHex_14_inline_printHex_printHexDigit_11_t1 then 'inline_main_printHex_14_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1' else 'inline_main_printHex_14_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 006b6 Instruction { source: "if inline_main_printHex_14_inline_printHex_printHexDigit_11_t0 < inline_main_printHex_14_inline_printHex_printHexDigit_11_t1 then 'inline_main_printHex_14_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1' else 'inline_main_printHex_14_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x20), Register(0x18)], resolved: None }
15 20 18 
# 006b9 Instruction { source: "if inline_main_printHex_14_inline_printHex_printHexDigit_11_t0 < inline_main_printHex_14_inline_printHex_printHexDigit_11_t1 then 'inline_main_printHex_14_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1' else 'inline_main_printHex_14_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2)], resolved: None }
71 02 07 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_14_inline_printHex_printHexDigit_11_t0 < inline_main_printHex_14_inline_printHex_printHexDigit_11_t1 then 'inline_main_printHex_14_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1' else 'inline_main_printHex_14_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_14_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }"] }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1
# inline_main_printHex_14_inline_printHex_printHexDigit_11_t4 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_t4 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_t5 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 006bd Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_t5 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x30=48)], resolved: None }
04 20 30 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_t3 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_t4 Add inline_main_printHex_14_inline_printHex_printHexDigit_11_t5
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 006c0 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_t3 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_t4 Add inline_main_printHex_14_inline_printHex_printHexDigit_11_t5\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x18), Register(0x20), Register(0x18)], resolved: None }
14 18 20 18 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c <- inline_main_printHex_14_inline_printHex_printHexDigit_11_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c <- inline_main_printHex_14_inline_printHex_printHexDigit_11_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t1 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t1 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# None <= call io_write0(inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 006c4 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t3 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t3 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# :inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# Some(inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 006c6 Instruction { source: "IoRead1", opcode: In1, args: [Register(0x20)], resolved: None }
61 20 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 006c8 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x08=8)], resolved: None }
04 21 08 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 006cb Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
1b 20 21 20 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 006cf Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x00=0)], resolved: None }
04 21 00 
# if inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 006d2 Instruction { source: "if inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x20), Register(0x21)], resolved: None }
15 20 21 
# 006d5 Instruction { source: "if inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2)], resolved: None }
72 dd 06 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1)], resolved: None }
# :inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# goto inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 006d9 Instruction { source: "goto inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0)], resolved: None }
70 c6 06 00 
# :inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# goto inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush)], resolved: None }
# :inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 006dd Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x80=128)], resolved: None }
04 20 80 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 006e0 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x04=4)], resolved: None }
04 21 04 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 006e3 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x21), Register(0x18), Register(0x21)], resolved: None }
1e 05 21 18 21 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 006e8 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
1c 20 21 20 
# None <= call io_write1(inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 006ec Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x20)], resolved: None }
69 20 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 006ee Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x80=128)], resolved: None }
04 21 80 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 006f1 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0f=15)], resolved: None }
04 20 0f 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 006f4 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x18), Register(0x20), Register(0x18)], resolved: None }
1b 18 20 18 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 006f8 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x21), Register(0x18), Register(0x18)], resolved: None }
1c 21 18 18 
# None <= call io_write1(inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 006fc Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x18)], resolved: None }
69 18 
# goto inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char)], resolved: None }
# :inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# goto inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_function_end_putc)], resolved: None }
# :inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_function_end_putc
# goto inline_main_printHex_14_inline_printHex_printHexDigit_11_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 006fe Instruction { source: "goto inline_main_printHex_14_inline_printHex_printHexDigit_11_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_11_printHexDigit_if_end_0)], resolved: None }
70 4f 07 00 
# :inline_main_printHex_14_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2
# inline_main_printHex_14_inline_printHex_printHexDigit_11_t6 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_t6 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_t7 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 00702 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_t7 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0a=10)], resolved: None }
04 20 0a 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_a <- inline_main_printHex_14_inline_printHex_printHexDigit_11_t6 Subtract inline_main_printHex_14_inline_printHex_printHexDigit_11_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 00705 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_a <- inline_main_printHex_14_inline_printHex_printHexDigit_11_t6 Subtract inline_main_printHex_14_inline_printHex_printHexDigit_11_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0x20), Register(0x00)], resolved: None }
0b 20 00 
# 00708 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_a <- inline_main_printHex_14_inline_printHex_printHexDigit_11_t6 Subtract inline_main_printHex_14_inline_printHex_printHexDigit_11_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 0070a Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_a <- inline_main_printHex_14_inline_printHex_printHexDigit_11_t6 Subtract inline_main_printHex_14_inline_printHex_printHexDigit_11_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x18), Register(0x00), Register(0x18)], resolved: None }
14 18 00 18 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_t8 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_t8 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_t9 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 0070e Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_t9 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x41=65)], resolved: None }
04 20 41 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_a <- inline_main_printHex_14_inline_printHex_printHexDigit_11_t8 Add inline_main_printHex_14_inline_printHex_printHexDigit_11_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 00711 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_a <- inline_main_printHex_14_inline_printHex_printHexDigit_11_t8 Add inline_main_printHex_14_inline_printHex_printHexDigit_11_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x18), Register(0x20), Register(0x18)], resolved: None }
14 18 20 18 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_t11 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_t11 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c <- inline_main_printHex_14_inline_printHex_printHexDigit_11_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c <- inline_main_printHex_14_inline_printHex_printHexDigit_11_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t1 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t1 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# None <= call io_write0(inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00715 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t3 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t3 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# :inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# Some(inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 00717 Instruction { source: "IoRead1", opcode: In1, args: [Register(0x20)], resolved: None }
61 20 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 00719 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x08=8)], resolved: None }
04 21 08 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 0071c Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
1b 20 21 20 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00720 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x00=0)], resolved: None }
04 21 00 
# if inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 00723 Instruction { source: "if inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x20), Register(0x21)], resolved: None }
15 20 21 
# 00726 Instruction { source: "if inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2)], resolved: None }
72 2e 07 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1)], resolved: None }
# :inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# goto inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 0072a Instruction { source: "goto inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0)], resolved: None }
70 17 07 00 
# :inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# goto inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush)], resolved: None }
# :inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 0072e Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x80=128)], resolved: None }
04 20 80 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 00731 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x04=4)], resolved: None }
04 21 04 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 00734 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x21), Register(0x18), Register(0x21)], resolved: None }
1e 05 21 18 21 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 00739 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
1c 20 21 20 
# None <= call io_write1(inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 0073d Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x20)], resolved: None }
69 20 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 0073f Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x80=128)], resolved: None }
04 21 80 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 00742 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0f=15)], resolved: None }
04 20 0f 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 00745 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x18), Register(0x20), Register(0x18)], resolved: None }
1b 18 20 18 
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 00749 Instruction { source: "inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x21), Register(0x18), Register(0x18)], resolved: None }
1c 21 18 18 
# None <= call io_write1(inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 0074d Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x18)], resolved: None }
69 18 
# goto inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char)], resolved: None }
# :inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# goto inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_function_end_putc)], resolved: None }
# :inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_function_end_putc
# :inline_main_printHex_14_inline_printHex_printHexDigit_11_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_printHexDigit_if_end_0
# goto inline_main_printHex_14_inline_printHex_printHexDigit_11_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_14_inline_printHex_printHexDigit_11_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_inline_printHex_printHexDigit_11_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_14_inline_printHex_printHexDigit_11_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_14_inline_printHex_printHexDigit_11_function_end_printHexDigit
# goto inline_main_printHex_14_function_end_printHex
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_14_function_end_printHex\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_14_function_end_printHex)], resolved: None }
# :inline_main_printHex_14_function_end_printHex
# 	SourceContext { contexts: [] }
# inline_main_printHex_14_function_end_printHex
# t43 <- addr[0x01..0x02] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] })", "Index(\"addr\", Number(USIZE, 1))", "Index(\"addr\", Number(USIZE, 1))"] }
# 0074f Instruction { source: "t43 <- addr[0x01..0x02] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] })\", \"Index(\\\"addr\\\", Number(USIZE, 1))\", \"Index(\\\"addr\\\", Number(USIZE, 1))\"] }", opcode: Copy8, args: [Register(0x15), Register(0x40)], resolved: None }
0b 15 40 
# inline_main_printHex_15_a <- t43 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] })"] }
# 00752 Instruction { source: "inline_main_printHex_15_a <- t43 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] })\"] }", opcode: Copy8, args: [Register(0x40), Register(0x18)], resolved: None }
0b 40 18 
# inline_main_printHex_15_t0 <- inline_main_printHex_15_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_t0 <- inline_main_printHex_15_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_15_t1 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Number(U8, 15)", "Number(U8, 15)"] }
# 00755 Instruction { source: "inline_main_printHex_15_t1 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0f=15)], resolved: None }
04 20 0f 
# if inline_main_printHex_15_t0 > inline_main_printHex_15_t1 then 'inline_main_printHex_15_printHex_if_true_0_1' else 'inline_main_printHex_15_printHex_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }"] }
# 00758 Instruction { source: "if inline_main_printHex_15_t0 > inline_main_printHex_15_t1 then 'inline_main_printHex_15_printHex_if_true_0_1' else 'inline_main_printHex_15_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: Cmp8, args: [Register(0x18), Register(0x20)], resolved: None }
15 18 20 
# 0075b Instruction { source: "if inline_main_printHex_15_t0 > inline_main_printHex_15_t1 then 'inline_main_printHex_15_printHex_if_true_0_1' else 'inline_main_printHex_15_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_15_printHex_if_else_0_2)], resolved: None }
71 19 08 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_15_t0 > inline_main_printHex_15_t1 then 'inline_main_printHex_15_printHex_if_true_0_1' else 'inline_main_printHex_15_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_printHex_if_true_0_1)], resolved: None }
# :inline_main_printHex_15_printHex_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }"] }
# inline_main_printHex_15_printHex_if_true_0_1
# inline_main_printHex_15_t2 <- inline_main_printHex_15_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_t2 <- inline_main_printHex_15_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_15_t3 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 0075f Instruction { source: "inline_main_printHex_15_t3 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x10=16)], resolved: None }
04 20 10 
# inline_main_printHex_15_b <- inline_main_printHex_15_t2 Divide inline_main_printHex_15_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))"] }
# 00762 Instruction { source: "inline_main_printHex_15_b <- inline_main_printHex_15_t2 Divide inline_main_printHex_15_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\"] }", opcode: Divide8, args: [Register(0x18), Register(0x20), Register(0x20)], resolved: None }
17 18 20 20 
# inline_main_printHex_15_t5 <- inline_main_printHex_15_b U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_t5 <- inline_main_printHex_15_b U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_a <- inline_main_printHex_15_t5 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })"] }
# 00766 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_a <- inline_main_printHex_15_t5 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy8, args: [Register(0x20), Register(0x21)], resolved: None }
0b 20 21 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_t0 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_t0 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 00769 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x0a=10)], resolved: None }
04 22 0a 
# if inline_main_printHex_15_inline_printHex_printHexDigit_10_t0 < inline_main_printHex_15_inline_printHex_printHexDigit_10_t1 then 'inline_main_printHex_15_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1' else 'inline_main_printHex_15_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 0076c Instruction { source: "if inline_main_printHex_15_inline_printHex_printHexDigit_10_t0 < inline_main_printHex_15_inline_printHex_printHexDigit_10_t1 then 'inline_main_printHex_15_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1' else 'inline_main_printHex_15_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x22), Register(0x21)], resolved: None }
15 22 21 
# 0076f Instruction { source: "if inline_main_printHex_15_inline_printHex_printHexDigit_10_t0 < inline_main_printHex_15_inline_printHex_printHexDigit_10_t1 then 'inline_main_printHex_15_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1' else 'inline_main_printHex_15_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2)], resolved: None }
71 b8 07 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_15_inline_printHex_printHexDigit_10_t0 < inline_main_printHex_15_inline_printHex_printHexDigit_10_t1 then 'inline_main_printHex_15_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1' else 'inline_main_printHex_15_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_15_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }"] }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1
# inline_main_printHex_15_inline_printHex_printHexDigit_10_t4 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_t4 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_t5 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 00773 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_t5 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x30=48)], resolved: None }
04 22 30 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_t3 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_t4 Add inline_main_printHex_15_inline_printHex_printHexDigit_10_t5
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 00776 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_t3 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_t4 Add inline_main_printHex_15_inline_printHex_printHexDigit_10_t5\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
14 21 22 21 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c <- inline_main_printHex_15_inline_printHex_printHexDigit_10_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c <- inline_main_printHex_15_inline_printHex_printHexDigit_10_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t1 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t1 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# None <= call io_write0(inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 0077a Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x21)], resolved: None }
68 21 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t3 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t3 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# :inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# Some(inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 0077c Instruction { source: "IoRead1", opcode: In1, args: [Register(0x22)], resolved: None }
61 22 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 0077e Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x08=8)], resolved: None }
04 2c 08 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 00781 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x22), Register(0x2c), Register(0x22)], resolved: None }
1b 22 2c 22 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00785 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x00=0)], resolved: None }
04 2c 00 
# if inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 00788 Instruction { source: "if inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x22), Register(0x2c)], resolved: None }
15 22 2c 
# 0078b Instruction { source: "if inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2)], resolved: None }
72 93 07 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1)], resolved: None }
# :inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# goto inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 0078f Instruction { source: "goto inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0)], resolved: None }
70 7c 07 00 
# :inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# goto inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush)], resolved: None }
# :inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00793 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x80=128)], resolved: None }
04 22 80 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 00796 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x04=4)], resolved: None }
04 2c 04 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 00799 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x2c), Register(0x21), Register(0x2c)], resolved: None }
1e 05 2c 21 2c 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 0079e Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x22), Register(0x2c), Register(0x22)], resolved: None }
1c 22 2c 22 
# None <= call io_write1(inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 007a2 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x22)], resolved: None }
69 22 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 007a4 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x80=128)], resolved: None }
04 2c 80 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 007a7 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x0f=15)], resolved: None }
04 22 0f 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 007aa Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
1b 21 22 21 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 007ae Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x2c), Register(0x21), Register(0x21)], resolved: None }
1c 2c 21 21 
# None <= call io_write1(inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 007b2 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x21)], resolved: None }
69 21 
# goto inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char)], resolved: None }
# :inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# goto inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_function_end_putc)], resolved: None }
# :inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_function_end_putc
# goto inline_main_printHex_15_inline_printHex_printHexDigit_10_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 007b4 Instruction { source: "goto inline_main_printHex_15_inline_printHex_printHexDigit_10_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_10_printHexDigit_if_end_0)], resolved: None }
70 05 08 00 
# :inline_main_printHex_15_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2
# inline_main_printHex_15_inline_printHex_printHexDigit_10_t6 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_t6 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_t7 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 007b8 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_t7 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x0a=10)], resolved: None }
04 22 0a 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_a <- inline_main_printHex_15_inline_printHex_printHexDigit_10_t6 Subtract inline_main_printHex_15_inline_printHex_printHexDigit_10_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 007bb Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_a <- inline_main_printHex_15_inline_printHex_printHexDigit_10_t6 Subtract inline_main_printHex_15_inline_printHex_printHexDigit_10_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0x22), Register(0x00)], resolved: None }
0b 22 00 
# 007be Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_a <- inline_main_printHex_15_inline_printHex_printHexDigit_10_t6 Subtract inline_main_printHex_15_inline_printHex_printHexDigit_10_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 007c0 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_a <- inline_main_printHex_15_inline_printHex_printHexDigit_10_t6 Subtract inline_main_printHex_15_inline_printHex_printHexDigit_10_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x21), Register(0x00), Register(0x21)], resolved: None }
14 21 00 21 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_t8 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_t8 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_t9 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 007c4 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_t9 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x41=65)], resolved: None }
04 22 41 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_a <- inline_main_printHex_15_inline_printHex_printHexDigit_10_t8 Add inline_main_printHex_15_inline_printHex_printHexDigit_10_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 007c7 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_a <- inline_main_printHex_15_inline_printHex_printHexDigit_10_t8 Add inline_main_printHex_15_inline_printHex_printHexDigit_10_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
14 21 22 21 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_t11 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_t11 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c <- inline_main_printHex_15_inline_printHex_printHexDigit_10_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c <- inline_main_printHex_15_inline_printHex_printHexDigit_10_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t1 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t1 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# None <= call io_write0(inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 007cb Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x21)], resolved: None }
68 21 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t3 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t3 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# :inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# Some(inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 007cd Instruction { source: "IoRead1", opcode: In1, args: [Register(0x22)], resolved: None }
61 22 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 007cf Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x08=8)], resolved: None }
04 2c 08 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 007d2 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x22), Register(0x2c), Register(0x22)], resolved: None }
1b 22 2c 22 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 007d6 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x00=0)], resolved: None }
04 2c 00 
# if inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 007d9 Instruction { source: "if inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x22), Register(0x2c)], resolved: None }
15 22 2c 
# 007dc Instruction { source: "if inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2)], resolved: None }
72 e4 07 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1)], resolved: None }
# :inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# goto inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 007e0 Instruction { source: "goto inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0)], resolved: None }
70 cd 07 00 
# :inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# goto inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush)], resolved: None }
# :inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 007e4 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x80=128)], resolved: None }
04 22 80 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 007e7 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x04=4)], resolved: None }
04 2c 04 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 007ea Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x2c), Register(0x21), Register(0x2c)], resolved: None }
1e 05 2c 21 2c 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 007ef Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x22), Register(0x2c), Register(0x22)], resolved: None }
1c 22 2c 22 
# None <= call io_write1(inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 007f3 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x22)], resolved: None }
69 22 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 007f5 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x80=128)], resolved: None }
04 2c 80 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 007f8 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x0f=15)], resolved: None }
04 22 0f 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 007fb Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
1b 21 22 21 
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 007ff Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x2c), Register(0x21), Register(0x21)], resolved: None }
1c 2c 21 21 
# None <= call io_write1(inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 00803 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x21)], resolved: None }
69 21 
# goto inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char)], resolved: None }
# :inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# goto inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_function_end_putc)], resolved: None }
# :inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_function_end_putc
# :inline_main_printHex_15_inline_printHex_printHexDigit_10_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_printHexDigit_if_end_0
# goto inline_main_printHex_15_inline_printHex_printHexDigit_10_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_15_inline_printHex_printHexDigit_10_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_10_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_15_inline_printHex_printHexDigit_10_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_15_inline_printHex_printHexDigit_10_function_end_printHexDigit
# inline_main_printHex_15_t6 <- inline_main_printHex_15_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_t6 <- inline_main_printHex_15_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_15_t8 <- inline_main_printHex_15_b U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_t8 <- inline_main_printHex_15_b U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_15_t9 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 00805 Instruction { source: "inline_main_printHex_15_t9 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x10=16)], resolved: None }
04 21 10 
# inline_main_printHex_15_t7 <- inline_main_printHex_15_t8 Multiply inline_main_printHex_15_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))"] }
# 00808 Instruction { source: "inline_main_printHex_15_t7 <- inline_main_printHex_15_t8 Multiply inline_main_printHex_15_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\"] }", opcode: Mul8_8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
10 20 21 20 
# inline_main_printHex_15_a <- inline_main_printHex_15_t6 Subtract inline_main_printHex_15_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))"] }
# 0080c Instruction { source: "inline_main_printHex_15_a <- inline_main_printHex_15_t6 Subtract inline_main_printHex_15_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Copy8, args: [Register(0x20), Register(0x00)], resolved: None }
0b 20 00 
# 0080f Instruction { source: "inline_main_printHex_15_a <- inline_main_printHex_15_t6 Subtract inline_main_printHex_15_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00811 Instruction { source: "inline_main_printHex_15_a <- inline_main_printHex_15_t6 Subtract inline_main_printHex_15_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Add8NoCarryIn, args: [Register(0x18), Register(0x00), Register(0x18)], resolved: None }
14 18 00 18 
# goto inline_main_printHex_15_printHex_if_end_0
# 	SourceContext { contexts: [] }
# 00815 Instruction { source: "goto inline_main_printHex_15_printHex_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_printHex_if_end_0)], resolved: None }
70 56 08 00 
# :inline_main_printHex_15_printHex_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_15_printHex_if_else_0_2
# inline_main_printHex_15_t11 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Number(U8, 48)", "Number(U8, 48)"] }
# 00819 Instruction { source: "inline_main_printHex_15_t11 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x30=48)], resolved: None }
04 20 30 
# inline_main_printHex_15_inline_printHex_putc_7_c <- inline_main_printHex_15_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_putc_7_c <- inline_main_printHex_15_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_15_inline_printHex_putc_7_t1 <- inline_main_printHex_15_inline_printHex_putc_7_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_putc_7_t1 <- inline_main_printHex_15_inline_printHex_putc_7_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# None <= call io_write0(inline_main_printHex_15_inline_printHex_putc_7_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 0081c Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x20)], resolved: None }
68 20 
# inline_main_printHex_15_inline_printHex_putc_7_t3 <- inline_main_printHex_15_inline_printHex_putc_7_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_putc_7_t3 <- inline_main_printHex_15_inline_printHex_putc_7_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c <- inline_main_printHex_15_inline_printHex_putc_7_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c <- inline_main_printHex_15_inline_printHex_putc_7_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# :inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# Some(inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 0081e Instruction { source: "IoRead1", opcode: In1, args: [Register(0x21)], resolved: None }
61 21 
# inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 00820 Instruction { source: "inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x08=8)], resolved: None }
04 22 08 
# inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 00823 Instruction { source: "inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
1b 21 22 21 
# inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00827 Instruction { source: "inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x00=0)], resolved: None }
04 22 00 
# if inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 0082a Instruction { source: "if inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x21), Register(0x22)], resolved: None }
15 21 22 
# 0082d Instruction { source: "if inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2)], resolved: None }
72 35 08 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1)], resolved: None }
# :inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# goto inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 00831 Instruction { source: "goto inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0)], resolved: None }
70 1e 08 00 
# :inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# goto inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush)], resolved: None }
# :inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00835 Instruction { source: "inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x80=128)], resolved: None }
04 21 80 
# inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 00838 Instruction { source: "inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x04=4)], resolved: None }
04 22 04 
# inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 0083b Instruction { source: "inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x22), Register(0x20), Register(0x22)], resolved: None }
1e 05 22 20 22 
# inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 00840 Instruction { source: "inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
1c 21 22 21 
# None <= call io_write1(inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 00844 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x21)], resolved: None }
69 21 
# inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00846 Instruction { source: "inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x80=128)], resolved: None }
04 22 80 
# inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 00849 Instruction { source: "inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x0f=15)], resolved: None }
04 21 0f 
# inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 0084c Instruction { source: "inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
1b 20 21 20 
# inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 00850 Instruction { source: "inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x22), Register(0x20), Register(0x20)], resolved: None }
1c 22 20 20 
# None <= call io_write1(inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 00854 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x20)], resolved: None }
69 20 
# goto inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_function_end_lcd_write_char)], resolved: None }
# :inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_printHex_15_inline_printHex_putc_7_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# goto inline_main_printHex_15_inline_printHex_putc_7_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_15_inline_printHex_putc_7_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_putc_7_function_end_putc)], resolved: None }
# :inline_main_printHex_15_inline_printHex_putc_7_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_15_inline_printHex_putc_7_function_end_putc
# :inline_main_printHex_15_printHex_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_15_printHex_if_end_0
# inline_main_printHex_15_t13 <- inline_main_printHex_15_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_t13 <- inline_main_printHex_15_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_a <- inline_main_printHex_15_t13 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_a <- inline_main_printHex_15_t13 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_t0 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_t0 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 00856 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0a=10)], resolved: None }
04 20 0a 
# if inline_main_printHex_15_inline_printHex_printHexDigit_11_t0 < inline_main_printHex_15_inline_printHex_printHexDigit_11_t1 then 'inline_main_printHex_15_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1' else 'inline_main_printHex_15_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 00859 Instruction { source: "if inline_main_printHex_15_inline_printHex_printHexDigit_11_t0 < inline_main_printHex_15_inline_printHex_printHexDigit_11_t1 then 'inline_main_printHex_15_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1' else 'inline_main_printHex_15_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x20), Register(0x18)], resolved: None }
15 20 18 
# 0085c Instruction { source: "if inline_main_printHex_15_inline_printHex_printHexDigit_11_t0 < inline_main_printHex_15_inline_printHex_printHexDigit_11_t1 then 'inline_main_printHex_15_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1' else 'inline_main_printHex_15_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2)], resolved: None }
71 a5 08 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_15_inline_printHex_printHexDigit_11_t0 < inline_main_printHex_15_inline_printHex_printHexDigit_11_t1 then 'inline_main_printHex_15_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1' else 'inline_main_printHex_15_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_15_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }"] }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1
# inline_main_printHex_15_inline_printHex_printHexDigit_11_t4 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_t4 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_t5 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 00860 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_t5 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x30=48)], resolved: None }
04 20 30 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_t3 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_t4 Add inline_main_printHex_15_inline_printHex_printHexDigit_11_t5
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 00863 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_t3 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_t4 Add inline_main_printHex_15_inline_printHex_printHexDigit_11_t5\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x18), Register(0x20), Register(0x18)], resolved: None }
14 18 20 18 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c <- inline_main_printHex_15_inline_printHex_printHexDigit_11_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c <- inline_main_printHex_15_inline_printHex_printHexDigit_11_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t1 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t1 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# None <= call io_write0(inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00867 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t3 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t3 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# :inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# Some(inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 00869 Instruction { source: "IoRead1", opcode: In1, args: [Register(0x20)], resolved: None }
61 20 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 0086b Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x08=8)], resolved: None }
04 21 08 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 0086e Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
1b 20 21 20 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00872 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x00=0)], resolved: None }
04 21 00 
# if inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 00875 Instruction { source: "if inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x20), Register(0x21)], resolved: None }
15 20 21 
# 00878 Instruction { source: "if inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2)], resolved: None }
72 80 08 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1)], resolved: None }
# :inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# goto inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 0087c Instruction { source: "goto inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0)], resolved: None }
70 69 08 00 
# :inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# goto inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush)], resolved: None }
# :inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00880 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x80=128)], resolved: None }
04 20 80 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 00883 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x04=4)], resolved: None }
04 21 04 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 00886 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x21), Register(0x18), Register(0x21)], resolved: None }
1e 05 21 18 21 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 0088b Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
1c 20 21 20 
# None <= call io_write1(inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 0088f Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x20)], resolved: None }
69 20 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00891 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x80=128)], resolved: None }
04 21 80 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 00894 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0f=15)], resolved: None }
04 20 0f 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 00897 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x18), Register(0x20), Register(0x18)], resolved: None }
1b 18 20 18 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 0089b Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x21), Register(0x18), Register(0x18)], resolved: None }
1c 21 18 18 
# None <= call io_write1(inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 0089f Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x18)], resolved: None }
69 18 
# goto inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char)], resolved: None }
# :inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# goto inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_function_end_putc)], resolved: None }
# :inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_function_end_putc
# goto inline_main_printHex_15_inline_printHex_printHexDigit_11_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 008a1 Instruction { source: "goto inline_main_printHex_15_inline_printHex_printHexDigit_11_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_11_printHexDigit_if_end_0)], resolved: None }
70 f2 08 00 
# :inline_main_printHex_15_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2
# inline_main_printHex_15_inline_printHex_printHexDigit_11_t6 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_t6 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_t7 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 008a5 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_t7 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0a=10)], resolved: None }
04 20 0a 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_a <- inline_main_printHex_15_inline_printHex_printHexDigit_11_t6 Subtract inline_main_printHex_15_inline_printHex_printHexDigit_11_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 008a8 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_a <- inline_main_printHex_15_inline_printHex_printHexDigit_11_t6 Subtract inline_main_printHex_15_inline_printHex_printHexDigit_11_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0x20), Register(0x00)], resolved: None }
0b 20 00 
# 008ab Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_a <- inline_main_printHex_15_inline_printHex_printHexDigit_11_t6 Subtract inline_main_printHex_15_inline_printHex_printHexDigit_11_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 008ad Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_a <- inline_main_printHex_15_inline_printHex_printHexDigit_11_t6 Subtract inline_main_printHex_15_inline_printHex_printHexDigit_11_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x18), Register(0x00), Register(0x18)], resolved: None }
14 18 00 18 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_t8 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_t8 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_t9 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 008b1 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_t9 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x41=65)], resolved: None }
04 20 41 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_a <- inline_main_printHex_15_inline_printHex_printHexDigit_11_t8 Add inline_main_printHex_15_inline_printHex_printHexDigit_11_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 008b4 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_a <- inline_main_printHex_15_inline_printHex_printHexDigit_11_t8 Add inline_main_printHex_15_inline_printHex_printHexDigit_11_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x18), Register(0x20), Register(0x18)], resolved: None }
14 18 20 18 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_t11 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_t11 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c <- inline_main_printHex_15_inline_printHex_printHexDigit_11_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c <- inline_main_printHex_15_inline_printHex_printHexDigit_11_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t1 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t1 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# None <= call io_write0(inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 008b8 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t3 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t3 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# :inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# Some(inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 008ba Instruction { source: "IoRead1", opcode: In1, args: [Register(0x20)], resolved: None }
61 20 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 008bc Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x08=8)], resolved: None }
04 21 08 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 008bf Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
1b 20 21 20 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 008c3 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x00=0)], resolved: None }
04 21 00 
# if inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 008c6 Instruction { source: "if inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x20), Register(0x21)], resolved: None }
15 20 21 
# 008c9 Instruction { source: "if inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2)], resolved: None }
72 d1 08 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1)], resolved: None }
# :inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# goto inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 008cd Instruction { source: "goto inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0)], resolved: None }
70 ba 08 00 
# :inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# goto inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush)], resolved: None }
# :inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 008d1 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x80=128)], resolved: None }
04 20 80 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 008d4 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x04=4)], resolved: None }
04 21 04 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 008d7 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x21), Register(0x18), Register(0x21)], resolved: None }
1e 05 21 18 21 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 008dc Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
1c 20 21 20 
# None <= call io_write1(inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 008e0 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x20)], resolved: None }
69 20 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 008e2 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x80=128)], resolved: None }
04 21 80 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 008e5 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0f=15)], resolved: None }
04 20 0f 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 008e8 Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x18), Register(0x20), Register(0x18)], resolved: None }
1b 18 20 18 
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 008ec Instruction { source: "inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x21), Register(0x18), Register(0x18)], resolved: None }
1c 21 18 18 
# None <= call io_write1(inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 008f0 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x18)], resolved: None }
69 18 
# goto inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char)], resolved: None }
# :inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# goto inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_function_end_putc)], resolved: None }
# :inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_function_end_putc
# :inline_main_printHex_15_inline_printHex_printHexDigit_11_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_printHexDigit_if_end_0
# goto inline_main_printHex_15_inline_printHex_printHexDigit_11_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_15_inline_printHex_printHexDigit_11_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_inline_printHex_printHexDigit_11_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_15_inline_printHex_printHexDigit_11_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_15_inline_printHex_printHexDigit_11_function_end_printHexDigit
# goto inline_main_printHex_15_function_end_printHex
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_15_function_end_printHex\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_15_function_end_printHex)], resolved: None }
# :inline_main_printHex_15_function_end_printHex
# 	SourceContext { contexts: [] }
# inline_main_printHex_15_function_end_printHex
# t45 <- addr[0x00..0x01] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] })", "Index(\"addr\", Number(USIZE, 0))", "Index(\"addr\", Number(USIZE, 0))"] }
# 008f2 Instruction { source: "t45 <- addr[0x00..0x01] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] })\", \"Index(\\\"addr\\\", Number(USIZE, 0))\", \"Index(\\\"addr\\\", Number(USIZE, 0))\"] }", opcode: Copy8, args: [Register(0x14), Register(0x40)], resolved: None }
0b 14 40 
# inline_main_printHex_16_a <- t45 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] })"] }
# 008f5 Instruction { source: "inline_main_printHex_16_a <- t45 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] })\"] }", opcode: Copy8, args: [Register(0x40), Register(0x18)], resolved: None }
0b 40 18 
# inline_main_printHex_16_t0 <- inline_main_printHex_16_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_t0 <- inline_main_printHex_16_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_16_t1 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Number(U8, 15)", "Number(U8, 15)"] }
# 008f8 Instruction { source: "inline_main_printHex_16_t1 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0f=15)], resolved: None }
04 20 0f 
# if inline_main_printHex_16_t0 > inline_main_printHex_16_t1 then 'inline_main_printHex_16_printHex_if_true_0_1' else 'inline_main_printHex_16_printHex_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }"] }
# 008fb Instruction { source: "if inline_main_printHex_16_t0 > inline_main_printHex_16_t1 then 'inline_main_printHex_16_printHex_if_true_0_1' else 'inline_main_printHex_16_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: Cmp8, args: [Register(0x18), Register(0x20)], resolved: None }
15 18 20 
# 008fe Instruction { source: "if inline_main_printHex_16_t0 > inline_main_printHex_16_t1 then 'inline_main_printHex_16_printHex_if_true_0_1' else 'inline_main_printHex_16_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_16_printHex_if_else_0_2)], resolved: None }
71 bc 09 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_16_t0 > inline_main_printHex_16_t1 then 'inline_main_printHex_16_printHex_if_true_0_1' else 'inline_main_printHex_16_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_printHex_if_true_0_1)], resolved: None }
# :inline_main_printHex_16_printHex_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }"] }
# inline_main_printHex_16_printHex_if_true_0_1
# inline_main_printHex_16_t2 <- inline_main_printHex_16_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_t2 <- inline_main_printHex_16_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_16_t3 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 00902 Instruction { source: "inline_main_printHex_16_t3 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x10=16)], resolved: None }
04 20 10 
# inline_main_printHex_16_b <- inline_main_printHex_16_t2 Divide inline_main_printHex_16_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))"] }
# 00905 Instruction { source: "inline_main_printHex_16_b <- inline_main_printHex_16_t2 Divide inline_main_printHex_16_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\"] }", opcode: Divide8, args: [Register(0x18), Register(0x20), Register(0x20)], resolved: None }
17 18 20 20 
# inline_main_printHex_16_t5 <- inline_main_printHex_16_b U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_t5 <- inline_main_printHex_16_b U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_a <- inline_main_printHex_16_t5 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })"] }
# 00909 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_a <- inline_main_printHex_16_t5 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy8, args: [Register(0x20), Register(0x21)], resolved: None }
0b 20 21 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_t0 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_t0 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 0090c Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x0a=10)], resolved: None }
04 22 0a 
# if inline_main_printHex_16_inline_printHex_printHexDigit_10_t0 < inline_main_printHex_16_inline_printHex_printHexDigit_10_t1 then 'inline_main_printHex_16_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1' else 'inline_main_printHex_16_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 0090f Instruction { source: "if inline_main_printHex_16_inline_printHex_printHexDigit_10_t0 < inline_main_printHex_16_inline_printHex_printHexDigit_10_t1 then 'inline_main_printHex_16_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1' else 'inline_main_printHex_16_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x22), Register(0x21)], resolved: None }
15 22 21 
# 00912 Instruction { source: "if inline_main_printHex_16_inline_printHex_printHexDigit_10_t0 < inline_main_printHex_16_inline_printHex_printHexDigit_10_t1 then 'inline_main_printHex_16_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1' else 'inline_main_printHex_16_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2)], resolved: None }
71 5b 09 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_16_inline_printHex_printHexDigit_10_t0 < inline_main_printHex_16_inline_printHex_printHexDigit_10_t1 then 'inline_main_printHex_16_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1' else 'inline_main_printHex_16_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_16_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }"] }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_printHexDigit_if_true_0_1
# inline_main_printHex_16_inline_printHex_printHexDigit_10_t4 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_t4 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_t5 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 00916 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_t5 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x30=48)], resolved: None }
04 22 30 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_t3 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_t4 Add inline_main_printHex_16_inline_printHex_printHexDigit_10_t5
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 00919 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_t3 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_t4 Add inline_main_printHex_16_inline_printHex_printHexDigit_10_t5\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
14 21 22 21 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c <- inline_main_printHex_16_inline_printHex_printHexDigit_10_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c <- inline_main_printHex_16_inline_printHex_printHexDigit_10_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t1 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t1 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# None <= call io_write0(inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 0091d Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x21)], resolved: None }
68 21 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t3 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t3 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# :inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# Some(inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 0091f Instruction { source: "IoRead1", opcode: In1, args: [Register(0x22)], resolved: None }
61 22 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 00921 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x08=8)], resolved: None }
04 2c 08 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 00924 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x22), Register(0x2c), Register(0x22)], resolved: None }
1b 22 2c 22 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00928 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x00=0)], resolved: None }
04 2c 00 
# if inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 0092b Instruction { source: "if inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x22), Register(0x2c)], resolved: None }
15 22 2c 
# 0092e Instruction { source: "if inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2)], resolved: None }
72 36 09 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1)], resolved: None }
# :inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# goto inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 00932 Instruction { source: "goto inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0)], resolved: None }
70 1f 09 00 
# :inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# goto inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush)], resolved: None }
# :inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00936 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x80=128)], resolved: None }
04 22 80 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 00939 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x04=4)], resolved: None }
04 2c 04 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 0093c Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x2c), Register(0x21), Register(0x2c)], resolved: None }
1e 05 2c 21 2c 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 00941 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x22), Register(0x2c), Register(0x22)], resolved: None }
1c 22 2c 22 
# None <= call io_write1(inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 00945 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x22)], resolved: None }
69 22 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00947 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x80=128)], resolved: None }
04 2c 80 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 0094a Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x0f=15)], resolved: None }
04 22 0f 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 0094d Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
1b 21 22 21 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 00951 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x2c), Register(0x21), Register(0x21)], resolved: None }
1c 2c 21 21 
# None <= call io_write1(inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 00955 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x21)], resolved: None }
69 21 
# goto inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char)], resolved: None }
# :inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# goto inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_function_end_putc)], resolved: None }
# :inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_8_function_end_putc
# goto inline_main_printHex_16_inline_printHex_printHexDigit_10_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 00957 Instruction { source: "goto inline_main_printHex_16_inline_printHex_printHexDigit_10_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_10_printHexDigit_if_end_0)], resolved: None }
70 a8 09 00 
# :inline_main_printHex_16_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_printHexDigit_if_else_0_2
# inline_main_printHex_16_inline_printHex_printHexDigit_10_t6 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_t6 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_t7 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 0095b Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_t7 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x0a=10)], resolved: None }
04 22 0a 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_a <- inline_main_printHex_16_inline_printHex_printHexDigit_10_t6 Subtract inline_main_printHex_16_inline_printHex_printHexDigit_10_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 0095e Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_a <- inline_main_printHex_16_inline_printHex_printHexDigit_10_t6 Subtract inline_main_printHex_16_inline_printHex_printHexDigit_10_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0x22), Register(0x00)], resolved: None }
0b 22 00 
# 00961 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_a <- inline_main_printHex_16_inline_printHex_printHexDigit_10_t6 Subtract inline_main_printHex_16_inline_printHex_printHexDigit_10_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00963 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_a <- inline_main_printHex_16_inline_printHex_printHexDigit_10_t6 Subtract inline_main_printHex_16_inline_printHex_printHexDigit_10_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x21), Register(0x00), Register(0x21)], resolved: None }
14 21 00 21 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_t8 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_t8 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_t9 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 00967 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_t9 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x41=65)], resolved: None }
04 22 41 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_a <- inline_main_printHex_16_inline_printHex_printHexDigit_10_t8 Add inline_main_printHex_16_inline_printHex_printHexDigit_10_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 0096a Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_a <- inline_main_printHex_16_inline_printHex_printHexDigit_10_t8 Add inline_main_printHex_16_inline_printHex_printHexDigit_10_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
14 21 22 21 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_t11 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_t11 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c <- inline_main_printHex_16_inline_printHex_printHexDigit_10_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c <- inline_main_printHex_16_inline_printHex_printHexDigit_10_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t1 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t1 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# None <= call io_write0(inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 0096e Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x21)], resolved: None }
68 21 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t3 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t3 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# :inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# Some(inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 00970 Instruction { source: "IoRead1", opcode: In1, args: [Register(0x22)], resolved: None }
61 22 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 00972 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x08=8)], resolved: None }
04 2c 08 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 00975 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x22), Register(0x2c), Register(0x22)], resolved: None }
1b 22 2c 22 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00979 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x00=0)], resolved: None }
04 2c 00 
# if inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 0097c Instruction { source: "if inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x22), Register(0x2c)], resolved: None }
15 22 2c 
# 0097f Instruction { source: "if inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2)], resolved: None }
72 87 09 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1)], resolved: None }
# :inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# goto inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 00983 Instruction { source: "goto inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0)], resolved: None }
70 70 09 00 
# :inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# goto inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush)], resolved: None }
# :inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00987 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x80=128)], resolved: None }
04 22 80 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 0098a Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x04=4)], resolved: None }
04 2c 04 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 0098d Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x2c), Register(0x21), Register(0x2c)], resolved: None }
1e 05 2c 21 2c 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 00992 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x22), Register(0x2c), Register(0x22)], resolved: None }
1c 22 2c 22 
# None <= call io_write1(inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 00996 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x22)], resolved: None }
69 22 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00998 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x80=128)], resolved: None }
04 2c 80 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 0099b Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x0f=15)], resolved: None }
04 22 0f 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 0099e Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
1b 21 22 21 
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 009a2 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x2c), Register(0x21), Register(0x21)], resolved: None }
1c 2c 21 21 
# None <= call io_write1(inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 009a6 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x21)], resolved: None }
69 21 
# goto inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char)], resolved: None }
# :inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# goto inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_function_end_putc)], resolved: None }
# :inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_inline_printHexDigit_putc_9_function_end_putc
# :inline_main_printHex_16_inline_printHex_printHexDigit_10_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_printHexDigit_if_end_0
# goto inline_main_printHex_16_inline_printHex_printHexDigit_10_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_16_inline_printHex_printHexDigit_10_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_10_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_16_inline_printHex_printHexDigit_10_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_16_inline_printHex_printHexDigit_10_function_end_printHexDigit
# inline_main_printHex_16_t6 <- inline_main_printHex_16_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_t6 <- inline_main_printHex_16_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_16_t8 <- inline_main_printHex_16_b U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_t8 <- inline_main_printHex_16_b U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_16_t9 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 009a8 Instruction { source: "inline_main_printHex_16_t9 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x10=16)], resolved: None }
04 21 10 
# inline_main_printHex_16_t7 <- inline_main_printHex_16_t8 Multiply inline_main_printHex_16_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))"] }
# 009ab Instruction { source: "inline_main_printHex_16_t7 <- inline_main_printHex_16_t8 Multiply inline_main_printHex_16_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\"] }", opcode: Mul8_8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
10 20 21 20 
# inline_main_printHex_16_a <- inline_main_printHex_16_t6 Subtract inline_main_printHex_16_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))"] }
# 009af Instruction { source: "inline_main_printHex_16_a <- inline_main_printHex_16_t6 Subtract inline_main_printHex_16_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Copy8, args: [Register(0x20), Register(0x00)], resolved: None }
0b 20 00 
# 009b2 Instruction { source: "inline_main_printHex_16_a <- inline_main_printHex_16_t6 Subtract inline_main_printHex_16_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 009b4 Instruction { source: "inline_main_printHex_16_a <- inline_main_printHex_16_t6 Subtract inline_main_printHex_16_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Add8NoCarryIn, args: [Register(0x18), Register(0x00), Register(0x18)], resolved: None }
14 18 00 18 
# goto inline_main_printHex_16_printHex_if_end_0
# 	SourceContext { contexts: [] }
# 009b8 Instruction { source: "goto inline_main_printHex_16_printHex_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_printHex_if_end_0)], resolved: None }
70 f9 09 00 
# :inline_main_printHex_16_printHex_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_16_printHex_if_else_0_2
# inline_main_printHex_16_t11 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Number(U8, 48)", "Number(U8, 48)"] }
# 009bc Instruction { source: "inline_main_printHex_16_t11 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x30=48)], resolved: None }
04 20 30 
# inline_main_printHex_16_inline_printHex_putc_7_c <- inline_main_printHex_16_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 48)] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_putc_7_c <- inline_main_printHex_16_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 48)] })\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_16_inline_printHex_putc_7_t1 <- inline_main_printHex_16_inline_printHex_putc_7_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_putc_7_t1 <- inline_main_printHex_16_inline_printHex_putc_7_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# None <= call io_write0(inline_main_printHex_16_inline_printHex_putc_7_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 009bf Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x20)], resolved: None }
68 20 
# inline_main_printHex_16_inline_printHex_putc_7_t3 <- inline_main_printHex_16_inline_printHex_putc_7_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_putc_7_t3 <- inline_main_printHex_16_inline_printHex_putc_7_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c <- inline_main_printHex_16_inline_printHex_putc_7_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c <- inline_main_printHex_16_inline_printHex_putc_7_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# :inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# Some(inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 009c1 Instruction { source: "IoRead1", opcode: In1, args: [Register(0x21)], resolved: None }
61 21 
# inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 009c3 Instruction { source: "inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x08=8)], resolved: None }
04 22 08 
# inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 009c6 Instruction { source: "inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
1b 21 22 21 
# inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 009ca Instruction { source: "inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x00=0)], resolved: None }
04 22 00 
# if inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 009cd Instruction { source: "if inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x21), Register(0x22)], resolved: None }
15 21 22 
# 009d0 Instruction { source: "if inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2)], resolved: None }
72 d8 09 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1)], resolved: None }
# :inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# goto inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 009d4 Instruction { source: "goto inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0)], resolved: None }
70 c1 09 00 
# :inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# goto inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush)], resolved: None }
# :inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 009d8 Instruction { source: "inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x80=128)], resolved: None }
04 21 80 
# inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 009db Instruction { source: "inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x04=4)], resolved: None }
04 22 04 
# inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 009de Instruction { source: "inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x22), Register(0x20), Register(0x22)], resolved: None }
1e 05 22 20 22 
# inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 009e3 Instruction { source: "inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
1c 21 22 21 
# None <= call io_write1(inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 009e7 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x21)], resolved: None }
69 21 
# inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 009e9 Instruction { source: "inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x80=128)], resolved: None }
04 22 80 
# inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 009ec Instruction { source: "inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x0f=15)], resolved: None }
04 21 0f 
# inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 009ef Instruction { source: "inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
1b 20 21 20 
# inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 009f3 Instruction { source: "inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x22), Register(0x20), Register(0x20)], resolved: None }
1c 22 20 20 
# None <= call io_write1(inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 009f7 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x20)], resolved: None }
69 20 
# goto inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_function_end_lcd_write_char)], resolved: None }
# :inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_printHex_16_inline_printHex_putc_7_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# goto inline_main_printHex_16_inline_printHex_putc_7_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_16_inline_printHex_putc_7_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_putc_7_function_end_putc)], resolved: None }
# :inline_main_printHex_16_inline_printHex_putc_7_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_16_inline_printHex_putc_7_function_end_putc
# :inline_main_printHex_16_printHex_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_16_printHex_if_end_0
# inline_main_printHex_16_t13 <- inline_main_printHex_16_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_t13 <- inline_main_printHex_16_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_a <- inline_main_printHex_16_t13 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_a <- inline_main_printHex_16_t13 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_t0 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_t0 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 009f9 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0a=10)], resolved: None }
04 20 0a 
# if inline_main_printHex_16_inline_printHex_printHexDigit_11_t0 < inline_main_printHex_16_inline_printHex_printHexDigit_11_t1 then 'inline_main_printHex_16_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1' else 'inline_main_printHex_16_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 009fc Instruction { source: "if inline_main_printHex_16_inline_printHex_printHexDigit_11_t0 < inline_main_printHex_16_inline_printHex_printHexDigit_11_t1 then 'inline_main_printHex_16_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1' else 'inline_main_printHex_16_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x20), Register(0x18)], resolved: None }
15 20 18 
# 009ff Instruction { source: "if inline_main_printHex_16_inline_printHex_printHexDigit_11_t0 < inline_main_printHex_16_inline_printHex_printHexDigit_11_t1 then 'inline_main_printHex_16_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1' else 'inline_main_printHex_16_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2)], resolved: None }
71 48 0a 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_16_inline_printHex_printHexDigit_11_t0 < inline_main_printHex_16_inline_printHex_printHexDigit_11_t1 then 'inline_main_printHex_16_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1' else 'inline_main_printHex_16_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_16_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }"] }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_printHexDigit_if_true_0_1
# inline_main_printHex_16_inline_printHex_printHexDigit_11_t4 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_t4 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_t5 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 00a03 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_t5 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x30=48)], resolved: None }
04 20 30 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_t3 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_t4 Add inline_main_printHex_16_inline_printHex_printHexDigit_11_t5
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 00a06 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_t3 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_t4 Add inline_main_printHex_16_inline_printHex_printHexDigit_11_t5\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x18), Register(0x20), Register(0x18)], resolved: None }
14 18 20 18 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c <- inline_main_printHex_16_inline_printHex_printHexDigit_11_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c <- inline_main_printHex_16_inline_printHex_printHexDigit_11_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t1 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t1 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# None <= call io_write0(inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00a0a Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t3 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t3 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# :inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# Some(inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 00a0c Instruction { source: "IoRead1", opcode: In1, args: [Register(0x20)], resolved: None }
61 20 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 00a0e Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x08=8)], resolved: None }
04 21 08 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 00a11 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
1b 20 21 20 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00a15 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x00=0)], resolved: None }
04 21 00 
# if inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 00a18 Instruction { source: "if inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x20), Register(0x21)], resolved: None }
15 20 21 
# 00a1b Instruction { source: "if inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2)], resolved: None }
72 23 0a 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1)], resolved: None }
# :inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# goto inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 00a1f Instruction { source: "goto inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0)], resolved: None }
70 0c 0a 00 
# :inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# goto inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush)], resolved: None }
# :inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00a23 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x80=128)], resolved: None }
04 20 80 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 00a26 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x04=4)], resolved: None }
04 21 04 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 00a29 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x21), Register(0x18), Register(0x21)], resolved: None }
1e 05 21 18 21 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 00a2e Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
1c 20 21 20 
# None <= call io_write1(inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 00a32 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x20)], resolved: None }
69 20 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00a34 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x80=128)], resolved: None }
04 21 80 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 00a37 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0f=15)], resolved: None }
04 20 0f 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 00a3a Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x18), Register(0x20), Register(0x18)], resolved: None }
1b 18 20 18 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 00a3e Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x21), Register(0x18), Register(0x18)], resolved: None }
1c 21 18 18 
# None <= call io_write1(inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 00a42 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x18)], resolved: None }
69 18 
# goto inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char)], resolved: None }
# :inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# goto inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_function_end_putc)], resolved: None }
# :inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_8_function_end_putc
# goto inline_main_printHex_16_inline_printHex_printHexDigit_11_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 00a44 Instruction { source: "goto inline_main_printHex_16_inline_printHex_printHexDigit_11_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_11_printHexDigit_if_end_0)], resolved: None }
70 95 0a 00 
# :inline_main_printHex_16_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_printHexDigit_if_else_0_2
# inline_main_printHex_16_inline_printHex_printHexDigit_11_t6 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_t6 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_t7 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 00a48 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_t7 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0a=10)], resolved: None }
04 20 0a 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_a <- inline_main_printHex_16_inline_printHex_printHexDigit_11_t6 Subtract inline_main_printHex_16_inline_printHex_printHexDigit_11_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 00a4b Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_a <- inline_main_printHex_16_inline_printHex_printHexDigit_11_t6 Subtract inline_main_printHex_16_inline_printHex_printHexDigit_11_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0x20), Register(0x00)], resolved: None }
0b 20 00 
# 00a4e Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_a <- inline_main_printHex_16_inline_printHex_printHexDigit_11_t6 Subtract inline_main_printHex_16_inline_printHex_printHexDigit_11_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00a50 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_a <- inline_main_printHex_16_inline_printHex_printHexDigit_11_t6 Subtract inline_main_printHex_16_inline_printHex_printHexDigit_11_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x18), Register(0x00), Register(0x18)], resolved: None }
14 18 00 18 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_t8 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_t8 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_t9 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 00a54 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_t9 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x41=65)], resolved: None }
04 20 41 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_a <- inline_main_printHex_16_inline_printHex_printHexDigit_11_t8 Add inline_main_printHex_16_inline_printHex_printHexDigit_11_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 00a57 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_a <- inline_main_printHex_16_inline_printHex_printHexDigit_11_t8 Add inline_main_printHex_16_inline_printHex_printHexDigit_11_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x18), Register(0x20), Register(0x18)], resolved: None }
14 18 20 18 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_t11 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_t11 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c <- inline_main_printHex_16_inline_printHex_printHexDigit_11_t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"putc\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c <- inline_main_printHex_16_inline_printHex_printHexDigit_11_t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t1 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t1 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# None <= call io_write0(inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00a5b Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t3 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t3 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t3 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_t3 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# :inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# Some(inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1) <= call io_read1()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Call(Call { function: \"io_read1\", parameters: [] })", "Call(Call { function: \"io_read1\", parameters: [] })"] }
# 00a5d Instruction { source: "IoRead1", opcode: In1, args: [Register(0x20)], resolved: None }
61 20 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Number(U8, 8)", "Number(U8, 8)"] }
# 00a5f Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x08=8)], resolved: None }
04 21 08 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))", "Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8))"] }
# 00a62 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t1 BitwiseAnd inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\", \"Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8))\"] }", opcode: And8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
1b 20 21 20 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00a66 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x00=0)], resolved: None }
04 21 00 
# if inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }"] }
# 00a69 Instruction { source: "if inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x20), Register(0x21)], resolved: None }
15 20 21 
# 00a6c Instruction { source: "if inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2)], resolved: None }
72 74 0a 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t0 != inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_t3 then 'inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1' else 'inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1)], resolved: None }
# :inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_body_1
# goto inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# 00a70 Instruction { source: "goto inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_read1\\\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_predicate_0)], resolved: None }
70 5d 0a 00 
# :inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_read1\", parameters: [] }), Number(U8, 8)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_lcd_flush_while_end_2
# goto inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush)], resolved: None }
# :inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# 	SourceContext { contexts: [] }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_inline_lcd_write_char_lcd_flush_1_function_end_lcd_flush
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00a74 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x80=128)], resolved: None }
04 20 80 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 00a77 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x04=4)], resolved: None }
04 21 04 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4))"] }
# 00a7a Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t5 ShiftRight inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x21), Register(0x18), Register(0x21)], resolved: None }
1e 05 21 18 21 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))"] }
# 00a7f Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t3 BitwiseOr inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"c\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
1c 20 21 20 
# None <= call io_write1(inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"c\"), Number(U8, 4)))] })"] }
# 00a83 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x20)], resolved: None }
69 20 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00a85 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x80=128)], resolved: None }
04 21 80 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 00a88 Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x0f=15)], resolved: None }
04 20 0f 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))", "Arithmetic(And, Ident(\"c\"), Number(U8, 15))"] }
# 00a8b Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t11 BitwiseAnd inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t12\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x18), Register(0x20), Register(0x18)], resolved: None }
1b 18 20 18 
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))"] }
# 00a8f Instruction { source: "inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8 <- inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t9 BitwiseOr inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"c\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x21), Register(0x18), Register(0x18)], resolved: None }
1c 21 18 18 
# None <= call io_write1(inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"c\"), Number(U8, 15)))] })"] }
# 00a93 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x18)], resolved: None }
69 18 
# goto inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char)], resolved: None }
# :inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_inline_putc_lcd_write_char_2_function_end_lcd_write_char
# goto inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_function_end_putc)], resolved: None }
# :inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_inline_printHexDigit_putc_9_function_end_putc
# :inline_main_printHex_16_inline_printHex_printHexDigit_11_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_printHexDigit_if_end_0
# goto inline_main_printHex_16_inline_printHex_printHexDigit_11_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_16_inline_printHex_printHexDigit_11_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_inline_printHex_printHexDigit_11_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_16_inline_printHex_printHexDigit_11_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_16_inline_printHex_printHexDigit_11_function_end_printHexDigit
# goto inline_main_printHex_16_function_end_printHex
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_16_function_end_printHex\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_16_function_end_printHex)], resolved: None }
# :inline_main_printHex_16_function_end_printHex
# 	SourceContext { contexts: [] }
# inline_main_printHex_16_function_end_printHex
# t46 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 00a95 Instruction { source: "t46 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x18), Constant8(0x0a=10)], resolved: None }
04 18 0a 
# ttyout <- t46
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }"] }
# 00a98 Instruction { source: "ttyout <- t46\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\"] }", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 00a9a Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
70 68 0c 00 
# :main_if_else_3_11
# 	SourceContext { contexts: [] }
# main_if_else_3_11
# t47 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t47 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# t48 <- 0n115/0x73u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }", "Number(U8, 115)", "Number(U8, 115)"] }
# 00a9e Instruction { source: "t48 <- 0n115/0x73u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\", \"Number(U8, 115)\", \"Number(U8, 115)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x73=115)], resolved: None }
04 20 73 
# if t47 == t48 then 'main_if_true_4_12' else 'main_if_else_4_13'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }"] }
# 00aa1 Instruction { source: "if t47 == t48 then 'main_if_true_4_12' else 'main_if_else_4_13'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: Cmp8, args: [Register(0x18), Register(0x20)], resolved: None }
15 18 20 
# 00aa4 Instruction { source: "if t47 == t48 then 'main_if_true_4_12' else 'main_if_else_4_13'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: JzImm, args: [Label24(main_if_true_4_12)], resolved: None }
72 ac 0a 00 
# 00aa8 Instruction { source: "if t47 == t48 then 'main_if_true_4_12' else 'main_if_else_4_13'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_4_13)], resolved: None }
70 e7 0b 00 
# :main_if_true_4_12
# 	SourceContext { contexts: [] }
# main_if_true_4_12
# i <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }", "Number(USIZE, 1)"] }
# 00aac Instruction { source: "i <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x1c), Constant32(0x00000001=1)], resolved: None }
20 1c 01 00 00 00 
# addr <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 00ab2 Instruction { source: "addr <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000000=0)], resolved: None }
20 14 00 00 00 00 
# :main_while_predicate_14
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }"] }
# main_while_predicate_14
# t51 <- __frame_pointer U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }", "Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }", "Index(\"buf\", Ident(\"i\"))", "Index(\"buf\", Ident(\"i\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\"))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 00ab8 Instruction { source: "t51 <- __frame_pointer U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x38)], resolved: None }
21 0c 38 
# t52 <- i U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }", "Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }", "Index(\"buf\", Ident(\"i\"))", "Index(\"buf\", Ident(\"i\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\"))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t52 <- i U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t50 <- t51 Add t52
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }", "Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }", "Index(\"buf\", Ident(\"i\"))", "Index(\"buf\", Ident(\"i\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\"))"] }
# 00abb Instruction { source: "t50 <- t51 Add t52\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00abc Instruction { source: "t50 <- t51 Add t52\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x1c), Register(0x28)], resolved: None }
30 38 1c 28 
# 00ac0 Instruction { source: "t50 <- t51 Add t52\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t49 <- mem[t50] U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }", "Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }", "Index(\"buf\", Ident(\"i\"))", "Index(\"buf\", Ident(\"i\"))"] }
# 00ac1 Instruction { source: "t49 <- mem[t50] U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\"] }", opcode: Load8, args: [Register(0x28), Register(0x20)], resolved: None }
05 28 20 
# t53 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }", "Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00ac4 Instruction { source: "t53 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x00=0)], resolved: None }
04 21 00 
# if t49 != t53 then 'main_while_body_15' else 'main_while_end_16'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }", "Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }"] }
# 00ac7 Instruction { source: "if t49 != t53 then 'main_while_body_15' else 'main_while_end_16'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x20), Register(0x21)], resolved: None }
15 20 21 
# 00aca Instruction { source: "if t49 != t53 then 'main_while_body_15' else 'main_while_end_16'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(main_while_end_16)], resolved: None }
72 e3 0b 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t49 != t53 then 'main_while_body_15' else 'main_while_end_16'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(main_while_body_15)], resolved: None }
# :main_while_body_15
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }"] }
# main_while_body_15
# t54 <- addr[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }", "Index(\"addr\", Number(USIZE, 2))", "Index(\"addr\", Number(USIZE, 2))"] }
# 00ace Instruction { source: "t54 <- addr[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }\", \"Index(\\\"addr\\\", Number(USIZE, 2))\", \"Index(\\\"addr\\\", Number(USIZE, 2))\"] }", opcode: Copy8, args: [Register(0x16), Register(0x40)], resolved: None }
0b 16 40 
# addr[0x03..0x04] <- t54 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }"] }
# 00ad1 Instruction { source: "addr[0x03..0x04] <- t54 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }\"] }", opcode: Copy8, args: [Register(0x40), Register(0x17)], resolved: None }
0b 40 17 
# t55 <- addr[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }", "Index(\"addr\", Number(USIZE, 1))", "Index(\"addr\", Number(USIZE, 1))"] }
# 00ad4 Instruction { source: "t55 <- addr[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }\", \"Index(\\\"addr\\\", Number(USIZE, 1))\", \"Index(\\\"addr\\\", Number(USIZE, 1))\"] }", opcode: Copy8, args: [Register(0x15), Register(0x40)], resolved: None }
0b 15 40 
# addr[0x02..0x03] <- t55 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }"] }
# 00ad7 Instruction { source: "addr[0x02..0x03] <- t55 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }\"] }", opcode: Copy8, args: [Register(0x40), Register(0x16)], resolved: None }
0b 40 16 
# t56 <- addr[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }", "Index(\"addr\", Number(USIZE, 0))", "Index(\"addr\", Number(USIZE, 0))"] }
# 00ada Instruction { source: "t56 <- addr[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }\", \"Index(\\\"addr\\\", Number(USIZE, 0))\", \"Index(\\\"addr\\\", Number(USIZE, 0))\"] }", opcode: Copy8, args: [Register(0x14), Register(0x40)], resolved: None }
0b 14 40 
# addr[0x01..0x02] <- t56 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }"] }
# 00add Instruction { source: "addr[0x01..0x02] <- t56 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }\"] }", opcode: Copy8, args: [Register(0x40), Register(0x15)], resolved: None }
0b 40 15 
# t60 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "AddressOf(Index(\"buf\", Ident(\"i\")))", "AddressOf(Index(\"buf\", Ident(\"i\")))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\"))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 00ae0 Instruction { source: "t60 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x38)], resolved: None }
21 0c 38 
# t61 <- i U32
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "AddressOf(Index(\"buf\", Ident(\"i\")))", "AddressOf(Index(\"buf\", Ident(\"i\")))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\"))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t61 <- i U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t59 <- t60 Add t61
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "AddressOf(Index(\"buf\", Ident(\"i\")))", "AddressOf(Index(\"buf\", Ident(\"i\")))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\"))"] }
# 00ae3 Instruction { source: "t59 <- t60 Add t61\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00ae4 Instruction { source: "t59 <- t60 Add t61\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x1c), Register(0x28)], resolved: None }
30 38 1c 28 
# 00ae8 Instruction { source: "t59 <- t60 Add t61\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t58 <- t59 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "AddressOf(Index(\"buf\", Ident(\"i\")))", "AddressOf(Index(\"buf\", Ident(\"i\")))"] }
# optimized away noop copy Instruction { source: "t58 <- t59 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\"] }", opcode: Copy32, args: [Register(0x28), Register(0x28)], resolved: None }
# inline_main_parseHex_6_c <- t58 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_6_c <- t58 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\"] }", opcode: Copy32, args: [Register(0x28), Register(0x28)], resolved: None }
# inline_main_parseHex_6_t0 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Number(U8, 16)", "Number(U8, 16)"] }
# 00ae9 Instruction { source: "inline_main_parseHex_6_t0 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x2c), Constant8(0x10=16)], resolved: None }
04 2c 10 
# inline_main_parseHex_6_t3 <- inline_main_parseHex_6_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_6_t3 <- inline_main_parseHex_6_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x28), Register(0x28)], resolved: None }
# inline_main_parseHex_6_t2 <- mem[inline_main_parseHex_6_t3] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))"] }
# 00aec Instruction { source: "inline_main_parseHex_6_t2 <- mem[inline_main_parseHex_6_t3] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\"] }", opcode: Load8, args: [Register(0x28), Register(0x21)], resolved: None }
05 28 21 
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_ch <- inline_main_parseHex_6_t2 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_ch <- inline_main_parseHex_6_t2 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t0 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t0 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t1 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }", "Number(U8, 97)", "Number(U8, 97)"] }
# 00aef Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t1 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x61=97)], resolved: None }
04 22 61 
# if inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t0 >= inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t1 then 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }"] }
# 00af2 Instruction { source: "if inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t0 >= inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t1 then 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: Cmp8, args: [Register(0x22), Register(0x21)], resolved: None }
15 22 21 
# 00af5 Instruction { source: "if inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t0 >= inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t1 then 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JcImm, args: [Label24(inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_1)], resolved: None }
71 fd 0a 00 
# 00af9 Instruction { source: "if inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t0 >= inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t1 then 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_2)], resolved: None }
70 18 0b 00 
# :inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }"] }
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_1
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t4 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t4 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t5 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Number(U8, 97)", "Number(U8, 97)"] }
# 00afd Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t5 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x61=97)], resolved: None }
04 22 61 
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t3 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t4 Subtract inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t5
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))"] }
# 00b00 Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t3 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t4 Subtract inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Copy8, args: [Register(0x22), Register(0x00)], resolved: None }
0b 22 00 
# 00b03 Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t3 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t4 Subtract inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00b05 Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t3 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t4 Subtract inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Add8NoCarryIn, args: [Register(0x21), Register(0x00), Register(0x21)], resolved: None }
14 21 00 21 
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 00b09 Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x0a=10)], resolved: None }
04 22 0a 
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t2 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t3 Add inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t6
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))"] }
# 00b0c Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t2 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t3 Add inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t6\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
14 21 22 21 
# inline_main_parseHex_6_t1 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t2 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_6_t1 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t2 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# goto inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }"] }
# 00b10 Instruction { source: "goto inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_function_end_parseHexNibble)], resolved: None }
70 51 0b 00 
# goto inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_end_0
# 	SourceContext { contexts: [] }
# 00b14 Instruction { source: "goto inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_end_0)], resolved: None }
70 18 0b 00 
# :inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_2
# :inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_end_0
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t7 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t7 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t8 <- 0n57/0x39u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Number(U8, 57)", "Number(U8, 57)"] }
# 00b18 Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t8 <- 0n57/0x39u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Number(U8, 57)\", \"Number(U8, 57)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x39=57)], resolved: None }
04 22 39 
# if inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t7 <= inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t8 then 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }"] }
# 00b1b Instruction { source: "if inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t7 <= inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t8 then 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: Cmp8, args: [Register(0x21), Register(0x22)], resolved: None }
15 21 22 
# 00b1e Instruction { source: "if inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t7 <= inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t8 then 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JcImm, args: [Label24(inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_4)], resolved: None }
71 26 0b 00 
# 00b22 Instruction { source: "if inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t7 <= inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t8 then 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_5)], resolved: None }
70 3a 0b 00 
# :inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }"] }
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_true_0_4
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t10 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t10 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t11 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 00b26 Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t11 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x30=48)], resolved: None }
04 22 30 
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t9 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t10 Subtract inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t11
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))"] }
# 00b29 Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t9 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t10 Subtract inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Copy8, args: [Register(0x22), Register(0x00)], resolved: None }
0b 22 00 
# 00b2c Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t9 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t10 Subtract inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00b2e Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t9 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t10 Subtract inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x21), Register(0x00), Register(0x21)], resolved: None }
14 21 00 21 
# inline_main_parseHex_6_t1 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t9 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_6_t1 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t9 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# goto inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }"] }
# 00b32 Instruction { source: "goto inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_function_end_parseHexNibble)], resolved: None }
70 51 0b 00 
# goto inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_end_3
# 	SourceContext { contexts: [] }
# 00b36 Instruction { source: "goto inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_end_3)], resolved: None }
70 3a 0b 00 
# :inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_5
# 	SourceContext { contexts: [] }
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_else_0_5
# :inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_end_3
# 	SourceContext { contexts: [] }
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_parseHexNibble_if_end_3
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t14 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t14 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t15 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 00b3a Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t15 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x41=65)], resolved: None }
04 22 41 
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t13 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t14 Subtract inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t15
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))"] }
# 00b3d Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t13 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t14 Subtract inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Copy8, args: [Register(0x22), Register(0x00)], resolved: None }
0b 22 00 
# 00b40 Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t13 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t14 Subtract inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00b42 Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t13 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t14 Subtract inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x21), Register(0x00), Register(0x21)], resolved: None }
14 21 00 21 
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t16 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 00b46 Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t16 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x0a=10)], resolved: None }
04 22 0a 
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t12 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t13 Add inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t16
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))"] }
# 00b49 Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t12 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t13 Add inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t16\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
14 21 22 21 
# inline_main_parseHex_6_t1 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t12 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_6_t1 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_t12 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# goto inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }"] }
# 00b4d Instruction { source: "goto inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_function_end_parseHexNibble)], resolved: None }
70 51 0b 00 
# :inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_function_end_parseHexNibble
# 	SourceContext { contexts: [] }
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_3_function_end_parseHexNibble
# inline_main_parseHex_6_h <- inline_main_parseHex_6_t0 Multiply inline_main_parseHex_6_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))"] }
# 00b51 Instruction { source: "inline_main_parseHex_6_h <- inline_main_parseHex_6_t0 Multiply inline_main_parseHex_6_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\"] }", opcode: Mul8_8, args: [Register(0x2c), Register(0x21), Register(0x21)], resolved: None }
10 2c 21 21 
# inline_main_parseHex_6_t5 <- inline_main_parseHex_6_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1))", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_6_t5 <- inline_main_parseHex_6_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x28), Register(0x28)], resolved: None }
# inline_main_parseHex_6_t6 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00b55 Instruction { source: "inline_main_parseHex_6_t6 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x30), Constant32(0x00000001=1)], resolved: None }
20 30 01 00 00 00 
# inline_main_parseHex_6_t4 <- inline_main_parseHex_6_t5 Add inline_main_parseHex_6_t6
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1))"] }
# 00b5b Instruction { source: "inline_main_parseHex_6_t4 <- inline_main_parseHex_6_t5 Add inline_main_parseHex_6_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00b5c Instruction { source: "inline_main_parseHex_6_t4 <- inline_main_parseHex_6_t5 Add inline_main_parseHex_6_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x28), Register(0x30), Register(0x28)], resolved: None }
30 28 30 28 
# 00b60 Instruction { source: "inline_main_parseHex_6_t4 <- inline_main_parseHex_6_t5 Add inline_main_parseHex_6_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_parseHex_6_c <- inline_main_parseHex_6_t4 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_6_c <- inline_main_parseHex_6_t4 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\"] }", opcode: Copy32, args: [Register(0x28), Register(0x28)], resolved: None }
# inline_main_parseHex_6_t7 <- inline_main_parseHex_6_h U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Ident(\"h\")", "Ident(\"h\")"] }
# 00b61 Instruction { source: "inline_main_parseHex_6_t7 <- inline_main_parseHex_6_h U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Ident(\\\"h\\\")\", \"Ident(\\\"h\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x22)], resolved: None }
0b 21 22 
# inline_main_parseHex_6_t10 <- inline_main_parseHex_6_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_6_t10 <- inline_main_parseHex_6_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x28), Register(0x28)], resolved: None }
# inline_main_parseHex_6_t9 <- mem[inline_main_parseHex_6_t10] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))"] }
# 00b64 Instruction { source: "inline_main_parseHex_6_t9 <- mem[inline_main_parseHex_6_t10] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\"] }", opcode: Load8, args: [Register(0x28), Register(0x20)], resolved: None }
05 28 20 
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_ch <- inline_main_parseHex_6_t9 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_ch <- inline_main_parseHex_6_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t0 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t0 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t1 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }", "Number(U8, 97)", "Number(U8, 97)"] }
# 00b67 Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t1 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x61=97)], resolved: None }
04 21 61 
# if inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t0 >= inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t1 then 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }"] }
# 00b6a Instruction { source: "if inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t0 >= inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t1 then 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: Cmp8, args: [Register(0x21), Register(0x20)], resolved: None }
15 21 20 
# 00b6d Instruction { source: "if inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t0 >= inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t1 then 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JcImm, args: [Label24(inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_1)], resolved: None }
71 75 0b 00 
# 00b71 Instruction { source: "if inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t0 >= inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t1 then 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_2)], resolved: None }
70 90 0b 00 
# :inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }"] }
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_1
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t4 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t4 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t5 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Number(U8, 97)", "Number(U8, 97)"] }
# 00b75 Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t5 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x61=97)], resolved: None }
04 21 61 
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t3 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t4 Subtract inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t5
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))"] }
# 00b78 Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t3 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t4 Subtract inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Copy8, args: [Register(0x21), Register(0x00)], resolved: None }
0b 21 00 
# 00b7b Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t3 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t4 Subtract inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00b7d Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t3 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t4 Subtract inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Add8NoCarryIn, args: [Register(0x20), Register(0x00), Register(0x20)], resolved: None }
14 20 00 20 
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 00b81 Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x0a=10)], resolved: None }
04 21 0a 
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t2 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t3 Add inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t6
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))"] }
# 00b84 Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t2 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t3 Add inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t6\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
14 20 21 20 
# inline_main_parseHex_6_t8 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t2 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_6_t8 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t2 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# goto inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }"] }
# 00b88 Instruction { source: "goto inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_function_end_parseHexNibble)], resolved: None }
70 c9 0b 00 
# goto inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_end_0
# 	SourceContext { contexts: [] }
# 00b8c Instruction { source: "goto inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_end_0)], resolved: None }
70 90 0b 00 
# :inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_2
# :inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_end_0
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t7 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t7 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t8 <- 0n57/0x39u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Number(U8, 57)", "Number(U8, 57)"] }
# 00b90 Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t8 <- 0n57/0x39u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Number(U8, 57)\", \"Number(U8, 57)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x39=57)], resolved: None }
04 21 39 
# if inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t7 <= inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t8 then 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }"] }
# 00b93 Instruction { source: "if inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t7 <= inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t8 then 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: Cmp8, args: [Register(0x20), Register(0x21)], resolved: None }
15 20 21 
# 00b96 Instruction { source: "if inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t7 <= inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t8 then 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JcImm, args: [Label24(inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_4)], resolved: None }
71 9e 0b 00 
# 00b9a Instruction { source: "if inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t7 <= inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t8 then 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_5)], resolved: None }
70 b2 0b 00 
# :inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }"] }
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_true_0_4
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t10 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t10 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t11 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 00b9e Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t11 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x30=48)], resolved: None }
04 21 30 
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t9 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t10 Subtract inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t11
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))"] }
# 00ba1 Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t9 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t10 Subtract inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Copy8, args: [Register(0x21), Register(0x00)], resolved: None }
0b 21 00 
# 00ba4 Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t9 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t10 Subtract inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00ba6 Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t9 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t10 Subtract inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x20), Register(0x00), Register(0x20)], resolved: None }
14 20 00 20 
# inline_main_parseHex_6_t8 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t9 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_6_t8 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t9 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# goto inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }"] }
# 00baa Instruction { source: "goto inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_function_end_parseHexNibble)], resolved: None }
70 c9 0b 00 
# goto inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_end_3
# 	SourceContext { contexts: [] }
# 00bae Instruction { source: "goto inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_end_3)], resolved: None }
70 b2 0b 00 
# :inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_5
# 	SourceContext { contexts: [] }
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_else_0_5
# :inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_end_3
# 	SourceContext { contexts: [] }
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_parseHexNibble_if_end_3
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t14 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t14 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t15 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 00bb2 Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t15 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x41=65)], resolved: None }
04 21 41 
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t13 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t14 Subtract inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t15
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))"] }
# 00bb5 Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t13 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t14 Subtract inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Copy8, args: [Register(0x21), Register(0x00)], resolved: None }
0b 21 00 
# 00bb8 Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t13 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t14 Subtract inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00bba Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t13 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t14 Subtract inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x20), Register(0x00), Register(0x20)], resolved: None }
14 20 00 20 
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t16 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 00bbe Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t16 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x21), Constant8(0x0a=10)], resolved: None }
04 21 0a 
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t12 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t13 Add inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t16
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))"] }
# 00bc1 Instruction { source: "inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t12 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t13 Add inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t16\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x20), Register(0x21), Register(0x20)], resolved: None }
14 20 21 20 
# inline_main_parseHex_6_t8 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t12 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_6_t8 <- inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_t12 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# goto inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }"] }
# 00bc5 Instruction { source: "goto inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_function_end_parseHexNibble)], resolved: None }
70 c9 0b 00 
# :inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_function_end_parseHexNibble
# 	SourceContext { contexts: [] }
# inline_main_parseHex_6_inline_parseHex_parseHexNibble_4_function_end_parseHexNibble
# inline_main_parseHex_6_h <- inline_main_parseHex_6_t7 Add inline_main_parseHex_6_t8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))"] }
# 00bc9 Instruction { source: "inline_main_parseHex_6_h <- inline_main_parseHex_6_t7 Add inline_main_parseHex_6_t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\"] }", opcode: Add8NoCarryIn, args: [Register(0x22), Register(0x20), Register(0x21)], resolved: None }
14 22 20 21 
# inline_main_parseHex_6_t11 <- inline_main_parseHex_6_h U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"h\")) }", "Ident(\"h\")", "Ident(\"h\")"] }
# 00bcd Instruction { source: "inline_main_parseHex_6_t11 <- inline_main_parseHex_6_h U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"h\\\")) }\", \"Ident(\\\"h\\\")\", \"Ident(\\\"h\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x20)], resolved: None }
0b 21 20 
# t57 <- inline_main_parseHex_6_t11 U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"h\")) }"] }
# optimized away noop copy Instruction { source: "t57 <- inline_main_parseHex_6_t11 U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"h\\\")) }\"] }", opcode: Copy8, args: [Register(0x20), Register(0x20)], resolved: None }
# goto inline_main_parseHex_6_function_end_parseHex
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"h\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_parseHex_6_function_end_parseHex\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"h\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_6_function_end_parseHex)], resolved: None }
# :inline_main_parseHex_6_function_end_parseHex
# 	SourceContext { contexts: [] }
# inline_main_parseHex_6_function_end_parseHex
# addr[0x00..0x01] <- t57 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }"] }
# 00bd0 Instruction { source: "addr[0x00..0x01] <- t57 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\"] }", opcode: Copy8, args: [Register(0x20), Register(0x14)], resolved: None }
0b 20 14 
# t62 <- i U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }", "Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t62 <- i U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t63 <- 0n2/0x00000002u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }", "Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2))", "Number(USIZE, 2)", "Number(USIZE, 2)"] }
# 00bd3 Instruction { source: "t63 <- 0n2/0x00000002u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2))\", \"Number(USIZE, 2)\", \"Number(USIZE, 2)\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x00000002=2)], resolved: None }
20 28 02 00 00 00 
# i <- t62 Add t63
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }", "Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2))"] }
# 00bd9 Instruction { source: "i <- t62 Add t63\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00bda Instruction { source: "i <- t62 Add t63\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2))\"] }", opcode: AddCarry32_1, args: [Register(0x1c), Register(0x28), Register(0x1c)], resolved: None }
30 1c 28 1c 
# 00bde Instruction { source: "i <- t62 Add t63\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto main_while_predicate_14
# 	SourceContext { contexts: [] }
# 00bdf Instruction { source: "goto main_while_predicate_14\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_while_predicate_14)], resolved: None }
70 b8 0a 00 
# :main_while_end_16
# 	SourceContext { contexts: [] }
# main_while_end_16
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 00be3 Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
70 68 0c 00 
# :main_if_else_4_13
# 	SourceContext { contexts: [] }
# main_if_else_4_13
# t64 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t64 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# t65 <- 0n113/0x71u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }", "Number(U8, 113)", "Number(U8, 113)"] }
# 00be7 Instruction { source: "t65 <- 0n113/0x71u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\", \"Number(U8, 113)\", \"Number(U8, 113)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x71=113)], resolved: None }
04 20 71 
# if t64 == t65 then 'main_if_true_5_17' else 'main_if_else_5_18'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }"] }
# 00bea Instruction { source: "if t64 == t65 then 'main_if_true_5_17' else 'main_if_else_5_18'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: Cmp8, args: [Register(0x18), Register(0x20)], resolved: None }
15 18 20 
# 00bed Instruction { source: "if t64 == t65 then 'main_if_true_5_17' else 'main_if_else_5_18'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: JzImm, args: [Label24(main_if_true_5_17)], resolved: None }
72 f5 0b 00 
# 00bf1 Instruction { source: "if t64 == t65 then 'main_if_true_5_17' else 'main_if_else_5_18'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_5_18)], resolved: None }
70 13 0c 00 
# :main_if_true_5_17
# 	SourceContext { contexts: [] }
# main_if_true_5_17
# t66 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00bf5 Instruction { source: "t66 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x40), Constant8(0x00=0)], resolved: None }
04 40 00 
# t67 <- 0n20/0x00000014u32 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 00bf8 Instruction { source: "t67 <- 0n20/0x00000014u32 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: LoadImm32, args: [Register(0x1c), Constant32(0x00000014=20)], resolved: None }
20 1c 14 00 00 00 
# __frame_pointer <- __frame_pointer Add t67
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 00bfe Instruction { source: "__frame_pointer <- __frame_pointer Add t67\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00bff Instruction { source: "__frame_pointer <- __frame_pointer Add t67\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x1c), Register(0x0c)], resolved: None }
30 0c 1c 0c 
# 00c03 Instruction { source: "__frame_pointer <- __frame_pointer Add t67\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# return Some(t66)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 00c04 Instruction { source: "return Some(t66)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x40), Register(0x00)], resolved: None }
0b 40 00 
# 00c07 Instruction { source: "Dealloc 20 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000014=20)], resolved: None }
32 0c 14 00 00 00 
# 00c0d Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 00c0f Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
70 68 0c 00 
# :main_if_else_5_18
# 	SourceContext { contexts: [] }
# main_if_else_5_18
# t68 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t68 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# t69 <- 0n105/0x69u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }", "Number(U8, 105)", "Number(U8, 105)"] }
# 00c13 Instruction { source: "t69 <- 0n105/0x69u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }\", \"Number(U8, 105)\", \"Number(U8, 105)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x69=105)], resolved: None }
04 20 69 
# if t68 == t69 then 'main_if_true_6_19' else 'main_if_else_6_20'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }"] }
# 00c16 Instruction { source: "if t68 == t69 then 'main_if_true_6_19' else 'main_if_else_6_20'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }\"] }", opcode: Cmp8, args: [Register(0x18), Register(0x20)], resolved: None }
15 18 20 
# 00c19 Instruction { source: "if t68 == t69 then 'main_if_true_6_19' else 'main_if_else_6_20'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }\"] }", opcode: JzImm, args: [Label24(main_if_true_6_19)], resolved: None }
72 21 0c 00 
# 00c1d Instruction { source: "if t68 == t69 then 'main_if_true_6_19' else 'main_if_else_6_20'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_6_20)], resolved: None }
70 4d 0c 00 
# :main_if_true_6_19
# 	SourceContext { contexts: [] }
# main_if_true_6_19
# t70 <- 0n66/0x42u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 66) }", "Number(U8, 66)", "Number(U8, 66)"] }
# 00c21 Instruction { source: "t70 <- 0n66/0x42u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 66) }\", \"Number(U8, 66)\", \"Number(U8, 66)\"] }", opcode: LoadImm8, args: [Register(0x18), Constant8(0x42=66)], resolved: None }
04 18 42 
# ttyout <- t70
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 66) }"] }
# 00c24 Instruction { source: "ttyout <- t70\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 66) }\"] }", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# t71 <- 0n111/0x6fu8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 111) }", "Number(U8, 111)", "Number(U8, 111)"] }
# 00c26 Instruction { source: "t71 <- 0n111/0x6fu8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 111) }\", \"Number(U8, 111)\", \"Number(U8, 111)\"] }", opcode: LoadImm8, args: [Register(0x18), Constant8(0x6f=111)], resolved: None }
04 18 6f 
# ttyout <- t71
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 111) }"] }
# 00c29 Instruction { source: "ttyout <- t71\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 111) }\"] }", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# t72 <- 0n111/0x6fu8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 111) }", "Number(U8, 111)", "Number(U8, 111)"] }
# 00c2b Instruction { source: "t72 <- 0n111/0x6fu8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 111) }\", \"Number(U8, 111)\", \"Number(U8, 111)\"] }", opcode: LoadImm8, args: [Register(0x18), Constant8(0x6f=111)], resolved: None }
04 18 6f 
# ttyout <- t72
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 111) }"] }
# 00c2e Instruction { source: "ttyout <- t72\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 111) }\"] }", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# t73 <- 0n116/0x74u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 116) }", "Number(U8, 116)", "Number(U8, 116)"] }
# 00c30 Instruction { source: "t73 <- 0n116/0x74u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 116) }\", \"Number(U8, 116)\", \"Number(U8, 116)\"] }", opcode: LoadImm8, args: [Register(0x18), Constant8(0x74=116)], resolved: None }
04 18 74 
# ttyout <- t73
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 116) }"] }
# 00c33 Instruction { source: "ttyout <- t73\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 116) }\"] }", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# t74 <- 0n114/0x72u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 114) }", "Number(U8, 114)", "Number(U8, 114)"] }
# 00c35 Instruction { source: "t74 <- 0n114/0x72u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 114) }\", \"Number(U8, 114)\", \"Number(U8, 114)\"] }", opcode: LoadImm8, args: [Register(0x18), Constant8(0x72=114)], resolved: None }
04 18 72 
# ttyout <- t74
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 114) }"] }
# 00c38 Instruction { source: "ttyout <- t74\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 114) }\"] }", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# t75 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 97) }", "Number(U8, 97)", "Number(U8, 97)"] }
# 00c3a Instruction { source: "t75 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 97) }\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x18), Constant8(0x61=97)], resolved: None }
04 18 61 
# ttyout <- t75
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 97) }"] }
# 00c3d Instruction { source: "ttyout <- t75\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 97) }\"] }", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# t76 <- 0n109/0x6du8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 109) }", "Number(U8, 109)", "Number(U8, 109)"] }
# 00c3f Instruction { source: "t76 <- 0n109/0x6du8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 109) }\", \"Number(U8, 109)\", \"Number(U8, 109)\"] }", opcode: LoadImm8, args: [Register(0x18), Constant8(0x6d=109)], resolved: None }
04 18 6d 
# ttyout <- t76
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 109) }"] }
# 00c42 Instruction { source: "ttyout <- t76\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 109) }\"] }", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# t77 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 00c44 Instruction { source: "t77 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x18), Constant8(0x0a=10)], resolved: None }
04 18 0a 
# ttyout <- t77
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }"] }
# 00c47 Instruction { source: "ttyout <- t77\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\"] }", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 00c49 Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
70 68 0c 00 
# :main_if_else_6_20
# 	SourceContext { contexts: [] }
# main_if_else_6_20
# t78 <- 0n72/0x48u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 72) }", "Number(U8, 72)", "Number(U8, 72)"] }
# 00c4d Instruction { source: "t78 <- 0n72/0x48u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 72) }\", \"Number(U8, 72)\", \"Number(U8, 72)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x48=72)], resolved: None }
04 20 48 
# ttyout <- t78
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 72) }"] }
# 00c50 Instruction { source: "ttyout <- t78\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 72) }\"] }", opcode: Out0, args: [Register(0x20)], resolved: None }
68 20 
# t79 <- 0n117/0x75u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 117) }", "Number(U8, 117)", "Number(U8, 117)"] }
# 00c52 Instruction { source: "t79 <- 0n117/0x75u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 117) }\", \"Number(U8, 117)\", \"Number(U8, 117)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x75=117)], resolved: None }
04 20 75 
# ttyout <- t79
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 117) }"] }
# 00c55 Instruction { source: "ttyout <- t79\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 117) }\"] }", opcode: Out0, args: [Register(0x20)], resolved: None }
68 20 
# t80 <- 0n104/0x68u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 104) }", "Number(U8, 104)", "Number(U8, 104)"] }
# 00c57 Instruction { source: "t80 <- 0n104/0x68u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 104) }\", \"Number(U8, 104)\", \"Number(U8, 104)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x68=104)], resolved: None }
04 20 68 
# ttyout <- t80
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 104) }"] }
# 00c5a Instruction { source: "ttyout <- t80\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 104) }\"] }", opcode: Out0, args: [Register(0x20)], resolved: None }
68 20 
# t81 <- 0n63/0x3fu8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 63) }", "Number(U8, 63)", "Number(U8, 63)"] }
# 00c5c Instruction { source: "t81 <- 0n63/0x3fu8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 63) }\", \"Number(U8, 63)\", \"Number(U8, 63)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x3f=63)], resolved: None }
04 20 3f 
# ttyout <- t81
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 63) }"] }
# 00c5f Instruction { source: "ttyout <- t81\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 63) }\"] }", opcode: Out0, args: [Register(0x20)], resolved: None }
68 20 
# t82 <- ch U8
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"ch\") }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t82 <- ch U8\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"ch\\\") }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# ttyout <- t82
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"ch\") }"] }
# 00c61 Instruction { source: "ttyout <- t82\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"ch\\\") }\"] }", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# t83 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 00c63 Instruction { source: "t83 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x18), Constant8(0x0a=10)], resolved: None }
04 18 0a 
# ttyout <- t83
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }"] }
# 00c66 Instruction { source: "ttyout <- t83\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\"] }", opcode: Out0, args: [Register(0x18)], resolved: None }
68 18 
# :main_if_end_3
# 	SourceContext { contexts: [] }
# main_if_end_3
# goto main_while_predicate_0
# 	SourceContext { contexts: [] }
# 00c68 Instruction { source: "goto main_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_while_predicate_0)], resolved: None }
70 67 00 00 
# :main_while_end_2
# 	SourceContext { contexts: [] }
# main_while_end_2
# t84 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00c6c Instruction { source: "t84 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x40), Constant8(0x00=0)], resolved: None }
04 40 00 
# t85 <- 0n20/0x00000014u32 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 00c6f Instruction { source: "t85 <- 0n20/0x00000014u32 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: LoadImm32, args: [Register(0x1c), Constant32(0x00000014=20)], resolved: None }
20 1c 14 00 00 00 
# __frame_pointer <- __frame_pointer Add t85
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 00c75 Instruction { source: "__frame_pointer <- __frame_pointer Add t85\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00c76 Instruction { source: "__frame_pointer <- __frame_pointer Add t85\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x1c), Register(0x0c)], resolved: None }
30 0c 1c 0c 
# 00c7a Instruction { source: "__frame_pointer <- __frame_pointer Add t85\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# return Some(t84)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 00c7b Instruction { source: "return Some(t84)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x40), Register(0x00)], resolved: None }
0b 40 00 
# 00c7e Instruction { source: "Dealloc 20 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000014=20)], resolved: None }
32 0c 14 00 00 00 
# 00c84 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_main
# 	SourceContext { contexts: [] }
# function_end_main
# Unreachable
# 	SourceContext { contexts: [] }
# 00c86 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
