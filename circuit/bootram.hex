v2.0 raw
# ImageBaseAddress=0x00000000
# entry
# 00000 Instruction { source: "Initialzing flags and internal regs.", opcode: Init, args: [], resolved: None }
00 
# 00001 Instruction { source: "Initialzing stack register to 0x000f0f00.", opcode: LoadImm32, args: [Register(0x0c), Constant32(0x000f0f00=986880)], resolved: None }
20 0c 00 0f 0f 00 
# 00007 Instruction { source: "PseudoCall(Label24(:main))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 0000d Instruction { source: "PseudoCall(Label24(:main))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 17 00 00 00 
# 00013 Instruction { source: "PseudoCall(Label24(:main))", opcode: JmpImm, args: [Label24(:main)], resolved: None }
70 22 00 00 
# 00017 Instruction { source: "PseudoCall(Label24(:main))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 0001d Instruction { source: "Halting after return from entry function.", opcode: Halt, args: [Constant32(0x00000000=0)], resolved: None }
7e 00 00 00 00 
# :main
# Ret Some(U8)
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var addr (Local addr Number(USIZE) Reg(U32)) Reg(U32) Some([16, 17, 18, 19])
# Var buf (Local buf Array(Number(U8), Some(20)) FrameOffset(0)) FrameOffset(0) None
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([20])
# Var i (Local i Number(USIZE) Reg(U32)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_parseHex_3_c (Arg0 c Ptr(Number(U8))) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_parseHex_3_h (Local h Number(U8) Reg(U8)) Reg(U8) Some([28])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_ch (Arg0 ch Number(U8)) Reg(U8) Some([28])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t0 (t0 Ident("ch")) Reg(U8) Some([28])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t1 (t1 Number(U8, 97)) Reg(U8) Some([29])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t10 (t10 Ident("ch")) Reg(U8) Some([28])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t11 (t11 Number(U8, 48)) Reg(U8) Some([29])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t12 (t12 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) Reg(U8) Some([28])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t13 (t13 Arithmetic(Subtract, Ident("ch"), Number(U8, 65))) Reg(U8) Some([28])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t14 (t14 Ident("ch")) Reg(U8) Some([28])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t15 (t15 Number(U8, 65)) Reg(U8) Some([29])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t16 (t16 Number(U8, 10)) Reg(U8) Some([29])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t2 (t2 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) Reg(U8) Some([28])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t3 (t3 Arithmetic(Subtract, Ident("ch"), Number(U8, 97))) Reg(U8) Some([28])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t4 (t4 Ident("ch")) Reg(U8) Some([28])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t5 (t5 Number(U8, 97)) Reg(U8) Some([29])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t6 (t6 Number(U8, 10)) Reg(U8) Some([29])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t7 (t7 Ident("ch")) Reg(U8) Some([28])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t8 (t8 Number(U8, 57)) Reg(U8) Some([29])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t9 (t9 Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) Reg(U8) Some([28])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_ch (Arg0 ch Number(U8)) Reg(U8) Some([20])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t0 (t0 Ident("ch")) Reg(U8) Some([20])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t1 (t1 Number(U8, 97)) Reg(U8) Some([28])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t10 (t10 Ident("ch")) Reg(U8) Some([20])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t11 (t11 Number(U8, 48)) Reg(U8) Some([28])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t12 (t12 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) Reg(U8) Some([20])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t13 (t13 Arithmetic(Subtract, Ident("ch"), Number(U8, 65))) Reg(U8) Some([20])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t14 (t14 Ident("ch")) Reg(U8) Some([20])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t15 (t15 Number(U8, 65)) Reg(U8) Some([28])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t16 (t16 Number(U8, 10)) Reg(U8) Some([28])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t2 (t2 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) Reg(U8) Some([20])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t3 (t3 Arithmetic(Subtract, Ident("ch"), Number(U8, 97))) Reg(U8) Some([20])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t4 (t4 Ident("ch")) Reg(U8) Some([20])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t5 (t5 Number(U8, 97)) Reg(U8) Some([28])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t6 (t6 Number(U8, 10)) Reg(U8) Some([28])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t7 (t7 Ident("ch")) Reg(U8) Some([20])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t8 (t8 Number(U8, 57)) Reg(U8) Some([28])
# Var inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t9 (t9 Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) Reg(U8) Some([20])
# Var inline_main_parseHex_3_t0 (t0 Number(U8, 16)) Reg(U8) Some([30])
# Var inline_main_parseHex_3_t1 (t1 Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) Reg(U8) Some([28])
# Var inline_main_parseHex_3_t10 (t10 Ident("c")) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_parseHex_3_t11 (t11 Ident("h")) Reg(U8) Some([20])
# Var inline_main_parseHex_3_t2 (t2 Deref(Ident("c"))) Reg(U8) Some([28])
# Var inline_main_parseHex_3_t3 (t3 Ident("c")) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_parseHex_3_t4 (t4 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 1)) }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_parseHex_3_t5 (t5 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_parseHex_3_t6 (t6 Number(USIZE, 1)) Reg(U32) Some([32, 33, 34, 35])
# Var inline_main_parseHex_3_t7 (t7 Ident("h")) Reg(U8) Some([29])
# Var inline_main_parseHex_3_t8 (t8 Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) Reg(U8) Some([20])
# Var inline_main_parseHex_3_t9 (t9 Deref(Ident("c"))) Reg(U8) Some([20])
# Var inline_main_parseHex_4_c (Arg0 c Ptr(Number(U8))) Reg(U32) Some([36, 37, 38, 39])
# Var inline_main_parseHex_4_h (Local h Number(U8) Reg(U8)) Reg(U8) Some([29])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_ch (Arg0 ch Number(U8)) Reg(U8) Some([29])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t0 (t0 Ident("ch")) Reg(U8) Some([29])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t1 (t1 Number(U8, 97)) Reg(U8) Some([30])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t10 (t10 Ident("ch")) Reg(U8) Some([29])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t11 (t11 Number(U8, 48)) Reg(U8) Some([30])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t12 (t12 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) Reg(U8) Some([29])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t13 (t13 Arithmetic(Subtract, Ident("ch"), Number(U8, 65))) Reg(U8) Some([29])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t14 (t14 Ident("ch")) Reg(U8) Some([29])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t15 (t15 Number(U8, 65)) Reg(U8) Some([30])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t16 (t16 Number(U8, 10)) Reg(U8) Some([30])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t2 (t2 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) Reg(U8) Some([29])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t3 (t3 Arithmetic(Subtract, Ident("ch"), Number(U8, 97))) Reg(U8) Some([29])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t4 (t4 Ident("ch")) Reg(U8) Some([29])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t5 (t5 Number(U8, 97)) Reg(U8) Some([30])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t6 (t6 Number(U8, 10)) Reg(U8) Some([30])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t7 (t7 Ident("ch")) Reg(U8) Some([29])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t8 (t8 Number(U8, 57)) Reg(U8) Some([30])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t9 (t9 Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) Reg(U8) Some([29])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_ch (Arg0 ch Number(U8)) Reg(U8) Some([28])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t0 (t0 Ident("ch")) Reg(U8) Some([28])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t1 (t1 Number(U8, 97)) Reg(U8) Some([29])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t10 (t10 Ident("ch")) Reg(U8) Some([28])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t11 (t11 Number(U8, 48)) Reg(U8) Some([29])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t12 (t12 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) Reg(U8) Some([28])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t13 (t13 Arithmetic(Subtract, Ident("ch"), Number(U8, 65))) Reg(U8) Some([28])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t14 (t14 Ident("ch")) Reg(U8) Some([28])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t15 (t15 Number(U8, 65)) Reg(U8) Some([29])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t16 (t16 Number(U8, 10)) Reg(U8) Some([29])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t2 (t2 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) Reg(U8) Some([28])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t3 (t3 Arithmetic(Subtract, Ident("ch"), Number(U8, 97))) Reg(U8) Some([28])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t4 (t4 Ident("ch")) Reg(U8) Some([28])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t5 (t5 Number(U8, 97)) Reg(U8) Some([29])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t6 (t6 Number(U8, 10)) Reg(U8) Some([29])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t7 (t7 Ident("ch")) Reg(U8) Some([28])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t8 (t8 Number(U8, 57)) Reg(U8) Some([29])
# Var inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t9 (t9 Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) Reg(U8) Some([28])
# Var inline_main_parseHex_4_t0 (t0 Number(U8, 16)) Reg(U8) Some([40])
# Var inline_main_parseHex_4_t1 (t1 Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) Reg(U8) Some([29])
# Var inline_main_parseHex_4_t10 (t10 Ident("c")) Reg(U32) Some([36, 37, 38, 39])
# Var inline_main_parseHex_4_t11 (t11 Ident("h")) Reg(U8) Some([28])
# Var inline_main_parseHex_4_t2 (t2 Deref(Ident("c"))) Reg(U8) Some([29])
# Var inline_main_parseHex_4_t3 (t3 Ident("c")) Reg(U32) Some([36, 37, 38, 39])
# Var inline_main_parseHex_4_t4 (t4 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 1)) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_main_parseHex_4_t5 (t5 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_main_parseHex_4_t6 (t6 Number(USIZE, 1)) Reg(U32) Some([44, 45, 46, 47])
# Var inline_main_parseHex_4_t7 (t7 Ident("h")) Reg(U8) Some([30])
# Var inline_main_parseHex_4_t8 (t8 Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) Reg(U8) Some([28])
# Var inline_main_parseHex_4_t9 (t9 Deref(Ident("c"))) Reg(U8) Some([28])
# Var inline_main_printHex_10_a (Arg0 a Number(U8)) Reg(U8) Some([20])
# Var inline_main_printHex_10_b (Local b Number(U8) Reg(U8)) Reg(U8) Some([28])
# Var inline_main_printHex_10_inline_printHex_printHexDigit_5_a (Arg0 a Number(U8)) Reg(U8) Some([29])
# Var inline_main_printHex_10_inline_printHex_printHexDigit_5_t0 (t0 Ident("a")) Reg(U8) Some([29])
# Var inline_main_printHex_10_inline_printHex_printHexDigit_5_t1 (t1 Number(U8, 10)) Reg(U8) Some([30])
# Var inline_main_printHex_10_inline_printHex_printHexDigit_5_t2 (t2 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([29])
# Var inline_main_printHex_10_inline_printHex_printHexDigit_5_t3 (t3 Ident("a")) Reg(U8) Some([29])
# Var inline_main_printHex_10_inline_printHex_printHexDigit_5_t4 (t4 Number(U8, 48)) Reg(U8) Some([30])
# Var inline_main_printHex_10_inline_printHex_printHexDigit_5_t5 (t5 Ident("a")) Reg(U8) Some([29])
# Var inline_main_printHex_10_inline_printHex_printHexDigit_5_t6 (t6 Number(U8, 10)) Reg(U8) Some([30])
# Var inline_main_printHex_10_inline_printHex_printHexDigit_5_t7 (t7 Ident("a")) Reg(U8) Some([29])
# Var inline_main_printHex_10_inline_printHex_printHexDigit_5_t8 (t8 Number(U8, 65)) Reg(U8) Some([30])
# Var inline_main_printHex_10_inline_printHex_printHexDigit_5_t9 (t9 Ident("a")) Reg(U8) Some([29])
# Var inline_main_printHex_10_inline_printHex_printHexDigit_6_a (Arg0 a Number(U8)) Reg(U8) Some([20])
# Var inline_main_printHex_10_inline_printHex_printHexDigit_6_t0 (t0 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_10_inline_printHex_printHexDigit_6_t1 (t1 Number(U8, 10)) Reg(U8) Some([28])
# Var inline_main_printHex_10_inline_printHex_printHexDigit_6_t2 (t2 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([20])
# Var inline_main_printHex_10_inline_printHex_printHexDigit_6_t3 (t3 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_10_inline_printHex_printHexDigit_6_t4 (t4 Number(U8, 48)) Reg(U8) Some([28])
# Var inline_main_printHex_10_inline_printHex_printHexDigit_6_t5 (t5 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_10_inline_printHex_printHexDigit_6_t6 (t6 Number(U8, 10)) Reg(U8) Some([28])
# Var inline_main_printHex_10_inline_printHex_printHexDigit_6_t7 (t7 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_10_inline_printHex_printHexDigit_6_t8 (t8 Number(U8, 65)) Reg(U8) Some([28])
# Var inline_main_printHex_10_inline_printHex_printHexDigit_6_t9 (t9 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_10_t0 (t0 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_10_t1 (t1 Number(U8, 15)) Reg(U8) Some([28])
# Var inline_main_printHex_10_t10 (t10 Number(U8, 48)) Reg(U8) Some([28])
# Var inline_main_printHex_10_t11 (t11 Call(Call { function: "printHexDigit", parameters: [Ident("a")] })) Reg(U8) Some([48])
# Var inline_main_printHex_10_t12 (t12 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_10_t2 (t2 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_10_t3 (t3 Number(U8, 16)) Reg(U8) Some([28])
# Var inline_main_printHex_10_t4 (t4 Call(Call { function: "printHexDigit", parameters: [Ident("b")] })) Reg(U8) Some([48])
# Var inline_main_printHex_10_t5 (t5 Ident("b")) Reg(U8) Some([28])
# Var inline_main_printHex_10_t6 (t6 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_10_t7 (t7 Arithmetic(Multiply, Ident("b"), Number(U8, 16))) Reg(U8) Some([28])
# Var inline_main_printHex_10_t8 (t8 Ident("b")) Reg(U8) Some([28])
# Var inline_main_printHex_10_t9 (t9 Number(U8, 16)) Reg(U8) Some([29])
# Var inline_main_printHex_11_a (Arg0 a Number(U8)) Reg(U8) Some([20])
# Var inline_main_printHex_11_b (Local b Number(U8) Reg(U8)) Reg(U8) Some([28])
# Var inline_main_printHex_11_inline_printHex_printHexDigit_5_a (Arg0 a Number(U8)) Reg(U8) Some([29])
# Var inline_main_printHex_11_inline_printHex_printHexDigit_5_t0 (t0 Ident("a")) Reg(U8) Some([29])
# Var inline_main_printHex_11_inline_printHex_printHexDigit_5_t1 (t1 Number(U8, 10)) Reg(U8) Some([30])
# Var inline_main_printHex_11_inline_printHex_printHexDigit_5_t2 (t2 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([29])
# Var inline_main_printHex_11_inline_printHex_printHexDigit_5_t3 (t3 Ident("a")) Reg(U8) Some([29])
# Var inline_main_printHex_11_inline_printHex_printHexDigit_5_t4 (t4 Number(U8, 48)) Reg(U8) Some([30])
# Var inline_main_printHex_11_inline_printHex_printHexDigit_5_t5 (t5 Ident("a")) Reg(U8) Some([29])
# Var inline_main_printHex_11_inline_printHex_printHexDigit_5_t6 (t6 Number(U8, 10)) Reg(U8) Some([30])
# Var inline_main_printHex_11_inline_printHex_printHexDigit_5_t7 (t7 Ident("a")) Reg(U8) Some([29])
# Var inline_main_printHex_11_inline_printHex_printHexDigit_5_t8 (t8 Number(U8, 65)) Reg(U8) Some([30])
# Var inline_main_printHex_11_inline_printHex_printHexDigit_5_t9 (t9 Ident("a")) Reg(U8) Some([29])
# Var inline_main_printHex_11_inline_printHex_printHexDigit_6_a (Arg0 a Number(U8)) Reg(U8) Some([20])
# Var inline_main_printHex_11_inline_printHex_printHexDigit_6_t0 (t0 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_11_inline_printHex_printHexDigit_6_t1 (t1 Number(U8, 10)) Reg(U8) Some([28])
# Var inline_main_printHex_11_inline_printHex_printHexDigit_6_t2 (t2 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([20])
# Var inline_main_printHex_11_inline_printHex_printHexDigit_6_t3 (t3 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_11_inline_printHex_printHexDigit_6_t4 (t4 Number(U8, 48)) Reg(U8) Some([28])
# Var inline_main_printHex_11_inline_printHex_printHexDigit_6_t5 (t5 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_11_inline_printHex_printHexDigit_6_t6 (t6 Number(U8, 10)) Reg(U8) Some([28])
# Var inline_main_printHex_11_inline_printHex_printHexDigit_6_t7 (t7 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_11_inline_printHex_printHexDigit_6_t8 (t8 Number(U8, 65)) Reg(U8) Some([28])
# Var inline_main_printHex_11_inline_printHex_printHexDigit_6_t9 (t9 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_11_t0 (t0 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_11_t1 (t1 Number(U8, 15)) Reg(U8) Some([28])
# Var inline_main_printHex_11_t10 (t10 Number(U8, 48)) Reg(U8) Some([28])
# Var inline_main_printHex_11_t11 (t11 Call(Call { function: "printHexDigit", parameters: [Ident("a")] })) Reg(U8) Some([48])
# Var inline_main_printHex_11_t12 (t12 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_11_t2 (t2 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_11_t3 (t3 Number(U8, 16)) Reg(U8) Some([28])
# Var inline_main_printHex_11_t4 (t4 Call(Call { function: "printHexDigit", parameters: [Ident("b")] })) Reg(U8) Some([48])
# Var inline_main_printHex_11_t5 (t5 Ident("b")) Reg(U8) Some([28])
# Var inline_main_printHex_11_t6 (t6 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_11_t7 (t7 Arithmetic(Multiply, Ident("b"), Number(U8, 16))) Reg(U8) Some([28])
# Var inline_main_printHex_11_t8 (t8 Ident("b")) Reg(U8) Some([28])
# Var inline_main_printHex_11_t9 (t9 Number(U8, 16)) Reg(U8) Some([29])
# Var inline_main_printHex_7_a (Arg0 a Number(U8)) Reg(U8) Some([20])
# Var inline_main_printHex_7_b (Local b Number(U8) Reg(U8)) Reg(U8) Some([28])
# Var inline_main_printHex_7_inline_printHex_printHexDigit_5_a (Arg0 a Number(U8)) Reg(U8) Some([29])
# Var inline_main_printHex_7_inline_printHex_printHexDigit_5_t0 (t0 Ident("a")) Reg(U8) Some([29])
# Var inline_main_printHex_7_inline_printHex_printHexDigit_5_t1 (t1 Number(U8, 10)) Reg(U8) Some([30])
# Var inline_main_printHex_7_inline_printHex_printHexDigit_5_t2 (t2 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([29])
# Var inline_main_printHex_7_inline_printHex_printHexDigit_5_t3 (t3 Ident("a")) Reg(U8) Some([29])
# Var inline_main_printHex_7_inline_printHex_printHexDigit_5_t4 (t4 Number(U8, 48)) Reg(U8) Some([30])
# Var inline_main_printHex_7_inline_printHex_printHexDigit_5_t5 (t5 Ident("a")) Reg(U8) Some([29])
# Var inline_main_printHex_7_inline_printHex_printHexDigit_5_t6 (t6 Number(U8, 10)) Reg(U8) Some([30])
# Var inline_main_printHex_7_inline_printHex_printHexDigit_5_t7 (t7 Ident("a")) Reg(U8) Some([29])
# Var inline_main_printHex_7_inline_printHex_printHexDigit_5_t8 (t8 Number(U8, 65)) Reg(U8) Some([30])
# Var inline_main_printHex_7_inline_printHex_printHexDigit_5_t9 (t9 Ident("a")) Reg(U8) Some([29])
# Var inline_main_printHex_7_inline_printHex_printHexDigit_6_a (Arg0 a Number(U8)) Reg(U8) Some([20])
# Var inline_main_printHex_7_inline_printHex_printHexDigit_6_t0 (t0 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_7_inline_printHex_printHexDigit_6_t1 (t1 Number(U8, 10)) Reg(U8) Some([28])
# Var inline_main_printHex_7_inline_printHex_printHexDigit_6_t2 (t2 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([20])
# Var inline_main_printHex_7_inline_printHex_printHexDigit_6_t3 (t3 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_7_inline_printHex_printHexDigit_6_t4 (t4 Number(U8, 48)) Reg(U8) Some([28])
# Var inline_main_printHex_7_inline_printHex_printHexDigit_6_t5 (t5 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_7_inline_printHex_printHexDigit_6_t6 (t6 Number(U8, 10)) Reg(U8) Some([28])
# Var inline_main_printHex_7_inline_printHex_printHexDigit_6_t7 (t7 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_7_inline_printHex_printHexDigit_6_t8 (t8 Number(U8, 65)) Reg(U8) Some([28])
# Var inline_main_printHex_7_inline_printHex_printHexDigit_6_t9 (t9 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_7_t0 (t0 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_7_t1 (t1 Number(U8, 15)) Reg(U8) Some([28])
# Var inline_main_printHex_7_t10 (t10 Number(U8, 48)) Reg(U8) Some([28])
# Var inline_main_printHex_7_t11 (t11 Call(Call { function: "printHexDigit", parameters: [Ident("a")] })) Reg(U8) Some([48])
# Var inline_main_printHex_7_t12 (t12 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_7_t2 (t2 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_7_t3 (t3 Number(U8, 16)) Reg(U8) Some([28])
# Var inline_main_printHex_7_t4 (t4 Call(Call { function: "printHexDigit", parameters: [Ident("b")] })) Reg(U8) Some([48])
# Var inline_main_printHex_7_t5 (t5 Ident("b")) Reg(U8) Some([28])
# Var inline_main_printHex_7_t6 (t6 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_7_t7 (t7 Arithmetic(Multiply, Ident("b"), Number(U8, 16))) Reg(U8) Some([28])
# Var inline_main_printHex_7_t8 (t8 Ident("b")) Reg(U8) Some([28])
# Var inline_main_printHex_7_t9 (t9 Number(U8, 16)) Reg(U8) Some([29])
# Var inline_main_printHex_8_a (Arg0 a Number(U8)) Reg(U8) Some([20])
# Var inline_main_printHex_8_b (Local b Number(U8) Reg(U8)) Reg(U8) Some([28])
# Var inline_main_printHex_8_inline_printHex_printHexDigit_5_a (Arg0 a Number(U8)) Reg(U8) Some([29])
# Var inline_main_printHex_8_inline_printHex_printHexDigit_5_t0 (t0 Ident("a")) Reg(U8) Some([29])
# Var inline_main_printHex_8_inline_printHex_printHexDigit_5_t1 (t1 Number(U8, 10)) Reg(U8) Some([30])
# Var inline_main_printHex_8_inline_printHex_printHexDigit_5_t2 (t2 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([29])
# Var inline_main_printHex_8_inline_printHex_printHexDigit_5_t3 (t3 Ident("a")) Reg(U8) Some([29])
# Var inline_main_printHex_8_inline_printHex_printHexDigit_5_t4 (t4 Number(U8, 48)) Reg(U8) Some([30])
# Var inline_main_printHex_8_inline_printHex_printHexDigit_5_t5 (t5 Ident("a")) Reg(U8) Some([29])
# Var inline_main_printHex_8_inline_printHex_printHexDigit_5_t6 (t6 Number(U8, 10)) Reg(U8) Some([30])
# Var inline_main_printHex_8_inline_printHex_printHexDigit_5_t7 (t7 Ident("a")) Reg(U8) Some([29])
# Var inline_main_printHex_8_inline_printHex_printHexDigit_5_t8 (t8 Number(U8, 65)) Reg(U8) Some([30])
# Var inline_main_printHex_8_inline_printHex_printHexDigit_5_t9 (t9 Ident("a")) Reg(U8) Some([29])
# Var inline_main_printHex_8_inline_printHex_printHexDigit_6_a (Arg0 a Number(U8)) Reg(U8) Some([20])
# Var inline_main_printHex_8_inline_printHex_printHexDigit_6_t0 (t0 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_8_inline_printHex_printHexDigit_6_t1 (t1 Number(U8, 10)) Reg(U8) Some([28])
# Var inline_main_printHex_8_inline_printHex_printHexDigit_6_t2 (t2 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([20])
# Var inline_main_printHex_8_inline_printHex_printHexDigit_6_t3 (t3 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_8_inline_printHex_printHexDigit_6_t4 (t4 Number(U8, 48)) Reg(U8) Some([28])
# Var inline_main_printHex_8_inline_printHex_printHexDigit_6_t5 (t5 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_8_inline_printHex_printHexDigit_6_t6 (t6 Number(U8, 10)) Reg(U8) Some([28])
# Var inline_main_printHex_8_inline_printHex_printHexDigit_6_t7 (t7 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_8_inline_printHex_printHexDigit_6_t8 (t8 Number(U8, 65)) Reg(U8) Some([28])
# Var inline_main_printHex_8_inline_printHex_printHexDigit_6_t9 (t9 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_8_t0 (t0 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_8_t1 (t1 Number(U8, 15)) Reg(U8) Some([28])
# Var inline_main_printHex_8_t10 (t10 Number(U8, 48)) Reg(U8) Some([28])
# Var inline_main_printHex_8_t11 (t11 Call(Call { function: "printHexDigit", parameters: [Ident("a")] })) Reg(U8) Some([48])
# Var inline_main_printHex_8_t12 (t12 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_8_t2 (t2 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_8_t3 (t3 Number(U8, 16)) Reg(U8) Some([28])
# Var inline_main_printHex_8_t4 (t4 Call(Call { function: "printHexDigit", parameters: [Ident("b")] })) Reg(U8) Some([48])
# Var inline_main_printHex_8_t5 (t5 Ident("b")) Reg(U8) Some([28])
# Var inline_main_printHex_8_t6 (t6 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_8_t7 (t7 Arithmetic(Multiply, Ident("b"), Number(U8, 16))) Reg(U8) Some([28])
# Var inline_main_printHex_8_t8 (t8 Ident("b")) Reg(U8) Some([28])
# Var inline_main_printHex_8_t9 (t9 Number(U8, 16)) Reg(U8) Some([29])
# Var inline_main_printHex_9_a (Arg0 a Number(U8)) Reg(U8) Some([20])
# Var inline_main_printHex_9_b (Local b Number(U8) Reg(U8)) Reg(U8) Some([28])
# Var inline_main_printHex_9_inline_printHex_printHexDigit_5_a (Arg0 a Number(U8)) Reg(U8) Some([29])
# Var inline_main_printHex_9_inline_printHex_printHexDigit_5_t0 (t0 Ident("a")) Reg(U8) Some([29])
# Var inline_main_printHex_9_inline_printHex_printHexDigit_5_t1 (t1 Number(U8, 10)) Reg(U8) Some([30])
# Var inline_main_printHex_9_inline_printHex_printHexDigit_5_t2 (t2 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([29])
# Var inline_main_printHex_9_inline_printHex_printHexDigit_5_t3 (t3 Ident("a")) Reg(U8) Some([29])
# Var inline_main_printHex_9_inline_printHex_printHexDigit_5_t4 (t4 Number(U8, 48)) Reg(U8) Some([30])
# Var inline_main_printHex_9_inline_printHex_printHexDigit_5_t5 (t5 Ident("a")) Reg(U8) Some([29])
# Var inline_main_printHex_9_inline_printHex_printHexDigit_5_t6 (t6 Number(U8, 10)) Reg(U8) Some([30])
# Var inline_main_printHex_9_inline_printHex_printHexDigit_5_t7 (t7 Ident("a")) Reg(U8) Some([29])
# Var inline_main_printHex_9_inline_printHex_printHexDigit_5_t8 (t8 Number(U8, 65)) Reg(U8) Some([30])
# Var inline_main_printHex_9_inline_printHex_printHexDigit_5_t9 (t9 Ident("a")) Reg(U8) Some([29])
# Var inline_main_printHex_9_inline_printHex_printHexDigit_6_a (Arg0 a Number(U8)) Reg(U8) Some([20])
# Var inline_main_printHex_9_inline_printHex_printHexDigit_6_t0 (t0 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_9_inline_printHex_printHexDigit_6_t1 (t1 Number(U8, 10)) Reg(U8) Some([28])
# Var inline_main_printHex_9_inline_printHex_printHexDigit_6_t2 (t2 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([20])
# Var inline_main_printHex_9_inline_printHex_printHexDigit_6_t3 (t3 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_9_inline_printHex_printHexDigit_6_t4 (t4 Number(U8, 48)) Reg(U8) Some([28])
# Var inline_main_printHex_9_inline_printHex_printHexDigit_6_t5 (t5 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_9_inline_printHex_printHexDigit_6_t6 (t6 Number(U8, 10)) Reg(U8) Some([28])
# Var inline_main_printHex_9_inline_printHex_printHexDigit_6_t7 (t7 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_9_inline_printHex_printHexDigit_6_t8 (t8 Number(U8, 65)) Reg(U8) Some([28])
# Var inline_main_printHex_9_inline_printHex_printHexDigit_6_t9 (t9 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_9_t0 (t0 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_9_t1 (t1 Number(U8, 15)) Reg(U8) Some([28])
# Var inline_main_printHex_9_t10 (t10 Number(U8, 48)) Reg(U8) Some([28])
# Var inline_main_printHex_9_t11 (t11 Call(Call { function: "printHexDigit", parameters: [Ident("a")] })) Reg(U8) Some([48])
# Var inline_main_printHex_9_t12 (t12 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_9_t2 (t2 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_9_t3 (t3 Number(U8, 16)) Reg(U8) Some([28])
# Var inline_main_printHex_9_t4 (t4 Call(Call { function: "printHexDigit", parameters: [Ident("b")] })) Reg(U8) Some([48])
# Var inline_main_printHex_9_t5 (t5 Ident("b")) Reg(U8) Some([28])
# Var inline_main_printHex_9_t6 (t6 Ident("a")) Reg(U8) Some([20])
# Var inline_main_printHex_9_t7 (t7 Arithmetic(Multiply, Ident("b"), Number(U8, 16))) Reg(U8) Some([28])
# Var inline_main_printHex_9_t8 (t8 Ident("b")) Reg(U8) Some([28])
# Var inline_main_printHex_9_t9 (t9 Number(U8, 16)) Reg(U8) Some([29])
# Var inline_main_readline_14_buf (Arg0 buf Ptr(Number(U8))) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_readline_14_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([28])
# Var inline_main_readline_14_inline_readline_getchar_0_t0 (t0 Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))) Reg(U8) Some([28])
# Var inline_main_readline_14_inline_readline_getchar_0_t1 (t1 Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([28])
# Var inline_main_readline_14_inline_readline_getchar_0_t2 (t2 Number(U8, 1)) Reg(U8) Some([29])
# Var inline_main_readline_14_inline_readline_getchar_0_t3 (t3 Number(U8, 0)) Reg(U8) Some([29])
# Var inline_main_readline_14_inline_readline_getchar_0_t4 (t4 TtyIn) Reg(U8) Some([28])
# Var inline_main_readline_14_t0 (t0 Number(U8, 0)) Reg(U8) Some([28])
# Var inline_main_readline_14_t1 (t1 Number(U8, 0)) Reg(U8) Some([29])
# Var inline_main_readline_14_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("buf") }, Number(USIZE, 1)) }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_readline_14_t11 (t11 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("buf") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_readline_14_t12 (t12 Number(USIZE, 1)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_main_readline_14_t2 (t2 Ident("ch")) Reg(U8) Some([28])
# Var inline_main_readline_14_t3 (t3 Number(U8, 13)) Reg(U8) Some([29])
# Var inline_main_readline_14_t4 (t4 Ident("ch")) Reg(U8) Some([28])
# Var inline_main_readline_14_t5 (t5 Number(U8, 10)) Reg(U8) Some([29])
# Var inline_main_readline_14_t6 (t6 Ident("buf")) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_readline_14_t7 (t7 Number(U8, 0)) Reg(U8) Some([28])
# Var inline_main_readline_14_t8 (t8 Ident("buf")) Reg(U32) Some([24, 25, 26, 27])
# Var inline_main_readline_14_t9 (t9 Ident("ch")) Reg(U8) Some([28])
# Var p_byte (Local p_byte Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([24, 25, 26, 27])
# Var t0 (Stack size negated) Reg(U32) Some([16, 17, 18, 19])
# Var t1 (t1 Number(U8, 82)) Reg(U8) Some([20])
# Var t10 (t10 AddressOf(Index("buf", Number(U8, 0)))) Reg(U32) Some([24, 25, 26, 27])
# Var t11 (t11 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }) Reg(U32) Some([24, 25, 26, 27])
# Var t12 (t12 Ident("__frame_pointer")) Reg(U32) Some([52, 53, 54, 55])
# Var t13 (t13 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) Reg(U32) Some([24, 25, 26, 27])
# Var t14 (t14 Number(U8, 0)) Reg(U8) Some([20])
# Var t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0)) }) Reg(U32) Some([24, 25, 26, 27])
# Var t16 (t16 Ident("__frame_pointer")) Reg(U32) Some([52, 53, 54, 55])
# Var t17 (t17 Number(USIZE, 0)) Reg(U32) Some([24, 25, 26, 27])
# Var t18 (t18 Ident("ch")) Reg(U8) Some([20])
# Var t19 (t19 Number(U8, 114)) Reg(U8) Some([28])
# Var t2 (t2 Number(U8, 69)) Reg(U8) Some([20])
# Var t20 (t20 Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] })) Reg(U8) Some([48])
# Var t21 (t21 Deref(Ident("p_byte"))) Reg(U8) Some([20])
# Var t22 (t22 Ident("p_byte")) Reg(U32) Some([24, 25, 26, 27])
# Var t23 (t23 Number(U8, 10)) Reg(U8) Some([20])
# Var t24 (t24 Ident("ch")) Reg(U8) Some([20])
# Var t25 (t25 Number(U8, 119)) Reg(U8) Some([28])
# Var t26 (t26 Ident("p_byte")) Reg(U32) Some([56, 57, 58, 59])
# Var t27 (t27 Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] })) Reg(U8) Some([20])
# Var t28 (t28 AddressOf(Index("buf", Number(USIZE, 1)))) Reg(U32) Some([24, 25, 26, 27])
# Var t29 (t29 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 1)) }) Reg(U32) Some([24, 25, 26, 27])
# Var t3 (t3 Number(U8, 65)) Reg(U8) Some([20])
# Var t30 (t30 Ident("__frame_pointer")) Reg(U32) Some([52, 53, 54, 55])
# Var t31 (t31 Number(USIZE, 1)) Reg(U32) Some([24, 25, 26, 27])
# Var t32 (t32 Ident("ch")) Reg(U8) Some([20])
# Var t33 (t33 Number(U8, 110)) Reg(U8) Some([28])
# Var t34 (t34 Ident("addr")) Reg(U32) Some([16, 17, 18, 19])
# Var t35 (t35 Number(USIZE, 1)) Reg(U32) Some([24, 25, 26, 27])
# Var t36 (t36 Ident("ch")) Reg(U8) Some([20])
# Var t37 (t37 Number(U8, 97)) Reg(U8) Some([28])
# Var t38 (t38 Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] })) Reg(U8) Some([48])
# Var t39 (t39 Index("addr", Number(USIZE, 3))) Reg(U8) Some([60])
# Var t4 (t4 Number(U8, 68)) Reg(U8) Some([20])
# Var t40 (t40 Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] })) Reg(U8) Some([48])
# Var t41 (t41 Index("addr", Number(USIZE, 2))) Reg(U8) Some([60])
# Var t42 (t42 Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] })) Reg(U8) Some([48])
# Var t43 (t43 Index("addr", Number(USIZE, 1))) Reg(U8) Some([60])
# Var t44 (t44 Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] })) Reg(U8) Some([48])
# Var t45 (t45 Index("addr", Number(USIZE, 0))) Reg(U8) Some([60])
# Var t46 (t46 Number(U8, 10)) Reg(U8) Some([20])
# Var t47 (t47 Ident("ch")) Reg(U8) Some([20])
# Var t48 (t48 Number(U8, 115)) Reg(U8) Some([28])
# Var t49 (t49 Index("buf", Ident("i"))) Reg(U8) Some([28])
# Var t5 (t5 Number(U8, 89)) Reg(U8) Some([20])
# Var t50 (t50 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Ident("i")) }) Reg(U32) Some([36, 37, 38, 39])
# Var t51 (t51 Ident("__frame_pointer")) Reg(U32) Some([52, 53, 54, 55])
# Var t52 (t52 Ident("i")) Reg(U32) Some([24, 25, 26, 27])
# Var t53 (t53 Number(U8, 0)) Reg(U8) Some([29])
# Var t54 (t54 Index("addr", Number(USIZE, 2))) Reg(U8) Some([60])
# Var t55 (t55 Index("addr", Number(USIZE, 1))) Reg(U8) Some([60])
# Var t56 (t56 Index("addr", Number(USIZE, 0))) Reg(U8) Some([60])
# Var t57 (t57 Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] })) Reg(U8) Some([28])
# Var t58 (t58 AddressOf(Index("buf", Ident("i")))) Reg(U32) Some([36, 37, 38, 39])
# Var t59 (t59 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Ident("i")) }) Reg(U32) Some([36, 37, 38, 39])
# Var t6 (t6 Number(U8, 10)) Reg(U8) Some([20])
# Var t60 (t60 Ident("__frame_pointer")) Reg(U32) Some([52, 53, 54, 55])
# Var t61 (t61 Ident("i")) Reg(U32) Some([24, 25, 26, 27])
# Var t62 (t62 Ident("i")) Reg(U32) Some([24, 25, 26, 27])
# Var t63 (t63 Number(USIZE, 2)) Reg(U32) Some([36, 37, 38, 39])
# Var t64 (t64 Ident("ch")) Reg(U8) Some([20])
# Var t65 (t65 Number(U8, 113)) Reg(U8) Some([28])
# Var t66 (t66 Number(U8, 0)) Reg(U8) Some([60])
# Var t67 (Stack size) Reg(U32) Some([24, 25, 26, 27])
# Var t68 (t68 Ident("ch")) Reg(U8) Some([20])
# Var t69 (t69 Number(U8, 105)) Reg(U8) Some([28])
# Var t7 (t7 Number(U8, 0)) Reg(U8) Some([20])
# Var t70 (t70 Number(U8, 66)) Reg(U8) Some([20])
# Var t71 (t71 Number(U8, 111)) Reg(U8) Some([20])
# Var t72 (t72 Number(U8, 111)) Reg(U8) Some([20])
# Var t73 (t73 Number(U8, 116)) Reg(U8) Some([20])
# Var t74 (t74 Number(U8, 114)) Reg(U8) Some([20])
# Var t75 (t75 Number(U8, 97)) Reg(U8) Some([20])
# Var t76 (t76 Number(U8, 109)) Reg(U8) Some([20])
# Var t77 (t77 Number(U8, 10)) Reg(U8) Some([20])
# Var t78 (t78 Number(U8, 72)) Reg(U8) Some([28])
# Var t79 (t79 Number(U8, 117)) Reg(U8) Some([28])
# Var t8 (t8 Number(U8, 0)) Reg(U8) Some([28])
# Var t80 (t80 Number(U8, 104)) Reg(U8) Some([28])
# Var t81 (t81 Number(U8, 63)) Reg(U8) Some([28])
# Var t82 (t82 Ident("ch")) Reg(U8) Some([20])
# Var t83 (t83 Number(U8, 10)) Reg(U8) Some([20])
# Var t84 (t84 Number(U8, 0)) Reg(U8) Some([60])
# Var t85 (Stack size) Reg(U32) Some([24, 25, 26, 27])
# Var t9 (t9 Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] })) Reg(U8) Some([48])
# 00022 Instruction { source: "reserve 20 bytes of stack space for locals", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xffffffec=4294967276)], resolved: None }
32 0c ec ff ff ff 
# t0 <- 0xffffffecu32 
# 	SourceContext { contexts: [] }
# 00028 Instruction { source: "t0 <- 0xffffffecu32 \n\tSourceContext { contexts: [] }", opcode: LoadImm32, args: [Register(0x10), Constant32(0xffffffec=4294967276)], resolved: None }
20 10 ec ff ff ff 
# __frame_pointer <- __frame_pointer Add t0
# 	SourceContext { contexts: [] }
# 0002e Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0002f Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x10), Register(0x0c)], resolved: None }
30 0c 10 0c 
# 00033 Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# addr <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"addr\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 00034 Instruction { source: "addr <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x10), Constant32(0x00000000=0)], resolved: None }
20 10 00 00 00 00 
# i <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 0003a Instruction { source: "i <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000000=0)], resolved: None }
20 18 00 00 00 00 
# ch <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 00040 Instruction { source: "ch <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x00=0)], resolved: None }
04 14 00 
# t1 <- 0n82/0x52u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 82) }", "Number(U8, 82)", "Number(U8, 82)"] }
# 00043 Instruction { source: "t1 <- 0n82/0x52u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 82) }\", \"Number(U8, 82)\", \"Number(U8, 82)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x52=82)], resolved: None }
04 14 52 
# ttyout <- t1
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 82) }"] }
# 00046 Instruction { source: "ttyout <- t1\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 82) }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# t2 <- 0n69/0x45u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 69) }", "Number(U8, 69)", "Number(U8, 69)"] }
# 00048 Instruction { source: "t2 <- 0n69/0x45u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 69) }\", \"Number(U8, 69)\", \"Number(U8, 69)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x45=69)], resolved: None }
04 14 45 
# ttyout <- t2
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 69) }"] }
# 0004b Instruction { source: "ttyout <- t2\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 69) }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# t3 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 65) }", "Number(U8, 65)", "Number(U8, 65)"] }
# 0004d Instruction { source: "t3 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 65) }\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x41=65)], resolved: None }
04 14 41 
# ttyout <- t3
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 65) }"] }
# 00050 Instruction { source: "ttyout <- t3\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 65) }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# t4 <- 0n68/0x44u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 68) }", "Number(U8, 68)", "Number(U8, 68)"] }
# 00052 Instruction { source: "t4 <- 0n68/0x44u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 68) }\", \"Number(U8, 68)\", \"Number(U8, 68)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x44=68)], resolved: None }
04 14 44 
# ttyout <- t4
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 68) }"] }
# 00055 Instruction { source: "ttyout <- t4\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 68) }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# t5 <- 0n89/0x59u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 89) }", "Number(U8, 89)", "Number(U8, 89)"] }
# 00057 Instruction { source: "t5 <- 0n89/0x59u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 89) }\", \"Number(U8, 89)\", \"Number(U8, 89)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x59=89)], resolved: None }
04 14 59 
# ttyout <- t5
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 89) }"] }
# 0005a Instruction { source: "ttyout <- t5\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 89) }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 0005c Instruction { source: "t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x0a=10)], resolved: None }
04 14 0a 
# ttyout <- t6
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }"] }
# 0005f Instruction { source: "ttyout <- t6\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# p_byte <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"p_byte\"), var_type: Some(Ptr(Number(U8))), value: Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 0) } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 00061 Instruction { source: "p_byte <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"p_byte\\\"), var_type: Some(Ptr(Number(U8))), value: Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 0) } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000000=0)], resolved: None }
20 18 00 00 00 00 
# :main_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }] }"] }
# main_while_predicate_0
# t7 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00067 Instruction { source: "t7 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x00=0)], resolved: None }
04 14 00 
# t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0006a Instruction { source: "t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x00=0)], resolved: None }
04 1c 00 
# if t7 == t8 then 'main_while_body_1' else 'main_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }"] }
# 0006d Instruction { source: "if t7 == t8 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x14), Register(0x1c)], resolved: None }
15 14 1c 
# 00070 Instruction { source: "if t7 == t8 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(main_while_body_1)], resolved: None }
72 78 00 00 
# 00074 Instruction { source: "if t7 == t8 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(main_while_end_2)], resolved: None }
70 f4 06 00 
# :main_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }, Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }] }"] }
# main_while_body_1
# t12 <- __frame_pointer U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 00078 Instruction { source: "t12 <- __frame_pointer U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x34)], resolved: None }
21 0c 34 
# t14 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0007b Instruction { source: "t14 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x00=0)], resolved: None }
04 14 00 
# t13 U32 <- t14 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }"] }
# 0007e Instruction { source: "Zero-pad for t13 U32 <- t14 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000000=0)], resolved: None }
20 18 00 00 00 00 
# 00084 Instruction { source: "t13 U32 <- t14 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x14), Register(0x18)], resolved: None }
0b 14 18 
# t11 <- t12 Add t13
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })"] }
# 00087 Instruction { source: "t11 <- t12 Add t13\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00088 Instruction { source: "t11 <- t12 Add t13\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\"] }", opcode: AddCarry32_1, args: [Register(0x34), Register(0x18), Register(0x18)], resolved: None }
30 34 18 18 
# 0008c Instruction { source: "t11 <- t12 Add t13\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t10 <- t11 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "AddressOf(Index(\"buf\", Number(U8, 0)))", "AddressOf(Index(\"buf\", Number(U8, 0)))"] }
# optimized away noop copy Instruction { source: "t10 <- t11 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\", \"AddressOf(Index(\\\"buf\\\", Number(U8, 0)))\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_readline_14_buf <- t10 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })", "Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })"] }
# optimized away noop copy Instruction { source: "inline_main_readline_14_buf <- t10 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] }) }\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\", \"Call(Call { function: \\\"readline\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(U8, 0)))] })\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# :inline_main_readline_14_readline_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }"] }
# inline_main_readline_14_readline_while_predicate_0
# inline_main_readline_14_t0 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0008d Instruction { source: "inline_main_readline_14_t0 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x00=0)], resolved: None }
04 1c 00 
# inline_main_readline_14_t1 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00090 Instruction { source: "inline_main_readline_14_t1 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x00=0)], resolved: None }
04 1d 00 
# if inline_main_readline_14_t0 == inline_main_readline_14_t1 then 'inline_main_readline_14_readline_while_body_1' else 'inline_main_readline_14_readline_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }"] }
# 00093 Instruction { source: "if inline_main_readline_14_t0 == inline_main_readline_14_t1 then 'inline_main_readline_14_readline_while_body_1' else 'inline_main_readline_14_readline_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x1d)], resolved: None }
15 1c 1d 
# 00096 Instruction { source: "if inline_main_readline_14_t0 == inline_main_readline_14_t1 then 'inline_main_readline_14_readline_while_body_1' else 'inline_main_readline_14_readline_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_readline_14_readline_while_body_1)], resolved: None }
72 9e 00 00 
# 0009a Instruction { source: "if inline_main_readline_14_t0 == inline_main_readline_14_t1 then 'inline_main_readline_14_readline_while_body_1' else 'inline_main_readline_14_readline_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_14_readline_while_end_2)], resolved: None }
70 fc 00 00 
# :inline_main_readline_14_readline_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }] }"] }
# inline_main_readline_14_readline_while_body_1
# :inline_main_readline_14_inline_readline_getchar_0_getchar_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_readline_14_inline_readline_getchar_0_getchar_while_predicate_0
# Some(inline_main_readline_14_inline_readline_getchar_0_t1) <= call io_ready_to_read()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Call(Call { function: \"io_ready_to_read\", parameters: [] })", "Call(Call { function: \"io_ready_to_read\", parameters: [] })"] }
# 0009e Instruction { source: "ReadyToRead", opcode: IoReadyToRead, args: [Register(0x1c)], resolved: None }
79 1c 
# inline_main_readline_14_inline_readline_getchar_0_t2 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 000a0 Instruction { source: "inline_main_readline_14_inline_readline_getchar_0_t2 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x01=1)], resolved: None }
04 1d 01 
# inline_main_readline_14_inline_readline_getchar_0_t0 <- inline_main_readline_14_inline_readline_getchar_0_t1 BitwiseAnd inline_main_readline_14_inline_readline_getchar_0_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))"] }
# 000a3 Instruction { source: "inline_main_readline_14_inline_readline_getchar_0_t0 <- inline_main_readline_14_inline_readline_getchar_0_t1 BitwiseAnd inline_main_readline_14_inline_readline_getchar_0_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\"] }", opcode: And8, args: [Register(0x1c), Register(0x1d), Register(0x1c)], resolved: None }
1b 1c 1d 1c 
# inline_main_readline_14_inline_readline_getchar_0_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 000a7 Instruction { source: "inline_main_readline_14_inline_readline_getchar_0_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x00=0)], resolved: None }
04 1d 00 
# if inline_main_readline_14_inline_readline_getchar_0_t0 == inline_main_readline_14_inline_readline_getchar_0_t3 then 'inline_main_readline_14_inline_readline_getchar_0_getchar_while_body_1' else 'inline_main_readline_14_inline_readline_getchar_0_getchar_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }"] }
# 000aa Instruction { source: "if inline_main_readline_14_inline_readline_getchar_0_t0 == inline_main_readline_14_inline_readline_getchar_0_t3 then 'inline_main_readline_14_inline_readline_getchar_0_getchar_while_body_1' else 'inline_main_readline_14_inline_readline_getchar_0_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x1d)], resolved: None }
15 1c 1d 
# 000ad Instruction { source: "if inline_main_readline_14_inline_readline_getchar_0_t0 == inline_main_readline_14_inline_readline_getchar_0_t3 then 'inline_main_readline_14_inline_readline_getchar_0_getchar_while_body_1' else 'inline_main_readline_14_inline_readline_getchar_0_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_readline_14_inline_readline_getchar_0_getchar_while_body_1)], resolved: None }
72 b5 00 00 
# 000b1 Instruction { source: "if inline_main_readline_14_inline_readline_getchar_0_t0 == inline_main_readline_14_inline_readline_getchar_0_t3 then 'inline_main_readline_14_inline_readline_getchar_0_getchar_while_body_1' else 'inline_main_readline_14_inline_readline_getchar_0_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_14_inline_readline_getchar_0_getchar_while_end_2)], resolved: None }
70 b9 00 00 
# :inline_main_readline_14_inline_readline_getchar_0_getchar_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_readline_14_inline_readline_getchar_0_getchar_while_body_1
# goto inline_main_readline_14_inline_readline_getchar_0_getchar_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }"] }
# 000b5 Instruction { source: "goto inline_main_readline_14_inline_readline_getchar_0_getchar_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_14_inline_readline_getchar_0_getchar_while_predicate_0)], resolved: None }
70 9e 00 00 
# :inline_main_readline_14_inline_readline_getchar_0_getchar_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_readline_14_inline_readline_getchar_0_getchar_while_end_2
# inline_main_readline_14_inline_readline_getchar_0_t4 <- ttyin
# 	SourceContext { contexts: ["Return { value: Some(TtyIn) }", "TtyIn", "TtyIn"] }
# 000b9 Instruction { source: "inline_main_readline_14_inline_readline_getchar_0_t4 <- ttyin\n\tSourceContext { contexts: [\"Return { value: Some(TtyIn) }\", \"TtyIn\", \"TtyIn\"] }", opcode: In0, args: [Register(0x1c)], resolved: None }
60 1c 
# inline_main_readline_14_ch <- inline_main_readline_14_inline_readline_getchar_0_t4 U8
# 	SourceContext { contexts: ["Return { value: Some(TtyIn) }"] }
# optimized away noop copy Instruction { source: "inline_main_readline_14_ch <- inline_main_readline_14_inline_readline_getchar_0_t4 U8\n\tSourceContext { contexts: [\"Return { value: Some(TtyIn) }\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# goto inline_main_readline_14_inline_readline_getchar_0_function_end_getchar
# 	SourceContext { contexts: ["Return { value: Some(TtyIn) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_readline_14_inline_readline_getchar_0_function_end_getchar\n\tSourceContext { contexts: [\"Return { value: Some(TtyIn) }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_14_inline_readline_getchar_0_function_end_getchar)], resolved: None }
# :inline_main_readline_14_inline_readline_getchar_0_function_end_getchar
# 	SourceContext { contexts: [] }
# inline_main_readline_14_inline_readline_getchar_0_function_end_getchar
# inline_main_readline_14_t2 <- inline_main_readline_14_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_readline_14_t2 <- inline_main_readline_14_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_readline_14_t3 <- 0n13/0x0du8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }", "Number(U8, 13)", "Number(U8, 13)"] }
# 000bb Instruction { source: "inline_main_readline_14_t3 <- 0n13/0x0du8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\", \"Number(U8, 13)\", \"Number(U8, 13)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x0d=13)], resolved: None }
04 1d 0d 
# if inline_main_readline_14_t2 == inline_main_readline_14_t3 then 'inline_main_readline_14_readline_if_true_0_4' else 'inline_main_readline_14_readline_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }"] }
# 000be Instruction { source: "if inline_main_readline_14_t2 == inline_main_readline_14_t3 then 'inline_main_readline_14_readline_if_true_0_4' else 'inline_main_readline_14_readline_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x1d)], resolved: None }
15 1c 1d 
# 000c1 Instruction { source: "if inline_main_readline_14_t2 == inline_main_readline_14_t3 then 'inline_main_readline_14_readline_if_true_0_4' else 'inline_main_readline_14_readline_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\"] }", opcode: JzImm, args: [Label24(inline_main_readline_14_readline_if_true_0_4)], resolved: None }
72 c9 00 00 
# 000c5 Instruction { source: "if inline_main_readline_14_t2 == inline_main_readline_14_t3 then 'inline_main_readline_14_readline_if_true_0_4' else 'inline_main_readline_14_readline_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_14_readline_if_else_0_5)], resolved: None }
70 cd 00 00 
# :inline_main_readline_14_readline_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }"] }
# inline_main_readline_14_readline_if_true_0_4
# goto inline_main_readline_14_readline_if_end_3
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }"] }
# 000c9 Instruction { source: "goto inline_main_readline_14_readline_if_end_3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_14_readline_if_end_3)], resolved: None }
70 f8 00 00 
# :inline_main_readline_14_readline_if_else_0_5
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }"] }
# inline_main_readline_14_readline_if_else_0_5
# inline_main_readline_14_t4 <- inline_main_readline_14_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_readline_14_t4 <- inline_main_readline_14_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_readline_14_t5 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 000cd Instruction { source: "inline_main_readline_14_t5 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x0a=10)], resolved: None }
04 1d 0a 
# if inline_main_readline_14_t4 == inline_main_readline_14_t5 then 'inline_main_readline_14_readline_if_true_1_6' else 'inline_main_readline_14_readline_if_else_1_7'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }"] }
# 000d0 Instruction { source: "if inline_main_readline_14_t4 == inline_main_readline_14_t5 then 'inline_main_readline_14_readline_if_true_1_6' else 'inline_main_readline_14_readline_if_else_1_7'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x1d)], resolved: None }
15 1c 1d 
# 000d3 Instruction { source: "if inline_main_readline_14_t4 == inline_main_readline_14_t5 then 'inline_main_readline_14_readline_if_true_1_6' else 'inline_main_readline_14_readline_if_else_1_7'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: JzImm, args: [Label24(inline_main_readline_14_readline_if_true_1_6)], resolved: None }
72 db 00 00 
# 000d7 Instruction { source: "if inline_main_readline_14_t4 == inline_main_readline_14_t5 then 'inline_main_readline_14_readline_if_true_1_6' else 'inline_main_readline_14_readline_if_else_1_7'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }, Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_14_readline_if_else_1_7)], resolved: None }
70 e9 00 00 
# :inline_main_readline_14_readline_if_true_1_6
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }"] }
# inline_main_readline_14_readline_if_true_1_6
# inline_main_readline_14_t6 <- inline_main_readline_14_buf U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }", "Ident(\"buf\")", "Ident(\"buf\")"] }
# optimized away noop copy Instruction { source: "inline_main_readline_14_t6 <- inline_main_readline_14_buf U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }\", \"Ident(\\\"buf\\\")\", \"Ident(\\\"buf\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_readline_14_t7 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 000db Instruction { source: "inline_main_readline_14_t7 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x00=0)], resolved: None }
04 1c 00 
# mem[inline_main_readline_14_t6] <- inline_main_readline_14_t7 U8
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }"] }
# 000de Instruction { source: "mem[inline_main_readline_14_t6] <- inline_main_readline_14_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x1c), Register(0x18)], resolved: None }
06 1c 18 
# goto inline_main_readline_14_function_end_readline
# 	SourceContext { contexts: ["Return { value: None }"] }
# 000e1 Instruction { source: "goto inline_main_readline_14_function_end_readline\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_14_function_end_readline)], resolved: None }
70 00 01 00 
# goto inline_main_readline_14_readline_if_end_3
# 	SourceContext { contexts: [] }
# 000e5 Instruction { source: "goto inline_main_readline_14_readline_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_readline_14_readline_if_end_3)], resolved: None }
70 f8 00 00 
# :inline_main_readline_14_readline_if_else_1_7
# 	SourceContext { contexts: [] }
# inline_main_readline_14_readline_if_else_1_7
# inline_main_readline_14_t8 <- inline_main_readline_14_buf U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }", "Ident(\"buf\")", "Ident(\"buf\")"] }
# optimized away noop copy Instruction { source: "inline_main_readline_14_t8 <- inline_main_readline_14_buf U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Ident(\\\"buf\\\")\", \"Ident(\\\"buf\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_readline_14_t9 <- inline_main_readline_14_ch U8
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_readline_14_t9 <- inline_main_readline_14_ch U8\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# mem[inline_main_readline_14_t8] <- inline_main_readline_14_t9 U8
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }"] }
# 000e9 Instruction { source: "mem[inline_main_readline_14_t8] <- inline_main_readline_14_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"buf\\\")), var_type: None, value: Ident(\\\"ch\\\") }\"] }", opcode: Store8, args: [Register(0x1c), Register(0x18)], resolved: None }
06 1c 18 
# inline_main_readline_14_t11 <- inline_main_readline_14_buf U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1))", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }", "Ident(\"buf\")"] }
# optimized away noop copy Instruction { source: "inline_main_readline_14_t11 <- inline_main_readline_14_buf U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }\", \"Ident(\\\"buf\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_readline_14_t12 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 000ec Instruction { source: "inline_main_readline_14_t12 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000001=1)], resolved: None }
20 24 01 00 00 00 
# inline_main_readline_14_t10 <- inline_main_readline_14_t11 Add inline_main_readline_14_t12
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1))"] }
# 000f2 Instruction { source: "inline_main_readline_14_t10 <- inline_main_readline_14_t11 Add inline_main_readline_14_t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 000f3 Instruction { source: "inline_main_readline_14_t10 <- inline_main_readline_14_t11 Add inline_main_readline_14_t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x24), Register(0x18)], resolved: None }
30 18 24 18 
# 000f7 Instruction { source: "inline_main_readline_14_t10 <- inline_main_readline_14_t11 Add inline_main_readline_14_t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"buf\\\") }, Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_readline_14_buf <- inline_main_readline_14_t10 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }", "AddressOf(Index(\"buf\", Number(USIZE, 1)))"] }
# optimized away noop copy Instruction { source: "inline_main_readline_14_buf <- inline_main_readline_14_t10 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"buf\\\"), var_type: None, value: AddressOf(Index(\\\"buf\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# :inline_main_readline_14_readline_if_end_3
# 	SourceContext { contexts: [] }
# inline_main_readline_14_readline_if_end_3
# goto inline_main_readline_14_readline_while_predicate_0
# 	SourceContext { contexts: [] }
# 000f8 Instruction { source: "goto inline_main_readline_14_readline_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_readline_14_readline_while_predicate_0)], resolved: None }
70 8d 00 00 
# :inline_main_readline_14_readline_while_end_2
# 	SourceContext { contexts: [] }
# inline_main_readline_14_readline_while_end_2
# goto inline_main_readline_14_function_end_readline
# 	SourceContext { contexts: ["Return { value: None }"] }
# 000fc Instruction { source: "goto inline_main_readline_14_function_end_readline\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_readline_14_function_end_readline)], resolved: None }
70 00 01 00 
# :inline_main_readline_14_function_end_readline
# 	SourceContext { contexts: [] }
# inline_main_readline_14_function_end_readline
# t16 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }", "Index(\"buf\", Number(USIZE, 0))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 00100 Instruction { source: "t16 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }\", \"Index(\\\"buf\\\", Number(USIZE, 0))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x34)], resolved: None }
21 0c 34 
# t17 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }", "Index(\"buf\", Number(USIZE, 0))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 00103 Instruction { source: "t17 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }\", \"Index(\\\"buf\\\", Number(USIZE, 0))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000000=0)], resolved: None }
20 18 00 00 00 00 
# t15 <- t16 Add t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }", "Index(\"buf\", Number(USIZE, 0))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))"] }
# 00109 Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }\", \"Index(\\\"buf\\\", Number(USIZE, 0))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0010a Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }\", \"Index(\\\"buf\\\", Number(USIZE, 0))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddCarry32_1, args: [Register(0x34), Register(0x18), Register(0x18)], resolved: None }
30 34 18 18 
# 0010e Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }\", \"Index(\\\"buf\\\", Number(USIZE, 0))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# ch <- mem[t15] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"buf\", Number(USIZE, 0)) }", "Index(\"buf\", Number(USIZE, 0))"] }
# 0010f Instruction { source: "ch <- mem[t15] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"buf\\\", Number(USIZE, 0)) }\", \"Index(\\\"buf\\\", Number(USIZE, 0))\"] }", opcode: Load8, args: [Register(0x18), Register(0x14)], resolved: None }
05 18 14 
# t18 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t18 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# t19 <- 0n114/0x72u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }", "Number(U8, 114)", "Number(U8, 114)"] }
# 00112 Instruction { source: "t19 <- 0n114/0x72u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }\", \"Number(U8, 114)\", \"Number(U8, 114)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x72=114)], resolved: None }
04 1c 72 
# if t18 == t19 then 'main_if_true_0_4' else 'main_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }"] }
# 00115 Instruction { source: "if t18 == t19 then 'main_if_true_0_4' else 'main_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }\"] }", opcode: Cmp8, args: [Register(0x14), Register(0x1c)], resolved: None }
15 14 1c 
# 00118 Instruction { source: "if t18 == t19 then 'main_if_true_0_4' else 'main_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }\"] }", opcode: JzImm, args: [Label24(main_if_true_0_4)], resolved: None }
72 20 01 00 
# 0011c Instruction { source: "if t18 == t19 then 'main_if_true_0_4' else 'main_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }, [Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }, Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }, [Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\\\"ch\\\") }, TtyOut { value: Number(U8, 10) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 114) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_0_5)], resolved: None }
70 b4 01 00 
# :main_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, TtyOut { value: Number(U8, 10) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [TtyOut { value: Number(U8, 66) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 111) }, TtyOut { value: Number(U8, 116) }, TtyOut { value: Number(U8, 114) }, TtyOut { value: Number(U8, 97) }, TtyOut { value: Number(U8, 109) }, TtyOut { value: Number(U8, 10) }])], else_block: [TtyOut { value: Number(U8, 72) }, TtyOut { value: Number(U8, 117) }, TtyOut { value: Number(U8, 104) }, TtyOut { value: Number(U8, 63) }, TtyOut { value: Ident(\"ch\") }, TtyOut { value: Number(U8, 10) }] }"] }
# main_if_true_0_4
# p_byte <- addr U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }", "Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") }", "Ident(\"addr\")"] }
# 00120 Instruction { source: "p_byte <- addr U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }\", \"Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") }\", \"Ident(\\\"addr\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x18)], resolved: None }
21 10 18 
# t22 <- p_byte U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }", "Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] })", "Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] })", "Deref(Ident(\"p_byte\"))", "Deref(Ident(\"p_byte\"))", "Ident(\"p_byte\")", "Ident(\"p_byte\")"] }
# optimized away noop copy Instruction { source: "t22 <- p_byte U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] })\", \"Deref(Ident(\\\"p_byte\\\"))\", \"Deref(Ident(\\\"p_byte\\\"))\", \"Ident(\\\"p_byte\\\")\", \"Ident(\\\"p_byte\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# t21 <- mem[t22] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }", "Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] })", "Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] })", "Deref(Ident(\"p_byte\"))", "Deref(Ident(\"p_byte\"))"] }
# 00123 Instruction { source: "t21 <- mem[t22] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] })\", \"Deref(Ident(\\\"p_byte\\\"))\", \"Deref(Ident(\\\"p_byte\\\"))\"] }", opcode: Load8, args: [Register(0x18), Register(0x14)], resolved: None }
05 18 14 
# inline_main_printHex_7_a <- t21 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }", "Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] })", "Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_7_a <- t21 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Deref(Ident(\\\"p_byte\\\"))] })\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_7_t0 <- inline_main_printHex_7_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_7_t0 <- inline_main_printHex_7_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_7_t1 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Number(U8, 15)", "Number(U8, 15)"] }
# 00126 Instruction { source: "inline_main_printHex_7_t1 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x0f=15)], resolved: None }
04 1c 0f 
# if inline_main_printHex_7_t0 > inline_main_printHex_7_t1 then 'inline_main_printHex_7_printHex_if_true_0_1' else 'inline_main_printHex_7_printHex_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }"] }
# 00129 Instruction { source: "if inline_main_printHex_7_t0 > inline_main_printHex_7_t1 then 'inline_main_printHex_7_printHex_if_true_0_1' else 'inline_main_printHex_7_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: Cmp8, args: [Register(0x14), Register(0x1c)], resolved: None }
15 14 1c 
# 0012c Instruction { source: "if inline_main_printHex_7_t0 > inline_main_printHex_7_t1 then 'inline_main_printHex_7_printHex_if_true_0_1' else 'inline_main_printHex_7_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_7_printHex_if_else_0_2)], resolved: None }
71 7a 01 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_7_t0 > inline_main_printHex_7_t1 then 'inline_main_printHex_7_printHex_if_true_0_1' else 'inline_main_printHex_7_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_7_printHex_if_true_0_1)], resolved: None }
# :inline_main_printHex_7_printHex_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }"] }
# inline_main_printHex_7_printHex_if_true_0_1
# inline_main_printHex_7_t2 <- inline_main_printHex_7_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_7_t2 <- inline_main_printHex_7_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_7_t3 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 00130 Instruction { source: "inline_main_printHex_7_t3 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x10=16)], resolved: None }
04 1c 10 
# inline_main_printHex_7_b <- inline_main_printHex_7_t2 Divide inline_main_printHex_7_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))"] }
# 00133 Instruction { source: "inline_main_printHex_7_b <- inline_main_printHex_7_t2 Divide inline_main_printHex_7_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\"] }", opcode: Divide8, args: [Register(0x14), Register(0x1c), Register(0x1c)], resolved: None }
17 14 1c 1c 
# inline_main_printHex_7_t5 <- inline_main_printHex_7_b U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_7_t5 <- inline_main_printHex_7_b U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_printHex_7_inline_printHex_printHexDigit_5_a <- inline_main_printHex_7_t5 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })"] }
# 00137 Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_5_a <- inline_main_printHex_7_t5 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1d)], resolved: None }
0b 1c 1d 
# inline_main_printHex_7_inline_printHex_printHexDigit_5_t0 <- inline_main_printHex_7_inline_printHex_printHexDigit_5_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_5_t0 <- inline_main_printHex_7_inline_printHex_printHexDigit_5_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_main_printHex_7_inline_printHex_printHexDigit_5_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 0013a Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_5_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x0a=10)], resolved: None }
04 1e 0a 
# if inline_main_printHex_7_inline_printHex_printHexDigit_5_t0 < inline_main_printHex_7_inline_printHex_printHexDigit_5_t1 then 'inline_main_printHex_7_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1' else 'inline_main_printHex_7_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 0013d Instruction { source: "if inline_main_printHex_7_inline_printHex_printHexDigit_5_t0 < inline_main_printHex_7_inline_printHex_printHexDigit_5_t1 then 'inline_main_printHex_7_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1' else 'inline_main_printHex_7_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x1e), Register(0x1d)], resolved: None }
15 1e 1d 
# 00140 Instruction { source: "if inline_main_printHex_7_inline_printHex_printHexDigit_5_t0 < inline_main_printHex_7_inline_printHex_printHexDigit_5_t1 then 'inline_main_printHex_7_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1' else 'inline_main_printHex_7_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_7_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2)], resolved: None }
71 51 01 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_7_inline_printHex_printHexDigit_5_t0 < inline_main_printHex_7_inline_printHex_printHexDigit_5_t1 then 'inline_main_printHex_7_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1' else 'inline_main_printHex_7_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_7_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_7_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }"] }
# inline_main_printHex_7_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1
# inline_main_printHex_7_inline_printHex_printHexDigit_5_t3 <- inline_main_printHex_7_inline_printHex_printHexDigit_5_a U8
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_5_t3 <- inline_main_printHex_7_inline_printHex_printHexDigit_5_a U8\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_main_printHex_7_inline_printHex_printHexDigit_5_t4 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 00144 Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_5_t4 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x30=48)], resolved: None }
04 1e 30 
# inline_main_printHex_7_inline_printHex_printHexDigit_5_t2 <- inline_main_printHex_7_inline_printHex_printHexDigit_5_t3 Add inline_main_printHex_7_inline_printHex_printHexDigit_5_t4
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 00147 Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_5_t2 <- inline_main_printHex_7_inline_printHex_printHexDigit_5_t3 Add inline_main_printHex_7_inline_printHex_printHexDigit_5_t4\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1d), Register(0x1e), Register(0x1d)], resolved: None }
14 1d 1e 1d 
# ttyout <- inline_main_printHex_7_inline_printHex_printHexDigit_5_t2
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }"] }
# 0014b Instruction { source: "ttyout <- inline_main_printHex_7_inline_printHex_printHexDigit_5_t2\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\"] }", opcode: Out0, args: [Register(0x1d)], resolved: None }
68 1d 
# goto inline_main_printHex_7_inline_printHex_printHexDigit_5_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 0014d Instruction { source: "goto inline_main_printHex_7_inline_printHex_printHexDigit_5_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_7_inline_printHex_printHexDigit_5_printHexDigit_if_end_0)], resolved: None }
70 66 01 00 
# :inline_main_printHex_7_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_7_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2
# inline_main_printHex_7_inline_printHex_printHexDigit_5_t5 <- inline_main_printHex_7_inline_printHex_printHexDigit_5_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_5_t5 <- inline_main_printHex_7_inline_printHex_printHexDigit_5_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_main_printHex_7_inline_printHex_printHexDigit_5_t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 00151 Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_5_t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x0a=10)], resolved: None }
04 1e 0a 
# inline_main_printHex_7_inline_printHex_printHexDigit_5_a <- inline_main_printHex_7_inline_printHex_printHexDigit_5_t5 Subtract inline_main_printHex_7_inline_printHex_printHexDigit_5_t6
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 00154 Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_5_a <- inline_main_printHex_7_inline_printHex_printHexDigit_5_t5 Subtract inline_main_printHex_7_inline_printHex_printHexDigit_5_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0x1e), Register(0x00)], resolved: None }
0b 1e 00 
# 00157 Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_5_a <- inline_main_printHex_7_inline_printHex_printHexDigit_5_t5 Subtract inline_main_printHex_7_inline_printHex_printHexDigit_5_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00159 Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_5_a <- inline_main_printHex_7_inline_printHex_printHexDigit_5_t5 Subtract inline_main_printHex_7_inline_printHex_printHexDigit_5_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1d), Register(0x00), Register(0x1d)], resolved: None }
14 1d 00 1d 
# inline_main_printHex_7_inline_printHex_printHexDigit_5_t7 <- inline_main_printHex_7_inline_printHex_printHexDigit_5_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_5_t7 <- inline_main_printHex_7_inline_printHex_printHexDigit_5_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_main_printHex_7_inline_printHex_printHexDigit_5_t8 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 0015d Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_5_t8 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x41=65)], resolved: None }
04 1e 41 
# inline_main_printHex_7_inline_printHex_printHexDigit_5_a <- inline_main_printHex_7_inline_printHex_printHexDigit_5_t7 Add inline_main_printHex_7_inline_printHex_printHexDigit_5_t8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 00160 Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_5_a <- inline_main_printHex_7_inline_printHex_printHexDigit_5_t7 Add inline_main_printHex_7_inline_printHex_printHexDigit_5_t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1d), Register(0x1e), Register(0x1d)], resolved: None }
14 1d 1e 1d 
# inline_main_printHex_7_inline_printHex_printHexDigit_5_t9 <- inline_main_printHex_7_inline_printHex_printHexDigit_5_a U8
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_5_t9 <- inline_main_printHex_7_inline_printHex_printHexDigit_5_a U8\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# ttyout <- inline_main_printHex_7_inline_printHex_printHexDigit_5_t9
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"a\") }"] }
# 00164 Instruction { source: "ttyout <- inline_main_printHex_7_inline_printHex_printHexDigit_5_t9\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"a\\\") }\"] }", opcode: Out0, args: [Register(0x1d)], resolved: None }
68 1d 
# :inline_main_printHex_7_inline_printHex_printHexDigit_5_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_7_inline_printHex_printHexDigit_5_printHexDigit_if_end_0
# goto inline_main_printHex_7_inline_printHex_printHexDigit_5_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_7_inline_printHex_printHexDigit_5_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_7_inline_printHex_printHexDigit_5_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_7_inline_printHex_printHexDigit_5_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_7_inline_printHex_printHexDigit_5_function_end_printHexDigit
# inline_main_printHex_7_t6 <- inline_main_printHex_7_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_7_t6 <- inline_main_printHex_7_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_7_t8 <- inline_main_printHex_7_b U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_7_t8 <- inline_main_printHex_7_b U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_printHex_7_t9 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 00166 Instruction { source: "inline_main_printHex_7_t9 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x10=16)], resolved: None }
04 1d 10 
# inline_main_printHex_7_t7 <- inline_main_printHex_7_t8 Multiply inline_main_printHex_7_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))"] }
# 00169 Instruction { source: "inline_main_printHex_7_t7 <- inline_main_printHex_7_t8 Multiply inline_main_printHex_7_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\"] }", opcode: Mul8_8, args: [Register(0x1c), Register(0x1d), Register(0x1c)], resolved: None }
10 1c 1d 1c 
# inline_main_printHex_7_a <- inline_main_printHex_7_t6 Subtract inline_main_printHex_7_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))"] }
# 0016d Instruction { source: "inline_main_printHex_7_a <- inline_main_printHex_7_t6 Subtract inline_main_printHex_7_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x00)], resolved: None }
0b 1c 00 
# 00170 Instruction { source: "inline_main_printHex_7_a <- inline_main_printHex_7_t6 Subtract inline_main_printHex_7_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00172 Instruction { source: "inline_main_printHex_7_a <- inline_main_printHex_7_t6 Subtract inline_main_printHex_7_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x00), Register(0x14)], resolved: None }
14 14 00 14 
# goto inline_main_printHex_7_printHex_if_end_0
# 	SourceContext { contexts: [] }
# 00176 Instruction { source: "goto inline_main_printHex_7_printHex_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_7_printHex_if_end_0)], resolved: None }
70 7f 01 00 
# :inline_main_printHex_7_printHex_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_7_printHex_if_else_0_2
# inline_main_printHex_7_t10 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 48) }", "Number(U8, 48)", "Number(U8, 48)"] }
# 0017a Instruction { source: "inline_main_printHex_7_t10 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 48) }\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x30=48)], resolved: None }
04 1c 30 
# ttyout <- inline_main_printHex_7_t10
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 48) }"] }
# 0017d Instruction { source: "ttyout <- inline_main_printHex_7_t10\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 48) }\"] }", opcode: Out0, args: [Register(0x1c)], resolved: None }
68 1c 
# :inline_main_printHex_7_printHex_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_7_printHex_if_end_0
# inline_main_printHex_7_t12 <- inline_main_printHex_7_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_7_t12 <- inline_main_printHex_7_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_7_inline_printHex_printHexDigit_6_a <- inline_main_printHex_7_t12 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_6_a <- inline_main_printHex_7_t12 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_7_inline_printHex_printHexDigit_6_t0 <- inline_main_printHex_7_inline_printHex_printHexDigit_6_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_6_t0 <- inline_main_printHex_7_inline_printHex_printHexDigit_6_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_7_inline_printHex_printHexDigit_6_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 0017f Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_6_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x0a=10)], resolved: None }
04 1c 0a 
# if inline_main_printHex_7_inline_printHex_printHexDigit_6_t0 < inline_main_printHex_7_inline_printHex_printHexDigit_6_t1 then 'inline_main_printHex_7_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1' else 'inline_main_printHex_7_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 00182 Instruction { source: "if inline_main_printHex_7_inline_printHex_printHexDigit_6_t0 < inline_main_printHex_7_inline_printHex_printHexDigit_6_t1 then 'inline_main_printHex_7_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1' else 'inline_main_printHex_7_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x14)], resolved: None }
15 1c 14 
# 00185 Instruction { source: "if inline_main_printHex_7_inline_printHex_printHexDigit_6_t0 < inline_main_printHex_7_inline_printHex_printHexDigit_6_t1 then 'inline_main_printHex_7_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1' else 'inline_main_printHex_7_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_7_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2)], resolved: None }
71 96 01 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_7_inline_printHex_printHexDigit_6_t0 < inline_main_printHex_7_inline_printHex_printHexDigit_6_t1 then 'inline_main_printHex_7_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1' else 'inline_main_printHex_7_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_7_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_7_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }"] }
# inline_main_printHex_7_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1
# inline_main_printHex_7_inline_printHex_printHexDigit_6_t3 <- inline_main_printHex_7_inline_printHex_printHexDigit_6_a U8
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_6_t3 <- inline_main_printHex_7_inline_printHex_printHexDigit_6_a U8\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_7_inline_printHex_printHexDigit_6_t4 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 00189 Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_6_t4 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x30=48)], resolved: None }
04 1c 30 
# inline_main_printHex_7_inline_printHex_printHexDigit_6_t2 <- inline_main_printHex_7_inline_printHex_printHexDigit_6_t3 Add inline_main_printHex_7_inline_printHex_printHexDigit_6_t4
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 0018c Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_6_t2 <- inline_main_printHex_7_inline_printHex_printHexDigit_6_t3 Add inline_main_printHex_7_inline_printHex_printHexDigit_6_t4\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x1c), Register(0x14)], resolved: None }
14 14 1c 14 
# ttyout <- inline_main_printHex_7_inline_printHex_printHexDigit_6_t2
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }"] }
# 00190 Instruction { source: "ttyout <- inline_main_printHex_7_inline_printHex_printHexDigit_6_t2\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# goto inline_main_printHex_7_inline_printHex_printHexDigit_6_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 00192 Instruction { source: "goto inline_main_printHex_7_inline_printHex_printHexDigit_6_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_7_inline_printHex_printHexDigit_6_printHexDigit_if_end_0)], resolved: None }
70 ab 01 00 
# :inline_main_printHex_7_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_7_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2
# inline_main_printHex_7_inline_printHex_printHexDigit_6_t5 <- inline_main_printHex_7_inline_printHex_printHexDigit_6_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_6_t5 <- inline_main_printHex_7_inline_printHex_printHexDigit_6_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_7_inline_printHex_printHexDigit_6_t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 00196 Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_6_t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x0a=10)], resolved: None }
04 1c 0a 
# inline_main_printHex_7_inline_printHex_printHexDigit_6_a <- inline_main_printHex_7_inline_printHex_printHexDigit_6_t5 Subtract inline_main_printHex_7_inline_printHex_printHexDigit_6_t6
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 00199 Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_6_a <- inline_main_printHex_7_inline_printHex_printHexDigit_6_t5 Subtract inline_main_printHex_7_inline_printHex_printHexDigit_6_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x00)], resolved: None }
0b 1c 00 
# 0019c Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_6_a <- inline_main_printHex_7_inline_printHex_printHexDigit_6_t5 Subtract inline_main_printHex_7_inline_printHex_printHexDigit_6_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 0019e Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_6_a <- inline_main_printHex_7_inline_printHex_printHexDigit_6_t5 Subtract inline_main_printHex_7_inline_printHex_printHexDigit_6_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x00), Register(0x14)], resolved: None }
14 14 00 14 
# inline_main_printHex_7_inline_printHex_printHexDigit_6_t7 <- inline_main_printHex_7_inline_printHex_printHexDigit_6_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_6_t7 <- inline_main_printHex_7_inline_printHex_printHexDigit_6_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_7_inline_printHex_printHexDigit_6_t8 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 001a2 Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_6_t8 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x41=65)], resolved: None }
04 1c 41 
# inline_main_printHex_7_inline_printHex_printHexDigit_6_a <- inline_main_printHex_7_inline_printHex_printHexDigit_6_t7 Add inline_main_printHex_7_inline_printHex_printHexDigit_6_t8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 001a5 Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_6_a <- inline_main_printHex_7_inline_printHex_printHexDigit_6_t7 Add inline_main_printHex_7_inline_printHex_printHexDigit_6_t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x1c), Register(0x14)], resolved: None }
14 14 1c 14 
# inline_main_printHex_7_inline_printHex_printHexDigit_6_t9 <- inline_main_printHex_7_inline_printHex_printHexDigit_6_a U8
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_7_inline_printHex_printHexDigit_6_t9 <- inline_main_printHex_7_inline_printHex_printHexDigit_6_a U8\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# ttyout <- inline_main_printHex_7_inline_printHex_printHexDigit_6_t9
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"a\") }"] }
# 001a9 Instruction { source: "ttyout <- inline_main_printHex_7_inline_printHex_printHexDigit_6_t9\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"a\\\") }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# :inline_main_printHex_7_inline_printHex_printHexDigit_6_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_7_inline_printHex_printHexDigit_6_printHexDigit_if_end_0
# goto inline_main_printHex_7_inline_printHex_printHexDigit_6_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_7_inline_printHex_printHexDigit_6_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_7_inline_printHex_printHexDigit_6_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_7_inline_printHex_printHexDigit_6_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_7_inline_printHex_printHexDigit_6_function_end_printHexDigit
# goto inline_main_printHex_7_function_end_printHex
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_7_function_end_printHex\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_7_function_end_printHex)], resolved: None }
# :inline_main_printHex_7_function_end_printHex
# 	SourceContext { contexts: [] }
# inline_main_printHex_7_function_end_printHex
# t23 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 001ab Instruction { source: "t23 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x0a=10)], resolved: None }
04 14 0a 
# ttyout <- t23
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }"] }
# 001ae Instruction { source: "ttyout <- t23\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 001b0 Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
70 f0 06 00 
# :main_if_else_0_5
# 	SourceContext { contexts: [] }
# main_if_else_0_5
# t24 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t24 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# t25 <- 0n119/0x77u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }", "Number(U8, 119)", "Number(U8, 119)"] }
# 001b4 Instruction { source: "t25 <- 0n119/0x77u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }\", \"Number(U8, 119)\", \"Number(U8, 119)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x77=119)], resolved: None }
04 1c 77 
# if t24 == t25 then 'main_if_true_1_6' else 'main_if_else_1_7'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }"] }
# 001b7 Instruction { source: "if t24 == t25 then 'main_if_true_1_6' else 'main_if_else_1_7'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }\"] }", opcode: Cmp8, args: [Register(0x14), Register(0x1c)], resolved: None }
15 14 1c 
# 001ba Instruction { source: "if t24 == t25 then 'main_if_true_1_6' else 'main_if_else_1_7'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }\"] }", opcode: JzImm, args: [Label24(main_if_true_1_6)], resolved: None }
72 c2 01 00 
# 001be Instruction { source: "if t24 == t25 then 'main_if_true_1_6' else 'main_if_else_1_7'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 119) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_1_7)], resolved: None }
70 c5 02 00 
# :main_if_true_1_6
# 	SourceContext { contexts: [] }
# main_if_true_1_6
# p_byte <- addr U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }", "Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") }", "Ident(\"addr\")"] }
# 001c2 Instruction { source: "p_byte <- addr U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"p_byte\\\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") } }\", \"Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\\\"addr\\\") }\", \"Ident(\\\"addr\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x18)], resolved: None }
21 10 18 
# t26 <- p_byte U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }", "Ident(\"p_byte\")", "Ident(\"p_byte\")"] }
# 001c5 Instruction { source: "t26 <- p_byte U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Ident(\\\"p_byte\\\")\", \"Ident(\\\"p_byte\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x38)], resolved: None }
21 18 38 
# t30 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 001c8 Instruction { source: "t30 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x34)], resolved: None }
21 0c 34 
# t31 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 001cb Instruction { source: "t31 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000001=1)], resolved: None }
20 18 01 00 00 00 
# t29 <- t30 Add t31
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 1))"] }
# 001d1 Instruction { source: "t29 <- t30 Add t31\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 001d2 Instruction { source: "t29 <- t30 Add t31\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x34), Register(0x18), Register(0x18)], resolved: None }
30 34 18 18 
# 001d6 Instruction { source: "t29 <- t30 Add t31\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t28 <- t29 U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "AddressOf(Index(\"buf\", Number(USIZE, 1)))", "AddressOf(Index(\"buf\", Number(USIZE, 1)))"] }
# optimized away noop copy Instruction { source: "t28 <- t29 U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\", \"AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_parseHex_3_c <- t28 U32
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_3_c <- t28 U32\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] })\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_parseHex_3_t0 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Number(U8, 16)", "Number(U8, 16)"] }
# 001d7 Instruction { source: "inline_main_parseHex_3_t0 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x10=16)], resolved: None }
04 1e 10 
# inline_main_parseHex_3_t3 <- inline_main_parseHex_3_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_3_t3 <- inline_main_parseHex_3_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_parseHex_3_t2 <- mem[inline_main_parseHex_3_t3] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))"] }
# 001da Instruction { source: "inline_main_parseHex_3_t2 <- mem[inline_main_parseHex_3_t3] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\"] }", opcode: Load8, args: [Register(0x18), Register(0x1c)], resolved: None }
05 18 1c 
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_ch <- inline_main_parseHex_3_t2 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_ch <- inline_main_parseHex_3_t2 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t0 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t0 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t1 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }", "Number(U8, 97)", "Number(U8, 97)"] }
# 001dd Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t1 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x61=97)], resolved: None }
04 1d 61 
# if inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t0 >= inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t1 then 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }"] }
# 001e0 Instruction { source: "if inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t0 >= inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t1 then 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: Cmp8, args: [Register(0x1d), Register(0x1c)], resolved: None }
15 1d 1c 
# 001e3 Instruction { source: "if inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t0 >= inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t1 then 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JcImm, args: [Label24(inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_1)], resolved: None }
71 eb 01 00 
# 001e7 Instruction { source: "if inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t0 >= inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t1 then 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_2)], resolved: None }
70 06 02 00 
# :inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }"] }
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_1
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t4 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t4 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t5 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Number(U8, 97)", "Number(U8, 97)"] }
# 001eb Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t5 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x61=97)], resolved: None }
04 1d 61 
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t3 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t4 Subtract inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t5
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))"] }
# 001ee Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t3 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t4 Subtract inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x00)], resolved: None }
0b 1d 00 
# 001f1 Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t3 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t4 Subtract inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 001f3 Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t3 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t4 Subtract inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1c), Register(0x00), Register(0x1c)], resolved: None }
14 1c 00 1c 
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 001f7 Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x0a=10)], resolved: None }
04 1d 0a 
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t2 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t3 Add inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t6
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))"] }
# 001fa Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t2 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t3 Add inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t6\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1c), Register(0x1d), Register(0x1c)], resolved: None }
14 1c 1d 1c 
# inline_main_parseHex_3_t1 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t2 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_3_t1 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t2 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# goto inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }"] }
# 001fe Instruction { source: "goto inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_function_end_parseHexNibble)], resolved: None }
70 3f 02 00 
# goto inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_end_0
# 	SourceContext { contexts: [] }
# 00202 Instruction { source: "goto inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_end_0)], resolved: None }
70 06 02 00 
# :inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_2
# :inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_end_0
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t7 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t7 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t8 <- 0n57/0x39u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Number(U8, 57)", "Number(U8, 57)"] }
# 00206 Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t8 <- 0n57/0x39u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Number(U8, 57)\", \"Number(U8, 57)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x39=57)], resolved: None }
04 1d 39 
# if inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t7 <= inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t8 then 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }"] }
# 00209 Instruction { source: "if inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t7 <= inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t8 then 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x1d)], resolved: None }
15 1c 1d 
# 0020c Instruction { source: "if inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t7 <= inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t8 then 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JcImm, args: [Label24(inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_4)], resolved: None }
71 14 02 00 
# 00210 Instruction { source: "if inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t7 <= inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t8 then 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_5)], resolved: None }
70 28 02 00 
# :inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }"] }
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_4
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t10 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t10 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t11 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 00214 Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t11 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x30=48)], resolved: None }
04 1d 30 
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t9 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t10 Subtract inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t11
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))"] }
# 00217 Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t9 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t10 Subtract inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x00)], resolved: None }
0b 1d 00 
# 0021a Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t9 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t10 Subtract inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 0021c Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t9 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t10 Subtract inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1c), Register(0x00), Register(0x1c)], resolved: None }
14 1c 00 1c 
# inline_main_parseHex_3_t1 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t9 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_3_t1 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t9 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# goto inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }"] }
# 00220 Instruction { source: "goto inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_function_end_parseHexNibble)], resolved: None }
70 3f 02 00 
# goto inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_end_3
# 	SourceContext { contexts: [] }
# 00224 Instruction { source: "goto inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_end_3)], resolved: None }
70 28 02 00 
# :inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_5
# 	SourceContext { contexts: [] }
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_5
# :inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_end_3
# 	SourceContext { contexts: [] }
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_parseHexNibble_if_end_3
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t14 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t14 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t15 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 00228 Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t15 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x41=65)], resolved: None }
04 1d 41 
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t13 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t14 Subtract inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t15
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))"] }
# 0022b Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t13 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t14 Subtract inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x00)], resolved: None }
0b 1d 00 
# 0022e Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t13 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t14 Subtract inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00230 Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t13 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t14 Subtract inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1c), Register(0x00), Register(0x1c)], resolved: None }
14 1c 00 1c 
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t16 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 00234 Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t16 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x0a=10)], resolved: None }
04 1d 0a 
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t12 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t13 Add inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t16
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))"] }
# 00237 Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t12 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t13 Add inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t16\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1c), Register(0x1d), Register(0x1c)], resolved: None }
14 1c 1d 1c 
# inline_main_parseHex_3_t1 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t12 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_3_t1 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_t12 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# goto inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }"] }
# 0023b Instruction { source: "goto inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_function_end_parseHexNibble)], resolved: None }
70 3f 02 00 
# :inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_function_end_parseHexNibble
# 	SourceContext { contexts: [] }
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_1_function_end_parseHexNibble
# inline_main_parseHex_3_h <- inline_main_parseHex_3_t0 Multiply inline_main_parseHex_3_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))"] }
# 0023f Instruction { source: "inline_main_parseHex_3_h <- inline_main_parseHex_3_t0 Multiply inline_main_parseHex_3_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\"] }", opcode: Mul8_8, args: [Register(0x1e), Register(0x1c), Register(0x1c)], resolved: None }
10 1e 1c 1c 
# inline_main_parseHex_3_t5 <- inline_main_parseHex_3_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1))", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_3_t5 <- inline_main_parseHex_3_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_parseHex_3_t6 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00243 Instruction { source: "inline_main_parseHex_3_t6 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000001=1)], resolved: None }
20 20 01 00 00 00 
# inline_main_parseHex_3_t4 <- inline_main_parseHex_3_t5 Add inline_main_parseHex_3_t6
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1))"] }
# 00249 Instruction { source: "inline_main_parseHex_3_t4 <- inline_main_parseHex_3_t5 Add inline_main_parseHex_3_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0024a Instruction { source: "inline_main_parseHex_3_t4 <- inline_main_parseHex_3_t5 Add inline_main_parseHex_3_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x20), Register(0x18)], resolved: None }
30 18 20 18 
# 0024e Instruction { source: "inline_main_parseHex_3_t4 <- inline_main_parseHex_3_t5 Add inline_main_parseHex_3_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_parseHex_3_c <- inline_main_parseHex_3_t4 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_3_c <- inline_main_parseHex_3_t4 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_parseHex_3_t7 <- inline_main_parseHex_3_h U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Ident(\"h\")", "Ident(\"h\")"] }
# 0024f Instruction { source: "inline_main_parseHex_3_t7 <- inline_main_parseHex_3_h U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Ident(\\\"h\\\")\", \"Ident(\\\"h\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1d)], resolved: None }
0b 1c 1d 
# inline_main_parseHex_3_t10 <- inline_main_parseHex_3_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_3_t10 <- inline_main_parseHex_3_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_main_parseHex_3_t9 <- mem[inline_main_parseHex_3_t10] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))"] }
# 00252 Instruction { source: "inline_main_parseHex_3_t9 <- mem[inline_main_parseHex_3_t10] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\"] }", opcode: Load8, args: [Register(0x18), Register(0x14)], resolved: None }
05 18 14 
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_ch <- inline_main_parseHex_3_t9 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_ch <- inline_main_parseHex_3_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t0 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t0 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t1 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }", "Number(U8, 97)", "Number(U8, 97)"] }
# 00255 Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t1 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x61=97)], resolved: None }
04 1c 61 
# if inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t0 >= inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t1 then 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }"] }
# 00258 Instruction { source: "if inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t0 >= inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t1 then 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x14)], resolved: None }
15 1c 14 
# 0025b Instruction { source: "if inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t0 >= inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t1 then 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JcImm, args: [Label24(inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_1)], resolved: None }
71 63 02 00 
# 0025f Instruction { source: "if inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t0 >= inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t1 then 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_2)], resolved: None }
70 7e 02 00 
# :inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }"] }
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_1
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t4 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t4 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t5 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Number(U8, 97)", "Number(U8, 97)"] }
# 00263 Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t5 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x61=97)], resolved: None }
04 1c 61 
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t3 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t4 Subtract inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t5
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))"] }
# 00266 Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t3 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t4 Subtract inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x00)], resolved: None }
0b 1c 00 
# 00269 Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t3 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t4 Subtract inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 0026b Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t3 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t4 Subtract inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x00), Register(0x14)], resolved: None }
14 14 00 14 
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 0026f Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x0a=10)], resolved: None }
04 1c 0a 
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t2 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t3 Add inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t6
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))"] }
# 00272 Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t2 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t3 Add inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t6\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x1c), Register(0x14)], resolved: None }
14 14 1c 14 
# inline_main_parseHex_3_t8 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t2 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_3_t8 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t2 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# goto inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }"] }
# 00276 Instruction { source: "goto inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_function_end_parseHexNibble)], resolved: None }
70 b7 02 00 
# goto inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_end_0
# 	SourceContext { contexts: [] }
# 0027a Instruction { source: "goto inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_end_0)], resolved: None }
70 7e 02 00 
# :inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_2
# :inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_end_0
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t7 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t7 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t8 <- 0n57/0x39u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Number(U8, 57)", "Number(U8, 57)"] }
# 0027e Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t8 <- 0n57/0x39u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Number(U8, 57)\", \"Number(U8, 57)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x39=57)], resolved: None }
04 1c 39 
# if inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t7 <= inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t8 then 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }"] }
# 00281 Instruction { source: "if inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t7 <= inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t8 then 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: Cmp8, args: [Register(0x14), Register(0x1c)], resolved: None }
15 14 1c 
# 00284 Instruction { source: "if inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t7 <= inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t8 then 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JcImm, args: [Label24(inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_4)], resolved: None }
71 8c 02 00 
# 00288 Instruction { source: "if inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t7 <= inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t8 then 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_5)], resolved: None }
70 a0 02 00 
# :inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }"] }
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_4
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t10 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t10 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t11 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 0028c Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t11 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x30=48)], resolved: None }
04 1c 30 
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t9 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t10 Subtract inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t11
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))"] }
# 0028f Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t9 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t10 Subtract inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x00)], resolved: None }
0b 1c 00 
# 00292 Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t9 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t10 Subtract inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00294 Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t9 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t10 Subtract inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x00), Register(0x14)], resolved: None }
14 14 00 14 
# inline_main_parseHex_3_t8 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t9 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_3_t8 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t9 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# goto inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }"] }
# 00298 Instruction { source: "goto inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_function_end_parseHexNibble)], resolved: None }
70 b7 02 00 
# goto inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_end_3
# 	SourceContext { contexts: [] }
# 0029c Instruction { source: "goto inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_end_3)], resolved: None }
70 a0 02 00 
# :inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_5
# 	SourceContext { contexts: [] }
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_5
# :inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_end_3
# 	SourceContext { contexts: [] }
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_parseHexNibble_if_end_3
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t14 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t14 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t15 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 002a0 Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t15 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x41=65)], resolved: None }
04 1c 41 
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t13 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t14 Subtract inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t15
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))"] }
# 002a3 Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t13 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t14 Subtract inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x00)], resolved: None }
0b 1c 00 
# 002a6 Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t13 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t14 Subtract inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 002a8 Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t13 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t14 Subtract inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x00), Register(0x14)], resolved: None }
14 14 00 14 
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t16 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 002ac Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t16 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x0a=10)], resolved: None }
04 1c 0a 
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t12 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t13 Add inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t16
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))"] }
# 002af Instruction { source: "inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t12 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t13 Add inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t16\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x1c), Register(0x14)], resolved: None }
14 14 1c 14 
# inline_main_parseHex_3_t8 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t12 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_3_t8 <- inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_t12 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# goto inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }"] }
# 002b3 Instruction { source: "goto inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_function_end_parseHexNibble)], resolved: None }
70 b7 02 00 
# :inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_function_end_parseHexNibble
# 	SourceContext { contexts: [] }
# inline_main_parseHex_3_inline_parseHex_parseHexNibble_2_function_end_parseHexNibble
# inline_main_parseHex_3_h <- inline_main_parseHex_3_t7 Add inline_main_parseHex_3_t8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))"] }
# 002b7 Instruction { source: "inline_main_parseHex_3_h <- inline_main_parseHex_3_t7 Add inline_main_parseHex_3_t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1d), Register(0x14), Register(0x1c)], resolved: None }
14 1d 14 1c 
# inline_main_parseHex_3_t11 <- inline_main_parseHex_3_h U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"h\")) }", "Ident(\"h\")", "Ident(\"h\")"] }
# 002bb Instruction { source: "inline_main_parseHex_3_t11 <- inline_main_parseHex_3_h U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"h\\\")) }\", \"Ident(\\\"h\\\")\", \"Ident(\\\"h\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x14)], resolved: None }
0b 1c 14 
# t27 <- inline_main_parseHex_3_t11 U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"h\")) }"] }
# optimized away noop copy Instruction { source: "t27 <- inline_main_parseHex_3_t11 U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"h\\\")) }\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# goto inline_main_parseHex_3_function_end_parseHex
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"h\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_parseHex_3_function_end_parseHex\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"h\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_3_function_end_parseHex)], resolved: None }
# :inline_main_parseHex_3_function_end_parseHex
# 	SourceContext { contexts: [] }
# inline_main_parseHex_3_function_end_parseHex
# mem[t26] <- t27 U8
# 	SourceContext { contexts: ["Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }"] }
# 002be Instruction { source: "mem[t26] <- t27 U8\n\tSourceContext { contexts: [\"Assign { target: Deref(Ident(\\\"p_byte\\\")), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Number(USIZE, 1)))] }) }\"] }", opcode: Store8, args: [Register(0x14), Register(0x38)], resolved: None }
06 14 38 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 002c1 Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
70 f0 06 00 
# :main_if_else_1_7
# 	SourceContext { contexts: [] }
# main_if_else_1_7
# t32 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t32 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# t33 <- 0n110/0x6eu8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }", "Number(U8, 110)", "Number(U8, 110)"] }
# 002c5 Instruction { source: "t33 <- 0n110/0x6eu8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }\", \"Number(U8, 110)\", \"Number(U8, 110)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x6e=110)], resolved: None }
04 1c 6e 
# if t32 == t33 then 'main_if_true_2_8' else 'main_if_else_2_9'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }"] }
# 002c8 Instruction { source: "if t32 == t33 then 'main_if_true_2_8' else 'main_if_else_2_9'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }\"] }", opcode: Cmp8, args: [Register(0x14), Register(0x1c)], resolved: None }
15 14 1c 
# 002cb Instruction { source: "if t32 == t33 then 'main_if_true_2_8' else 'main_if_else_2_9'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }\"] }", opcode: JzImm, args: [Label24(main_if_true_2_8)], resolved: None }
72 d3 02 00 
# 002cf Instruction { source: "if t32 == t33 then 'main_if_true_2_8' else 'main_if_else_2_9'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 110) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_2_9)], resolved: None }
70 e3 02 00 
# :main_if_true_2_8
# 	SourceContext { contexts: [] }
# main_if_true_2_8
# t34 <- addr U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"addr\"), Number(U8, 1))", "Ident(\"addr\")", "Ident(\"addr\")"] }
# optimized away noop copy Instruction { source: "t34 <- addr U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1))\", \"Ident(\\\"addr\\\")\", \"Ident(\\\"addr\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# t35 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"addr\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 002d3 Instruction { source: "t35 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000001=1)], resolved: None }
20 18 01 00 00 00 
# addr <- t34 Add t35
# 	SourceContext { contexts: ["Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"addr\"), Number(U8, 1))"] }
# 002d9 Instruction { source: "addr <- t34 Add t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 002da Instruction { source: "addr <- t34 Add t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x18), Register(0x10)], resolved: None }
30 10 18 10 
# 002de Instruction { source: "addr <- t34 Add t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"addr\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 002df Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
70 f0 06 00 
# :main_if_else_2_9
# 	SourceContext { contexts: [] }
# main_if_else_2_9
# t36 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t36 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# t37 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }", "Number(U8, 97)", "Number(U8, 97)"] }
# 002e3 Instruction { source: "t37 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x61=97)], resolved: None }
04 1c 61 
# if t36 == t37 then 'main_if_true_3_10' else 'main_if_else_3_11'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }"] }
# 002e6 Instruction { source: "if t36 == t37 then 'main_if_true_3_10' else 'main_if_else_3_11'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: Cmp8, args: [Register(0x14), Register(0x1c)], resolved: None }
15 14 1c 
# 002e9 Instruction { source: "if t36 == t37 then 'main_if_true_3_10' else 'main_if_else_3_11'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JzImm, args: [Label24(main_if_true_3_10)], resolved: None }
72 f1 02 00 
# 002ed Instruction { source: "if t36 == t37 then 'main_if_true_3_10' else 'main_if_else_3_11'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_3_11)], resolved: None }
70 26 05 00 
# :main_if_true_3_10
# 	SourceContext { contexts: [] }
# main_if_true_3_10
# t39 <- addr[0x03..0x04] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] })", "Index(\"addr\", Number(USIZE, 3))", "Index(\"addr\", Number(USIZE, 3))"] }
# 002f1 Instruction { source: "t39 <- addr[0x03..0x04] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] })\", \"Index(\\\"addr\\\", Number(USIZE, 3))\", \"Index(\\\"addr\\\", Number(USIZE, 3))\"] }", opcode: Copy8, args: [Register(0x13), Register(0x3c)], resolved: None }
0b 13 3c 
# inline_main_printHex_8_a <- t39 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] })"] }
# 002f4 Instruction { source: "inline_main_printHex_8_a <- t39 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 3))] })\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x14)], resolved: None }
0b 3c 14 
# inline_main_printHex_8_t0 <- inline_main_printHex_8_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_8_t0 <- inline_main_printHex_8_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_8_t1 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Number(U8, 15)", "Number(U8, 15)"] }
# 002f7 Instruction { source: "inline_main_printHex_8_t1 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x0f=15)], resolved: None }
04 1c 0f 
# if inline_main_printHex_8_t0 > inline_main_printHex_8_t1 then 'inline_main_printHex_8_printHex_if_true_0_1' else 'inline_main_printHex_8_printHex_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }"] }
# 002fa Instruction { source: "if inline_main_printHex_8_t0 > inline_main_printHex_8_t1 then 'inline_main_printHex_8_printHex_if_true_0_1' else 'inline_main_printHex_8_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: Cmp8, args: [Register(0x14), Register(0x1c)], resolved: None }
15 14 1c 
# 002fd Instruction { source: "if inline_main_printHex_8_t0 > inline_main_printHex_8_t1 then 'inline_main_printHex_8_printHex_if_true_0_1' else 'inline_main_printHex_8_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_8_printHex_if_else_0_2)], resolved: None }
71 4b 03 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_8_t0 > inline_main_printHex_8_t1 then 'inline_main_printHex_8_printHex_if_true_0_1' else 'inline_main_printHex_8_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_8_printHex_if_true_0_1)], resolved: None }
# :inline_main_printHex_8_printHex_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }"] }
# inline_main_printHex_8_printHex_if_true_0_1
# inline_main_printHex_8_t2 <- inline_main_printHex_8_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_8_t2 <- inline_main_printHex_8_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_8_t3 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 00301 Instruction { source: "inline_main_printHex_8_t3 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x10=16)], resolved: None }
04 1c 10 
# inline_main_printHex_8_b <- inline_main_printHex_8_t2 Divide inline_main_printHex_8_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))"] }
# 00304 Instruction { source: "inline_main_printHex_8_b <- inline_main_printHex_8_t2 Divide inline_main_printHex_8_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\"] }", opcode: Divide8, args: [Register(0x14), Register(0x1c), Register(0x1c)], resolved: None }
17 14 1c 1c 
# inline_main_printHex_8_t5 <- inline_main_printHex_8_b U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_8_t5 <- inline_main_printHex_8_b U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_printHex_8_inline_printHex_printHexDigit_5_a <- inline_main_printHex_8_t5 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })"] }
# 00308 Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_5_a <- inline_main_printHex_8_t5 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1d)], resolved: None }
0b 1c 1d 
# inline_main_printHex_8_inline_printHex_printHexDigit_5_t0 <- inline_main_printHex_8_inline_printHex_printHexDigit_5_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_5_t0 <- inline_main_printHex_8_inline_printHex_printHexDigit_5_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_main_printHex_8_inline_printHex_printHexDigit_5_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 0030b Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_5_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x0a=10)], resolved: None }
04 1e 0a 
# if inline_main_printHex_8_inline_printHex_printHexDigit_5_t0 < inline_main_printHex_8_inline_printHex_printHexDigit_5_t1 then 'inline_main_printHex_8_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1' else 'inline_main_printHex_8_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 0030e Instruction { source: "if inline_main_printHex_8_inline_printHex_printHexDigit_5_t0 < inline_main_printHex_8_inline_printHex_printHexDigit_5_t1 then 'inline_main_printHex_8_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1' else 'inline_main_printHex_8_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x1e), Register(0x1d)], resolved: None }
15 1e 1d 
# 00311 Instruction { source: "if inline_main_printHex_8_inline_printHex_printHexDigit_5_t0 < inline_main_printHex_8_inline_printHex_printHexDigit_5_t1 then 'inline_main_printHex_8_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1' else 'inline_main_printHex_8_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_8_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2)], resolved: None }
71 22 03 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_8_inline_printHex_printHexDigit_5_t0 < inline_main_printHex_8_inline_printHex_printHexDigit_5_t1 then 'inline_main_printHex_8_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1' else 'inline_main_printHex_8_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_8_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_8_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }"] }
# inline_main_printHex_8_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1
# inline_main_printHex_8_inline_printHex_printHexDigit_5_t3 <- inline_main_printHex_8_inline_printHex_printHexDigit_5_a U8
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_5_t3 <- inline_main_printHex_8_inline_printHex_printHexDigit_5_a U8\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_main_printHex_8_inline_printHex_printHexDigit_5_t4 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 00315 Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_5_t4 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x30=48)], resolved: None }
04 1e 30 
# inline_main_printHex_8_inline_printHex_printHexDigit_5_t2 <- inline_main_printHex_8_inline_printHex_printHexDigit_5_t3 Add inline_main_printHex_8_inline_printHex_printHexDigit_5_t4
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 00318 Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_5_t2 <- inline_main_printHex_8_inline_printHex_printHexDigit_5_t3 Add inline_main_printHex_8_inline_printHex_printHexDigit_5_t4\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1d), Register(0x1e), Register(0x1d)], resolved: None }
14 1d 1e 1d 
# ttyout <- inline_main_printHex_8_inline_printHex_printHexDigit_5_t2
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }"] }
# 0031c Instruction { source: "ttyout <- inline_main_printHex_8_inline_printHex_printHexDigit_5_t2\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\"] }", opcode: Out0, args: [Register(0x1d)], resolved: None }
68 1d 
# goto inline_main_printHex_8_inline_printHex_printHexDigit_5_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 0031e Instruction { source: "goto inline_main_printHex_8_inline_printHex_printHexDigit_5_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_8_inline_printHex_printHexDigit_5_printHexDigit_if_end_0)], resolved: None }
70 37 03 00 
# :inline_main_printHex_8_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_8_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2
# inline_main_printHex_8_inline_printHex_printHexDigit_5_t5 <- inline_main_printHex_8_inline_printHex_printHexDigit_5_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_5_t5 <- inline_main_printHex_8_inline_printHex_printHexDigit_5_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_main_printHex_8_inline_printHex_printHexDigit_5_t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 00322 Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_5_t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x0a=10)], resolved: None }
04 1e 0a 
# inline_main_printHex_8_inline_printHex_printHexDigit_5_a <- inline_main_printHex_8_inline_printHex_printHexDigit_5_t5 Subtract inline_main_printHex_8_inline_printHex_printHexDigit_5_t6
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 00325 Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_5_a <- inline_main_printHex_8_inline_printHex_printHexDigit_5_t5 Subtract inline_main_printHex_8_inline_printHex_printHexDigit_5_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0x1e), Register(0x00)], resolved: None }
0b 1e 00 
# 00328 Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_5_a <- inline_main_printHex_8_inline_printHex_printHexDigit_5_t5 Subtract inline_main_printHex_8_inline_printHex_printHexDigit_5_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 0032a Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_5_a <- inline_main_printHex_8_inline_printHex_printHexDigit_5_t5 Subtract inline_main_printHex_8_inline_printHex_printHexDigit_5_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1d), Register(0x00), Register(0x1d)], resolved: None }
14 1d 00 1d 
# inline_main_printHex_8_inline_printHex_printHexDigit_5_t7 <- inline_main_printHex_8_inline_printHex_printHexDigit_5_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_5_t7 <- inline_main_printHex_8_inline_printHex_printHexDigit_5_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_main_printHex_8_inline_printHex_printHexDigit_5_t8 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 0032e Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_5_t8 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x41=65)], resolved: None }
04 1e 41 
# inline_main_printHex_8_inline_printHex_printHexDigit_5_a <- inline_main_printHex_8_inline_printHex_printHexDigit_5_t7 Add inline_main_printHex_8_inline_printHex_printHexDigit_5_t8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 00331 Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_5_a <- inline_main_printHex_8_inline_printHex_printHexDigit_5_t7 Add inline_main_printHex_8_inline_printHex_printHexDigit_5_t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1d), Register(0x1e), Register(0x1d)], resolved: None }
14 1d 1e 1d 
# inline_main_printHex_8_inline_printHex_printHexDigit_5_t9 <- inline_main_printHex_8_inline_printHex_printHexDigit_5_a U8
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_5_t9 <- inline_main_printHex_8_inline_printHex_printHexDigit_5_a U8\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# ttyout <- inline_main_printHex_8_inline_printHex_printHexDigit_5_t9
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"a\") }"] }
# 00335 Instruction { source: "ttyout <- inline_main_printHex_8_inline_printHex_printHexDigit_5_t9\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"a\\\") }\"] }", opcode: Out0, args: [Register(0x1d)], resolved: None }
68 1d 
# :inline_main_printHex_8_inline_printHex_printHexDigit_5_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_8_inline_printHex_printHexDigit_5_printHexDigit_if_end_0
# goto inline_main_printHex_8_inline_printHex_printHexDigit_5_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_8_inline_printHex_printHexDigit_5_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_8_inline_printHex_printHexDigit_5_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_8_inline_printHex_printHexDigit_5_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_8_inline_printHex_printHexDigit_5_function_end_printHexDigit
# inline_main_printHex_8_t6 <- inline_main_printHex_8_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_8_t6 <- inline_main_printHex_8_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_8_t8 <- inline_main_printHex_8_b U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_8_t8 <- inline_main_printHex_8_b U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_printHex_8_t9 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 00337 Instruction { source: "inline_main_printHex_8_t9 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x10=16)], resolved: None }
04 1d 10 
# inline_main_printHex_8_t7 <- inline_main_printHex_8_t8 Multiply inline_main_printHex_8_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))"] }
# 0033a Instruction { source: "inline_main_printHex_8_t7 <- inline_main_printHex_8_t8 Multiply inline_main_printHex_8_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\"] }", opcode: Mul8_8, args: [Register(0x1c), Register(0x1d), Register(0x1c)], resolved: None }
10 1c 1d 1c 
# inline_main_printHex_8_a <- inline_main_printHex_8_t6 Subtract inline_main_printHex_8_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))"] }
# 0033e Instruction { source: "inline_main_printHex_8_a <- inline_main_printHex_8_t6 Subtract inline_main_printHex_8_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x00)], resolved: None }
0b 1c 00 
# 00341 Instruction { source: "inline_main_printHex_8_a <- inline_main_printHex_8_t6 Subtract inline_main_printHex_8_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00343 Instruction { source: "inline_main_printHex_8_a <- inline_main_printHex_8_t6 Subtract inline_main_printHex_8_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x00), Register(0x14)], resolved: None }
14 14 00 14 
# goto inline_main_printHex_8_printHex_if_end_0
# 	SourceContext { contexts: [] }
# 00347 Instruction { source: "goto inline_main_printHex_8_printHex_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_8_printHex_if_end_0)], resolved: None }
70 50 03 00 
# :inline_main_printHex_8_printHex_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_8_printHex_if_else_0_2
# inline_main_printHex_8_t10 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 48) }", "Number(U8, 48)", "Number(U8, 48)"] }
# 0034b Instruction { source: "inline_main_printHex_8_t10 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 48) }\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x30=48)], resolved: None }
04 1c 30 
# ttyout <- inline_main_printHex_8_t10
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 48) }"] }
# 0034e Instruction { source: "ttyout <- inline_main_printHex_8_t10\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 48) }\"] }", opcode: Out0, args: [Register(0x1c)], resolved: None }
68 1c 
# :inline_main_printHex_8_printHex_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_8_printHex_if_end_0
# inline_main_printHex_8_t12 <- inline_main_printHex_8_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_8_t12 <- inline_main_printHex_8_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_8_inline_printHex_printHexDigit_6_a <- inline_main_printHex_8_t12 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_6_a <- inline_main_printHex_8_t12 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_8_inline_printHex_printHexDigit_6_t0 <- inline_main_printHex_8_inline_printHex_printHexDigit_6_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_6_t0 <- inline_main_printHex_8_inline_printHex_printHexDigit_6_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_8_inline_printHex_printHexDigit_6_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 00350 Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_6_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x0a=10)], resolved: None }
04 1c 0a 
# if inline_main_printHex_8_inline_printHex_printHexDigit_6_t0 < inline_main_printHex_8_inline_printHex_printHexDigit_6_t1 then 'inline_main_printHex_8_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1' else 'inline_main_printHex_8_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 00353 Instruction { source: "if inline_main_printHex_8_inline_printHex_printHexDigit_6_t0 < inline_main_printHex_8_inline_printHex_printHexDigit_6_t1 then 'inline_main_printHex_8_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1' else 'inline_main_printHex_8_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x14)], resolved: None }
15 1c 14 
# 00356 Instruction { source: "if inline_main_printHex_8_inline_printHex_printHexDigit_6_t0 < inline_main_printHex_8_inline_printHex_printHexDigit_6_t1 then 'inline_main_printHex_8_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1' else 'inline_main_printHex_8_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_8_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2)], resolved: None }
71 67 03 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_8_inline_printHex_printHexDigit_6_t0 < inline_main_printHex_8_inline_printHex_printHexDigit_6_t1 then 'inline_main_printHex_8_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1' else 'inline_main_printHex_8_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_8_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_8_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }"] }
# inline_main_printHex_8_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1
# inline_main_printHex_8_inline_printHex_printHexDigit_6_t3 <- inline_main_printHex_8_inline_printHex_printHexDigit_6_a U8
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_6_t3 <- inline_main_printHex_8_inline_printHex_printHexDigit_6_a U8\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_8_inline_printHex_printHexDigit_6_t4 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 0035a Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_6_t4 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x30=48)], resolved: None }
04 1c 30 
# inline_main_printHex_8_inline_printHex_printHexDigit_6_t2 <- inline_main_printHex_8_inline_printHex_printHexDigit_6_t3 Add inline_main_printHex_8_inline_printHex_printHexDigit_6_t4
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 0035d Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_6_t2 <- inline_main_printHex_8_inline_printHex_printHexDigit_6_t3 Add inline_main_printHex_8_inline_printHex_printHexDigit_6_t4\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x1c), Register(0x14)], resolved: None }
14 14 1c 14 
# ttyout <- inline_main_printHex_8_inline_printHex_printHexDigit_6_t2
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }"] }
# 00361 Instruction { source: "ttyout <- inline_main_printHex_8_inline_printHex_printHexDigit_6_t2\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# goto inline_main_printHex_8_inline_printHex_printHexDigit_6_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 00363 Instruction { source: "goto inline_main_printHex_8_inline_printHex_printHexDigit_6_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_8_inline_printHex_printHexDigit_6_printHexDigit_if_end_0)], resolved: None }
70 7c 03 00 
# :inline_main_printHex_8_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_8_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2
# inline_main_printHex_8_inline_printHex_printHexDigit_6_t5 <- inline_main_printHex_8_inline_printHex_printHexDigit_6_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_6_t5 <- inline_main_printHex_8_inline_printHex_printHexDigit_6_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_8_inline_printHex_printHexDigit_6_t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 00367 Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_6_t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x0a=10)], resolved: None }
04 1c 0a 
# inline_main_printHex_8_inline_printHex_printHexDigit_6_a <- inline_main_printHex_8_inline_printHex_printHexDigit_6_t5 Subtract inline_main_printHex_8_inline_printHex_printHexDigit_6_t6
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 0036a Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_6_a <- inline_main_printHex_8_inline_printHex_printHexDigit_6_t5 Subtract inline_main_printHex_8_inline_printHex_printHexDigit_6_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x00)], resolved: None }
0b 1c 00 
# 0036d Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_6_a <- inline_main_printHex_8_inline_printHex_printHexDigit_6_t5 Subtract inline_main_printHex_8_inline_printHex_printHexDigit_6_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 0036f Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_6_a <- inline_main_printHex_8_inline_printHex_printHexDigit_6_t5 Subtract inline_main_printHex_8_inline_printHex_printHexDigit_6_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x00), Register(0x14)], resolved: None }
14 14 00 14 
# inline_main_printHex_8_inline_printHex_printHexDigit_6_t7 <- inline_main_printHex_8_inline_printHex_printHexDigit_6_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_6_t7 <- inline_main_printHex_8_inline_printHex_printHexDigit_6_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_8_inline_printHex_printHexDigit_6_t8 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 00373 Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_6_t8 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x41=65)], resolved: None }
04 1c 41 
# inline_main_printHex_8_inline_printHex_printHexDigit_6_a <- inline_main_printHex_8_inline_printHex_printHexDigit_6_t7 Add inline_main_printHex_8_inline_printHex_printHexDigit_6_t8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 00376 Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_6_a <- inline_main_printHex_8_inline_printHex_printHexDigit_6_t7 Add inline_main_printHex_8_inline_printHex_printHexDigit_6_t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x1c), Register(0x14)], resolved: None }
14 14 1c 14 
# inline_main_printHex_8_inline_printHex_printHexDigit_6_t9 <- inline_main_printHex_8_inline_printHex_printHexDigit_6_a U8
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_8_inline_printHex_printHexDigit_6_t9 <- inline_main_printHex_8_inline_printHex_printHexDigit_6_a U8\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# ttyout <- inline_main_printHex_8_inline_printHex_printHexDigit_6_t9
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"a\") }"] }
# 0037a Instruction { source: "ttyout <- inline_main_printHex_8_inline_printHex_printHexDigit_6_t9\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"a\\\") }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# :inline_main_printHex_8_inline_printHex_printHexDigit_6_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_8_inline_printHex_printHexDigit_6_printHexDigit_if_end_0
# goto inline_main_printHex_8_inline_printHex_printHexDigit_6_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_8_inline_printHex_printHexDigit_6_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_8_inline_printHex_printHexDigit_6_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_8_inline_printHex_printHexDigit_6_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_8_inline_printHex_printHexDigit_6_function_end_printHexDigit
# goto inline_main_printHex_8_function_end_printHex
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_8_function_end_printHex\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_8_function_end_printHex)], resolved: None }
# :inline_main_printHex_8_function_end_printHex
# 	SourceContext { contexts: [] }
# inline_main_printHex_8_function_end_printHex
# t41 <- addr[0x02..0x03] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] })", "Index(\"addr\", Number(USIZE, 2))", "Index(\"addr\", Number(USIZE, 2))"] }
# 0037c Instruction { source: "t41 <- addr[0x02..0x03] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] })\", \"Index(\\\"addr\\\", Number(USIZE, 2))\", \"Index(\\\"addr\\\", Number(USIZE, 2))\"] }", opcode: Copy8, args: [Register(0x12), Register(0x3c)], resolved: None }
0b 12 3c 
# inline_main_printHex_9_a <- t41 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] })"] }
# 0037f Instruction { source: "inline_main_printHex_9_a <- t41 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 2))] })\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x14)], resolved: None }
0b 3c 14 
# inline_main_printHex_9_t0 <- inline_main_printHex_9_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_9_t0 <- inline_main_printHex_9_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_9_t1 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Number(U8, 15)", "Number(U8, 15)"] }
# 00382 Instruction { source: "inline_main_printHex_9_t1 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x0f=15)], resolved: None }
04 1c 0f 
# if inline_main_printHex_9_t0 > inline_main_printHex_9_t1 then 'inline_main_printHex_9_printHex_if_true_0_1' else 'inline_main_printHex_9_printHex_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }"] }
# 00385 Instruction { source: "if inline_main_printHex_9_t0 > inline_main_printHex_9_t1 then 'inline_main_printHex_9_printHex_if_true_0_1' else 'inline_main_printHex_9_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: Cmp8, args: [Register(0x14), Register(0x1c)], resolved: None }
15 14 1c 
# 00388 Instruction { source: "if inline_main_printHex_9_t0 > inline_main_printHex_9_t1 then 'inline_main_printHex_9_printHex_if_true_0_1' else 'inline_main_printHex_9_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_9_printHex_if_else_0_2)], resolved: None }
71 d6 03 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_9_t0 > inline_main_printHex_9_t1 then 'inline_main_printHex_9_printHex_if_true_0_1' else 'inline_main_printHex_9_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_9_printHex_if_true_0_1)], resolved: None }
# :inline_main_printHex_9_printHex_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }"] }
# inline_main_printHex_9_printHex_if_true_0_1
# inline_main_printHex_9_t2 <- inline_main_printHex_9_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_9_t2 <- inline_main_printHex_9_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_9_t3 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 0038c Instruction { source: "inline_main_printHex_9_t3 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x10=16)], resolved: None }
04 1c 10 
# inline_main_printHex_9_b <- inline_main_printHex_9_t2 Divide inline_main_printHex_9_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))"] }
# 0038f Instruction { source: "inline_main_printHex_9_b <- inline_main_printHex_9_t2 Divide inline_main_printHex_9_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\"] }", opcode: Divide8, args: [Register(0x14), Register(0x1c), Register(0x1c)], resolved: None }
17 14 1c 1c 
# inline_main_printHex_9_t5 <- inline_main_printHex_9_b U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_9_t5 <- inline_main_printHex_9_b U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_printHex_9_inline_printHex_printHexDigit_5_a <- inline_main_printHex_9_t5 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })"] }
# 00393 Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_5_a <- inline_main_printHex_9_t5 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1d)], resolved: None }
0b 1c 1d 
# inline_main_printHex_9_inline_printHex_printHexDigit_5_t0 <- inline_main_printHex_9_inline_printHex_printHexDigit_5_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_5_t0 <- inline_main_printHex_9_inline_printHex_printHexDigit_5_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_main_printHex_9_inline_printHex_printHexDigit_5_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 00396 Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_5_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x0a=10)], resolved: None }
04 1e 0a 
# if inline_main_printHex_9_inline_printHex_printHexDigit_5_t0 < inline_main_printHex_9_inline_printHex_printHexDigit_5_t1 then 'inline_main_printHex_9_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1' else 'inline_main_printHex_9_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 00399 Instruction { source: "if inline_main_printHex_9_inline_printHex_printHexDigit_5_t0 < inline_main_printHex_9_inline_printHex_printHexDigit_5_t1 then 'inline_main_printHex_9_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1' else 'inline_main_printHex_9_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x1e), Register(0x1d)], resolved: None }
15 1e 1d 
# 0039c Instruction { source: "if inline_main_printHex_9_inline_printHex_printHexDigit_5_t0 < inline_main_printHex_9_inline_printHex_printHexDigit_5_t1 then 'inline_main_printHex_9_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1' else 'inline_main_printHex_9_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_9_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2)], resolved: None }
71 ad 03 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_9_inline_printHex_printHexDigit_5_t0 < inline_main_printHex_9_inline_printHex_printHexDigit_5_t1 then 'inline_main_printHex_9_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1' else 'inline_main_printHex_9_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_9_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_9_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }"] }
# inline_main_printHex_9_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1
# inline_main_printHex_9_inline_printHex_printHexDigit_5_t3 <- inline_main_printHex_9_inline_printHex_printHexDigit_5_a U8
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_5_t3 <- inline_main_printHex_9_inline_printHex_printHexDigit_5_a U8\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_main_printHex_9_inline_printHex_printHexDigit_5_t4 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 003a0 Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_5_t4 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x30=48)], resolved: None }
04 1e 30 
# inline_main_printHex_9_inline_printHex_printHexDigit_5_t2 <- inline_main_printHex_9_inline_printHex_printHexDigit_5_t3 Add inline_main_printHex_9_inline_printHex_printHexDigit_5_t4
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 003a3 Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_5_t2 <- inline_main_printHex_9_inline_printHex_printHexDigit_5_t3 Add inline_main_printHex_9_inline_printHex_printHexDigit_5_t4\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1d), Register(0x1e), Register(0x1d)], resolved: None }
14 1d 1e 1d 
# ttyout <- inline_main_printHex_9_inline_printHex_printHexDigit_5_t2
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }"] }
# 003a7 Instruction { source: "ttyout <- inline_main_printHex_9_inline_printHex_printHexDigit_5_t2\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\"] }", opcode: Out0, args: [Register(0x1d)], resolved: None }
68 1d 
# goto inline_main_printHex_9_inline_printHex_printHexDigit_5_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 003a9 Instruction { source: "goto inline_main_printHex_9_inline_printHex_printHexDigit_5_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_9_inline_printHex_printHexDigit_5_printHexDigit_if_end_0)], resolved: None }
70 c2 03 00 
# :inline_main_printHex_9_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_9_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2
# inline_main_printHex_9_inline_printHex_printHexDigit_5_t5 <- inline_main_printHex_9_inline_printHex_printHexDigit_5_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_5_t5 <- inline_main_printHex_9_inline_printHex_printHexDigit_5_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_main_printHex_9_inline_printHex_printHexDigit_5_t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 003ad Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_5_t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x0a=10)], resolved: None }
04 1e 0a 
# inline_main_printHex_9_inline_printHex_printHexDigit_5_a <- inline_main_printHex_9_inline_printHex_printHexDigit_5_t5 Subtract inline_main_printHex_9_inline_printHex_printHexDigit_5_t6
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 003b0 Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_5_a <- inline_main_printHex_9_inline_printHex_printHexDigit_5_t5 Subtract inline_main_printHex_9_inline_printHex_printHexDigit_5_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0x1e), Register(0x00)], resolved: None }
0b 1e 00 
# 003b3 Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_5_a <- inline_main_printHex_9_inline_printHex_printHexDigit_5_t5 Subtract inline_main_printHex_9_inline_printHex_printHexDigit_5_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 003b5 Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_5_a <- inline_main_printHex_9_inline_printHex_printHexDigit_5_t5 Subtract inline_main_printHex_9_inline_printHex_printHexDigit_5_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1d), Register(0x00), Register(0x1d)], resolved: None }
14 1d 00 1d 
# inline_main_printHex_9_inline_printHex_printHexDigit_5_t7 <- inline_main_printHex_9_inline_printHex_printHexDigit_5_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_5_t7 <- inline_main_printHex_9_inline_printHex_printHexDigit_5_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_main_printHex_9_inline_printHex_printHexDigit_5_t8 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 003b9 Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_5_t8 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x41=65)], resolved: None }
04 1e 41 
# inline_main_printHex_9_inline_printHex_printHexDigit_5_a <- inline_main_printHex_9_inline_printHex_printHexDigit_5_t7 Add inline_main_printHex_9_inline_printHex_printHexDigit_5_t8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 003bc Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_5_a <- inline_main_printHex_9_inline_printHex_printHexDigit_5_t7 Add inline_main_printHex_9_inline_printHex_printHexDigit_5_t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1d), Register(0x1e), Register(0x1d)], resolved: None }
14 1d 1e 1d 
# inline_main_printHex_9_inline_printHex_printHexDigit_5_t9 <- inline_main_printHex_9_inline_printHex_printHexDigit_5_a U8
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_5_t9 <- inline_main_printHex_9_inline_printHex_printHexDigit_5_a U8\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# ttyout <- inline_main_printHex_9_inline_printHex_printHexDigit_5_t9
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"a\") }"] }
# 003c0 Instruction { source: "ttyout <- inline_main_printHex_9_inline_printHex_printHexDigit_5_t9\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"a\\\") }\"] }", opcode: Out0, args: [Register(0x1d)], resolved: None }
68 1d 
# :inline_main_printHex_9_inline_printHex_printHexDigit_5_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_9_inline_printHex_printHexDigit_5_printHexDigit_if_end_0
# goto inline_main_printHex_9_inline_printHex_printHexDigit_5_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_9_inline_printHex_printHexDigit_5_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_9_inline_printHex_printHexDigit_5_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_9_inline_printHex_printHexDigit_5_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_9_inline_printHex_printHexDigit_5_function_end_printHexDigit
# inline_main_printHex_9_t6 <- inline_main_printHex_9_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_9_t6 <- inline_main_printHex_9_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_9_t8 <- inline_main_printHex_9_b U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_9_t8 <- inline_main_printHex_9_b U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_printHex_9_t9 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 003c2 Instruction { source: "inline_main_printHex_9_t9 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x10=16)], resolved: None }
04 1d 10 
# inline_main_printHex_9_t7 <- inline_main_printHex_9_t8 Multiply inline_main_printHex_9_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))"] }
# 003c5 Instruction { source: "inline_main_printHex_9_t7 <- inline_main_printHex_9_t8 Multiply inline_main_printHex_9_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\"] }", opcode: Mul8_8, args: [Register(0x1c), Register(0x1d), Register(0x1c)], resolved: None }
10 1c 1d 1c 
# inline_main_printHex_9_a <- inline_main_printHex_9_t6 Subtract inline_main_printHex_9_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))"] }
# 003c9 Instruction { source: "inline_main_printHex_9_a <- inline_main_printHex_9_t6 Subtract inline_main_printHex_9_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x00)], resolved: None }
0b 1c 00 
# 003cc Instruction { source: "inline_main_printHex_9_a <- inline_main_printHex_9_t6 Subtract inline_main_printHex_9_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 003ce Instruction { source: "inline_main_printHex_9_a <- inline_main_printHex_9_t6 Subtract inline_main_printHex_9_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x00), Register(0x14)], resolved: None }
14 14 00 14 
# goto inline_main_printHex_9_printHex_if_end_0
# 	SourceContext { contexts: [] }
# 003d2 Instruction { source: "goto inline_main_printHex_9_printHex_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_9_printHex_if_end_0)], resolved: None }
70 db 03 00 
# :inline_main_printHex_9_printHex_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_9_printHex_if_else_0_2
# inline_main_printHex_9_t10 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 48) }", "Number(U8, 48)", "Number(U8, 48)"] }
# 003d6 Instruction { source: "inline_main_printHex_9_t10 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 48) }\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x30=48)], resolved: None }
04 1c 30 
# ttyout <- inline_main_printHex_9_t10
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 48) }"] }
# 003d9 Instruction { source: "ttyout <- inline_main_printHex_9_t10\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 48) }\"] }", opcode: Out0, args: [Register(0x1c)], resolved: None }
68 1c 
# :inline_main_printHex_9_printHex_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_9_printHex_if_end_0
# inline_main_printHex_9_t12 <- inline_main_printHex_9_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_9_t12 <- inline_main_printHex_9_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_9_inline_printHex_printHexDigit_6_a <- inline_main_printHex_9_t12 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_6_a <- inline_main_printHex_9_t12 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_9_inline_printHex_printHexDigit_6_t0 <- inline_main_printHex_9_inline_printHex_printHexDigit_6_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_6_t0 <- inline_main_printHex_9_inline_printHex_printHexDigit_6_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_9_inline_printHex_printHexDigit_6_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 003db Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_6_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x0a=10)], resolved: None }
04 1c 0a 
# if inline_main_printHex_9_inline_printHex_printHexDigit_6_t0 < inline_main_printHex_9_inline_printHex_printHexDigit_6_t1 then 'inline_main_printHex_9_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1' else 'inline_main_printHex_9_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 003de Instruction { source: "if inline_main_printHex_9_inline_printHex_printHexDigit_6_t0 < inline_main_printHex_9_inline_printHex_printHexDigit_6_t1 then 'inline_main_printHex_9_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1' else 'inline_main_printHex_9_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x14)], resolved: None }
15 1c 14 
# 003e1 Instruction { source: "if inline_main_printHex_9_inline_printHex_printHexDigit_6_t0 < inline_main_printHex_9_inline_printHex_printHexDigit_6_t1 then 'inline_main_printHex_9_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1' else 'inline_main_printHex_9_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_9_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2)], resolved: None }
71 f2 03 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_9_inline_printHex_printHexDigit_6_t0 < inline_main_printHex_9_inline_printHex_printHexDigit_6_t1 then 'inline_main_printHex_9_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1' else 'inline_main_printHex_9_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_9_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_9_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }"] }
# inline_main_printHex_9_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1
# inline_main_printHex_9_inline_printHex_printHexDigit_6_t3 <- inline_main_printHex_9_inline_printHex_printHexDigit_6_a U8
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_6_t3 <- inline_main_printHex_9_inline_printHex_printHexDigit_6_a U8\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_9_inline_printHex_printHexDigit_6_t4 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 003e5 Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_6_t4 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x30=48)], resolved: None }
04 1c 30 
# inline_main_printHex_9_inline_printHex_printHexDigit_6_t2 <- inline_main_printHex_9_inline_printHex_printHexDigit_6_t3 Add inline_main_printHex_9_inline_printHex_printHexDigit_6_t4
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 003e8 Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_6_t2 <- inline_main_printHex_9_inline_printHex_printHexDigit_6_t3 Add inline_main_printHex_9_inline_printHex_printHexDigit_6_t4\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x1c), Register(0x14)], resolved: None }
14 14 1c 14 
# ttyout <- inline_main_printHex_9_inline_printHex_printHexDigit_6_t2
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }"] }
# 003ec Instruction { source: "ttyout <- inline_main_printHex_9_inline_printHex_printHexDigit_6_t2\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# goto inline_main_printHex_9_inline_printHex_printHexDigit_6_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 003ee Instruction { source: "goto inline_main_printHex_9_inline_printHex_printHexDigit_6_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_9_inline_printHex_printHexDigit_6_printHexDigit_if_end_0)], resolved: None }
70 07 04 00 
# :inline_main_printHex_9_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_9_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2
# inline_main_printHex_9_inline_printHex_printHexDigit_6_t5 <- inline_main_printHex_9_inline_printHex_printHexDigit_6_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_6_t5 <- inline_main_printHex_9_inline_printHex_printHexDigit_6_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_9_inline_printHex_printHexDigit_6_t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 003f2 Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_6_t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x0a=10)], resolved: None }
04 1c 0a 
# inline_main_printHex_9_inline_printHex_printHexDigit_6_a <- inline_main_printHex_9_inline_printHex_printHexDigit_6_t5 Subtract inline_main_printHex_9_inline_printHex_printHexDigit_6_t6
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 003f5 Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_6_a <- inline_main_printHex_9_inline_printHex_printHexDigit_6_t5 Subtract inline_main_printHex_9_inline_printHex_printHexDigit_6_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x00)], resolved: None }
0b 1c 00 
# 003f8 Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_6_a <- inline_main_printHex_9_inline_printHex_printHexDigit_6_t5 Subtract inline_main_printHex_9_inline_printHex_printHexDigit_6_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 003fa Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_6_a <- inline_main_printHex_9_inline_printHex_printHexDigit_6_t5 Subtract inline_main_printHex_9_inline_printHex_printHexDigit_6_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x00), Register(0x14)], resolved: None }
14 14 00 14 
# inline_main_printHex_9_inline_printHex_printHexDigit_6_t7 <- inline_main_printHex_9_inline_printHex_printHexDigit_6_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_6_t7 <- inline_main_printHex_9_inline_printHex_printHexDigit_6_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_9_inline_printHex_printHexDigit_6_t8 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 003fe Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_6_t8 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x41=65)], resolved: None }
04 1c 41 
# inline_main_printHex_9_inline_printHex_printHexDigit_6_a <- inline_main_printHex_9_inline_printHex_printHexDigit_6_t7 Add inline_main_printHex_9_inline_printHex_printHexDigit_6_t8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 00401 Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_6_a <- inline_main_printHex_9_inline_printHex_printHexDigit_6_t7 Add inline_main_printHex_9_inline_printHex_printHexDigit_6_t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x1c), Register(0x14)], resolved: None }
14 14 1c 14 
# inline_main_printHex_9_inline_printHex_printHexDigit_6_t9 <- inline_main_printHex_9_inline_printHex_printHexDigit_6_a U8
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_9_inline_printHex_printHexDigit_6_t9 <- inline_main_printHex_9_inline_printHex_printHexDigit_6_a U8\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# ttyout <- inline_main_printHex_9_inline_printHex_printHexDigit_6_t9
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"a\") }"] }
# 00405 Instruction { source: "ttyout <- inline_main_printHex_9_inline_printHex_printHexDigit_6_t9\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"a\\\") }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# :inline_main_printHex_9_inline_printHex_printHexDigit_6_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_9_inline_printHex_printHexDigit_6_printHexDigit_if_end_0
# goto inline_main_printHex_9_inline_printHex_printHexDigit_6_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_9_inline_printHex_printHexDigit_6_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_9_inline_printHex_printHexDigit_6_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_9_inline_printHex_printHexDigit_6_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_9_inline_printHex_printHexDigit_6_function_end_printHexDigit
# goto inline_main_printHex_9_function_end_printHex
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_9_function_end_printHex\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_9_function_end_printHex)], resolved: None }
# :inline_main_printHex_9_function_end_printHex
# 	SourceContext { contexts: [] }
# inline_main_printHex_9_function_end_printHex
# t43 <- addr[0x01..0x02] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] })", "Index(\"addr\", Number(USIZE, 1))", "Index(\"addr\", Number(USIZE, 1))"] }
# 00407 Instruction { source: "t43 <- addr[0x01..0x02] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] })\", \"Index(\\\"addr\\\", Number(USIZE, 1))\", \"Index(\\\"addr\\\", Number(USIZE, 1))\"] }", opcode: Copy8, args: [Register(0x11), Register(0x3c)], resolved: None }
0b 11 3c 
# inline_main_printHex_10_a <- t43 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] })"] }
# 0040a Instruction { source: "inline_main_printHex_10_a <- t43 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 1))] })\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x14)], resolved: None }
0b 3c 14 
# inline_main_printHex_10_t0 <- inline_main_printHex_10_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_10_t0 <- inline_main_printHex_10_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_10_t1 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Number(U8, 15)", "Number(U8, 15)"] }
# 0040d Instruction { source: "inline_main_printHex_10_t1 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x0f=15)], resolved: None }
04 1c 0f 
# if inline_main_printHex_10_t0 > inline_main_printHex_10_t1 then 'inline_main_printHex_10_printHex_if_true_0_1' else 'inline_main_printHex_10_printHex_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }"] }
# 00410 Instruction { source: "if inline_main_printHex_10_t0 > inline_main_printHex_10_t1 then 'inline_main_printHex_10_printHex_if_true_0_1' else 'inline_main_printHex_10_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: Cmp8, args: [Register(0x14), Register(0x1c)], resolved: None }
15 14 1c 
# 00413 Instruction { source: "if inline_main_printHex_10_t0 > inline_main_printHex_10_t1 then 'inline_main_printHex_10_printHex_if_true_0_1' else 'inline_main_printHex_10_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_10_printHex_if_else_0_2)], resolved: None }
71 61 04 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_10_t0 > inline_main_printHex_10_t1 then 'inline_main_printHex_10_printHex_if_true_0_1' else 'inline_main_printHex_10_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_10_printHex_if_true_0_1)], resolved: None }
# :inline_main_printHex_10_printHex_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }"] }
# inline_main_printHex_10_printHex_if_true_0_1
# inline_main_printHex_10_t2 <- inline_main_printHex_10_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_10_t2 <- inline_main_printHex_10_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_10_t3 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 00417 Instruction { source: "inline_main_printHex_10_t3 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x10=16)], resolved: None }
04 1c 10 
# inline_main_printHex_10_b <- inline_main_printHex_10_t2 Divide inline_main_printHex_10_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))"] }
# 0041a Instruction { source: "inline_main_printHex_10_b <- inline_main_printHex_10_t2 Divide inline_main_printHex_10_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\"] }", opcode: Divide8, args: [Register(0x14), Register(0x1c), Register(0x1c)], resolved: None }
17 14 1c 1c 
# inline_main_printHex_10_t5 <- inline_main_printHex_10_b U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_10_t5 <- inline_main_printHex_10_b U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_printHex_10_inline_printHex_printHexDigit_5_a <- inline_main_printHex_10_t5 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })"] }
# 0041e Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_5_a <- inline_main_printHex_10_t5 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1d)], resolved: None }
0b 1c 1d 
# inline_main_printHex_10_inline_printHex_printHexDigit_5_t0 <- inline_main_printHex_10_inline_printHex_printHexDigit_5_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_5_t0 <- inline_main_printHex_10_inline_printHex_printHexDigit_5_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_main_printHex_10_inline_printHex_printHexDigit_5_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 00421 Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_5_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x0a=10)], resolved: None }
04 1e 0a 
# if inline_main_printHex_10_inline_printHex_printHexDigit_5_t0 < inline_main_printHex_10_inline_printHex_printHexDigit_5_t1 then 'inline_main_printHex_10_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1' else 'inline_main_printHex_10_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 00424 Instruction { source: "if inline_main_printHex_10_inline_printHex_printHexDigit_5_t0 < inline_main_printHex_10_inline_printHex_printHexDigit_5_t1 then 'inline_main_printHex_10_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1' else 'inline_main_printHex_10_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x1e), Register(0x1d)], resolved: None }
15 1e 1d 
# 00427 Instruction { source: "if inline_main_printHex_10_inline_printHex_printHexDigit_5_t0 < inline_main_printHex_10_inline_printHex_printHexDigit_5_t1 then 'inline_main_printHex_10_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1' else 'inline_main_printHex_10_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_10_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2)], resolved: None }
71 38 04 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_10_inline_printHex_printHexDigit_5_t0 < inline_main_printHex_10_inline_printHex_printHexDigit_5_t1 then 'inline_main_printHex_10_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1' else 'inline_main_printHex_10_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_10_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_10_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }"] }
# inline_main_printHex_10_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1
# inline_main_printHex_10_inline_printHex_printHexDigit_5_t3 <- inline_main_printHex_10_inline_printHex_printHexDigit_5_a U8
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_5_t3 <- inline_main_printHex_10_inline_printHex_printHexDigit_5_a U8\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_main_printHex_10_inline_printHex_printHexDigit_5_t4 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 0042b Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_5_t4 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x30=48)], resolved: None }
04 1e 30 
# inline_main_printHex_10_inline_printHex_printHexDigit_5_t2 <- inline_main_printHex_10_inline_printHex_printHexDigit_5_t3 Add inline_main_printHex_10_inline_printHex_printHexDigit_5_t4
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 0042e Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_5_t2 <- inline_main_printHex_10_inline_printHex_printHexDigit_5_t3 Add inline_main_printHex_10_inline_printHex_printHexDigit_5_t4\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1d), Register(0x1e), Register(0x1d)], resolved: None }
14 1d 1e 1d 
# ttyout <- inline_main_printHex_10_inline_printHex_printHexDigit_5_t2
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }"] }
# 00432 Instruction { source: "ttyout <- inline_main_printHex_10_inline_printHex_printHexDigit_5_t2\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\"] }", opcode: Out0, args: [Register(0x1d)], resolved: None }
68 1d 
# goto inline_main_printHex_10_inline_printHex_printHexDigit_5_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 00434 Instruction { source: "goto inline_main_printHex_10_inline_printHex_printHexDigit_5_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_10_inline_printHex_printHexDigit_5_printHexDigit_if_end_0)], resolved: None }
70 4d 04 00 
# :inline_main_printHex_10_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_10_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2
# inline_main_printHex_10_inline_printHex_printHexDigit_5_t5 <- inline_main_printHex_10_inline_printHex_printHexDigit_5_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_5_t5 <- inline_main_printHex_10_inline_printHex_printHexDigit_5_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_main_printHex_10_inline_printHex_printHexDigit_5_t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 00438 Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_5_t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x0a=10)], resolved: None }
04 1e 0a 
# inline_main_printHex_10_inline_printHex_printHexDigit_5_a <- inline_main_printHex_10_inline_printHex_printHexDigit_5_t5 Subtract inline_main_printHex_10_inline_printHex_printHexDigit_5_t6
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 0043b Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_5_a <- inline_main_printHex_10_inline_printHex_printHexDigit_5_t5 Subtract inline_main_printHex_10_inline_printHex_printHexDigit_5_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0x1e), Register(0x00)], resolved: None }
0b 1e 00 
# 0043e Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_5_a <- inline_main_printHex_10_inline_printHex_printHexDigit_5_t5 Subtract inline_main_printHex_10_inline_printHex_printHexDigit_5_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00440 Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_5_a <- inline_main_printHex_10_inline_printHex_printHexDigit_5_t5 Subtract inline_main_printHex_10_inline_printHex_printHexDigit_5_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1d), Register(0x00), Register(0x1d)], resolved: None }
14 1d 00 1d 
# inline_main_printHex_10_inline_printHex_printHexDigit_5_t7 <- inline_main_printHex_10_inline_printHex_printHexDigit_5_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_5_t7 <- inline_main_printHex_10_inline_printHex_printHexDigit_5_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_main_printHex_10_inline_printHex_printHexDigit_5_t8 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 00444 Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_5_t8 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x41=65)], resolved: None }
04 1e 41 
# inline_main_printHex_10_inline_printHex_printHexDigit_5_a <- inline_main_printHex_10_inline_printHex_printHexDigit_5_t7 Add inline_main_printHex_10_inline_printHex_printHexDigit_5_t8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 00447 Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_5_a <- inline_main_printHex_10_inline_printHex_printHexDigit_5_t7 Add inline_main_printHex_10_inline_printHex_printHexDigit_5_t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1d), Register(0x1e), Register(0x1d)], resolved: None }
14 1d 1e 1d 
# inline_main_printHex_10_inline_printHex_printHexDigit_5_t9 <- inline_main_printHex_10_inline_printHex_printHexDigit_5_a U8
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_5_t9 <- inline_main_printHex_10_inline_printHex_printHexDigit_5_a U8\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# ttyout <- inline_main_printHex_10_inline_printHex_printHexDigit_5_t9
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"a\") }"] }
# 0044b Instruction { source: "ttyout <- inline_main_printHex_10_inline_printHex_printHexDigit_5_t9\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"a\\\") }\"] }", opcode: Out0, args: [Register(0x1d)], resolved: None }
68 1d 
# :inline_main_printHex_10_inline_printHex_printHexDigit_5_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_10_inline_printHex_printHexDigit_5_printHexDigit_if_end_0
# goto inline_main_printHex_10_inline_printHex_printHexDigit_5_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_10_inline_printHex_printHexDigit_5_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_10_inline_printHex_printHexDigit_5_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_10_inline_printHex_printHexDigit_5_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_10_inline_printHex_printHexDigit_5_function_end_printHexDigit
# inline_main_printHex_10_t6 <- inline_main_printHex_10_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_10_t6 <- inline_main_printHex_10_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_10_t8 <- inline_main_printHex_10_b U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_10_t8 <- inline_main_printHex_10_b U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_printHex_10_t9 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 0044d Instruction { source: "inline_main_printHex_10_t9 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x10=16)], resolved: None }
04 1d 10 
# inline_main_printHex_10_t7 <- inline_main_printHex_10_t8 Multiply inline_main_printHex_10_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))"] }
# 00450 Instruction { source: "inline_main_printHex_10_t7 <- inline_main_printHex_10_t8 Multiply inline_main_printHex_10_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\"] }", opcode: Mul8_8, args: [Register(0x1c), Register(0x1d), Register(0x1c)], resolved: None }
10 1c 1d 1c 
# inline_main_printHex_10_a <- inline_main_printHex_10_t6 Subtract inline_main_printHex_10_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))"] }
# 00454 Instruction { source: "inline_main_printHex_10_a <- inline_main_printHex_10_t6 Subtract inline_main_printHex_10_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x00)], resolved: None }
0b 1c 00 
# 00457 Instruction { source: "inline_main_printHex_10_a <- inline_main_printHex_10_t6 Subtract inline_main_printHex_10_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00459 Instruction { source: "inline_main_printHex_10_a <- inline_main_printHex_10_t6 Subtract inline_main_printHex_10_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x00), Register(0x14)], resolved: None }
14 14 00 14 
# goto inline_main_printHex_10_printHex_if_end_0
# 	SourceContext { contexts: [] }
# 0045d Instruction { source: "goto inline_main_printHex_10_printHex_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_10_printHex_if_end_0)], resolved: None }
70 66 04 00 
# :inline_main_printHex_10_printHex_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_10_printHex_if_else_0_2
# inline_main_printHex_10_t10 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 48) }", "Number(U8, 48)", "Number(U8, 48)"] }
# 00461 Instruction { source: "inline_main_printHex_10_t10 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 48) }\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x30=48)], resolved: None }
04 1c 30 
# ttyout <- inline_main_printHex_10_t10
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 48) }"] }
# 00464 Instruction { source: "ttyout <- inline_main_printHex_10_t10\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 48) }\"] }", opcode: Out0, args: [Register(0x1c)], resolved: None }
68 1c 
# :inline_main_printHex_10_printHex_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_10_printHex_if_end_0
# inline_main_printHex_10_t12 <- inline_main_printHex_10_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_10_t12 <- inline_main_printHex_10_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_10_inline_printHex_printHexDigit_6_a <- inline_main_printHex_10_t12 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_6_a <- inline_main_printHex_10_t12 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_10_inline_printHex_printHexDigit_6_t0 <- inline_main_printHex_10_inline_printHex_printHexDigit_6_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_6_t0 <- inline_main_printHex_10_inline_printHex_printHexDigit_6_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_10_inline_printHex_printHexDigit_6_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 00466 Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_6_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x0a=10)], resolved: None }
04 1c 0a 
# if inline_main_printHex_10_inline_printHex_printHexDigit_6_t0 < inline_main_printHex_10_inline_printHex_printHexDigit_6_t1 then 'inline_main_printHex_10_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1' else 'inline_main_printHex_10_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 00469 Instruction { source: "if inline_main_printHex_10_inline_printHex_printHexDigit_6_t0 < inline_main_printHex_10_inline_printHex_printHexDigit_6_t1 then 'inline_main_printHex_10_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1' else 'inline_main_printHex_10_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x14)], resolved: None }
15 1c 14 
# 0046c Instruction { source: "if inline_main_printHex_10_inline_printHex_printHexDigit_6_t0 < inline_main_printHex_10_inline_printHex_printHexDigit_6_t1 then 'inline_main_printHex_10_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1' else 'inline_main_printHex_10_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_10_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2)], resolved: None }
71 7d 04 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_10_inline_printHex_printHexDigit_6_t0 < inline_main_printHex_10_inline_printHex_printHexDigit_6_t1 then 'inline_main_printHex_10_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1' else 'inline_main_printHex_10_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_10_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_10_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }"] }
# inline_main_printHex_10_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1
# inline_main_printHex_10_inline_printHex_printHexDigit_6_t3 <- inline_main_printHex_10_inline_printHex_printHexDigit_6_a U8
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_6_t3 <- inline_main_printHex_10_inline_printHex_printHexDigit_6_a U8\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_10_inline_printHex_printHexDigit_6_t4 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 00470 Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_6_t4 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x30=48)], resolved: None }
04 1c 30 
# inline_main_printHex_10_inline_printHex_printHexDigit_6_t2 <- inline_main_printHex_10_inline_printHex_printHexDigit_6_t3 Add inline_main_printHex_10_inline_printHex_printHexDigit_6_t4
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 00473 Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_6_t2 <- inline_main_printHex_10_inline_printHex_printHexDigit_6_t3 Add inline_main_printHex_10_inline_printHex_printHexDigit_6_t4\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x1c), Register(0x14)], resolved: None }
14 14 1c 14 
# ttyout <- inline_main_printHex_10_inline_printHex_printHexDigit_6_t2
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }"] }
# 00477 Instruction { source: "ttyout <- inline_main_printHex_10_inline_printHex_printHexDigit_6_t2\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# goto inline_main_printHex_10_inline_printHex_printHexDigit_6_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 00479 Instruction { source: "goto inline_main_printHex_10_inline_printHex_printHexDigit_6_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_10_inline_printHex_printHexDigit_6_printHexDigit_if_end_0)], resolved: None }
70 92 04 00 
# :inline_main_printHex_10_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_10_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2
# inline_main_printHex_10_inline_printHex_printHexDigit_6_t5 <- inline_main_printHex_10_inline_printHex_printHexDigit_6_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_6_t5 <- inline_main_printHex_10_inline_printHex_printHexDigit_6_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_10_inline_printHex_printHexDigit_6_t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 0047d Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_6_t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x0a=10)], resolved: None }
04 1c 0a 
# inline_main_printHex_10_inline_printHex_printHexDigit_6_a <- inline_main_printHex_10_inline_printHex_printHexDigit_6_t5 Subtract inline_main_printHex_10_inline_printHex_printHexDigit_6_t6
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 00480 Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_6_a <- inline_main_printHex_10_inline_printHex_printHexDigit_6_t5 Subtract inline_main_printHex_10_inline_printHex_printHexDigit_6_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x00)], resolved: None }
0b 1c 00 
# 00483 Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_6_a <- inline_main_printHex_10_inline_printHex_printHexDigit_6_t5 Subtract inline_main_printHex_10_inline_printHex_printHexDigit_6_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00485 Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_6_a <- inline_main_printHex_10_inline_printHex_printHexDigit_6_t5 Subtract inline_main_printHex_10_inline_printHex_printHexDigit_6_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x00), Register(0x14)], resolved: None }
14 14 00 14 
# inline_main_printHex_10_inline_printHex_printHexDigit_6_t7 <- inline_main_printHex_10_inline_printHex_printHexDigit_6_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_6_t7 <- inline_main_printHex_10_inline_printHex_printHexDigit_6_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_10_inline_printHex_printHexDigit_6_t8 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 00489 Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_6_t8 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x41=65)], resolved: None }
04 1c 41 
# inline_main_printHex_10_inline_printHex_printHexDigit_6_a <- inline_main_printHex_10_inline_printHex_printHexDigit_6_t7 Add inline_main_printHex_10_inline_printHex_printHexDigit_6_t8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 0048c Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_6_a <- inline_main_printHex_10_inline_printHex_printHexDigit_6_t7 Add inline_main_printHex_10_inline_printHex_printHexDigit_6_t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x1c), Register(0x14)], resolved: None }
14 14 1c 14 
# inline_main_printHex_10_inline_printHex_printHexDigit_6_t9 <- inline_main_printHex_10_inline_printHex_printHexDigit_6_a U8
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_10_inline_printHex_printHexDigit_6_t9 <- inline_main_printHex_10_inline_printHex_printHexDigit_6_a U8\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# ttyout <- inline_main_printHex_10_inline_printHex_printHexDigit_6_t9
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"a\") }"] }
# 00490 Instruction { source: "ttyout <- inline_main_printHex_10_inline_printHex_printHexDigit_6_t9\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"a\\\") }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# :inline_main_printHex_10_inline_printHex_printHexDigit_6_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_10_inline_printHex_printHexDigit_6_printHexDigit_if_end_0
# goto inline_main_printHex_10_inline_printHex_printHexDigit_6_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_10_inline_printHex_printHexDigit_6_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_10_inline_printHex_printHexDigit_6_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_10_inline_printHex_printHexDigit_6_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_10_inline_printHex_printHexDigit_6_function_end_printHexDigit
# goto inline_main_printHex_10_function_end_printHex
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_10_function_end_printHex\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_10_function_end_printHex)], resolved: None }
# :inline_main_printHex_10_function_end_printHex
# 	SourceContext { contexts: [] }
# inline_main_printHex_10_function_end_printHex
# t45 <- addr[0x00..0x01] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] })", "Index(\"addr\", Number(USIZE, 0))", "Index(\"addr\", Number(USIZE, 0))"] }
# 00492 Instruction { source: "t45 <- addr[0x00..0x01] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] })\", \"Index(\\\"addr\\\", Number(USIZE, 0))\", \"Index(\\\"addr\\\", Number(USIZE, 0))\"] }", opcode: Copy8, args: [Register(0x10), Register(0x3c)], resolved: None }
0b 10 3c 
# inline_main_printHex_11_a <- t45 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] })", "Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] })"] }
# 00495 Instruction { source: "inline_main_printHex_11_a <- t45 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] }) }\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] })\", \"Call(Call { function: \\\"printHex\\\", parameters: [Index(\\\"addr\\\", Number(USIZE, 0))] })\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x14)], resolved: None }
0b 3c 14 
# inline_main_printHex_11_t0 <- inline_main_printHex_11_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_11_t0 <- inline_main_printHex_11_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_11_t1 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }", "Number(U8, 15)", "Number(U8, 15)"] }
# 00498 Instruction { source: "inline_main_printHex_11_t1 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x0f=15)], resolved: None }
04 1c 0f 
# if inline_main_printHex_11_t0 > inline_main_printHex_11_t1 then 'inline_main_printHex_11_printHex_if_true_0_1' else 'inline_main_printHex_11_printHex_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }", "Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }"] }
# 0049b Instruction { source: "if inline_main_printHex_11_t0 > inline_main_printHex_11_t1 then 'inline_main_printHex_11_printHex_if_true_0_1' else 'inline_main_printHex_11_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: Cmp8, args: [Register(0x14), Register(0x1c)], resolved: None }
15 14 1c 
# 0049e Instruction { source: "if inline_main_printHex_11_t0 > inline_main_printHex_11_t1 then 'inline_main_printHex_11_printHex_if_true_0_1' else 'inline_main_printHex_11_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_11_printHex_if_else_0_2)], resolved: None }
71 ec 04 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_11_t0 > inline_main_printHex_11_t1 then 'inline_main_printHex_11_printHex_if_true_0_1' else 'inline_main_printHex_11_printHex_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"a\\\"), right: Number(U8, 15) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_11_printHex_if_true_0_1)], resolved: None }
# :inline_main_printHex_11_printHex_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [TtyOut { value: Number(U8, 48) }] }"] }
# inline_main_printHex_11_printHex_if_true_0_1
# inline_main_printHex_11_t2 <- inline_main_printHex_11_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_11_t2 <- inline_main_printHex_11_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_11_t3 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 004a2 Instruction { source: "inline_main_printHex_11_t3 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x10=16)], resolved: None }
04 1c 10 
# inline_main_printHex_11_b <- inline_main_printHex_11_t2 Divide inline_main_printHex_11_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 16))"] }
# 004a5 Instruction { source: "inline_main_printHex_11_b <- inline_main_printHex_11_t2 Divide inline_main_printHex_11_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 16))\"] }", opcode: Divide8, args: [Register(0x14), Register(0x1c), Register(0x1c)], resolved: None }
17 14 1c 1c 
# inline_main_printHex_11_t5 <- inline_main_printHex_11_b U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_11_t5 <- inline_main_printHex_11_b U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_printHex_11_inline_printHex_printHexDigit_5_a <- inline_main_printHex_11_t5 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })"] }
# 004a9 Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_5_a <- inline_main_printHex_11_t5 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1d)], resolved: None }
0b 1c 1d 
# inline_main_printHex_11_inline_printHex_printHexDigit_5_t0 <- inline_main_printHex_11_inline_printHex_printHexDigit_5_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_5_t0 <- inline_main_printHex_11_inline_printHex_printHexDigit_5_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_main_printHex_11_inline_printHex_printHexDigit_5_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 004ac Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_5_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x0a=10)], resolved: None }
04 1e 0a 
# if inline_main_printHex_11_inline_printHex_printHexDigit_5_t0 < inline_main_printHex_11_inline_printHex_printHexDigit_5_t1 then 'inline_main_printHex_11_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1' else 'inline_main_printHex_11_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 004af Instruction { source: "if inline_main_printHex_11_inline_printHex_printHexDigit_5_t0 < inline_main_printHex_11_inline_printHex_printHexDigit_5_t1 then 'inline_main_printHex_11_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1' else 'inline_main_printHex_11_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x1e), Register(0x1d)], resolved: None }
15 1e 1d 
# 004b2 Instruction { source: "if inline_main_printHex_11_inline_printHex_printHexDigit_5_t0 < inline_main_printHex_11_inline_printHex_printHexDigit_5_t1 then 'inline_main_printHex_11_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1' else 'inline_main_printHex_11_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_11_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2)], resolved: None }
71 c3 04 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_11_inline_printHex_printHexDigit_5_t0 < inline_main_printHex_11_inline_printHex_printHexDigit_5_t1 then 'inline_main_printHex_11_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1' else 'inline_main_printHex_11_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_11_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_11_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }"] }
# inline_main_printHex_11_inline_printHex_printHexDigit_5_printHexDigit_if_true_0_1
# inline_main_printHex_11_inline_printHex_printHexDigit_5_t3 <- inline_main_printHex_11_inline_printHex_printHexDigit_5_a U8
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_5_t3 <- inline_main_printHex_11_inline_printHex_printHexDigit_5_a U8\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_main_printHex_11_inline_printHex_printHexDigit_5_t4 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 004b6 Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_5_t4 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x30=48)], resolved: None }
04 1e 30 
# inline_main_printHex_11_inline_printHex_printHexDigit_5_t2 <- inline_main_printHex_11_inline_printHex_printHexDigit_5_t3 Add inline_main_printHex_11_inline_printHex_printHexDigit_5_t4
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 004b9 Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_5_t2 <- inline_main_printHex_11_inline_printHex_printHexDigit_5_t3 Add inline_main_printHex_11_inline_printHex_printHexDigit_5_t4\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1d), Register(0x1e), Register(0x1d)], resolved: None }
14 1d 1e 1d 
# ttyout <- inline_main_printHex_11_inline_printHex_printHexDigit_5_t2
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }"] }
# 004bd Instruction { source: "ttyout <- inline_main_printHex_11_inline_printHex_printHexDigit_5_t2\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\"] }", opcode: Out0, args: [Register(0x1d)], resolved: None }
68 1d 
# goto inline_main_printHex_11_inline_printHex_printHexDigit_5_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 004bf Instruction { source: "goto inline_main_printHex_11_inline_printHex_printHexDigit_5_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_11_inline_printHex_printHexDigit_5_printHexDigit_if_end_0)], resolved: None }
70 d8 04 00 
# :inline_main_printHex_11_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_11_inline_printHex_printHexDigit_5_printHexDigit_if_else_0_2
# inline_main_printHex_11_inline_printHex_printHexDigit_5_t5 <- inline_main_printHex_11_inline_printHex_printHexDigit_5_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_5_t5 <- inline_main_printHex_11_inline_printHex_printHexDigit_5_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_main_printHex_11_inline_printHex_printHexDigit_5_t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 004c3 Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_5_t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x0a=10)], resolved: None }
04 1e 0a 
# inline_main_printHex_11_inline_printHex_printHexDigit_5_a <- inline_main_printHex_11_inline_printHex_printHexDigit_5_t5 Subtract inline_main_printHex_11_inline_printHex_printHexDigit_5_t6
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 004c6 Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_5_a <- inline_main_printHex_11_inline_printHex_printHexDigit_5_t5 Subtract inline_main_printHex_11_inline_printHex_printHexDigit_5_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0x1e), Register(0x00)], resolved: None }
0b 1e 00 
# 004c9 Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_5_a <- inline_main_printHex_11_inline_printHex_printHexDigit_5_t5 Subtract inline_main_printHex_11_inline_printHex_printHexDigit_5_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 004cb Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_5_a <- inline_main_printHex_11_inline_printHex_printHexDigit_5_t5 Subtract inline_main_printHex_11_inline_printHex_printHexDigit_5_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1d), Register(0x00), Register(0x1d)], resolved: None }
14 1d 00 1d 
# inline_main_printHex_11_inline_printHex_printHexDigit_5_t7 <- inline_main_printHex_11_inline_printHex_printHexDigit_5_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_5_t7 <- inline_main_printHex_11_inline_printHex_printHexDigit_5_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_main_printHex_11_inline_printHex_printHexDigit_5_t8 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 004cf Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_5_t8 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x41=65)], resolved: None }
04 1e 41 
# inline_main_printHex_11_inline_printHex_printHexDigit_5_a <- inline_main_printHex_11_inline_printHex_printHexDigit_5_t7 Add inline_main_printHex_11_inline_printHex_printHexDigit_5_t8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 004d2 Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_5_a <- inline_main_printHex_11_inline_printHex_printHexDigit_5_t7 Add inline_main_printHex_11_inline_printHex_printHexDigit_5_t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1d), Register(0x1e), Register(0x1d)], resolved: None }
14 1d 1e 1d 
# inline_main_printHex_11_inline_printHex_printHexDigit_5_t9 <- inline_main_printHex_11_inline_printHex_printHexDigit_5_a U8
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_5_t9 <- inline_main_printHex_11_inline_printHex_printHexDigit_5_a U8\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# ttyout <- inline_main_printHex_11_inline_printHex_printHexDigit_5_t9
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"a\") }"] }
# 004d6 Instruction { source: "ttyout <- inline_main_printHex_11_inline_printHex_printHexDigit_5_t9\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"a\\\") }\"] }", opcode: Out0, args: [Register(0x1d)], resolved: None }
68 1d 
# :inline_main_printHex_11_inline_printHex_printHexDigit_5_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_11_inline_printHex_printHexDigit_5_printHexDigit_if_end_0
# goto inline_main_printHex_11_inline_printHex_printHexDigit_5_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_11_inline_printHex_printHexDigit_5_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_11_inline_printHex_printHexDigit_5_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_11_inline_printHex_printHexDigit_5_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_11_inline_printHex_printHexDigit_5_function_end_printHexDigit
# inline_main_printHex_11_t6 <- inline_main_printHex_11_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_11_t6 <- inline_main_printHex_11_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_11_t8 <- inline_main_printHex_11_b U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_11_t8 <- inline_main_printHex_11_b U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_printHex_11_t9 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Number(U8, 16)", "Number(U8, 16)"] }
# 004d8 Instruction { source: "inline_main_printHex_11_t9 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x10=16)], resolved: None }
04 1d 10 
# inline_main_printHex_11_t7 <- inline_main_printHex_11_t8 Multiply inline_main_printHex_11_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))"] }
# 004db Instruction { source: "inline_main_printHex_11_t7 <- inline_main_printHex_11_t8 Multiply inline_main_printHex_11_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))\"] }", opcode: Mul8_8, args: [Register(0x1c), Register(0x1d), Register(0x1c)], resolved: None }
10 1c 1d 1c 
# inline_main_printHex_11_a <- inline_main_printHex_11_t6 Subtract inline_main_printHex_11_t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))"] }
# 004df Instruction { source: "inline_main_printHex_11_a <- inline_main_printHex_11_t6 Subtract inline_main_printHex_11_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x00)], resolved: None }
0b 1c 00 
# 004e2 Instruction { source: "inline_main_printHex_11_a <- inline_main_printHex_11_t6 Subtract inline_main_printHex_11_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 004e4 Instruction { source: "inline_main_printHex_11_a <- inline_main_printHex_11_t6 Subtract inline_main_printHex_11_t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 16)))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x00), Register(0x14)], resolved: None }
14 14 00 14 
# goto inline_main_printHex_11_printHex_if_end_0
# 	SourceContext { contexts: [] }
# 004e8 Instruction { source: "goto inline_main_printHex_11_printHex_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_11_printHex_if_end_0)], resolved: None }
70 f1 04 00 
# :inline_main_printHex_11_printHex_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_11_printHex_if_else_0_2
# inline_main_printHex_11_t10 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 48) }", "Number(U8, 48)", "Number(U8, 48)"] }
# 004ec Instruction { source: "inline_main_printHex_11_t10 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 48) }\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x30=48)], resolved: None }
04 1c 30 
# ttyout <- inline_main_printHex_11_t10
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 48) }"] }
# 004ef Instruction { source: "ttyout <- inline_main_printHex_11_t10\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 48) }\"] }", opcode: Out0, args: [Register(0x1c)], resolved: None }
68 1c 
# :inline_main_printHex_11_printHex_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_11_printHex_if_end_0
# inline_main_printHex_11_t12 <- inline_main_printHex_11_a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_11_t12 <- inline_main_printHex_11_a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_11_inline_printHex_printHexDigit_6_a <- inline_main_printHex_11_t12 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })", "Call(Call { function: \"printHexDigit\", parameters: [Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_6_a <- inline_main_printHex_11_t12 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"printHexDigit\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_11_inline_printHex_printHexDigit_6_t0 <- inline_main_printHex_11_inline_printHex_printHexDigit_6_a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_6_t0 <- inline_main_printHex_11_inline_printHex_printHexDigit_6_a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_11_inline_printHex_printHexDigit_6_t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 004f1 Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_6_t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x0a=10)], resolved: None }
04 1c 0a 
# if inline_main_printHex_11_inline_printHex_printHexDigit_6_t0 < inline_main_printHex_11_inline_printHex_printHexDigit_6_t1 then 'inline_main_printHex_11_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1' else 'inline_main_printHex_11_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 004f4 Instruction { source: "if inline_main_printHex_11_inline_printHex_printHexDigit_6_t0 < inline_main_printHex_11_inline_printHex_printHexDigit_6_t1 then 'inline_main_printHex_11_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1' else 'inline_main_printHex_11_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x14)], resolved: None }
15 1c 14 
# 004f7 Instruction { source: "if inline_main_printHex_11_inline_printHex_printHexDigit_6_t0 < inline_main_printHex_11_inline_printHex_printHexDigit_6_t1 then 'inline_main_printHex_11_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1' else 'inline_main_printHex_11_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(inline_main_printHex_11_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2)], resolved: None }
71 08 05 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_11_inline_printHex_printHexDigit_6_t0 < inline_main_printHex_11_inline_printHex_printHexDigit_6_t1 then 'inline_main_printHex_11_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1' else 'inline_main_printHex_11_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }, TtyOut { value: Ident(\\\"a\\\") }] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_11_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_11_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, TtyOut { value: Ident(\"a\") }] }"] }
# inline_main_printHex_11_inline_printHex_printHexDigit_6_printHexDigit_if_true_0_1
# inline_main_printHex_11_inline_printHex_printHexDigit_6_t3 <- inline_main_printHex_11_inline_printHex_printHexDigit_6_a U8
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_6_t3 <- inline_main_printHex_11_inline_printHex_printHexDigit_6_a U8\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_11_inline_printHex_printHexDigit_6_t4 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 004fb Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_6_t4 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x30=48)], resolved: None }
04 1c 30 
# inline_main_printHex_11_inline_printHex_printHexDigit_6_t2 <- inline_main_printHex_11_inline_printHex_printHexDigit_6_t3 Add inline_main_printHex_11_inline_printHex_printHexDigit_6_t4
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 004fe Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_6_t2 <- inline_main_printHex_11_inline_printHex_printHexDigit_6_t3 Add inline_main_printHex_11_inline_printHex_printHexDigit_6_t4\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x1c), Register(0x14)], resolved: None }
14 14 1c 14 
# ttyout <- inline_main_printHex_11_inline_printHex_printHexDigit_6_t2
# 	SourceContext { contexts: ["TtyOut { value: Arithmetic(Add, Ident(\"a\"), Number(U8, 48)) }"] }
# 00502 Instruction { source: "ttyout <- inline_main_printHex_11_inline_printHex_printHexDigit_6_t2\n\tSourceContext { contexts: [\"TtyOut { value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48)) }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# goto inline_main_printHex_11_inline_printHex_printHexDigit_6_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# 00504 Instruction { source: "goto inline_main_printHex_11_inline_printHex_printHexDigit_6_printHexDigit_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_printHex_11_inline_printHex_printHexDigit_6_printHexDigit_if_end_0)], resolved: None }
70 1d 05 00 
# :inline_main_printHex_11_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_printHex_11_inline_printHex_printHexDigit_6_printHexDigit_if_else_0_2
# inline_main_printHex_11_inline_printHex_printHexDigit_6_t5 <- inline_main_printHex_11_inline_printHex_printHexDigit_6_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_6_t5 <- inline_main_printHex_11_inline_printHex_printHexDigit_6_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_11_inline_printHex_printHexDigit_6_t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 00508 Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_6_t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x0a=10)], resolved: None }
04 1c 0a 
# inline_main_printHex_11_inline_printHex_printHexDigit_6_a <- inline_main_printHex_11_inline_printHex_printHexDigit_6_t5 Subtract inline_main_printHex_11_inline_printHex_printHexDigit_6_t6
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10))"] }
# 0050b Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_6_a <- inline_main_printHex_11_inline_printHex_printHexDigit_6_t5 Subtract inline_main_printHex_11_inline_printHex_printHexDigit_6_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x00)], resolved: None }
0b 1c 00 
# 0050e Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_6_a <- inline_main_printHex_11_inline_printHex_printHexDigit_6_t5 Subtract inline_main_printHex_11_inline_printHex_printHexDigit_6_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00510 Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_6_a <- inline_main_printHex_11_inline_printHex_printHexDigit_6_t5 Subtract inline_main_printHex_11_inline_printHex_printHexDigit_6_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x00), Register(0x14)], resolved: None }
14 14 00 14 
# inline_main_printHex_11_inline_printHex_printHexDigit_6_t7 <- inline_main_printHex_11_inline_printHex_printHexDigit_6_a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_6_t7 <- inline_main_printHex_11_inline_printHex_printHexDigit_6_a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_main_printHex_11_inline_printHex_printHexDigit_6_t8 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 00514 Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_6_t8 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x41=65)], resolved: None }
04 1c 41 
# inline_main_printHex_11_inline_printHex_printHexDigit_6_a <- inline_main_printHex_11_inline_printHex_printHexDigit_6_t7 Add inline_main_printHex_11_inline_printHex_printHexDigit_6_t8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }", "Arithmetic(Add, Ident(\"a\"), Number(U8, 65))"] }
# 00517 Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_6_a <- inline_main_printHex_11_inline_printHex_printHexDigit_6_t7 Add inline_main_printHex_11_inline_printHex_printHexDigit_6_t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65)) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x14), Register(0x1c), Register(0x14)], resolved: None }
14 14 1c 14 
# inline_main_printHex_11_inline_printHex_printHexDigit_6_t9 <- inline_main_printHex_11_inline_printHex_printHexDigit_6_a U8
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_main_printHex_11_inline_printHex_printHexDigit_6_t9 <- inline_main_printHex_11_inline_printHex_printHexDigit_6_a U8\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# ttyout <- inline_main_printHex_11_inline_printHex_printHexDigit_6_t9
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"a\") }"] }
# 0051b Instruction { source: "ttyout <- inline_main_printHex_11_inline_printHex_printHexDigit_6_t9\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"a\\\") }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# :inline_main_printHex_11_inline_printHex_printHexDigit_6_printHexDigit_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_printHex_11_inline_printHex_printHexDigit_6_printHexDigit_if_end_0
# goto inline_main_printHex_11_inline_printHex_printHexDigit_6_function_end_printHexDigit
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_11_inline_printHex_printHexDigit_6_function_end_printHexDigit\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_11_inline_printHex_printHexDigit_6_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_11_inline_printHex_printHexDigit_6_function_end_printHexDigit
# 	SourceContext { contexts: [] }
# inline_main_printHex_11_inline_printHex_printHexDigit_6_function_end_printHexDigit
# goto inline_main_printHex_11_function_end_printHex
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_11_function_end_printHex\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_printHex_11_function_end_printHex)], resolved: None }
# :inline_main_printHex_11_function_end_printHex
# 	SourceContext { contexts: [] }
# inline_main_printHex_11_function_end_printHex
# t46 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 0051d Instruction { source: "t46 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x0a=10)], resolved: None }
04 14 0a 
# ttyout <- t46
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }"] }
# 00520 Instruction { source: "ttyout <- t46\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 00522 Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
70 f0 06 00 
# :main_if_else_3_11
# 	SourceContext { contexts: [] }
# main_if_else_3_11
# t47 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t47 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# t48 <- 0n115/0x73u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }", "Number(U8, 115)", "Number(U8, 115)"] }
# 00526 Instruction { source: "t48 <- 0n115/0x73u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\", \"Number(U8, 115)\", \"Number(U8, 115)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x73=115)], resolved: None }
04 1c 73 
# if t47 == t48 then 'main_if_true_4_12' else 'main_if_else_4_13'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }"] }
# 00529 Instruction { source: "if t47 == t48 then 'main_if_true_4_12' else 'main_if_else_4_13'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: Cmp8, args: [Register(0x14), Register(0x1c)], resolved: None }
15 14 1c 
# 0052c Instruction { source: "if t47 == t48 then 'main_if_true_4_12' else 'main_if_else_4_13'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: JzImm, args: [Label24(main_if_true_4_12)], resolved: None }
72 34 05 00 
# 00530 Instruction { source: "if t47 == t48 then 'main_if_true_4_12' else 'main_if_else_4_13'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_4_13)], resolved: None }
70 6f 06 00 
# :main_if_true_4_12
# 	SourceContext { contexts: [] }
# main_if_true_4_12
# i <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }", "Number(USIZE, 1)"] }
# 00534 Instruction { source: "i <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Number(USIZE, 1) }\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000001=1)], resolved: None }
20 18 01 00 00 00 
# addr <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 0053a Instruction { source: "addr <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"addr\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x10), Constant32(0x00000000=0)], resolved: None }
20 10 00 00 00 00 
# :main_while_predicate_14
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }"] }
# main_while_predicate_14
# t51 <- __frame_pointer U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }", "Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }", "Index(\"buf\", Ident(\"i\"))", "Index(\"buf\", Ident(\"i\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\"))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 00540 Instruction { source: "t51 <- __frame_pointer U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x34)], resolved: None }
21 0c 34 
# t52 <- i U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }", "Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }", "Index(\"buf\", Ident(\"i\"))", "Index(\"buf\", Ident(\"i\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\"))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t52 <- i U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# t50 <- t51 Add t52
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }", "Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }", "Index(\"buf\", Ident(\"i\"))", "Index(\"buf\", Ident(\"i\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\"))"] }
# 00543 Instruction { source: "t50 <- t51 Add t52\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00544 Instruction { source: "t50 <- t51 Add t52\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x34), Register(0x18), Register(0x24)], resolved: None }
30 34 18 24 
# 00548 Instruction { source: "t50 <- t51 Add t52\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t49 <- mem[t50] U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }", "Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }", "Index(\"buf\", Ident(\"i\"))", "Index(\"buf\", Ident(\"i\"))"] }
# 00549 Instruction { source: "t49 <- mem[t50] U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\", \"Index(\\\"buf\\\", Ident(\\\"i\\\"))\"] }", opcode: Load8, args: [Register(0x24), Register(0x1c)], resolved: None }
05 24 1c 
# t53 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }", "Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0054c Instruction { source: "t53 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x00=0)], resolved: None }
04 1d 00 
# if t49 != t53 then 'main_while_body_15' else 'main_while_end_16'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }", "Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }"] }
# 0054f Instruction { source: "if t49 != t53 then 'main_while_body_15' else 'main_while_end_16'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x1d)], resolved: None }
15 1c 1d 
# 00552 Instruction { source: "if t49 != t53 then 'main_while_body_15' else 'main_while_end_16'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(main_while_end_16)], resolved: None }
72 6b 06 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t49 != t53 then 'main_while_body_15' else 'main_while_end_16'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }, Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }] }\", \"Comparison { op: NotEquals, left: Index(\\\"buf\\\", Ident(\\\"i\\\")), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(main_while_body_15)], resolved: None }
# :main_while_body_15
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }"] }
# main_while_body_15
# t54 <- addr[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }", "Index(\"addr\", Number(USIZE, 2))", "Index(\"addr\", Number(USIZE, 2))"] }
# 00556 Instruction { source: "t54 <- addr[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }\", \"Index(\\\"addr\\\", Number(USIZE, 2))\", \"Index(\\\"addr\\\", Number(USIZE, 2))\"] }", opcode: Copy8, args: [Register(0x12), Register(0x3c)], resolved: None }
0b 12 3c 
# addr[0x03..0x04] <- t54 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }"] }
# 00559 Instruction { source: "addr[0x03..0x04] <- t54 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 3)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 2)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x13)], resolved: None }
0b 3c 13 
# t55 <- addr[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }", "Index(\"addr\", Number(USIZE, 1))", "Index(\"addr\", Number(USIZE, 1))"] }
# 0055c Instruction { source: "t55 <- addr[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }\", \"Index(\\\"addr\\\", Number(USIZE, 1))\", \"Index(\\\"addr\\\", Number(USIZE, 1))\"] }", opcode: Copy8, args: [Register(0x11), Register(0x3c)], resolved: None }
0b 11 3c 
# addr[0x02..0x03] <- t55 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }"] }
# 0055f Instruction { source: "addr[0x02..0x03] <- t55 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 2)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 1)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x12)], resolved: None }
0b 3c 12 
# t56 <- addr[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }", "Index(\"addr\", Number(USIZE, 0))", "Index(\"addr\", Number(USIZE, 0))"] }
# 00562 Instruction { source: "t56 <- addr[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }\", \"Index(\\\"addr\\\", Number(USIZE, 0))\", \"Index(\\\"addr\\\", Number(USIZE, 0))\"] }", opcode: Copy8, args: [Register(0x10), Register(0x3c)], resolved: None }
0b 10 3c 
# addr[0x01..0x02] <- t56 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }"] }
# 00565 Instruction { source: "addr[0x01..0x02] <- t56 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 1)), var_type: None, value: Index(\\\"addr\\\", Number(USIZE, 0)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x11)], resolved: None }
0b 3c 11 
# t60 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "AddressOf(Index(\"buf\", Ident(\"i\")))", "AddressOf(Index(\"buf\", Ident(\"i\")))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\"))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 00568 Instruction { source: "t60 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x34)], resolved: None }
21 0c 34 
# t61 <- i U32
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "AddressOf(Index(\"buf\", Ident(\"i\")))", "AddressOf(Index(\"buf\", Ident(\"i\")))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\"))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t61 <- i U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# t59 <- t60 Add t61
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "AddressOf(Index(\"buf\", Ident(\"i\")))", "AddressOf(Index(\"buf\", Ident(\"i\")))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\"))"] }
# 0056b Instruction { source: "t59 <- t60 Add t61\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0056c Instruction { source: "t59 <- t60 Add t61\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x34), Register(0x18), Register(0x24)], resolved: None }
30 34 18 24 
# 00570 Instruction { source: "t59 <- t60 Add t61\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\")) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Ident(\\\"i\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t58 <- t59 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "AddressOf(Index(\"buf\", Ident(\"i\")))", "AddressOf(Index(\"buf\", Ident(\"i\")))"] }
# optimized away noop copy Instruction { source: "t58 <- t59 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\", \"AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))\"] }", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# inline_main_parseHex_4_c <- t58 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })", "Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_4_c <- t58 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\", \"Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] })\"] }", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# inline_main_parseHex_4_t0 <- 0n16/0x10u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Number(U8, 16)", "Number(U8, 16)"] }
# 00571 Instruction { source: "inline_main_parseHex_4_t0 <- 0n16/0x10u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Number(U8, 16)\", \"Number(U8, 16)\"] }", opcode: LoadImm8, args: [Register(0x28), Constant8(0x10=16)], resolved: None }
04 28 10 
# inline_main_parseHex_4_t3 <- inline_main_parseHex_4_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_4_t3 <- inline_main_parseHex_4_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# inline_main_parseHex_4_t2 <- mem[inline_main_parseHex_4_t3] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))"] }
# 00574 Instruction { source: "inline_main_parseHex_4_t2 <- mem[inline_main_parseHex_4_t3] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\"] }", opcode: Load8, args: [Register(0x24), Register(0x1d)], resolved: None }
05 24 1d 
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_ch <- inline_main_parseHex_4_t2 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_ch <- inline_main_parseHex_4_t2 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t0 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t0 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t1 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }", "Number(U8, 97)", "Number(U8, 97)"] }
# 00577 Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t1 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x61=97)], resolved: None }
04 1e 61 
# if inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t0 >= inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t1 then 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }"] }
# 0057a Instruction { source: "if inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t0 >= inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t1 then 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: Cmp8, args: [Register(0x1e), Register(0x1d)], resolved: None }
15 1e 1d 
# 0057d Instruction { source: "if inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t0 >= inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t1 then 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JcImm, args: [Label24(inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_1)], resolved: None }
71 85 05 00 
# 00581 Instruction { source: "if inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t0 >= inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t1 then 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_2)], resolved: None }
70 a0 05 00 
# :inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }"] }
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_1
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t4 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t4 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t5 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Number(U8, 97)", "Number(U8, 97)"] }
# 00585 Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t5 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x61=97)], resolved: None }
04 1e 61 
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t3 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t4 Subtract inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t5
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))"] }
# 00588 Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t3 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t4 Subtract inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Copy8, args: [Register(0x1e), Register(0x00)], resolved: None }
0b 1e 00 
# 0058b Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t3 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t4 Subtract inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 0058d Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t3 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t4 Subtract inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1d), Register(0x00), Register(0x1d)], resolved: None }
14 1d 00 1d 
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 00591 Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x0a=10)], resolved: None }
04 1e 0a 
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t2 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t3 Add inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t6
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))"] }
# 00594 Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t2 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t3 Add inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t6\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1d), Register(0x1e), Register(0x1d)], resolved: None }
14 1d 1e 1d 
# inline_main_parseHex_4_t1 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t2 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_4_t1 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t2 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# goto inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }"] }
# 00598 Instruction { source: "goto inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_function_end_parseHexNibble)], resolved: None }
70 d9 05 00 
# goto inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_end_0
# 	SourceContext { contexts: [] }
# 0059c Instruction { source: "goto inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_end_0)], resolved: None }
70 a0 05 00 
# :inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_2
# :inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_end_0
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t7 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t7 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t8 <- 0n57/0x39u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Number(U8, 57)", "Number(U8, 57)"] }
# 005a0 Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t8 <- 0n57/0x39u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Number(U8, 57)\", \"Number(U8, 57)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x39=57)], resolved: None }
04 1e 39 
# if inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t7 <= inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t8 then 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }"] }
# 005a3 Instruction { source: "if inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t7 <= inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t8 then 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: Cmp8, args: [Register(0x1d), Register(0x1e)], resolved: None }
15 1d 1e 
# 005a6 Instruction { source: "if inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t7 <= inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t8 then 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JcImm, args: [Label24(inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_4)], resolved: None }
71 ae 05 00 
# 005aa Instruction { source: "if inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t7 <= inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t8 then 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_5)], resolved: None }
70 c2 05 00 
# :inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }"] }
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_true_0_4
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t10 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t10 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t11 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 005ae Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t11 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x30=48)], resolved: None }
04 1e 30 
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t9 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t10 Subtract inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t11
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))"] }
# 005b1 Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t9 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t10 Subtract inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Copy8, args: [Register(0x1e), Register(0x00)], resolved: None }
0b 1e 00 
# 005b4 Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t9 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t10 Subtract inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 005b6 Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t9 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t10 Subtract inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1d), Register(0x00), Register(0x1d)], resolved: None }
14 1d 00 1d 
# inline_main_parseHex_4_t1 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t9 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_4_t1 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t9 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# goto inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }"] }
# 005ba Instruction { source: "goto inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_function_end_parseHexNibble)], resolved: None }
70 d9 05 00 
# goto inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_end_3
# 	SourceContext { contexts: [] }
# 005be Instruction { source: "goto inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_end_3)], resolved: None }
70 c2 05 00 
# :inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_5
# 	SourceContext { contexts: [] }
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_else_0_5
# :inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_end_3
# 	SourceContext { contexts: [] }
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_parseHexNibble_if_end_3
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t14 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t14 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t15 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 005c2 Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t15 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x41=65)], resolved: None }
04 1e 41 
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t13 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t14 Subtract inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t15
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))"] }
# 005c5 Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t13 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t14 Subtract inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Copy8, args: [Register(0x1e), Register(0x00)], resolved: None }
0b 1e 00 
# 005c8 Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t13 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t14 Subtract inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 005ca Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t13 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t14 Subtract inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1d), Register(0x00), Register(0x1d)], resolved: None }
14 1d 00 1d 
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t16 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 005ce Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t16 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1e), Constant8(0x0a=10)], resolved: None }
04 1e 0a 
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t12 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t13 Add inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t16
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))"] }
# 005d1 Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t12 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t13 Add inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t16\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1d), Register(0x1e), Register(0x1d)], resolved: None }
14 1d 1e 1d 
# inline_main_parseHex_4_t1 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t12 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_4_t1 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_t12 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# goto inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }"] }
# 005d5 Instruction { source: "goto inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_function_end_parseHexNibble)], resolved: None }
70 d9 05 00 
# :inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_function_end_parseHexNibble
# 	SourceContext { contexts: [] }
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_1_function_end_parseHexNibble
# inline_main_parseHex_4_h <- inline_main_parseHex_4_t0 Multiply inline_main_parseHex_4_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))"] }
# 005d9 Instruction { source: "inline_main_parseHex_4_h <- inline_main_parseHex_4_t0 Multiply inline_main_parseHex_4_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\"] }", opcode: Mul8_8, args: [Register(0x28), Register(0x1d), Register(0x1d)], resolved: None }
10 28 1d 1d 
# inline_main_parseHex_4_t5 <- inline_main_parseHex_4_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1))", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_4_t5 <- inline_main_parseHex_4_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# inline_main_parseHex_4_t6 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 005dd Instruction { source: "inline_main_parseHex_4_t6 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x00000001=1)], resolved: None }
20 2c 01 00 00 00 
# inline_main_parseHex_4_t4 <- inline_main_parseHex_4_t5 Add inline_main_parseHex_4_t6
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1))"] }
# 005e3 Instruction { source: "inline_main_parseHex_4_t4 <- inline_main_parseHex_4_t5 Add inline_main_parseHex_4_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 005e4 Instruction { source: "inline_main_parseHex_4_t4 <- inline_main_parseHex_4_t5 Add inline_main_parseHex_4_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x24), Register(0x2c), Register(0x24)], resolved: None }
30 24 2c 24 
# 005e8 Instruction { source: "inline_main_parseHex_4_t4 <- inline_main_parseHex_4_t5 Add inline_main_parseHex_4_t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_parseHex_4_c <- inline_main_parseHex_4_t4 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }", "AddressOf(Index(\"c\", Number(USIZE, 1)))"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_4_c <- inline_main_parseHex_4_t4 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: AddressOf(Index(\\\"c\\\", Number(USIZE, 1))) }\", \"AddressOf(Index(\\\"c\\\", Number(USIZE, 1)))\"] }", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# inline_main_parseHex_4_t7 <- inline_main_parseHex_4_h U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Ident(\"h\")", "Ident(\"h\")"] }
# 005e9 Instruction { source: "inline_main_parseHex_4_t7 <- inline_main_parseHex_4_h U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Ident(\\\"h\\\")\", \"Ident(\\\"h\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1e)], resolved: None }
0b 1d 1e 
# inline_main_parseHex_4_t10 <- inline_main_parseHex_4_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_4_t10 <- inline_main_parseHex_4_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# inline_main_parseHex_4_t9 <- mem[inline_main_parseHex_4_t10] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Deref(Ident(\"c\"))", "Deref(Ident(\"c\"))"] }
# 005ec Instruction { source: "inline_main_parseHex_4_t9 <- mem[inline_main_parseHex_4_t10] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Deref(Ident(\\\"c\\\"))\", \"Deref(Ident(\\\"c\\\"))\"] }", opcode: Load8, args: [Register(0x24), Register(0x1c)], resolved: None }
05 24 1c 
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_ch <- inline_main_parseHex_4_t9 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })", "Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_ch <- inline_main_parseHex_4_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\", \"Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t0 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t0 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t1 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }", "Number(U8, 97)", "Number(U8, 97)"] }
# 005ef Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t1 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x61=97)], resolved: None }
04 1d 61 
# if inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t0 >= inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t1 then 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }"] }
# 005f2 Instruction { source: "if inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t0 >= inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t1 then 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: Cmp8, args: [Register(0x1d), Register(0x1c)], resolved: None }
15 1d 1c 
# 005f5 Instruction { source: "if inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t0 >= inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t1 then 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JcImm, args: [Label24(inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_1)], resolved: None }
71 fd 05 00 
# 005f9 Instruction { source: "if inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t0 >= inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t1 then 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 97) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_2)], resolved: None }
70 18 06 00 
# :inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }"] }
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_1
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t4 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t4 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t5 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Number(U8, 97)", "Number(U8, 97)"] }
# 005fd Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t5 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x61=97)], resolved: None }
04 1d 61 
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t3 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t4 Subtract inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t5
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))"] }
# 00600 Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t3 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t4 Subtract inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x00)], resolved: None }
0b 1d 00 
# 00603 Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t3 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t4 Subtract inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00605 Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t3 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t4 Subtract inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t5\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1c), Register(0x00), Register(0x1c)], resolved: None }
14 1c 00 1c 
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t6 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 00609 Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t6 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x0a=10)], resolved: None }
04 1d 0a 
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t2 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t3 Add inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t6
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))"] }
# 0060c Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t2 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t3 Add inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t6\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1c), Register(0x1d), Register(0x1c)], resolved: None }
14 1c 1d 1c 
# inline_main_parseHex_4_t8 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t2 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_4_t8 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t2 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# goto inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }"] }
# 00610 Instruction { source: "goto inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 97)), Number(U8, 10))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_function_end_parseHexNibble)], resolved: None }
70 51 06 00 
# goto inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_end_0
# 	SourceContext { contexts: [] }
# 00614 Instruction { source: "goto inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_end_0)], resolved: None }
70 18 06 00 
# :inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_2
# :inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_end_0
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t7 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t7 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t8 <- 0n57/0x39u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Number(U8, 57)", "Number(U8, 57)"] }
# 00618 Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t8 <- 0n57/0x39u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Number(U8, 57)\", \"Number(U8, 57)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x39=57)], resolved: None }
04 1d 39 
# if inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t7 <= inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t8 then 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }", "Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }"] }
# 0061b Instruction { source: "if inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t7 <= inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t8 then 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x1d)], resolved: None }
15 1c 1d 
# 0061e Instruction { source: "if inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t7 <= inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t8 then 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JcImm, args: [Label24(inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_4)], resolved: None }
71 26 06 00 
# 00622 Instruction { source: "if inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t7 <= inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t8 then 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }])], else_block: [] }\", \"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_5)], resolved: None }
70 3a 06 00 
# :inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }"] }
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_true_0_4
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t10 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t10 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t11 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 00626 Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t11 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x30=48)], resolved: None }
04 1d 30 
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t9 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t10 Subtract inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t11
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))"] }
# 00629 Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t9 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t10 Subtract inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x00)], resolved: None }
0b 1d 00 
# 0062c Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t9 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t10 Subtract inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 0062e Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t9 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t10 Subtract inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t11\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1c), Register(0x00), Register(0x1c)], resolved: None }
14 1c 00 1c 
# inline_main_parseHex_4_t8 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t9 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_4_t8 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t9 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# goto inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }"] }
# 00632 Instruction { source: "goto inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_function_end_parseHexNibble)], resolved: None }
70 51 06 00 
# goto inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_end_3
# 	SourceContext { contexts: [] }
# 00636 Instruction { source: "goto inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_end_3)], resolved: None }
70 3a 06 00 
# :inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_5
# 	SourceContext { contexts: [] }
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_else_0_5
# :inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_end_3
# 	SourceContext { contexts: [] }
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_parseHexNibble_if_end_3
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t14 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t14 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t15 <- 0n65/0x41u8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Number(U8, 65)", "Number(U8, 65)"] }
# 0063a Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t15 <- 0n65/0x41u8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Number(U8, 65)\", \"Number(U8, 65)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x41=65)], resolved: None }
04 1d 41 
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t13 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t14 Subtract inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t15
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))"] }
# 0063d Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t13 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t14 Subtract inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x00)], resolved: None }
0b 1d 00 
# 00640 Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t13 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t14 Subtract inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00642 Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t13 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t14 Subtract inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t15\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1c), Register(0x00), Register(0x1c)], resolved: None }
14 1c 00 1c 
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t16 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 00646 Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t16 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x0a=10)], resolved: None }
04 1d 0a 
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t12 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t13 Add inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t16
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))", "Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))"] }
# 00649 Instruction { source: "inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t12 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t13 Add inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t16\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\", \"Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1c), Register(0x1d), Register(0x1c)], resolved: None }
14 1c 1d 1c 
# inline_main_parseHex_4_t8 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t12 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }"] }
# optimized away noop copy Instruction { source: "inline_main_parseHex_4_t8 <- inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_t12 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# goto inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_function_end_parseHexNibble
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }"] }
# 0064d Instruction { source: "goto inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_function_end_parseHexNibble\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 65)), Number(U8, 10))) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_function_end_parseHexNibble)], resolved: None }
70 51 06 00 
# :inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_function_end_parseHexNibble
# 	SourceContext { contexts: [] }
# inline_main_parseHex_4_inline_parseHex_parseHexNibble_2_function_end_parseHexNibble
# inline_main_parseHex_4_h <- inline_main_parseHex_4_t7 Add inline_main_parseHex_4_t8
# 	SourceContext { contexts: ["Assign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }", "Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))"] }
# 00651 Instruction { source: "inline_main_parseHex_4_h <- inline_main_parseHex_4_t7 Add inline_main_parseHex_4_t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"h\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] })) }\", \"Arithmetic(Add, Ident(\\\"h\\\"), Call(Call { function: \\\"parseHexNibble\\\", parameters: [Deref(Ident(\\\"c\\\"))] }))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1e), Register(0x1c), Register(0x1d)], resolved: None }
14 1e 1c 1d 
# inline_main_parseHex_4_t11 <- inline_main_parseHex_4_h U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"h\")) }", "Ident(\"h\")", "Ident(\"h\")"] }
# 00655 Instruction { source: "inline_main_parseHex_4_t11 <- inline_main_parseHex_4_h U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"h\\\")) }\", \"Ident(\\\"h\\\")\", \"Ident(\\\"h\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1c)], resolved: None }
0b 1d 1c 
# t57 <- inline_main_parseHex_4_t11 U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"h\")) }"] }
# optimized away noop copy Instruction { source: "t57 <- inline_main_parseHex_4_t11 U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"h\\\")) }\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# goto inline_main_parseHex_4_function_end_parseHex
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"h\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_parseHex_4_function_end_parseHex\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"h\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_main_parseHex_4_function_end_parseHex)], resolved: None }
# :inline_main_parseHex_4_function_end_parseHex
# 	SourceContext { contexts: [] }
# inline_main_parseHex_4_function_end_parseHex
# addr[0x00..0x01] <- t57 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }"] }
# 00658 Instruction { source: "addr[0x00..0x01] <- t57 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"addr\\\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \\\"parseHex\\\", parameters: [AddressOf(Index(\\\"buf\\\", Ident(\\\"i\\\")))] }) }\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x10)], resolved: None }
0b 1c 10 
# t62 <- i U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }", "Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t62 <- i U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# t63 <- 0n2/0x00000002u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }", "Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2))", "Number(USIZE, 2)", "Number(USIZE, 2)"] }
# 0065b Instruction { source: "t63 <- 0n2/0x00000002u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2))\", \"Number(USIZE, 2)\", \"Number(USIZE, 2)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000002=2)], resolved: None }
20 24 02 00 00 00 
# i <- t62 Add t63
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }", "Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2))"] }
# 00661 Instruction { source: "i <- t62 Add t63\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00662 Instruction { source: "i <- t62 Add t63\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x24), Register(0x18)], resolved: None }
30 18 24 18 
# 00666 Instruction { source: "i <- t62 Add t63\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(USIZE, 2))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto main_while_predicate_14
# 	SourceContext { contexts: [] }
# 00667 Instruction { source: "goto main_while_predicate_14\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_while_predicate_14)], resolved: None }
70 40 05 00 
# :main_while_end_16
# 	SourceContext { contexts: [] }
# main_while_end_16
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 0066b Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
70 f0 06 00 
# :main_if_else_4_13
# 	SourceContext { contexts: [] }
# main_if_else_4_13
# t64 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t64 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# t65 <- 0n113/0x71u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }", "Number(U8, 113)", "Number(U8, 113)"] }
# 0066f Instruction { source: "t65 <- 0n113/0x71u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\", \"Number(U8, 113)\", \"Number(U8, 113)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x71=113)], resolved: None }
04 1c 71 
# if t64 == t65 then 'main_if_true_5_17' else 'main_if_else_5_18'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }"] }
# 00672 Instruction { source: "if t64 == t65 then 'main_if_true_5_17' else 'main_if_else_5_18'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: Cmp8, args: [Register(0x14), Register(0x1c)], resolved: None }
15 14 1c 
# 00675 Instruction { source: "if t64 == t65 then 'main_if_true_5_17' else 'main_if_else_5_18'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: JzImm, args: [Label24(main_if_true_5_17)], resolved: None }
72 7d 06 00 
# 00679 Instruction { source: "if t64 == t65 then 'main_if_true_5_17' else 'main_if_else_5_18'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_5_18)], resolved: None }
70 9b 06 00 
# :main_if_true_5_17
# 	SourceContext { contexts: [] }
# main_if_true_5_17
# t66 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0067d Instruction { source: "t66 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x00=0)], resolved: None }
04 3c 00 
# t67 <- 0n20/0x00000014u32 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 00680 Instruction { source: "t67 <- 0n20/0x00000014u32 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000014=20)], resolved: None }
20 18 14 00 00 00 
# __frame_pointer <- __frame_pointer Add t67
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 00686 Instruction { source: "__frame_pointer <- __frame_pointer Add t67\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00687 Instruction { source: "__frame_pointer <- __frame_pointer Add t67\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x18), Register(0x0c)], resolved: None }
30 0c 18 0c 
# 0068b Instruction { source: "__frame_pointer <- __frame_pointer Add t67\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# return Some(t66)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 0068c Instruction { source: "return Some(t66)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x00)], resolved: None }
0b 3c 00 
# 0068f Instruction { source: "Dealloc 20 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000014=20)], resolved: None }
32 0c 14 00 00 00 
# 00695 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 00697 Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
70 f0 06 00 
# :main_if_else_5_18
# 	SourceContext { contexts: [] }
# main_if_else_5_18
# t68 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t68 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# t69 <- 0n105/0x69u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }", "Number(U8, 105)", "Number(U8, 105)"] }
# 0069b Instruction { source: "t69 <- 0n105/0x69u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }\", \"Number(U8, 105)\", \"Number(U8, 105)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x69=105)], resolved: None }
04 1c 69 
# if t68 == t69 then 'main_if_true_6_19' else 'main_if_else_6_20'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }"] }
# 0069e Instruction { source: "if t68 == t69 then 'main_if_true_6_19' else 'main_if_else_6_20'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }\"] }", opcode: Cmp8, args: [Register(0x14), Register(0x1c)], resolved: None }
15 14 1c 
# 006a1 Instruction { source: "if t68 == t69 then 'main_if_true_6_19' else 'main_if_else_6_20'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }\"] }", opcode: JzImm, args: [Label24(main_if_true_6_19)], resolved: None }
72 a9 06 00 
# 006a5 Instruction { source: "if t68 == t69 then 'main_if_true_6_19' else 'main_if_else_6_20'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 105) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_6_20)], resolved: None }
70 d5 06 00 
# :main_if_true_6_19
# 	SourceContext { contexts: [] }
# main_if_true_6_19
# t70 <- 0n66/0x42u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 66) }", "Number(U8, 66)", "Number(U8, 66)"] }
# 006a9 Instruction { source: "t70 <- 0n66/0x42u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 66) }\", \"Number(U8, 66)\", \"Number(U8, 66)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x42=66)], resolved: None }
04 14 42 
# ttyout <- t70
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 66) }"] }
# 006ac Instruction { source: "ttyout <- t70\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 66) }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# t71 <- 0n111/0x6fu8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 111) }", "Number(U8, 111)", "Number(U8, 111)"] }
# 006ae Instruction { source: "t71 <- 0n111/0x6fu8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 111) }\", \"Number(U8, 111)\", \"Number(U8, 111)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x6f=111)], resolved: None }
04 14 6f 
# ttyout <- t71
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 111) }"] }
# 006b1 Instruction { source: "ttyout <- t71\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 111) }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# t72 <- 0n111/0x6fu8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 111) }", "Number(U8, 111)", "Number(U8, 111)"] }
# 006b3 Instruction { source: "t72 <- 0n111/0x6fu8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 111) }\", \"Number(U8, 111)\", \"Number(U8, 111)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x6f=111)], resolved: None }
04 14 6f 
# ttyout <- t72
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 111) }"] }
# 006b6 Instruction { source: "ttyout <- t72\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 111) }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# t73 <- 0n116/0x74u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 116) }", "Number(U8, 116)", "Number(U8, 116)"] }
# 006b8 Instruction { source: "t73 <- 0n116/0x74u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 116) }\", \"Number(U8, 116)\", \"Number(U8, 116)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x74=116)], resolved: None }
04 14 74 
# ttyout <- t73
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 116) }"] }
# 006bb Instruction { source: "ttyout <- t73\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 116) }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# t74 <- 0n114/0x72u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 114) }", "Number(U8, 114)", "Number(U8, 114)"] }
# 006bd Instruction { source: "t74 <- 0n114/0x72u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 114) }\", \"Number(U8, 114)\", \"Number(U8, 114)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x72=114)], resolved: None }
04 14 72 
# ttyout <- t74
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 114) }"] }
# 006c0 Instruction { source: "ttyout <- t74\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 114) }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# t75 <- 0n97/0x61u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 97) }", "Number(U8, 97)", "Number(U8, 97)"] }
# 006c2 Instruction { source: "t75 <- 0n97/0x61u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 97) }\", \"Number(U8, 97)\", \"Number(U8, 97)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x61=97)], resolved: None }
04 14 61 
# ttyout <- t75
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 97) }"] }
# 006c5 Instruction { source: "ttyout <- t75\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 97) }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# t76 <- 0n109/0x6du8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 109) }", "Number(U8, 109)", "Number(U8, 109)"] }
# 006c7 Instruction { source: "t76 <- 0n109/0x6du8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 109) }\", \"Number(U8, 109)\", \"Number(U8, 109)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x6d=109)], resolved: None }
04 14 6d 
# ttyout <- t76
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 109) }"] }
# 006ca Instruction { source: "ttyout <- t76\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 109) }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# t77 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 006cc Instruction { source: "t77 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x0a=10)], resolved: None }
04 14 0a 
# ttyout <- t77
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }"] }
# 006cf Instruction { source: "ttyout <- t77\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 006d1 Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
70 f0 06 00 
# :main_if_else_6_20
# 	SourceContext { contexts: [] }
# main_if_else_6_20
# t78 <- 0n72/0x48u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 72) }", "Number(U8, 72)", "Number(U8, 72)"] }
# 006d5 Instruction { source: "t78 <- 0n72/0x48u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 72) }\", \"Number(U8, 72)\", \"Number(U8, 72)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x48=72)], resolved: None }
04 1c 48 
# ttyout <- t78
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 72) }"] }
# 006d8 Instruction { source: "ttyout <- t78\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 72) }\"] }", opcode: Out0, args: [Register(0x1c)], resolved: None }
68 1c 
# t79 <- 0n117/0x75u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 117) }", "Number(U8, 117)", "Number(U8, 117)"] }
# 006da Instruction { source: "t79 <- 0n117/0x75u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 117) }\", \"Number(U8, 117)\", \"Number(U8, 117)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x75=117)], resolved: None }
04 1c 75 
# ttyout <- t79
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 117) }"] }
# 006dd Instruction { source: "ttyout <- t79\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 117) }\"] }", opcode: Out0, args: [Register(0x1c)], resolved: None }
68 1c 
# t80 <- 0n104/0x68u8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 104) }", "Number(U8, 104)", "Number(U8, 104)"] }
# 006df Instruction { source: "t80 <- 0n104/0x68u8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 104) }\", \"Number(U8, 104)\", \"Number(U8, 104)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x68=104)], resolved: None }
04 1c 68 
# ttyout <- t80
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 104) }"] }
# 006e2 Instruction { source: "ttyout <- t80\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 104) }\"] }", opcode: Out0, args: [Register(0x1c)], resolved: None }
68 1c 
# t81 <- 0n63/0x3fu8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 63) }", "Number(U8, 63)", "Number(U8, 63)"] }
# 006e4 Instruction { source: "t81 <- 0n63/0x3fu8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 63) }\", \"Number(U8, 63)\", \"Number(U8, 63)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x3f=63)], resolved: None }
04 1c 3f 
# ttyout <- t81
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 63) }"] }
# 006e7 Instruction { source: "ttyout <- t81\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 63) }\"] }", opcode: Out0, args: [Register(0x1c)], resolved: None }
68 1c 
# t82 <- ch U8
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"ch\") }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t82 <- ch U8\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"ch\\\") }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# ttyout <- t82
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"ch\") }"] }
# 006e9 Instruction { source: "ttyout <- t82\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"ch\\\") }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# t83 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 006eb Instruction { source: "t83 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x0a=10)], resolved: None }
04 14 0a 
# ttyout <- t83
# 	SourceContext { contexts: ["TtyOut { value: Number(U8, 10) }"] }
# 006ee Instruction { source: "ttyout <- t83\n\tSourceContext { contexts: [\"TtyOut { value: Number(U8, 10) }\"] }", opcode: Out0, args: [Register(0x14)], resolved: None }
68 14 
# :main_if_end_3
# 	SourceContext { contexts: [] }
# main_if_end_3
# goto main_while_predicate_0
# 	SourceContext { contexts: [] }
# 006f0 Instruction { source: "goto main_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_while_predicate_0)], resolved: None }
70 67 00 00 
# :main_while_end_2
# 	SourceContext { contexts: [] }
# main_while_end_2
# t84 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 006f4 Instruction { source: "t84 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x00=0)], resolved: None }
04 3c 00 
# t85 <- 0n20/0x00000014u32 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 006f7 Instruction { source: "t85 <- 0n20/0x00000014u32 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000014=20)], resolved: None }
20 18 14 00 00 00 
# __frame_pointer <- __frame_pointer Add t85
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 006fd Instruction { source: "__frame_pointer <- __frame_pointer Add t85\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 006fe Instruction { source: "__frame_pointer <- __frame_pointer Add t85\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x18), Register(0x0c)], resolved: None }
30 0c 18 0c 
# 00702 Instruction { source: "__frame_pointer <- __frame_pointer Add t85\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# return Some(t84)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 00703 Instruction { source: "return Some(t84)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x00)], resolved: None }
0b 3c 00 
# 00706 Instruction { source: "Dealloc 20 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000014=20)], resolved: None }
32 0c 14 00 00 00 
# 0070c Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_main
# 	SourceContext { contexts: [] }
# function_end_main
# Unreachable
# 	SourceContext { contexts: [] }
# 0070e Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
