v2.0 raw
# ImageBaseAddress=0x00000000
# entry
# 00000 Init []
#       Initialzing flags and internal regs.
00 

# 00001 LoadImm32 [Register(0x0c), Constant32(0x000f0f00=986880)]
#       Initialzing stack register to 0x000f0f00.
20 0c 00 0f 0f 00 

# 00007 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:main))
32 0c fc ff ff ff 

# 0000d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:main))
25 0c 17 00 00 00 

# 00013 JmpImm [Label24(:main)]
#       PseudoCall(Label24(:main))
70 b9 1d 00 

# 00017 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:main))
32 0c 04 00 00 00 

# 0001d Halt [Constant32(0x00000000=0)]
#       Halting after return from entry function.
7e 00 00 00 00 

# :PS2_SCAN_CODE_TO_ASCII
# const Array(Number(U8), Some(1025))
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
60 
7e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
71 
51 
00 
00 
31 
21 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
7a 
5a 
00 
00 
73 
53 
00 
00 
61 
41 
00 
00 
77 
57 
00 
00 
32 
40 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
63 
43 
00 
00 
78 
58 
00 
00 
64 
44 
00 
00 
65 
45 
00 
00 
34 
24 
00 
00 
33 
23 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
20 
20 
00 
00 
76 
56 
00 
00 
66 
46 
00 
00 
74 
54 
00 
00 
72 
52 
00 
00 
35 
25 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6e 
4e 
00 
00 
62 
42 
00 
00 
68 
48 
00 
00 
67 
47 
00 
00 
79 
59 
00 
00 
36 
5e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6d 
4d 
00 
00 
6a 
4a 
00 
00 
75 
55 
00 
00 
37 
26 
00 
00 
38 
2a 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2c 
3c 
00 
00 
6b 
4b 
00 
00 
69 
49 
00 
00 
6f 
4f 
00 
00 
30 
29 
00 
00 
39 
28 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2e 
3e 
00 
00 
2f 
3f 
00 
00 
6c 
4c 
00 
00 
3b 
3a 
00 
00 
70 
50 
00 
00 
2d 
5f 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
27 
22 
00 
00 
00 
00 
00 
00 
5b 
7b 
00 
00 
3d 
2b 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
0a 
0a 
00 
00 
5d 
7d 
00 
00 
5c 
7c 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
ff 
# :lcd_row_start
# const Array(Number(U8), Some(4))
00 
40 
14 
54 
# :KeyBoard_init
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([16])
# Var td45b (td45b Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }) Reg(U32) Some([20, 21, 22, 23])
# Var tdaa (tdaa Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }) Reg(U32) Some([20, 21, 22, 23])
# td45b <- 0n987136/0x000f1000u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
# Number(USIZE, 987136)
# 00427 LoadImm32 [Register(0x14), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
#       Number(USIZE, 987136)
20 14 00 10 0f 00 

# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 0042d LoadImm8 [Register(0x10), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 10 00 

# mem[td45b] <- tb36e U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# 00430 Store8 [Register(0x10), Register(0x14)]
#       mem[td45b] <- tb36e U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
06 10 14 

# tdaa <- 0n987140/0x000f1004u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
# Number(USIZE, 987140)
# 00433 LoadImm32 [Register(0x14), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
#       Number(USIZE, 987140)
20 14 04 10 0f 00 

# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00439 LoadImm8 [Register(0x10), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 10 00 

# mem[tdaa] <- tb36e U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# 0043c Store8 [Register(0x10), Register(0x14)]
#       mem[tdaa] <- tb36e U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
06 10 14 

# return None None
# Return { value: None }
# 0043f JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_KeyBoard_init None
# function_end_KeyBoard_init
# Unreachable None
# 00441 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :Keyboard_poll
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var c (Local c Number(U8) Reg(U8)) Reg(U8) Some([24])
# Var code (Local code Number(U8) Reg(U8)) Reg(U8) Some([24])
# Var index (Local index Number(USIZE) Reg(U32)) Reg(U32) Some([28, 29, 30, 31])
# Var inline_Keyboard_poll_queue_push_75_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_Keyboard_poll_queue_push_75_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_Keyboard_poll_queue_push_75_n (Arg1 n Number(U8)) Reg(U8) Some([24])
# Var inline_Keyboard_poll_queue_push_75_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([32, 33, 34, 35])
# Var inline_Keyboard_poll_queue_push_75_t1d36 (t1d36 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_Keyboard_poll_queue_push_75_t2187 (t2187 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_Keyboard_poll_queue_push_75_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([40])
# Var inline_Keyboard_poll_queue_push_75_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_Keyboard_poll_queue_push_75_t531d (t531d Ident("n")) Reg(U8) Some([24])
# Var inline_Keyboard_poll_queue_push_75_t565a (t565a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_Keyboard_poll_queue_push_75_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([44, 45, 46, 47])
# Var inline_Keyboard_poll_queue_push_75_t6778 (t6778 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))) Reg(U8) Some([24])
# Var inline_Keyboard_poll_queue_push_75_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([48, 49, 50, 51])
# Var inline_Keyboard_poll_queue_push_75_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([36, 37, 38, 39])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (static "stdin") Reg(U32) Some([32, 33, 34, 35])
# Var t12ac (t12ac Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })) Reg(U8) Some([24])
# Var t23a (t23a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }) Reg(U32) Some([52, 53, 54, 55])
# Var t2ca9 (t2ca9 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))) Reg(U8) Some([24])
# Var t3334 (t3334 Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4))) Reg(U8) Some([24])
# Var t379c (t379c LocalFieldDeref("keyboard", "shift_held")) Reg(U8) Some([24])
# Var t4c8b (t4c8b Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([52, 53, 54, 55])
# Var t528d (t528d Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }) Reg(U32) Some([52, 53, 54, 55])
# Var t5e63 (t5e63 Arithmetic(Add, Ident("index"), Number(USIZE, 3))) Reg(U32) Some([28, 29, 30, 31])
# Var t674 (t674 Arithmetic(Add, Ident("index"), Number(USIZE, 1))) Reg(U32) Some([32, 33, 34, 35])
# Var t6cd9 (t6cd9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }) Reg(U32) Some([52, 53, 54, 55])
# Var t7b09 (t7b09 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))) Reg(U8) Some([24])
# Var t7ebd (t7ebd LocalFieldDeref("keyboard", "release_in_progress")) Reg(U8) Some([56])
# Var t861f (t861f Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([24])
# Var tac13 (tac13 Ident("c")) Reg(U8) Some([24])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([57])
# Var tb62e (tb62e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }) Reg(U32) Some([52, 53, 54, 55])
# Var td18e (td18e Ident("index")) Reg(U32) Some([28, 29, 30, 31])
# Var td45b (td45b Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }) Reg(U32) Some([52, 53, 54, 55])
# Var tdaa (tdaa Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }) Reg(U32) Some([32, 33, 34, 35])
# Var te5cf (te5cf Arithmetic(Add, Ident("index"), Number(USIZE, 2))) Reg(U32) Some([32, 33, 34, 35])
# Var ted94 (ted94 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }) Reg(U32) Some([52, 53, 54, 55])
# Var tf68c (tf68c Ident("code")) Reg(U8) Some([24])
# Var tfcd (tfcd Number(U8, 1)) Reg(U8) Some([57])
# Var tfff6 (tfff6 AddressOf(Ident("stdin"))) Reg(U32) Some([32, 33, 34, 35])
# Some(t861f) <= call io_ready_to_read() Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
# Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4))
# Call(Call { function: "io_ready_to_read", parameters: [] })
# 00446 IoReadyToRead [Register(0x18)]
#       ReadyToRead
79 18 

# t3334 <- t861f BitwiseAnd Number(0n4/0x04u8) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
# Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4))
# 00448 LoadImm8 [Register(0x00), Constant8(0x04=4)]
#       t3334 <- t861f BitwiseAnd Number(0n4/0x04u8) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
#       Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4))
04 00 04 

# 0044b And8 [Register(0x18), Register(0x00), Register(0x18)]
#       t3334 <- t861f BitwiseAnd Number(0n4/0x04u8) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
#       Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4))
1b 18 00 18 

# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
# Number(U8, 0)
# 0044f LoadImm8 [Register(0x39), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
#       Number(U8, 0)
04 39 00 

# if t3334 == tb36e then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
# 00452 Cmp8 [Register(0x18), Register(0x39)]
#       if t3334 == tb36e then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
15 18 39 

# 00455 JzImm [Label24(Keyboard_poll_if_true_0_1)]
#       if t3334 == tb36e then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
72 5d 04 00 

# 00459 JmpImm [Label24(Keyboard_poll_if_else_0_2)]
#       if t3334 == tb36e then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
70 63 04 00 

# :Keyboard_poll_if_true_0_1 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
# Keyboard_poll_if_true_0_1
# return None Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
# Return { value: None }
# 0045d JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto Keyboard_poll_if_end_0 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
# 0045f JmpImm [Label24(Keyboard_poll_if_end_0)]
#       goto Keyboard_poll_if_end_0 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
70 63 04 00 

# :Keyboard_poll_if_else_0_2 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
# Keyboard_poll_if_else_0_2
# :Keyboard_poll_if_end_0 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
# Keyboard_poll_if_end_0
# Some(code) <= call io_read2() Some('/home/john/lutcomp/programs/lib/Keyboard.j':(20,5))
# Assign { target: Ident("code"), var_type: Some(Number(U8)), value: Call(Call { function: "io_read2", parameters: [] }) }
# Call(Call { function: "io_read2", parameters: [] })
# 00463 In2 [Register(0x18)]
#       IoRead2
62 18 

# tf68c <- code U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
# Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }
# Ident("code")
# optimized away noop copy Instruction { source: "tf68c <- code U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(22,5))\nAssign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }\nArithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }\nIdent(\"code\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# t528d U32 <- tf68c U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
# Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }
# 00465 LoadImm32 [Register(0x34), Constant32(0x00000000=0)]
#       Zero-pad for t528d U32 <- tf68c U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }
20 34 00 00 00 00 

# 0046b Copy8 [Register(0x18), Register(0x34)]
#       t528d U32 <- tf68c U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }
0b 18 34 

# index <- t528d Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
# Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
# 0046e LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
20 00 04 00 00 00 

# 00474 Mul8_16 [Register(0x34), Register(0x00), Register(0x1c)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
11 34 00 1c 

# 00478 LoadImm8 [Register(0x1e), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
04 1e 00 

# 0047b LoadImm8 [Register(0x1f), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
04 1f 00 

# td45b <- 0n987136/0x000f1000u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "shift_held")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
# Number(USIZE, 987136)
# 0047e LoadImm32 [Register(0x34), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "shift_held")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
#       Number(USIZE, 987136)
20 34 00 10 0f 00 

# t379c <- mem[td45b] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "shift_held")
# 00484 Load8 [Register(0x34), Register(0x18)]
#       t379c <- mem[td45b] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "shift_held")
05 34 18 

# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
# Number(U8, 0)
# 00487 LoadImm8 [Register(0x39), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
#       Number(U8, 0)
04 39 00 

# if t379c != tb36e then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
# 0048a Cmp8 [Register(0x18), Register(0x39)]
#       if t379c != tb36e then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
15 18 39 

# 0048d JzImm [Label24(Keyboard_poll_if_else_0_5)]
#       if t379c != tb36e then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
72 ad 04 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t379c != tb36e then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }\nComparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_4)], resolved: None }
# :Keyboard_poll_if_true_0_4 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Keyboard_poll_if_true_0_4
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 00491 LoadImm32 [Register(0x34), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 34 22 00 00 00 

# td18e <- index U32 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 1))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))\nArithmetic(Add, Ident(\"index\"), Number(USIZE, 1))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t674 <- td18e Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 1))
# 00497 Copy32 [Register(0x1c), Register(0x20)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 1))
21 1c 20 

# 0049a AddImm32IgnoreCarry [Register(0x20), Constant32(0x00000001=1)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 1))
32 20 01 00 00 00 

# t23a <- t4c8b Add Var(t674) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# 004a0 ClearCarry []
#       t23a <- t4c8b Add Var(t674) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
03 

# 004a1 AddCarry32_1 [Register(0x34), Register(0x20), Register(0x34)]
#       t23a <- t4c8b Add Var(t674) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
30 34 20 34 

# 004a5 AddCarry32_2 []
#       t23a <- t4c8b Add Var(t674) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
31 

# c <- mem[t23a] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# 004a6 Load8 [Register(0x34), Register(0x18)]
#       c <- mem[t23a] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
05 34 18 

# goto Keyboard_poll_if_end_3 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# 004a9 JmpImm [Label24(Keyboard_poll_if_end_3)]
#       goto Keyboard_poll_if_end_3 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
70 bc 04 00 

# :Keyboard_poll_if_else_0_5 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# Keyboard_poll_if_else_0_5
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 004ad LoadImm32 [Register(0x34), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 34 22 00 00 00 

# td18e <- index U32 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# tb62e <- t4c8b Add Var(td18e) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# 004b3 ClearCarry []
#       tb62e <- t4c8b Add Var(td18e) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
03 

# 004b4 AddCarry32_1 [Register(0x34), Register(0x1c), Register(0x34)]
#       tb62e <- t4c8b Add Var(td18e) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
30 34 1c 34 

# 004b8 AddCarry32_2 []
#       tb62e <- t4c8b Add Var(td18e) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
31 

# c <- mem[tb62e] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# 004b9 Load8 [Register(0x34), Register(0x18)]
#       c <- mem[tb62e] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
05 34 18 

# :Keyboard_poll_if_end_3 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# Keyboard_poll_if_end_3
# tdaa <- 0n987140/0x000f1004u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "release_in_progress")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
# Number(USIZE, 987140)
# 004bc LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "release_in_progress")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
#       Number(USIZE, 987140)
20 20 04 10 0f 00 

# t7ebd <- mem[tdaa] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "release_in_progress")
# 004c2 Load8 [Register(0x20), Register(0x38)]
#       t7ebd <- mem[tdaa] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "release_in_progress")
05 20 38 

# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# Number(U8, 0)
# 004c5 LoadImm8 [Register(0x39), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       Number(U8, 0)
04 39 00 

# if t7ebd == tb36e then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# 004c8 Cmp8 [Register(0x38), Register(0x39)]
#       if t7ebd == tb36e then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
15 38 39 

# 004cb JzImm [Label24(Keyboard_poll_if_true_0_7)]
#       if t7ebd == tb36e then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
72 d3 04 00 

# 004cf JmpImm [Label24(Keyboard_poll_if_else_0_8)]
#       if t7ebd == tb36e then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
70 1d 05 00 

# :Keyboard_poll_if_true_0_7 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Keyboard_poll_if_true_0_7
# t0 <- 0n987228/0x000f105cu32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# AddressOf(Ident("stdin"))
# 004d3 LoadImm32 [Register(0x20), Constant32(0x000f105c=987228)]
#       t0 <- 0n987228/0x000f105cu32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
#       AddressOf(Ident("stdin"))
20 20 5c 10 0f 00 

# tfff6 <- t0 U32 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# AddressOf(Ident("stdin"))
# optimized away noop copy Instruction { source: "tfff6 <- t0 U32 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\nAddressOf(Ident(\"stdin\"))\n", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# tac13 <- c U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_Keyboard_poll_queue_push_75_s <- tfff6 U32 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_75_s <- tfff6 U32 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\n", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_Keyboard_poll_queue_push_75_n <- tac13 U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_75_n <- tac13 U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_Keyboard_poll_queue_push_75_t565a <- inline_Keyboard_poll_queue_push_75_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(24,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_75_t565a <- inline_Keyboard_poll_queue_push_75_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(24,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_Keyboard_poll_queue_push_75_values <- inline_Keyboard_poll_queue_push_75_t565a U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(24,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 004d9 Copy32 [Register(0x20), Register(0x24)]
#       inline_Keyboard_poll_queue_push_75_values <- inline_Keyboard_poll_queue_push_75_t565a U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(24,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 20 24 

# inline_Keyboard_poll_queue_push_75_t1d36 <- inline_Keyboard_poll_queue_push_75_values U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_75_t1d36 <- inline_Keyboard_poll_queue_push_75_values U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\nCast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }\nIdent(\"values\")\n", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# inline_Keyboard_poll_queue_push_75_t4d4f <- inline_Keyboard_poll_queue_push_75_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_75_t4d4f <- inline_Keyboard_poll_queue_push_75_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_Keyboard_poll_queue_push_75_tc1ff <- inline_Keyboard_poll_queue_push_75_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 004dc Copy32 [Register(0x20), Register(0x30)]
#       inline_Keyboard_poll_queue_push_75_tc1ff <- inline_Keyboard_poll_queue_push_75_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 20 30 

# 004df AddImm32IgnoreCarry [Register(0x30), Constant32(0x00000104=260)]
#       inline_Keyboard_poll_queue_push_75_tc1ff <- inline_Keyboard_poll_queue_push_75_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 30 04 01 00 00 

# inline_Keyboard_poll_queue_push_75_t3ee <- mem[inline_Keyboard_poll_queue_push_75_tc1ff] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 004e5 Load8 [Register(0x30), Register(0x28)]
#       inline_Keyboard_poll_queue_push_75_t3ee <- mem[inline_Keyboard_poll_queue_push_75_tc1ff] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 30 28 

# inline_Keyboard_poll_queue_push_75_t5bb7 U32 <- inline_Keyboard_poll_queue_push_75_t3ee U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# 004e8 LoadImm32 [Register(0x2c), Constant32(0x00000000=0)]
#       Zero-pad for inline_Keyboard_poll_queue_push_75_t5bb7 U32 <- inline_Keyboard_poll_queue_push_75_t3ee U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
20 2c 00 00 00 00 

# 004ee Copy8 [Register(0x28), Register(0x2c)]
#       inline_Keyboard_poll_queue_push_75_t5bb7 U32 <- inline_Keyboard_poll_queue_push_75_t3ee U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
0b 28 2c 

# inline_Keyboard_poll_queue_push_75_t2187 <- inline_Keyboard_poll_queue_push_75_t1d36 Add Var(inline_Keyboard_poll_queue_push_75_t5bb7) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# 004f1 ClearCarry []
#       inline_Keyboard_poll_queue_push_75_t2187 <- inline_Keyboard_poll_queue_push_75_t1d36 Add Var(inline_Keyboard_poll_queue_push_75_t5bb7) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
03 

# 004f2 AddCarry32_1 [Register(0x24), Register(0x2c), Register(0x24)]
#       inline_Keyboard_poll_queue_push_75_t2187 <- inline_Keyboard_poll_queue_push_75_t1d36 Add Var(inline_Keyboard_poll_queue_push_75_t5bb7) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
30 24 2c 24 

# 004f6 AddCarry32_2 []
#       inline_Keyboard_poll_queue_push_75_t2187 <- inline_Keyboard_poll_queue_push_75_t1d36 Add Var(inline_Keyboard_poll_queue_push_75_t5bb7) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
31 

# inline_Keyboard_poll_queue_push_75_t531d <- inline_Keyboard_poll_queue_push_75_n U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_75_t531d <- inline_Keyboard_poll_queue_push_75_n U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# mem[inline_Keyboard_poll_queue_push_75_t2187] <- inline_Keyboard_poll_queue_push_75_t531d U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 004f7 Store8 [Register(0x18), Register(0x24)]
#       mem[inline_Keyboard_poll_queue_push_75_t2187] <- inline_Keyboard_poll_queue_push_75_t531d U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 18 24 

# inline_Keyboard_poll_queue_push_75_t4d4f <- inline_Keyboard_poll_queue_push_75_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_75_t4d4f <- inline_Keyboard_poll_queue_push_75_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_Keyboard_poll_queue_push_75_tc1ff <- inline_Keyboard_poll_queue_push_75_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 004fa Copy32 [Register(0x20), Register(0x30)]
#       inline_Keyboard_poll_queue_push_75_tc1ff <- inline_Keyboard_poll_queue_push_75_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 20 30 

# 004fd AddImm32IgnoreCarry [Register(0x30), Constant32(0x00000104=260)]
#       inline_Keyboard_poll_queue_push_75_tc1ff <- inline_Keyboard_poll_queue_push_75_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 30 04 01 00 00 

# inline_Keyboard_poll_queue_push_75_t4d4f <- inline_Keyboard_poll_queue_push_75_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_75_t4d4f <- inline_Keyboard_poll_queue_push_75_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_Keyboard_poll_queue_push_75_tc1ff <- inline_Keyboard_poll_queue_push_75_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 00503 Copy32 [Register(0x20), Register(0x30)]
#       inline_Keyboard_poll_queue_push_75_tc1ff <- inline_Keyboard_poll_queue_push_75_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 20 30 

# 00506 AddImm32IgnoreCarry [Register(0x30), Constant32(0x00000104=260)]
#       inline_Keyboard_poll_queue_push_75_tc1ff <- inline_Keyboard_poll_queue_push_75_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 30 04 01 00 00 

# inline_Keyboard_poll_queue_push_75_t3ee <- mem[inline_Keyboard_poll_queue_push_75_tc1ff] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# 0050c Load8 [Register(0x30), Register(0x28)]
#       inline_Keyboard_poll_queue_push_75_t3ee <- mem[inline_Keyboard_poll_queue_push_75_tc1ff] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
05 30 28 

# inline_Keyboard_poll_queue_push_75_t6778 <- inline_Keyboard_poll_queue_push_75_t3ee Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# 0050f LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_Keyboard_poll_queue_push_75_t6778 <- inline_Keyboard_poll_queue_push_75_t3ee Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
04 00 01 

# 00512 Add8NoCarryIn [Register(0x28), Register(0x00), Register(0x18)]
#       inline_Keyboard_poll_queue_push_75_t6778 <- inline_Keyboard_poll_queue_push_75_t3ee Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
14 28 00 18 

# mem[inline_Keyboard_poll_queue_push_75_tc1ff] <- inline_Keyboard_poll_queue_push_75_t6778 U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# 00516 Store8 [Register(0x18), Register(0x30)]
#       mem[inline_Keyboard_poll_queue_push_75_tc1ff] <- inline_Keyboard_poll_queue_push_75_t6778 U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
06 18 30 

# goto inline_Keyboard_poll_queue_push_75_function_end_queue_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_Keyboard_poll_queue_push_75_function_end_queue_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_Keyboard_poll_queue_push_75_function_end_queue_push)], resolved: None }
# :inline_Keyboard_poll_queue_push_75_function_end_queue_push None
# inline_Keyboard_poll_queue_push_75_function_end_queue_push
# goto Keyboard_poll_if_end_6 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
# 00519 JmpImm [Label24(Keyboard_poll_if_end_6)]
#       goto Keyboard_poll_if_end_6 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
70 1d 05 00 

# :Keyboard_poll_if_else_0_8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
# Keyboard_poll_if_else_0_8
# :Keyboard_poll_if_end_6 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
# Keyboard_poll_if_end_6
# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Number(U8, 0)
# 0051d LoadImm8 [Register(0x39), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Number(U8, 0)
04 39 00 

# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 00520 LoadImm32 [Register(0x34), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 34 22 00 00 00 

# td18e <- index U32 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 2))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))\nArithmetic(Add, Ident(\"index\"), Number(USIZE, 2))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 2))
# 00526 Copy32 [Register(0x1c), Register(0x20)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 2))
21 1c 20 

# 00529 AddImm32IgnoreCarry [Register(0x20), Constant32(0x00000002=2)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 2))
32 20 02 00 00 00 

# ted94 <- t4c8b Add Var(te5cf) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# 0052f ClearCarry []
#       ted94 <- t4c8b Add Var(te5cf) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
03 

# 00530 AddCarry32_1 [Register(0x34), Register(0x20), Register(0x34)]
#       ted94 <- t4c8b Add Var(te5cf) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
30 34 20 34 

# 00534 AddCarry32_2 []
#       ted94 <- t4c8b Add Var(te5cf) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
31 

# t2ca9 <- mem[ted94] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# 00535 Load8 [Register(0x34), Register(0x18)]
#       t2ca9 <- mem[ted94] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
05 34 18 

# if tb36e != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# 00538 Cmp8 [Register(0x39), Register(0x18)]
#       if tb36e != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
15 39 18 

# 0053b JzImm [Label24(Keyboard_poll_if_else_0_11)]
#       if tb36e != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
72 72 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb36e != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_10)], resolved: None }
# :Keyboard_poll_if_true_0_10 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Keyboard_poll_if_true_0_10
# tdaa <- 0n987140/0x000f1004u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "release_in_progress")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
# Number(USIZE, 987140)
# 0053f LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "release_in_progress")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
#       Number(USIZE, 987140)
20 20 04 10 0f 00 

# t7ebd <- mem[tdaa] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "release_in_progress")
# 00545 Load8 [Register(0x20), Register(0x38)]
#       t7ebd <- mem[tdaa] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "release_in_progress")
05 20 38 

# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# Number(U8, 0)
# 00548 LoadImm8 [Register(0x39), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       Number(U8, 0)
04 39 00 

# if t7ebd != tb36e then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# 0054b Cmp8 [Register(0x38), Register(0x39)]
#       if t7ebd != tb36e then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
15 38 39 

# 0054e JzImm [Label24(Keyboard_poll_if_else_0_14)]
#       if t7ebd != tb36e then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
72 62 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t7ebd != tb36e then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }\nComparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_13)], resolved: None }
# :Keyboard_poll_if_true_0_13 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Keyboard_poll_if_true_0_13
# td45b <- 0n987136/0x000f1000u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
# Number(USIZE, 987136)
# 00552 LoadImm32 [Register(0x34), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
#       Number(USIZE, 987136)
20 34 00 10 0f 00 

# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00558 LoadImm8 [Register(0x39), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 39 00 

# mem[td45b] <- tb36e U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# 0055b Store8 [Register(0x39), Register(0x34)]
#       mem[td45b] <- tb36e U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
06 39 34 

# goto Keyboard_poll_if_end_12 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# 0055e JmpImm [Label24(Keyboard_poll_if_end_12)]
#       goto Keyboard_poll_if_end_12 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
70 6e 05 00 

# :Keyboard_poll_if_else_0_14 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_else_0_14
# td45b <- 0n987136/0x000f1000u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
# Number(USIZE, 987136)
# 00562 LoadImm32 [Register(0x34), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
#       Number(USIZE, 987136)
20 34 00 10 0f 00 

# tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
# Number(U8, 1)
# 00568 LoadImm8 [Register(0x39), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
#       Number(U8, 1)
04 39 01 

# mem[td45b] <- tfcd U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
# 0056b Store8 [Register(0x39), Register(0x34)]
#       mem[td45b] <- tfcd U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
06 39 34 

# :Keyboard_poll_if_end_12 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_end_12
# goto Keyboard_poll_if_end_9 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# 0056e JmpImm [Label24(Keyboard_poll_if_end_9)]
#       goto Keyboard_poll_if_end_9 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
70 72 05 00 

# :Keyboard_poll_if_else_0_11 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_else_0_11
# :Keyboard_poll_if_end_9 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_end_9
# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Number(U8, 0)
# 00572 LoadImm8 [Register(0x39), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Number(U8, 0)
04 39 00 

# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 00575 LoadImm32 [Register(0x34), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 34 22 00 00 00 

# td18e <- index U32 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 3))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))\nArithmetic(Add, Ident(\"index\"), Number(USIZE, 3))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 3))
# 0057b AddImm32IgnoreCarry [Register(0x1c), Constant32(0x00000003=3)]
#       t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 3))
32 1c 03 00 00 00 

# t6cd9 <- t4c8b Add Var(t5e63) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# 00581 ClearCarry []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
03 

# 00582 AddCarry32_1 [Register(0x34), Register(0x1c), Register(0x34)]
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
30 34 1c 34 

# 00586 AddCarry32_2 []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
31 

# t7b09 <- mem[t6cd9] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# 00587 Load8 [Register(0x34), Register(0x18)]
#       t7b09 <- mem[t6cd9] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
05 34 18 

# if tb36e != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# 0058a Cmp8 [Register(0x39), Register(0x18)]
#       if tb36e != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
15 39 18 

# 0058d JzImm [Label24(Keyboard_poll_if_else_0_17)]
#       if tb36e != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
72 a1 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb36e != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_16)], resolved: None }
# :Keyboard_poll_if_true_0_16 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Keyboard_poll_if_true_0_16
# tdaa <- 0n987140/0x000f1004u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
# Number(USIZE, 987140)
# 00591 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
#       Number(USIZE, 987140)
20 20 04 10 0f 00 

# tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
# Number(U8, 1)
# 00597 LoadImm8 [Register(0x39), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
#       Number(U8, 1)
04 39 01 

# mem[tdaa] <- tfcd U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
# 0059a Store8 [Register(0x39), Register(0x20)]
#       mem[tdaa] <- tfcd U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
06 39 20 

# goto Keyboard_poll_if_end_15 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# 0059d JmpImm [Label24(Keyboard_poll_if_end_15)]
#       goto Keyboard_poll_if_end_15 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
70 ad 05 00 

# :Keyboard_poll_if_else_0_17 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# Keyboard_poll_if_else_0_17
# tdaa <- 0n987140/0x000f1004u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
# Number(USIZE, 987140)
# 005a1 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
#       Number(USIZE, 987140)
20 20 04 10 0f 00 

# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 005a7 LoadImm8 [Register(0x39), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 39 00 

# mem[tdaa] <- tb36e U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# 005aa Store8 [Register(0x39), Register(0x20)]
#       mem[tdaa] <- tb36e U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
06 39 20 

# :Keyboard_poll_if_end_15 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# Keyboard_poll_if_end_15
# return None None
# Return { value: None }
# 005ad JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_Keyboard_poll None
# function_end_Keyboard_poll
# Unreachable None
# 005af Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :RpnCalc_handle
# Ret Some(U8)
# Arg0=c
# Arg1=ch
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var a (Local a Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([68, 69, 70, 71])
# Var ch (Arg1 ch Number(U8)) Reg(U8) Some([72])
# Var diff (Local diff Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_RpnCalc_init_89_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_init_89_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_init_89_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_init_89_s (Local s Ptr(Struct("Stack")) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_89_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_init_89_t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_89_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_init_89_tb2e9 (tb2e9 Ident("s")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_89_tbc15 (tbc15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_init_89_tf462 (tf462 Call(Call { function: "stack_init", parameters: [Ident("s")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_n (Arg1 n Number(USIZE)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([88, 89, 90, 91])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t531d (t531d Ident("n")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([88, 89, 90, 91])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([88, 89, 90, 91])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_t4760 (t4760 AddressOf(PtrFieldDeref("c", "stack"))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_t5fbe (t5fbe Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([100])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([101])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_tbc15 (tbc15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([88, 89, 90, 91])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_100_tfdb7 (tfdb7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_n (Arg1 n Number(USIZE)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t531d (t531d Ident("n")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_t4760 (t4760 AddressOf(PtrFieldDeref("c", "stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_t5fbe (t5fbe Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([109])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_tbc15 (tbc15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_101_tfdb7 (tfdb7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_n (Arg1 n Number(USIZE)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t531d (t531d Ident("n")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_t4760 (t4760 AddressOf(PtrFieldDeref("c", "stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_t5fbe (t5fbe Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([109])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_tbc15 (tbc15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_102_tfdb7 (tfdb7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_mul32_32_12_a (Arg0 a Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_a_hi (Local a_hi Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_b (Arg1 b Number(USIZE)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_12_b_hi (Local b_hi Number(USIZE) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a (Arg0 a Number(USIZE)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b (Arg1 b Number(USIZE)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 (t3585 Ident("e")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 (t45f5 Ident("d")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([100])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 (t8792 Ident("a")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([72])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 (tac13 Ident("c")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 (tace9 Ident("b")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([101])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([100])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a (Arg0 a Number(USIZE)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b (Arg1 b Number(USIZE)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 (t3585 Ident("e")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 (t45f5 Ident("d")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([101])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 (t8792 Ident("a")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([109])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 (tac13 Ident("c")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 (tace9 Ident("b")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([110])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([101])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a (Arg0 a Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b (Arg1 b Number(USIZE)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 (t3585 Ident("e")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 (t45f5 Ident("d")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([72])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 (t8792 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 (tac13 Ident("c")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 (tace9 Ident("b")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([100])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([72])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_mul32_32_12_t45f5 (t45f5 Ident("d")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_12_t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_12_t5cca (t5cca Ident("b_hi")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_t6afc (t6afc Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_t811a (t811a Index("b", Number(U8, 2))) Reg(U8) Some([109])
# Var inline_RpnCalc_handle_mul32_32_12_t8792 (t8792 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_t8fbd (t8fbd Ident("a_hi")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_t9829 (t9829 Index("b", Number(U8, 3))) Reg(U8) Some([109])
# Var inline_RpnCalc_handle_mul32_32_12_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_tac13 (tac13 Ident("c")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_12_tace9 (tace9 Ident("b")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_12_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_12_tbe0a (tbe0a Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_by10_13_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_mul32_by10_13_a (Arg0 a Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_by10_13_b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_by10_13_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_mul32_by10_13_t7eaf (t7eaf Arithmetic(Add, Ident("b"), Ident("a"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_by10_13_t8792 (t8792 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_by10_13_tace9 (tace9 Ident("b")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_putc_19_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_19_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_19_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_19_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_19_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_19_tac13 (tac13 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_20_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_20_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_20_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_20_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_20_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_20_tac13 (tac13 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_21_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_21_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_21_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_21_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_21_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_21_tac13 (tac13 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_22_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_22_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_22_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_22_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_22_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_22_tac13 (tac13 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_23_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_23_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_23_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_23_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_23_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_23_tac13 (tac13 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_24_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_24_c (Arg0 c Number(U8)) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_putc_24_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_24_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_24_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_24_tac13 (tac13 Ident("c")) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_putc_25_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_25_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_25_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_25_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_25_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_25_tac13 (tac13 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_26_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_26_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_26_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_26_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_26_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_26_tac13 (tac13 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_27_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_27_c (Arg0 c Number(U8)) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_putc_27_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_27_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_27_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_27_tac13 (tac13 Ident("c")) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_putc_28_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_28_c (Arg0 c Number(U8)) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_putc_28_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_28_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_28_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_28_tac13 (tac13 Ident("c")) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_stack_get_87_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_get_87_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_get_87_n (Arg1 n Number(USIZE)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_get_87_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_get_87_t2db0 (t2db0 Index("values", Ident("n"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_get_87_t531d (t531d Ident("n")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_get_87_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_get_87_t5abb (t5abb Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_get_87_td38d (td38d Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_get_87_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_get_87_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_pop_91_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_pop_91_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_pop_91_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_91_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_91_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_91_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_91_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_91_t8e54 (t8e54 Index("values", PtrFieldDeref("s", "first_free"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_91_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_stack_pop_91_te089 (te089 Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_91_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_91_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_stack_pop_91_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_92_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_pop_92_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_pop_92_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_92_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_92_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_92_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_92_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_92_t8e54 (t8e54 Index("values", PtrFieldDeref("s", "first_free"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_92_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_stack_pop_92_te089 (te089 Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_92_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_92_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_stack_pop_92_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_93_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_push_93_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_push_93_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_93_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_93_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_93_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_93_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_93_t531d (t531d Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_93_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_93_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_93_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_93_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_93_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_93_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_94_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_push_94_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_push_94_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_94_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_94_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_94_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_94_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_94_t531d (t531d Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_94_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_94_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_94_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_94_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_94_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_94_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_95_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_push_95_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_push_95_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_95_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_95_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_95_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_95_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_95_t531d (t531d Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_95_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_95_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_95_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_95_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_95_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_95_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_96_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_push_96_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_push_96_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_96_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_96_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_96_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_96_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_96_t531d (t531d Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_96_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_96_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_96_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_96_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_96_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_96_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_97_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_push_97_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_push_97_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_97_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_97_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_97_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_97_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_97_t531d (t531d Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_97_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_97_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_97_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_97_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_97_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_stack_push_97_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_98_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_push_98_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_push_98_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_98_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_98_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_98_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_98_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_98_t531d (t531d Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_98_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_98_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_98_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_98_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_98_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_98_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var product (Local product Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var quotient (Local quotient Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var stack (Local stack Ptr(Struct("Stack")) Reg(U32)) Reg(U32) Some([112, 113, 114, 115])
# Var stack_count (Local stack_count Number(U8) Reg(U8)) Reg(U8) Some([110])
# Var stack_count_usize (Local stack_count_usize Number(USIZE) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var stack_needed (Local stack_needed Number(U8) Reg(U8)) Reg(U8) Some([116])
# Var sum (Local sum Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var t1501 (t1501 Number(U8, 113)) Reg(U8) Some([73])
# Var t17ee (t17ee Ident("diff")) Reg(U32) Some([60, 61, 62, 63])
# Var t18a9 (t18a9 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })) Reg(U8) Some([73])
# Var t1ba9 (t1ba9 Ident("quotient")) Reg(U32) Some([60, 61, 62, 63])
# Var t2398 (t2398 Call(Call { function: "print_dec32", parameters: [Ident("product")] })) Reg(U8) Some([73])
# Var t24a4 (t24a4 Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var t2597 (t2597 Number(U8, 43)) Reg(U8) Some([117])
# Var t2754 (t2754 Ident("product")) Reg(U32) Some([60, 61, 62, 63])
# Var t2ac9 (t2ac9 Number(U8, 57)) Reg(U8) Some([73])
# Var t2af9 (t2af9 Call(Call { function: "putc", parameters: [Number(U8, 69)] })) Reg(U8) Some([73])
# Var t2d0c (t2d0c Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })) Reg(U8) Some([73])
# Var t352b (t352b Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })) Reg(U8) Some([73])
# Var t39b5 (t39b5 Number(U8, 115)) Reg(U8) Some([117])
# Var t3f70 (t3f70 Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) Reg(U32) Some([60, 61, 62, 63])
# Var t4376 (t4376 Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }) Reg(U32) Some([64, 65, 66, 67])
# Var t4671 (t4671 Ident("stack_needed")) Reg(U8) Some([117])
# Var t49a (t49a Number(U8, 100)) Reg(U8) Some([73])
# Var t4e08 (t4e08 Number(U8, 99)) Reg(U8) Some([73])
# Var t6001 (t6001 Ident("stack_count")) Reg(U8) Some([100])
# Var t670d (t670d Ident("sum")) Reg(U32) Some([60, 61, 62, 63])
# Var t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([76, 77, 78, 79])
# Var t701d (t701d Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var t7e7f (t7e7f Call(Call { function: "putc", parameters: [Number(U8, 58)] })) Reg(U8) Some([73])
# Var t7f48 (t7f48 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }) Reg(U32) Some([76, 77, 78, 79])
# Var t7ff1 (t7ff1 Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) Reg(U8) Some([73])
# Var t8103 (t8103 Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })) Reg(U8) Some([73])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([104, 105, 106, 107])
# Var t8b2f (t8b2f Number(U8, 45)) Reg(U8) Some([117])
# Var t9046 (t9046 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })) Reg(U8) Some([73])
# Var t969e (t969e Number(U8, 42)) Reg(U8) Some([117])
# Var t9c38 (t9c38 Number(U8, 82)) Reg(U8) Some([73])
# Var ta378 (ta378 Call(Call { function: "print_dec32", parameters: [Ident("sum")] })) Reg(U8) Some([73])
# Var ta622 (ta622 Call(Call { function: "print_dec8", parameters: [Ident("i")] })) Reg(U8) Some([73])
# Var tac13 (tac13 Ident("c")) Reg(U32) Some([68, 69, 70, 71])
# Var tac5f (tac5f Number(U8, 32)) Reg(U8) Some([73])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([68, 69, 70, 71])
# Var tacf6 (tacf6 Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })) Reg(U32) Some([60, 61, 62, 63])
# Var tadd (tadd Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })) Reg(U32) Some([60, 61, 62, 63])
# Var tb087 (tb087 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })) Reg(U8) Some([73])
# Var tb1ab (tb1ab Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })) Reg(U8) Some([73])
# Var tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var tb303 (tb303 Call(Call { function: "putc", parameters: [Number(U8, 82)] })) Reg(U8) Some([73])
# Var tb336 (tb336 Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })) Reg(U32) Some([64, 65, 66, 67])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([100])
# Var tb507 (tb507 Number(U8, 69)) Reg(U8) Some([73])
# Var tbc15 (tbc15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([60, 61, 62, 63])
# Var tbf93 (tbf93 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64)) }) Reg(U32) Some([76, 77, 78, 79])
# Var tca36 (tca36 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })) Reg(U8) Some([73])
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([73])
# Var td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([64, 65, 66, 67])
# Var td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([117])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([72])
# Var te25f (te25f Call(Call { function: "print_dec32", parameters: [Ident("diff")] })) Reg(U8) Some([73])
# Var te668 (te668 Number(U8, 47)) Reg(U8) Some([117])
# Var tebdf (tebdf Number(U8, 58)) Reg(U8) Some([108])
# Var tec99 (tec99 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([73])
# Var tf48d (tf48d Number(U8, 48)) Reg(U8) Some([73])
# Var tfcd (tfcd Number(U8, 1)) Reg(U8) Some([100])
# Var tfdb7 (tfdb7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([60, 61, 62, 63])
# Var tfe08 (tfe08 Ident("stack")) Reg(U32) Some([76, 77, 78, 79])
# 005b4 Copy32 [Register(0x00), Register(0x44)]
#       Save function parameter 'c' registers [0, 1, 2, 3] to locals [68, 69, 70, 71].
21 00 44 

# 005b7 Copy8 [Register(0x04), Register(0x48)]
#       Save function parameter 'ch' registers [4] to locals [72].
0b 04 48 

# tbc15 <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(28,5))
# Assign { target: Ident("stack"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
# AddressOf(PtrFieldDeref("c", "stack"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# 005ba Copy32 [Register(0x44), Register(0x3c)]
#       tbc15 <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(28,5))
#       Assign { target: Ident("stack"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
#       AddressOf(PtrFieldDeref("c", "stack"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
#       Ident("c")
21 44 3c 

# stack <- tbc15 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(28,5))
# Assign { target: Ident("stack"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
# AddressOf(PtrFieldDeref("c", "stack"))
# 005bd Copy32 [Register(0x3c), Register(0x70)]
#       stack <- tbc15 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(28,5))
#       Assign { target: Ident("stack"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
#       AddressOf(PtrFieldDeref("c", "stack"))
21 3c 70 

# a <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(30,5))
# Assign { target: Ident("a"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }
# Number(U8, 0)
# 005c0 LoadImm8 [Register(0x3c), Constant8(0x00=0)]
#       a <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(30,5))
#       Assign { target: Ident("a"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }
#       Number(U8, 0)
04 3c 00 

# b <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(31,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }
# Number(U8, 0)
# 005c3 LoadImm8 [Register(0x40), Constant8(0x00=0)]
#       b <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(31,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }
#       Number(U8, 0)
04 40 00 

# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 0) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t2597 <- 0n43/0x2bu8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
# Number(U8, 43)
# 005c6 LoadImm8 [Register(0x75), Constant8(0x2b=43)]
#       t2597 <- 0n43/0x2bu8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
#       Number(U8, 43)
04 75 2b 

# if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
# 005c9 Cmp8 [Register(0x48), Register(0x75)]
#       if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
15 48 75 

# 005cc JzImm [Label24(RpnCalc_handle_if_true_0_1)]
#       if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
72 d4 05 00 

# 005d0 JmpImm [Label24(RpnCalc_handle_if_else_0_2)]
#       if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
70 db 05 00 

# :RpnCalc_handle_if_true_0_1 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
# RpnCalc_handle_if_true_0_1
# stack_needed <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
# Number(U8, 2)
# 005d4 LoadImm8 [Register(0x74), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
#       Number(U8, 2)
04 74 02 

# goto RpnCalc_handle_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# 005d7 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
70 32 06 00 

# :RpnCalc_handle_if_else_0_2 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_0_2
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t8b2f <- 0n45/0x2du8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
# Number(U8, 45)
# 005db LoadImm8 [Register(0x75), Constant8(0x2d=45)]
#       t8b2f <- 0n45/0x2du8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
#       Number(U8, 45)
04 75 2d 

# if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
# 005de Cmp8 [Register(0x48), Register(0x75)]
#       if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
15 48 75 

# 005e1 JzImm [Label24(RpnCalc_handle_if_true_1_3)]
#       if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
72 e9 05 00 

# 005e5 JmpImm [Label24(RpnCalc_handle_if_else_1_4)]
#       if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
70 f0 05 00 

# :RpnCalc_handle_if_true_1_3 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_1_3
# stack_needed <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
# Number(U8, 2)
# 005e9 LoadImm8 [Register(0x74), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
#       Number(U8, 2)
04 74 02 

# goto RpnCalc_handle_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# 005ec JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
70 32 06 00 

# :RpnCalc_handle_if_else_1_4 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_1_4
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t969e <- 0n42/0x2au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
# Number(U8, 42)
# 005f0 LoadImm8 [Register(0x75), Constant8(0x2a=42)]
#       t969e <- 0n42/0x2au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
#       Number(U8, 42)
04 75 2a 

# if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
# 005f3 Cmp8 [Register(0x48), Register(0x75)]
#       if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
15 48 75 

# 005f6 JzImm [Label24(RpnCalc_handle_if_true_2_5)]
#       if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
72 fe 05 00 

# 005fa JmpImm [Label24(RpnCalc_handle_if_else_2_6)]
#       if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
70 05 06 00 

# :RpnCalc_handle_if_true_2_5 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_2_5
# stack_needed <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
# Number(U8, 2)
# 005fe LoadImm8 [Register(0x74), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
#       Number(U8, 2)
04 74 02 

# goto RpnCalc_handle_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# 00601 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
70 32 06 00 

# :RpnCalc_handle_if_else_2_6 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_2_6
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# te668 <- 0n47/0x2fu8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
# Number(U8, 47)
# 00605 LoadImm8 [Register(0x75), Constant8(0x2f=47)]
#       te668 <- 0n47/0x2fu8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
#       Number(U8, 47)
04 75 2f 

# if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
# 00608 Cmp8 [Register(0x48), Register(0x75)]
#       if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
15 48 75 

# 0060b JzImm [Label24(RpnCalc_handle_if_true_3_7)]
#       if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
72 13 06 00 

# 0060f JmpImm [Label24(RpnCalc_handle_if_else_3_8)]
#       if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
70 1a 06 00 

# :RpnCalc_handle_if_true_3_7 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_3_7
# stack_needed <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
# Number(U8, 2)
# 00613 LoadImm8 [Register(0x74), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
#       Number(U8, 2)
04 74 02 

# goto RpnCalc_handle_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# 00616 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
70 32 06 00 

# :RpnCalc_handle_if_else_3_8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_3_8
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t39b5 <- 0n115/0x73u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# Number(U8, 115)
# 0061a LoadImm8 [Register(0x75), Constant8(0x73=115)]
#       t39b5 <- 0n115/0x73u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
#       Number(U8, 115)
04 75 73 

# if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# 0061d Cmp8 [Register(0x48), Register(0x75)]
#       if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
15 48 75 

# 00620 JzImm [Label24(RpnCalc_handle_if_true_4_9)]
#       if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
72 28 06 00 

# 00624 JmpImm [Label24(RpnCalc_handle_if_else_4_10)]
#       if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
70 2f 06 00 

# :RpnCalc_handle_if_true_4_9 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_4_9
# stack_needed <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
# Number(U8, 2)
# 00628 LoadImm8 [Register(0x74), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
#       Number(U8, 2)
04 74 02 

# goto RpnCalc_handle_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# 0062b JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
70 32 06 00 

# :RpnCalc_handle_if_else_4_10 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_4_10
# stack_needed <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 0062f LoadImm8 [Register(0x74), Constant8(0x00=0)]
#       stack_needed <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 74 00 

# :RpnCalc_handle_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_end_0
# t4671 <- stack_needed U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
# Ident("stack_needed")
# 00632 Copy8 [Register(0x74), Register(0x75)]
#       t4671 <- stack_needed U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
#       Ident("stack_needed")
0b 74 75 

# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
# Number(U8, 0)
# 00635 LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
#       Number(U8, 0)
04 64 00 

# if t4671 > tb36e then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
# 00638 Cmp8 [Register(0x75), Register(0x64)]
#       if t4671 > tb36e then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
15 75 64 

# 0063b JcImm [Label24(RpnCalc_handle_if_else_0_13)]
#       if t4671 > tb36e then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
71 e5 06 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > tb36e then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_12)], resolved: None }
# :RpnCalc_handle_if_true_0_12 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_12
# tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_100_c <- tac13 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 0063f Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_c <- tac13 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 44 4c 

# inline_RpnCalc_handle_RpnCalc_push_pending_100_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_100_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_100_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_100_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }\nPtrFieldDeref(\"c\", \"have_num\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_100_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 00642 Copy32 [Register(0x4c), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
21 4c 50 

# 00645 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 50 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_100_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_100_tfdb7] U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# 0064b Load8 [Register(0x50), Register(0x64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_100_tfdb7] U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
05 50 64 

# inline_RpnCalc_handle_RpnCalc_push_pending_100_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# Number(U8, 0)
# 0064e LoadImm8 [Register(0x65), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       Number(U8, 0)
04 65 00 

# if inline_RpnCalc_handle_RpnCalc_push_pending_100_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_100_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_100_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_100_RpnCalc_push_pending_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# 00651 Cmp8 [Register(0x64), Register(0x65)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_100_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_100_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_100_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_100_RpnCalc_push_pending_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
15 64 65 

# 00654 JzImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_100_RpnCalc_push_pending_if_else_0_2)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_100_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_100_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_100_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_100_RpnCalc_push_pending_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
72 e1 06 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_100_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_100_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_100_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_100_RpnCalc_push_pending_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_100_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_100_RpnCalc_push_pending_if_true_0_1 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_100_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_100_tbc15 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# AddressOf(PtrFieldDeref("c", "stack"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_100_tbc15 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nAddressOf(PtrFieldDeref(\"c\", \"stack\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_100_t4760 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_tbc15 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# AddressOf(PtrFieldDeref("c", "stack"))
# 00658 Copy32 [Register(0x4c), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_t4760 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_tbc15 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       AddressOf(PtrFieldDeref("c", "stack"))
21 4c 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_100_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_100_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_100_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_100_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nPtrFieldDeref(\"c\", \"num\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_100_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_100_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 0065b Copy32 [Register(0x4c), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_100_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 4c 54 

# 0065e AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_100_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 54 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_100_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_100_t6e8e] U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 00664 Load32 [Register(0x54), Register(0x58)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_100_t6e8e] U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 54 58 

# inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_s <- inline_RpnCalc_handle_RpnCalc_push_pending_100_t4760 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# 00667 Copy32 [Register(0x50), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_s <- inline_RpnCalc_handle_RpnCalc_push_pending_100_t4760 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
21 50 54 

# inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_n <- inline_RpnCalc_handle_RpnCalc_push_pending_100_td60 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# 0066a Copy32 [Register(0x58), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_n <- inline_RpnCalc_handle_RpnCalc_push_pending_100_td60 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
21 58 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t587d <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t587d <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_values <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 0066d Copy32 [Register(0x54), Register(0x58)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_values <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 54 58 

# inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tf90a <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 00670 Copy32 [Register(0x58), Register(0x60)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tf90a <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 58 60 

# inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00673 Copy32 [Register(0x54), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 54 5c 

# 00676 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 0067c Load32 [Register(0x5c), Register(0x58)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 5c 58 

# inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 0067f LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 00685 Mul8_16 [Register(0x58), Register(0x00), Register(0x58)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 58 00 58 

# 00689 LoadImm8 [Register(0x5a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 5a 00 

# 0068c LoadImm8 [Register(0x5b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 5b 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 0068f ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 00690 AddCarry32_1 [Register(0x60), Register(0x58), Register(0x58)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 60 58 58 

# 00694 AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t531d <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t531d <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 00695 Store32_1 [Register(0x50), Register(0x58)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 50 58 

# 00698 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00699 Copy32 [Register(0x54), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 54 5c 

# 0069c AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 006a2 Copy32 [Register(0x54), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 54 5c 

# 006a5 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 006ab Load32 [Register(0x5c), Register(0x58)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 5c 58 

# inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 006ae Copy32 [Register(0x58), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 58 50 

# 006b1 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 50 01 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 006b7 Store32_1 [Register(0x50), Register(0x5c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 50 5c 

# 006ba Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_function_end_stack_push None
# inline_RpnCalc_handle_RpnCalc_push_pending_100_inline_RpnCalc_push_pending_stack_push_99_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_100_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_100_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_100_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_100_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_100_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_100_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 006bb Copy32 [Register(0x4c), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_100_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 4c 54 

# 006be AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_100_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 54 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_100_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 006c4 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 50 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_100_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_100_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# 006ca Store32_1 [Register(0x50), Register(0x54)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_100_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_100_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
23 50 54 

# 006cd Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_100_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_100_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_100_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_100_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_100_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_100_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_100_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 006ce Copy32 [Register(0x4c), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
21 4c 50 

# 006d1 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_100_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 50 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_100_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 006d7 LoadImm8 [Register(0x65), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_100_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 65 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_100_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_100_tb36e U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# 006da Store8 [Register(0x65), Register(0x50)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_100_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_100_tb36e U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
06 65 50 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_100_RpnCalc_push_pending_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# 006dd JmpImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_100_RpnCalc_push_pending_if_end_0)]
#       goto inline_RpnCalc_handle_RpnCalc_push_pending_100_RpnCalc_push_pending_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
70 e1 06 00 

# :inline_RpnCalc_handle_RpnCalc_push_pending_100_RpnCalc_push_pending_if_else_0_2 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_100_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_100_RpnCalc_push_pending_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_100_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_100_function_end_RpnCalc_push_pending None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_100_function_end_RpnCalc_push_pending None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_100_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_100_function_end_RpnCalc_push_pending None
# inline_RpnCalc_handle_RpnCalc_push_pending_100_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_11 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
# 006e1 JmpImm [Label24(RpnCalc_handle_if_end_11)]
#       goto RpnCalc_handle_if_end_11 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
70 e5 06 00 

# :RpnCalc_handle_if_else_0_13 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
# RpnCalc_handle_if_else_0_13
# :RpnCalc_handle_if_end_11 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
# RpnCalc_handle_if_end_11
# t7f48 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(52,5))
# Assign { target: Ident("stack_count_usize"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("stack", "first_free") }
# PtrFieldDeref("stack", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }
# Ident("stack")
# 006e5 Copy32 [Register(0x70), Register(0x4c)]
#       t7f48 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }
#       Ident("stack")
21 70 4c 

# tbf93 <- t7f48 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(52,5))
# Assign { target: Ident("stack_count_usize"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("stack", "first_free") }
# PtrFieldDeref("stack", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64))
# 006e8 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       tbf93 <- t7f48 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64))
32 4c 40 00 00 00 

# stack_count_usize <- mem[tbf93] U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(52,5))
# Assign { target: Ident("stack_count_usize"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("stack", "first_free") }
# PtrFieldDeref("stack", "first_free")
# 006ee Load32 [Register(0x4c), Register(0x4c)]
#       stack_count_usize <- mem[tbf93] U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
22 4c 4c 

# stack_count <- stack_count_usize[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(53,5))
# Assign { target: Ident("stack_count"), var_type: Some(Number(U8)), value: Index("stack_count_usize", Number(U8, 0)) }
# Index("stack_count_usize", Number(U8, 0))
# 006f1 Copy8 [Register(0x4c), Register(0x6e)]
#       stack_count <- stack_count_usize[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(53,5))
#       Assign { target: Ident("stack_count"), var_type: Some(Number(U8)), value: Index("stack_count_usize", Number(U8, 0)) }
#       Index("stack_count_usize", Number(U8, 0))
0b 4c 6e 

# t4671 <- stack_needed U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# Ident("stack_needed")
# 006f4 Copy8 [Register(0x74), Register(0x75)]
#       t4671 <- stack_needed U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
#       Ident("stack_needed")
0b 74 75 

# t6001 <- stack_count U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# Ident("stack_count")
# 006f7 Copy8 [Register(0x6e), Register(0x64)]
#       t6001 <- stack_count U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
#       Ident("stack_count")
0b 6e 64 

# if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# 006fa Cmp8 [Register(0x75), Register(0x64)]
#       if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
15 75 64 

# 006fd JcImm [Label24(RpnCalc_handle_if_else_0_16)]
#       if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
71 88 07 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_15)], resolved: None }
# :RpnCalc_handle_if_true_0_15 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
# RpnCalc_handle_if_true_0_15
# tb507 <- 0n69/0x45u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 69)] })
# Number(U8, 69)
# 00701 LoadImm8 [Register(0x49), Constant8(0x45=69)]
#       tb507 <- 0n69/0x45u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 69)] })
#       Number(U8, 69)
04 49 45 

# inline_RpnCalc_handle_putc_19_c <- tb507 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 69)] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_19_c <- tb507 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 69)] })\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_19_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 00704 Out0 [Register(0x49)]
#       IoWrite0
68 49 

# inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 00706 Copy8 [Register(0x49), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_19_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 49 00 

# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 00709 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 0070f StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 19 07 00 00 

# 00715 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 00719 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_19_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_19_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_19_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_19_function_end_putc None
# inline_RpnCalc_handle_putc_19_function_end_putc
# t9c38 <- 0n82/0x52u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 82)] })
# Number(U8, 82)
# 0071f LoadImm8 [Register(0x49), Constant8(0x52=82)]
#       t9c38 <- 0n82/0x52u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 82)] })
#       Number(U8, 82)
04 49 52 

# inline_RpnCalc_handle_putc_20_c <- t9c38 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 82)] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_20_c <- t9c38 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 82)] })\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_20_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 00722 Out0 [Register(0x49)]
#       IoWrite0
68 49 

# inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 00724 Copy8 [Register(0x49), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_20_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 49 00 

# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 00727 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 0072d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 37 07 00 00 

# 00733 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 00737 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_20_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_20_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_20_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_20_function_end_putc None
# inline_RpnCalc_handle_putc_20_function_end_putc
# t9c38 <- 0n82/0x52u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 82)] })
# Number(U8, 82)
# 0073d LoadImm8 [Register(0x49), Constant8(0x52=82)]
#       t9c38 <- 0n82/0x52u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 82)] })
#       Number(U8, 82)
04 49 52 

# inline_RpnCalc_handle_putc_21_c <- t9c38 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 82)] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_21_c <- t9c38 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 82)] })\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_21_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 00740 Out0 [Register(0x49)]
#       IoWrite0
68 49 

# inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 00742 Copy8 [Register(0x49), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_21_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 49 00 

# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 00745 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 0074b StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 55 07 00 00 

# 00751 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 00755 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_21_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_21_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_21_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_21_function_end_putc None
# inline_RpnCalc_handle_putc_21_function_end_putc
# td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 0075b LoadImm8 [Register(0x75), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 75 0a 

# inline_RpnCalc_handle_putc_22_c <- td7b5 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# 0075e Copy8 [Register(0x75), Register(0x49)]
#       inline_RpnCalc_handle_putc_22_c <- td7b5 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
0b 75 49 

# inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_22_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 00761 Out0 [Register(0x49)]
#       IoWrite0
68 49 

# inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 00763 Copy8 [Register(0x49), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_22_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 49 00 

# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 00766 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 0076c StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 76 07 00 00 

# 00772 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 00776 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_22_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_22_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_22_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_22_function_end_putc None
# inline_RpnCalc_handle_putc_22_function_end_putc
# tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# Return { value: Some(Number(U8, 1)) }
# Number(U8, 1)
# 0077c LoadImm8 [Register(0x64), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
#       Return { value: Some(Number(U8, 1)) }
#       Number(U8, 1)
04 64 01 

# return Some(tfcd) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# Return { value: Some(Number(U8, 1)) }
# 0077f Copy8 [Register(0x64), Register(0x00)]
#       return Some(tfcd) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
#       Return { value: Some(Number(U8, 1)) }
0b 64 00 

# 00782 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto RpnCalc_handle_if_end_14 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# 00784 JmpImm [Label24(RpnCalc_handle_if_end_14)]
#       goto RpnCalc_handle_if_end_14 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
70 88 07 00 

# :RpnCalc_handle_if_else_0_16 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# RpnCalc_handle_if_else_0_16
# :RpnCalc_handle_if_end_14 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# RpnCalc_handle_if_end_14
# t4671 <- stack_needed U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
# Ident("stack_needed")
# 00788 Copy8 [Register(0x74), Register(0x75)]
#       t4671 <- stack_needed U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
#       Ident("stack_needed")
0b 74 75 

# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
# Number(U8, 0)
# 0078b LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
#       Number(U8, 0)
04 64 00 

# if t4671 > tb36e then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
# 0078e Cmp8 [Register(0x75), Register(0x64)]
#       if t4671 > tb36e then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
15 75 64 

# 00791 JcImm [Label24(RpnCalc_handle_if_else_0_19)]
#       if t4671 > tb36e then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
71 e9 07 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > tb36e then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_18)], resolved: None }
# :RpnCalc_handle_if_true_0_18 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_18
# tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
# Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# Ident("stack")
# 00795 Copy32 [Register(0x70), Register(0x4c)]
#       tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
#       Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
#       Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
#       Ident("stack")
21 70 4c 

# inline_RpnCalc_handle_stack_pop_91_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
# Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# 00798 Copy32 [Register(0x4c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_91_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
#       Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
#       Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
21 4c 3c 

# inline_RpnCalc_handle_stack_pop_91_t4bb9 <- inline_RpnCalc_handle_stack_pop_91_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_91_t4bb9 <- inline_RpnCalc_handle_stack_pop_91_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_91_tc957 <- inline_RpnCalc_handle_stack_pop_91_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 0079b Copy32 [Register(0x3c), Register(0x50)]
#       inline_RpnCalc_handle_stack_pop_91_tc957 <- inline_RpnCalc_handle_stack_pop_91_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 50 

# 0079e AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_91_tc957 <- inline_RpnCalc_handle_stack_pop_91_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 50 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_91_t4bb9 <- inline_RpnCalc_handle_stack_pop_91_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_91_t4bb9 <- inline_RpnCalc_handle_stack_pop_91_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_91_tc957 <- inline_RpnCalc_handle_stack_pop_91_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 007a4 Copy32 [Register(0x3c), Register(0x50)]
#       inline_RpnCalc_handle_stack_pop_91_tc957 <- inline_RpnCalc_handle_stack_pop_91_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 50 

# 007a7 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_91_tc957 <- inline_RpnCalc_handle_stack_pop_91_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 50 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_91_t14ab <- mem[inline_RpnCalc_handle_stack_pop_91_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 007ad Load32 [Register(0x50), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_91_t14ab <- mem[inline_RpnCalc_handle_stack_pop_91_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 50 4c 

# inline_RpnCalc_handle_stack_pop_91_te089 <- inline_RpnCalc_handle_stack_pop_91_t14ab Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 007b0 AddImm32IgnoreCarry [Register(0x4c), Constant32(0xffffffff=4294967295)]
#       inline_RpnCalc_handle_stack_pop_91_te089 <- inline_RpnCalc_handle_stack_pop_91_t14ab Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 4c ff ff ff ff 

# mem[inline_RpnCalc_handle_stack_pop_91_tc957] <- inline_RpnCalc_handle_stack_pop_91_te089 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 007b6 Store32_1 [Register(0x4c), Register(0x50)]
#       mem[inline_RpnCalc_handle_stack_pop_91_tc957] <- inline_RpnCalc_handle_stack_pop_91_te089 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 4c 50 

# 007b9 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_pop_91_tc957] <- inline_RpnCalc_handle_stack_pop_91_te089 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# inline_RpnCalc_handle_stack_pop_91_t587d <- inline_RpnCalc_handle_stack_pop_91_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(12,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_91_t587d <- inline_RpnCalc_handle_stack_pop_91_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(12,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_91_values <- inline_RpnCalc_handle_stack_pop_91_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(12,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 007ba Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_91_values <- inline_RpnCalc_handle_stack_pop_91_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(12,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 3c 4c 

# inline_RpnCalc_handle_stack_pop_91_tf90a <- inline_RpnCalc_handle_stack_pop_91_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 007bd Copy32 [Register(0x4c), Register(0x54)]
#       inline_RpnCalc_handle_stack_pop_91_tf90a <- inline_RpnCalc_handle_stack_pop_91_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 4c 54 

# inline_RpnCalc_handle_stack_pop_91_t4bb9 <- inline_RpnCalc_handle_stack_pop_91_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_91_t4bb9 <- inline_RpnCalc_handle_stack_pop_91_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first_free\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_91_tc957 <- inline_RpnCalc_handle_stack_pop_91_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 007c0 Copy32 [Register(0x3c), Register(0x50)]
#       inline_RpnCalc_handle_stack_pop_91_tc957 <- inline_RpnCalc_handle_stack_pop_91_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 50 

# 007c3 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_91_tc957 <- inline_RpnCalc_handle_stack_pop_91_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 50 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_91_t14ab <- mem[inline_RpnCalc_handle_stack_pop_91_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 007c9 Load32 [Register(0x50), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_91_t14ab <- mem[inline_RpnCalc_handle_stack_pop_91_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 50 4c 

# inline_RpnCalc_handle_stack_pop_91_tf659 <- inline_RpnCalc_handle_stack_pop_91_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 007cc LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_pop_91_tf659 <- inline_RpnCalc_handle_stack_pop_91_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 007d2 Mul8_16 [Register(0x4c), Register(0x00), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_91_tf659 <- inline_RpnCalc_handle_stack_pop_91_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 4c 00 3c 

# 007d6 LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_91_tf659 <- inline_RpnCalc_handle_stack_pop_91_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 3e 00 

# 007d9 LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_91_tf659 <- inline_RpnCalc_handle_stack_pop_91_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 3f 00 

# inline_RpnCalc_handle_stack_pop_91_t100e <- inline_RpnCalc_handle_stack_pop_91_tf90a Add Var(inline_RpnCalc_handle_stack_pop_91_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 007dc ClearCarry []
#       inline_RpnCalc_handle_stack_pop_91_t100e <- inline_RpnCalc_handle_stack_pop_91_tf90a Add Var(inline_RpnCalc_handle_stack_pop_91_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 007dd AddCarry32_1 [Register(0x54), Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_91_t100e <- inline_RpnCalc_handle_stack_pop_91_tf90a Add Var(inline_RpnCalc_handle_stack_pop_91_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 54 3c 3c 

# 007e1 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_pop_91_t100e <- inline_RpnCalc_handle_stack_pop_91_tf90a Add Var(inline_RpnCalc_handle_stack_pop_91_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_stack_pop_91_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_91_t100e] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# 007e2 Load32 [Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_91_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_91_t100e] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
22 3c 3c 

# a <- inline_RpnCalc_handle_stack_pop_91_t8e54 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# optimized away noop copy Instruction { source: "a <- inline_RpnCalc_handle_stack_pop_91_t8e54 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# goto inline_RpnCalc_handle_stack_pop_91_function_end_stack_pop Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_pop_91_function_end_stack_pop Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_pop_91_function_end_stack_pop)], resolved: None }
# :inline_RpnCalc_handle_stack_pop_91_function_end_stack_pop None
# inline_RpnCalc_handle_stack_pop_91_function_end_stack_pop
# goto RpnCalc_handle_if_end_17 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
# 007e5 JmpImm [Label24(RpnCalc_handle_if_end_17)]
#       goto RpnCalc_handle_if_end_17 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
70 e9 07 00 

# :RpnCalc_handle_if_else_0_19 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
# RpnCalc_handle_if_else_0_19
# :RpnCalc_handle_if_end_17 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
# RpnCalc_handle_if_end_17
# t4671 <- stack_needed U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
# Ident("stack_needed")
# 007e9 Copy8 [Register(0x74), Register(0x75)]
#       t4671 <- stack_needed U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
#       Ident("stack_needed")
0b 74 75 

# tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
# Number(U8, 1)
# 007ec LoadImm8 [Register(0x64), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
#       Number(U8, 1)
04 64 01 

# if t4671 > tfcd then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
# 007ef Cmp8 [Register(0x75), Register(0x64)]
#       if t4671 > tfcd then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
15 75 64 

# 007f2 JcImm [Label24(RpnCalc_handle_if_else_0_22)]
#       if t4671 > tfcd then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
71 4a 08 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > tfcd then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }, [Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_21)], resolved: None }
# :RpnCalc_handle_if_true_0_21 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_21
# tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
# Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# Ident("stack")
# 007f6 Copy32 [Register(0x70), Register(0x4c)]
#       tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
#       Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
#       Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
#       Ident("stack")
21 70 4c 

# inline_RpnCalc_handle_stack_pop_92_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
# Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# 007f9 Copy32 [Register(0x4c), Register(0x40)]
#       inline_RpnCalc_handle_stack_pop_92_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
#       Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
#       Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
21 4c 40 

# inline_RpnCalc_handle_stack_pop_92_t4bb9 <- inline_RpnCalc_handle_stack_pop_92_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_92_t4bb9 <- inline_RpnCalc_handle_stack_pop_92_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_92_tc957 <- inline_RpnCalc_handle_stack_pop_92_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 007fc Copy32 [Register(0x40), Register(0x50)]
#       inline_RpnCalc_handle_stack_pop_92_tc957 <- inline_RpnCalc_handle_stack_pop_92_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 50 

# 007ff AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_92_tc957 <- inline_RpnCalc_handle_stack_pop_92_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 50 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_92_t4bb9 <- inline_RpnCalc_handle_stack_pop_92_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_92_t4bb9 <- inline_RpnCalc_handle_stack_pop_92_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_92_tc957 <- inline_RpnCalc_handle_stack_pop_92_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00805 Copy32 [Register(0x40), Register(0x50)]
#       inline_RpnCalc_handle_stack_pop_92_tc957 <- inline_RpnCalc_handle_stack_pop_92_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 50 

# 00808 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_92_tc957 <- inline_RpnCalc_handle_stack_pop_92_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 50 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_92_t14ab <- mem[inline_RpnCalc_handle_stack_pop_92_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 0080e Load32 [Register(0x50), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_92_t14ab <- mem[inline_RpnCalc_handle_stack_pop_92_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 50 4c 

# inline_RpnCalc_handle_stack_pop_92_te089 <- inline_RpnCalc_handle_stack_pop_92_t14ab Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 00811 AddImm32IgnoreCarry [Register(0x4c), Constant32(0xffffffff=4294967295)]
#       inline_RpnCalc_handle_stack_pop_92_te089 <- inline_RpnCalc_handle_stack_pop_92_t14ab Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 4c ff ff ff ff 

# mem[inline_RpnCalc_handle_stack_pop_92_tc957] <- inline_RpnCalc_handle_stack_pop_92_te089 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 00817 Store32_1 [Register(0x4c), Register(0x50)]
#       mem[inline_RpnCalc_handle_stack_pop_92_tc957] <- inline_RpnCalc_handle_stack_pop_92_te089 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 4c 50 

# 0081a Store32_2 []
#       mem[inline_RpnCalc_handle_stack_pop_92_tc957] <- inline_RpnCalc_handle_stack_pop_92_te089 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# inline_RpnCalc_handle_stack_pop_92_t587d <- inline_RpnCalc_handle_stack_pop_92_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(12,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_92_t587d <- inline_RpnCalc_handle_stack_pop_92_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(12,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_92_values <- inline_RpnCalc_handle_stack_pop_92_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(12,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 0081b Copy32 [Register(0x40), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_92_values <- inline_RpnCalc_handle_stack_pop_92_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(12,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 40 4c 

# inline_RpnCalc_handle_stack_pop_92_tf90a <- inline_RpnCalc_handle_stack_pop_92_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 0081e Copy32 [Register(0x4c), Register(0x54)]
#       inline_RpnCalc_handle_stack_pop_92_tf90a <- inline_RpnCalc_handle_stack_pop_92_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 4c 54 

# inline_RpnCalc_handle_stack_pop_92_t4bb9 <- inline_RpnCalc_handle_stack_pop_92_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_92_t4bb9 <- inline_RpnCalc_handle_stack_pop_92_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first_free\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_92_tc957 <- inline_RpnCalc_handle_stack_pop_92_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00821 Copy32 [Register(0x40), Register(0x50)]
#       inline_RpnCalc_handle_stack_pop_92_tc957 <- inline_RpnCalc_handle_stack_pop_92_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 50 

# 00824 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_92_tc957 <- inline_RpnCalc_handle_stack_pop_92_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 50 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_92_t14ab <- mem[inline_RpnCalc_handle_stack_pop_92_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 0082a Load32 [Register(0x50), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_92_t14ab <- mem[inline_RpnCalc_handle_stack_pop_92_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 50 4c 

# inline_RpnCalc_handle_stack_pop_92_tf659 <- inline_RpnCalc_handle_stack_pop_92_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 0082d LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_pop_92_tf659 <- inline_RpnCalc_handle_stack_pop_92_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 00833 Mul8_16 [Register(0x4c), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_pop_92_tf659 <- inline_RpnCalc_handle_stack_pop_92_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 4c 00 40 

# 00837 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_92_tf659 <- inline_RpnCalc_handle_stack_pop_92_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 42 00 

# 0083a LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_92_tf659 <- inline_RpnCalc_handle_stack_pop_92_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 43 00 

# inline_RpnCalc_handle_stack_pop_92_t100e <- inline_RpnCalc_handle_stack_pop_92_tf90a Add Var(inline_RpnCalc_handle_stack_pop_92_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 0083d ClearCarry []
#       inline_RpnCalc_handle_stack_pop_92_t100e <- inline_RpnCalc_handle_stack_pop_92_tf90a Add Var(inline_RpnCalc_handle_stack_pop_92_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 0083e AddCarry32_1 [Register(0x54), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_pop_92_t100e <- inline_RpnCalc_handle_stack_pop_92_tf90a Add Var(inline_RpnCalc_handle_stack_pop_92_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 54 40 40 

# 00842 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_pop_92_t100e <- inline_RpnCalc_handle_stack_pop_92_tf90a Add Var(inline_RpnCalc_handle_stack_pop_92_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_stack_pop_92_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_92_t100e] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# 00843 Load32 [Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_pop_92_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_92_t100e] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
22 40 40 

# b <- inline_RpnCalc_handle_stack_pop_92_t8e54 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# optimized away noop copy Instruction { source: "b <- inline_RpnCalc_handle_stack_pop_92_t8e54 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# goto inline_RpnCalc_handle_stack_pop_92_function_end_stack_pop Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_pop_92_function_end_stack_pop Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_pop_92_function_end_stack_pop)], resolved: None }
# :inline_RpnCalc_handle_stack_pop_92_function_end_stack_pop None
# inline_RpnCalc_handle_stack_pop_92_function_end_stack_pop
# goto RpnCalc_handle_if_end_20 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
# 00846 JmpImm [Label24(RpnCalc_handle_if_end_20)]
#       goto RpnCalc_handle_if_end_20 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
70 4a 08 00 

# :RpnCalc_handle_if_else_0_22 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
# RpnCalc_handle_if_else_0_22
# :RpnCalc_handle_if_end_20 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
# RpnCalc_handle_if_end_20
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }, [Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t2597 <- 0n43/0x2bu8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
# Number(U8, 43)
# 0084a LoadImm8 [Register(0x75), Constant8(0x2b=43)]
#       t2597 <- 0n43/0x2bu8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
#       Number(U8, 43)
04 75 2b 

# if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
# 0084d Cmp8 [Register(0x48), Register(0x75)]
#       if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
15 48 75 

# 00850 JzImm [Label24(RpnCalc_handle_if_true_0_24)]
#       if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
72 58 08 00 

# 00854 JmpImm [Label24(RpnCalc_handle_if_else_0_25)]
#       if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
70 20 09 00 

# :RpnCalc_handle_if_true_0_24 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
# RpnCalc_handle_if_true_0_24
# tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# 00858 Copy32 [Register(0x40), Register(0x44)]
#       tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
#       Ident("b")
21 40 44 

# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# 0085b Copy32 [Register(0x3c), Register(0x68)]
#       t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
#       Ident("a")
21 3c 68 

# sum <- tace9 Add Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 0085e ClearCarry []
#       sum <- tace9 Add Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 

# 0085f AddCarry32_1 [Register(0x44), Register(0x68), Register(0x40)]
#       sum <- tace9 Add Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 44 68 40 

# 00863 AddCarry32_2 []
#       sum <- tace9 Add Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 

# t670d <- sum U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
# Ident("sum")
# 00864 Copy32 [Register(0x40), Register(0x3c)]
#       t670d <- sum U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
#       Ident("sum")
21 40 3c 

# None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
# 00867 Copy32 [Register(0x3c), Register(0x00)]
#       Arg0[a]=t670d None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
21 3c 00 

# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [108, 109, 110, 112, 113, 114, 115, 116, 117]
# 0086a Push8 [Register(0x75)]
#       Saving reg0x75 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 75 

# 0086c Push8 [Register(0x74)]
#       Saving reg0x74 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 74 

# 0086e Push8 [Register(0x73)]
#       Saving reg0x73 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 73 

# 00870 Push8 [Register(0x72)]
#       Saving reg0x72 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 72 

# 00872 Push8 [Register(0x71)]
#       Saving reg0x71 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 71 

# 00874 Push8 [Register(0x70)]
#       Saving reg0x70 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 70 

# 00876 Push8 [Register(0x6e)]
#       Saving reg0x6e before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 6e 

# 00878 Push8 [Register(0x6d)]
#       Saving reg0x6d before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 6d 

# 0087a Push8 [Register(0x6c)]
#       Saving reg0x6c before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 6c 

# 0087c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 00882 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 8c 08 00 00 

# 00888 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 fa 2f 00 

# 0088c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 00892 Pop8 [Register(0x6c)]
#       Restoring reg0x6c after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 6c 

# 00894 Pop8 [Register(0x6d)]
#       Restoring reg0x6d after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 6d 

# 00896 Pop8 [Register(0x6e)]
#       Restoring reg0x6e after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 6e 

# 00898 Pop8 [Register(0x70)]
#       Restoring reg0x70 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 70 

# 0089a Pop8 [Register(0x71)]
#       Restoring reg0x71 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 71 

# 0089c Pop8 [Register(0x72)]
#       Restoring reg0x72 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 72 

# 0089e Pop8 [Register(0x73)]
#       Restoring reg0x73 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 73 

# 008a0 Pop8 [Register(0x74)]
#       Restoring reg0x74 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 74 

# 008a2 Pop8 [Register(0x75)]
#       Restoring reg0x75 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 75 

# td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 008a4 LoadImm8 [Register(0x75), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 75 0a 

# inline_RpnCalc_handle_putc_23_c <- td7b5 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# 008a7 Copy8 [Register(0x75), Register(0x49)]
#       inline_RpnCalc_handle_putc_23_c <- td7b5 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
0b 75 49 

# inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_23_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 008aa Out0 [Register(0x49)]
#       IoWrite0
68 49 

# inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 008ac Copy8 [Register(0x49), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_23_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 49 00 

# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 008af AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 008b5 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c bf 08 00 00 

# 008bb JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 008bf AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_23_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_23_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_23_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_23_function_end_putc None
# inline_RpnCalc_handle_putc_23_function_end_putc
# tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# Ident("stack")
# 008c5 Copy32 [Register(0x70), Register(0x4c)]
#       tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
#       Ident("stack")
21 70 4c 

# t670d <- sum U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# Ident("sum")
# 008c8 Copy32 [Register(0x40), Register(0x3c)]
#       t670d <- sum U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
#       Ident("sum")
21 40 3c 

# inline_RpnCalc_handle_stack_push_93_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# 008cb Copy32 [Register(0x4c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_93_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
21 4c 40 

# inline_RpnCalc_handle_stack_push_93_n <- t670d U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_93_n <- t670d U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_93_t587d <- inline_RpnCalc_handle_stack_push_93_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_93_t587d <- inline_RpnCalc_handle_stack_push_93_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_93_values <- inline_RpnCalc_handle_stack_push_93_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 008ce Copy32 [Register(0x40), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_93_values <- inline_RpnCalc_handle_stack_push_93_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 40 44 

# inline_RpnCalc_handle_stack_push_93_tf90a <- inline_RpnCalc_handle_stack_push_93_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 008d1 Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_93_tf90a <- inline_RpnCalc_handle_stack_push_93_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 44 4c 

# inline_RpnCalc_handle_stack_push_93_t4bb9 <- inline_RpnCalc_handle_stack_push_93_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_93_t4bb9 <- inline_RpnCalc_handle_stack_push_93_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_93_tc957 <- inline_RpnCalc_handle_stack_push_93_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 008d4 Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_93_tc957 <- inline_RpnCalc_handle_stack_push_93_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 

# 008d7 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_93_tc957 <- inline_RpnCalc_handle_stack_push_93_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 

# inline_RpnCalc_handle_stack_push_93_t14ab <- mem[inline_RpnCalc_handle_stack_push_93_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 008dd Load32 [Register(0x68), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_93_t14ab <- mem[inline_RpnCalc_handle_stack_push_93_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 68 44 

# inline_RpnCalc_handle_stack_push_93_tf659 <- inline_RpnCalc_handle_stack_push_93_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 008e0 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_93_tf659 <- inline_RpnCalc_handle_stack_push_93_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 008e6 Mul8_16 [Register(0x44), Register(0x00), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_93_tf659 <- inline_RpnCalc_handle_stack_push_93_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 44 00 44 

# 008ea LoadImm8 [Register(0x46), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_93_tf659 <- inline_RpnCalc_handle_stack_push_93_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 46 00 

# 008ed LoadImm8 [Register(0x47), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_93_tf659 <- inline_RpnCalc_handle_stack_push_93_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 47 00 

# inline_RpnCalc_handle_stack_push_93_t100e <- inline_RpnCalc_handle_stack_push_93_tf90a Add Var(inline_RpnCalc_handle_stack_push_93_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 008f0 ClearCarry []
#       inline_RpnCalc_handle_stack_push_93_t100e <- inline_RpnCalc_handle_stack_push_93_tf90a Add Var(inline_RpnCalc_handle_stack_push_93_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 008f1 AddCarry32_1 [Register(0x4c), Register(0x44), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_93_t100e <- inline_RpnCalc_handle_stack_push_93_tf90a Add Var(inline_RpnCalc_handle_stack_push_93_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 4c 44 44 

# 008f5 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_93_t100e <- inline_RpnCalc_handle_stack_push_93_tf90a Add Var(inline_RpnCalc_handle_stack_push_93_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_stack_push_93_t531d <- inline_RpnCalc_handle_stack_push_93_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_93_t531d <- inline_RpnCalc_handle_stack_push_93_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_93_t100e] <- inline_RpnCalc_handle_stack_push_93_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 008f6 Store32_1 [Register(0x3c), Register(0x44)]
#       mem[inline_RpnCalc_handle_stack_push_93_t100e] <- inline_RpnCalc_handle_stack_push_93_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 3c 44 

# 008f9 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_93_t100e] <- inline_RpnCalc_handle_stack_push_93_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_93_t4bb9 <- inline_RpnCalc_handle_stack_push_93_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_93_t4bb9 <- inline_RpnCalc_handle_stack_push_93_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_93_tc957 <- inline_RpnCalc_handle_stack_push_93_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 008fa Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_93_tc957 <- inline_RpnCalc_handle_stack_push_93_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 

# 008fd AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_93_tc957 <- inline_RpnCalc_handle_stack_push_93_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 

# inline_RpnCalc_handle_stack_push_93_t4bb9 <- inline_RpnCalc_handle_stack_push_93_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_93_t4bb9 <- inline_RpnCalc_handle_stack_push_93_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_93_tc957 <- inline_RpnCalc_handle_stack_push_93_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00903 Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_93_tc957 <- inline_RpnCalc_handle_stack_push_93_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 

# 00906 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_93_tc957 <- inline_RpnCalc_handle_stack_push_93_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 

# inline_RpnCalc_handle_stack_push_93_t14ab <- mem[inline_RpnCalc_handle_stack_push_93_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 0090c Load32 [Register(0x68), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_93_t14ab <- mem[inline_RpnCalc_handle_stack_push_93_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 68 44 

# inline_RpnCalc_handle_stack_push_93_td757 <- inline_RpnCalc_handle_stack_push_93_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 0090f Copy32 [Register(0x44), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_93_td757 <- inline_RpnCalc_handle_stack_push_93_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 44 3c 

# 00912 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_93_td757 <- inline_RpnCalc_handle_stack_push_93_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 3c 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_93_tc957] <- inline_RpnCalc_handle_stack_push_93_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 00918 Store32_1 [Register(0x3c), Register(0x68)]
#       mem[inline_RpnCalc_handle_stack_push_93_tc957] <- inline_RpnCalc_handle_stack_push_93_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 3c 68 

# 0091b Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_93_tc957] <- inline_RpnCalc_handle_stack_push_93_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_stack_push_93_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_93_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_93_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_93_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_93_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# 0091c JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
70 36 12 00 

# :RpnCalc_handle_if_else_0_25 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_0_25
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t8b2f <- 0n45/0x2du8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
# Number(U8, 45)
# 00920 LoadImm8 [Register(0x75), Constant8(0x2d=45)]
#       t8b2f <- 0n45/0x2du8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
#       Number(U8, 45)
04 75 2d 

# if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
# 00923 Cmp8 [Register(0x48), Register(0x75)]
#       if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
15 48 75 

# 00926 JzImm [Label24(RpnCalc_handle_if_true_1_26)]
#       if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
72 2e 09 00 

# 0092a JmpImm [Label24(RpnCalc_handle_if_else_1_27)]
#       if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
70 01 0a 00 

# :RpnCalc_handle_if_true_1_26 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_1_26
# tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# Ident("b")
# 0092e Copy32 [Register(0x40), Register(0x44)]
#       tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
#       Ident("b")
21 40 44 

# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# Ident("a")
# 00931 Copy32 [Register(0x3c), Register(0x68)]
#       t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
#       Ident("a")
21 3c 68 

# diff <- tace9 Subtract Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# 00934 Copy32 [Register(0x68), Register(0x00)]
#       diff <- tace9 Subtract Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
21 68 00 

# 00937 Invert8 [Register(0x00)]
#       diff <- tace9 Subtract Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 00 

# 00939 Invert8 [Register(0x01)]
#       diff <- tace9 Subtract Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 01 

# 0093b Invert8 [Register(0x02)]
#       diff <- tace9 Subtract Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 02 

# 0093d Invert8 [Register(0x03)]
#       diff <- tace9 Subtract Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 03 

# 0093f AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       diff <- tace9 Subtract Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
32 00 01 00 00 00 

# 00945 ClearCarry []
#       diff <- tace9 Subtract Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
03 

# 00946 AddCarry32_1 [Register(0x44), Register(0x00), Register(0x3c)]
#       diff <- tace9 Subtract Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
30 44 00 3c 

# 0094a AddCarry32_2 []
#       diff <- tace9 Subtract Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
31 

# t17ee <- diff U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
# Ident("diff")
# optimized away noop copy Instruction { source: "t17ee <- diff U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }\nCall(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] })\nIdent(\"diff\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
# 0094b Copy32 [Register(0x3c), Register(0x00)]
#       Arg0[a]=t17ee None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
21 3c 00 

# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [108, 109, 110, 112, 113, 114, 115, 116, 117]
# 0094e Push8 [Register(0x75)]
#       Saving reg0x75 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 75 

# 00950 Push8 [Register(0x74)]
#       Saving reg0x74 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 74 

# 00952 Push8 [Register(0x73)]
#       Saving reg0x73 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 73 

# 00954 Push8 [Register(0x72)]
#       Saving reg0x72 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 72 

# 00956 Push8 [Register(0x71)]
#       Saving reg0x71 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 71 

# 00958 Push8 [Register(0x70)]
#       Saving reg0x70 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 70 

# 0095a Push8 [Register(0x6e)]
#       Saving reg0x6e before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 6e 

# 0095c Push8 [Register(0x6d)]
#       Saving reg0x6d before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 6d 

# 0095e Push8 [Register(0x6c)]
#       Saving reg0x6c before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 6c 

# 00960 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 00966 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 70 09 00 00 

# 0096c JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 fa 2f 00 

# 00970 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 00976 Pop8 [Register(0x6c)]
#       Restoring reg0x6c after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 6c 

# 00978 Pop8 [Register(0x6d)]
#       Restoring reg0x6d after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 6d 

# 0097a Pop8 [Register(0x6e)]
#       Restoring reg0x6e after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 6e 

# 0097c Pop8 [Register(0x70)]
#       Restoring reg0x70 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 70 

# 0097e Pop8 [Register(0x71)]
#       Restoring reg0x71 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 71 

# 00980 Pop8 [Register(0x72)]
#       Restoring reg0x72 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 72 

# 00982 Pop8 [Register(0x73)]
#       Restoring reg0x73 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 73 

# 00984 Pop8 [Register(0x74)]
#       Restoring reg0x74 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 74 

# 00986 Pop8 [Register(0x75)]
#       Restoring reg0x75 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 75 

# td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 00988 LoadImm8 [Register(0x75), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 75 0a 

# inline_RpnCalc_handle_putc_24_c <- td7b5 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# 0098b Copy8 [Register(0x75), Register(0x6c)]
#       inline_RpnCalc_handle_putc_24_c <- td7b5 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
0b 75 6c 

# inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x6c), Register(0x6c)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_24_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 0098e Out0 [Register(0x6c)]
#       IoWrite0
68 6c 

# inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x6c), Register(0x6c)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 00990 Copy8 [Register(0x6c), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_24_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 6c 00 

# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 00993 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 00999 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c a3 09 00 00 

# 0099f JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 009a3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_24_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_24_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_24_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_24_function_end_putc None
# inline_RpnCalc_handle_putc_24_function_end_putc
# tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# Ident("stack")
# 009a9 Copy32 [Register(0x70), Register(0x4c)]
#       tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
#       Ident("stack")
21 70 4c 

# t17ee <- diff U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# Ident("diff")
# optimized away noop copy Instruction { source: "t17ee <- diff U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })\nIdent(\"diff\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_94_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# 009ac Copy32 [Register(0x4c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_94_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
21 4c 40 

# inline_RpnCalc_handle_stack_push_94_n <- t17ee U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_94_n <- t17ee U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_94_t587d <- inline_RpnCalc_handle_stack_push_94_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_94_t587d <- inline_RpnCalc_handle_stack_push_94_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_94_values <- inline_RpnCalc_handle_stack_push_94_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 009af Copy32 [Register(0x40), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_94_values <- inline_RpnCalc_handle_stack_push_94_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 40 44 

# inline_RpnCalc_handle_stack_push_94_tf90a <- inline_RpnCalc_handle_stack_push_94_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 009b2 Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_94_tf90a <- inline_RpnCalc_handle_stack_push_94_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 44 4c 

# inline_RpnCalc_handle_stack_push_94_t4bb9 <- inline_RpnCalc_handle_stack_push_94_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_94_t4bb9 <- inline_RpnCalc_handle_stack_push_94_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_94_tc957 <- inline_RpnCalc_handle_stack_push_94_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 009b5 Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_94_tc957 <- inline_RpnCalc_handle_stack_push_94_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 

# 009b8 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_94_tc957 <- inline_RpnCalc_handle_stack_push_94_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 

# inline_RpnCalc_handle_stack_push_94_t14ab <- mem[inline_RpnCalc_handle_stack_push_94_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 009be Load32 [Register(0x68), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_94_t14ab <- mem[inline_RpnCalc_handle_stack_push_94_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 68 44 

# inline_RpnCalc_handle_stack_push_94_tf659 <- inline_RpnCalc_handle_stack_push_94_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 009c1 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_94_tf659 <- inline_RpnCalc_handle_stack_push_94_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 009c7 Mul8_16 [Register(0x44), Register(0x00), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_94_tf659 <- inline_RpnCalc_handle_stack_push_94_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 44 00 44 

# 009cb LoadImm8 [Register(0x46), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_94_tf659 <- inline_RpnCalc_handle_stack_push_94_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 46 00 

# 009ce LoadImm8 [Register(0x47), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_94_tf659 <- inline_RpnCalc_handle_stack_push_94_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 47 00 

# inline_RpnCalc_handle_stack_push_94_t100e <- inline_RpnCalc_handle_stack_push_94_tf90a Add Var(inline_RpnCalc_handle_stack_push_94_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 009d1 ClearCarry []
#       inline_RpnCalc_handle_stack_push_94_t100e <- inline_RpnCalc_handle_stack_push_94_tf90a Add Var(inline_RpnCalc_handle_stack_push_94_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 009d2 AddCarry32_1 [Register(0x4c), Register(0x44), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_94_t100e <- inline_RpnCalc_handle_stack_push_94_tf90a Add Var(inline_RpnCalc_handle_stack_push_94_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 4c 44 44 

# 009d6 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_94_t100e <- inline_RpnCalc_handle_stack_push_94_tf90a Add Var(inline_RpnCalc_handle_stack_push_94_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_stack_push_94_t531d <- inline_RpnCalc_handle_stack_push_94_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_94_t531d <- inline_RpnCalc_handle_stack_push_94_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_94_t100e] <- inline_RpnCalc_handle_stack_push_94_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 009d7 Store32_1 [Register(0x3c), Register(0x44)]
#       mem[inline_RpnCalc_handle_stack_push_94_t100e] <- inline_RpnCalc_handle_stack_push_94_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 3c 44 

# 009da Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_94_t100e] <- inline_RpnCalc_handle_stack_push_94_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_94_t4bb9 <- inline_RpnCalc_handle_stack_push_94_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_94_t4bb9 <- inline_RpnCalc_handle_stack_push_94_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_94_tc957 <- inline_RpnCalc_handle_stack_push_94_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 009db Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_94_tc957 <- inline_RpnCalc_handle_stack_push_94_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 

# 009de AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_94_tc957 <- inline_RpnCalc_handle_stack_push_94_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 

# inline_RpnCalc_handle_stack_push_94_t4bb9 <- inline_RpnCalc_handle_stack_push_94_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_94_t4bb9 <- inline_RpnCalc_handle_stack_push_94_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_94_tc957 <- inline_RpnCalc_handle_stack_push_94_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 009e4 Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_94_tc957 <- inline_RpnCalc_handle_stack_push_94_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 

# 009e7 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_94_tc957 <- inline_RpnCalc_handle_stack_push_94_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 

# inline_RpnCalc_handle_stack_push_94_t14ab <- mem[inline_RpnCalc_handle_stack_push_94_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 009ed Load32 [Register(0x68), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_94_t14ab <- mem[inline_RpnCalc_handle_stack_push_94_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 68 44 

# inline_RpnCalc_handle_stack_push_94_td757 <- inline_RpnCalc_handle_stack_push_94_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 009f0 Copy32 [Register(0x44), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_94_td757 <- inline_RpnCalc_handle_stack_push_94_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 44 3c 

# 009f3 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_94_td757 <- inline_RpnCalc_handle_stack_push_94_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 3c 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_94_tc957] <- inline_RpnCalc_handle_stack_push_94_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 009f9 Store32_1 [Register(0x3c), Register(0x68)]
#       mem[inline_RpnCalc_handle_stack_push_94_tc957] <- inline_RpnCalc_handle_stack_push_94_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 3c 68 

# 009fc Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_94_tc957] <- inline_RpnCalc_handle_stack_push_94_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_stack_push_94_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_94_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_94_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_94_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_94_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# 009fd JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
70 36 12 00 

# :RpnCalc_handle_if_else_1_27 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_1_27
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t969e <- 0n42/0x2au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
# Number(U8, 42)
# 00a01 LoadImm8 [Register(0x75), Constant8(0x2a=42)]
#       t969e <- 0n42/0x2au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
#       Number(U8, 42)
04 75 2a 

# if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
# 00a04 Cmp8 [Register(0x48), Register(0x75)]
#       if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
15 48 75 

# 00a07 JzImm [Label24(RpnCalc_handle_if_true_2_28)]
#       if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
72 0f 0a 00 

# 00a0b JmpImm [Label24(RpnCalc_handle_if_else_2_29)]
#       if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
70 14 0d 00 

# :RpnCalc_handle_if_true_2_28 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_2_28
# tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# Ident("b")
# 00a0f Copy32 [Register(0x40), Register(0x44)]
#       tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
#       Ident("b")
21 40 44 

# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# Ident("a")
# 00a12 Copy32 [Register(0x3c), Register(0x68)]
#       t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
#       Ident("a")
21 3c 68 

# inline_RpnCalc_handle_mul32_32_12_a <- tace9 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# 00a15 Copy32 [Register(0x44), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_a <- tace9 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
21 44 3c 

# inline_RpnCalc_handle_mul32_32_12_b <- t8792 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# 00a18 Copy32 [Register(0x68), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_b <- t8792 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
21 68 44 

# inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(30,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(30,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 00a1b Copy32 [Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(30,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 3c 40 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 00a1e Copy32 [Register(0x44), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(30,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 44 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 00a21 Mul8_16 [Register(0x40), Register(0x68), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 40 68 4c 

# 00a25 LoadImm8 [Register(0x4e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4e 00 

# 00a28 LoadImm8 [Register(0x4f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 00a2b Copy8 [Register(0x41), Register(0x6c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 41 6c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 00a2e LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 54 00 00 00 00 

# 00a34 Copy8 [Register(0x6c), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 6c 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 00a37 Copy8 [Register(0x69), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 69 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 00a3a LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 50 00 00 00 00 

# 00a40 Copy8 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 48 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 00a43 Mul8_16 [Register(0x54), Register(0x50), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 54 50 50 

# 00a47 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 52 00 

# 00a4a LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 53 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 00a4d Copy8 [Register(0x51), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 51 64 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 00a50 Copy8 [Register(0x64), Register(0x53)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 64 53 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 00a53 Copy8 [Register(0x50), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 50 64 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 00a56 Copy8 [Register(0x64), Register(0x52)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 64 52 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00a59 LoadImm8 [Register(0x65), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 65 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 00a5c Copy8 [Register(0x65), Register(0x51)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 65 51 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00a5f LoadImm8 [Register(0x65), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 65 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 00a62 Copy8 [Register(0x65), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 65 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 00a65 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 00a66 AddCarry32_1 [Register(0x4c), Register(0x50), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 4c 50 4c 

# 00a6a AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 00a6b Copy8 [Register(0x69), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 69 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 00a6e LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 50 00 00 00 00 

# 00a74 Copy8 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 48 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 00a77 Mul8_16 [Register(0x40), Register(0x50), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 40 50 50 

# 00a7b LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 52 00 

# 00a7e LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 53 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 00a81 Copy8 [Register(0x41), Register(0x6c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 41 6c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 00a84 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 54 00 00 00 00 

# 00a8a Copy8 [Register(0x6c), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 6c 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 00a8d Mul8_16 [Register(0x54), Register(0x68), Register(0x40)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 54 68 40 

# 00a91 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 42 00 

# 00a94 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 43 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 00a97 Copy32 [Register(0x50), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 50 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 00a9a ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 00a9b AddCarry32_1 [Register(0x68), Register(0x40), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 68 40 50 

# 00a9f AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 00aa0 Copy8 [Register(0x52), Register(0x6c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 52 6c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 00aa3 Copy8 [Register(0x6c), Register(0x53)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 6c 53 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 00aa6 Copy8 [Register(0x51), Register(0x6c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 51 6c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 00aa9 Copy8 [Register(0x6c), Register(0x52)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 6c 52 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 00aac Copy8 [Register(0x50), Register(0x6c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 50 6c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 00aaf Copy8 [Register(0x6c), Register(0x51)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 6c 51 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00ab2 LoadImm8 [Register(0x65), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 65 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 00ab5 Copy8 [Register(0x65), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 65 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 00ab8 Copy32 [Register(0x50), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 50 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 00abb ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 00abc AddCarry32_1 [Register(0x4c), Register(0x68), Register(0x40)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 4c 68 40 

# 00ac0 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_RpnCalc_handle_mul32_32_12_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 00ac1 Copy32 [Register(0x40), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 40 4c 

# goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32 None
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_a_hi <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/mul.j':(32,5))
# Assign { target: Ident("a_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 00ac4 LoadImm32 [Register(0x40), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/mul.j':(32,5))
#       Assign { target: Ident("a_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 40 00 00 00 00 

# inline_RpnCalc_handle_mul32_32_12_t5b7c <- inline_RpnCalc_handle_mul32_32_12_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(33,5))
# Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
# Index("a", Number(U8, 3))
# 00aca Copy8 [Register(0x3f), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_t5b7c <- inline_RpnCalc_handle_mul32_32_12_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(33,5))
#       Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
#       Index("a", Number(U8, 3))
0b 3f 49 

# inline_RpnCalc_handle_mul32_32_12_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t5b7c U8 Some('/home/john/lutcomp/programs/lib/mul.j':(33,5))
# Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
# 00acd Copy8 [Register(0x49), Register(0x41)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t5b7c U8 Some('/home/john/lutcomp/programs/lib/mul.j':(33,5))
#       Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
0b 49 41 

# inline_RpnCalc_handle_mul32_32_12_t577f <- inline_RpnCalc_handle_mul32_32_12_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(34,5))
# Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
# Index("a", Number(U8, 2))
# 00ad0 Copy8 [Register(0x3e), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_t577f <- inline_RpnCalc_handle_mul32_32_12_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(34,5))
#       Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
#       Index("a", Number(U8, 2))
0b 3e 49 

# inline_RpnCalc_handle_mul32_32_12_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t577f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(34,5))
# Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
# 00ad3 Copy8 [Register(0x49), Register(0x40)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t577f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(34,5))
#       Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
0b 49 40 

# inline_RpnCalc_handle_mul32_32_12_b_hi <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/mul.j':(36,5))
# Assign { target: Ident("b_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 00ad6 LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/mul.j':(36,5))
#       Assign { target: Ident("b_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 68 00 00 00 00 

# inline_RpnCalc_handle_mul32_32_12_t9829 <- inline_RpnCalc_handle_mul32_32_12_b[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(37,5))
# Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
# Index("b", Number(U8, 3))
# 00adc Copy8 [Register(0x47), Register(0x6d)]
#       inline_RpnCalc_handle_mul32_32_12_t9829 <- inline_RpnCalc_handle_mul32_32_12_b[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(37,5))
#       Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
#       Index("b", Number(U8, 3))
0b 47 6d 

# inline_RpnCalc_handle_mul32_32_12_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t9829 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(37,5))
# Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
# 00adf Copy8 [Register(0x6d), Register(0x69)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t9829 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(37,5))
#       Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
0b 6d 69 

# inline_RpnCalc_handle_mul32_32_12_t811a <- inline_RpnCalc_handle_mul32_32_12_b[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(38,5))
# Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
# Index("b", Number(U8, 2))
# 00ae2 Copy8 [Register(0x46), Register(0x6d)]
#       inline_RpnCalc_handle_mul32_32_12_t811a <- inline_RpnCalc_handle_mul32_32_12_b[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(38,5))
#       Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
#       Index("b", Number(U8, 2))
0b 46 6d 

# inline_RpnCalc_handle_mul32_32_12_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t811a U8 Some('/home/john/lutcomp/programs/lib/mul.j':(38,5))
# Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
# 00ae5 Copy8 [Register(0x6d), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t811a U8 Some('/home/john/lutcomp/programs/lib/mul.j':(38,5))
#       Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
0b 6d 68 

# inline_RpnCalc_handle_mul32_32_12_t8fbd <- inline_RpnCalc_handle_mul32_32_12_a_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8fbd <- inline_RpnCalc_handle_mul32_32_12_a_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a <- inline_RpnCalc_handle_mul32_32_12_t8fbd U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a <- inline_RpnCalc_handle_mul32_32_12_t8fbd U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 00ae8 Mul8_16 [Register(0x40), Register(0x44), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 40 44 50 

# 00aec LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 52 00 

# 00aef LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 53 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 00af2 Copy8 [Register(0x41), Register(0x6c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 41 6c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 00af5 LoadImm32 [Register(0x58), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 58 00 00 00 00 

# 00afb Copy8 [Register(0x6c), Register(0x58)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 6c 58 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 00afe Copy8 [Register(0x45), Register(0x6d)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 45 6d 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 00b01 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 54 00 00 00 00 

# 00b07 Copy8 [Register(0x6d), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 6d 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 00b0a Mul8_16 [Register(0x58), Register(0x54), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 58 54 54 

# 00b0e LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 56 00 

# 00b11 LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 57 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 00b14 Copy8 [Register(0x55), Register(0x65)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 55 65 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 00b17 Copy8 [Register(0x65), Register(0x57)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 65 57 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 00b1a Copy8 [Register(0x54), Register(0x65)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 54 65 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 00b1d Copy8 [Register(0x65), Register(0x56)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 65 56 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00b20 LoadImm8 [Register(0x6e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 6e 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 00b23 Copy8 [Register(0x6e), Register(0x55)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 6e 55 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00b26 LoadImm8 [Register(0x6e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 6e 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 00b29 Copy8 [Register(0x6e), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 6e 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 00b2c ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 00b2d AddCarry32_1 [Register(0x50), Register(0x54), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 50 54 50 

# 00b31 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 00b32 Copy8 [Register(0x45), Register(0x6d)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 45 6d 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 00b35 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 54 00 00 00 00 

# 00b3b Copy8 [Register(0x6d), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 6d 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 00b3e Mul8_16 [Register(0x40), Register(0x54), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 40 54 54 

# 00b42 LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 56 00 

# 00b45 LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 57 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 00b48 Copy8 [Register(0x41), Register(0x6c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 41 6c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 00b4b LoadImm32 [Register(0x58), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 58 00 00 00 00 

# 00b51 Copy8 [Register(0x6c), Register(0x58)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 6c 58 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 00b54 Mul8_16 [Register(0x58), Register(0x44), Register(0x40)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 58 44 40 

# 00b58 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 42 00 

# 00b5b LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 43 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 00b5e Copy32 [Register(0x54), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 54 44 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 00b61 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 00b62 AddCarry32_1 [Register(0x44), Register(0x40), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 44 40 54 

# 00b66 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 00b67 Copy8 [Register(0x56), Register(0x6c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 56 6c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 00b6a Copy8 [Register(0x6c), Register(0x57)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 6c 57 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 00b6d Copy8 [Register(0x55), Register(0x6c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 55 6c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 00b70 Copy8 [Register(0x6c), Register(0x56)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 6c 56 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 00b73 Copy8 [Register(0x54), Register(0x6c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 54 6c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 00b76 Copy8 [Register(0x6c), Register(0x55)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 6c 55 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00b79 LoadImm8 [Register(0x6e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 6e 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 00b7c Copy8 [Register(0x6e), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 6e 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 00b7f Copy32 [Register(0x54), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 54 44 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 00b82 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 00b83 AddCarry32_1 [Register(0x50), Register(0x44), Register(0x40)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 50 44 40 

# 00b87 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_RpnCalc_handle_mul32_32_12_t6afc <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 00b88 Copy32 [Register(0x40), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_t6afc <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 40 54 

# goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32 None
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_t5cca <- inline_RpnCalc_handle_mul32_32_12_b_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("b_hi")
# 00b8b Copy32 [Register(0x68), Register(0x40)]
#       inline_RpnCalc_handle_mul32_32_12_t5cca <- inline_RpnCalc_handle_mul32_32_12_b_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
#       Ident("b_hi")
21 68 40 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_12_t5cca U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_12_t5cca U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 00b8e Mul8_16 [Register(0x3c), Register(0x40), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 3c 40 44 

# 00b92 LoadImm8 [Register(0x46), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 46 00 

# 00b95 LoadImm8 [Register(0x47), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 47 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 00b98 Copy8 [Register(0x3d), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 3d 49 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 00b9b LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 50 00 00 00 00 

# 00ba1 Copy8 [Register(0x49), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 49 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 00ba4 Copy8 [Register(0x41), Register(0x6c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 41 6c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 00ba7 LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 68 00 00 00 00 

# 00bad Copy8 [Register(0x6c), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 6c 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 00bb0 Mul8_16 [Register(0x50), Register(0x68), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 50 68 68 

# 00bb4 LoadImm8 [Register(0x6a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 6a 00 

# 00bb7 LoadImm8 [Register(0x6b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 6b 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 00bba Copy8 [Register(0x69), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 69 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 00bbd Copy8 [Register(0x48), Register(0x6b)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 48 6b 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 00bc0 Copy8 [Register(0x68), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 68 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 00bc3 Copy8 [Register(0x48), Register(0x6a)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 48 6a 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00bc6 LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 64 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 00bc9 Copy8 [Register(0x64), Register(0x69)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 64 69 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00bcc LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 64 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 00bcf Copy8 [Register(0x64), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 64 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 00bd2 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 00bd3 AddCarry32_1 [Register(0x44), Register(0x68), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 44 68 44 

# 00bd7 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 00bd8 Copy8 [Register(0x41), Register(0x6c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 41 6c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 00bdb LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 68 00 00 00 00 

# 00be1 Copy8 [Register(0x6c), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 6c 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 00be4 Mul8_16 [Register(0x3c), Register(0x68), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 3c 68 68 

# 00be8 LoadImm8 [Register(0x6a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 6a 00 

# 00beb LoadImm8 [Register(0x6b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 6b 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 00bee Copy8 [Register(0x3d), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 3d 49 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 00bf1 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 50 00 00 00 00 

# 00bf7 Copy8 [Register(0x49), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 49 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 00bfa Mul8_16 [Register(0x50), Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 50 40 3c 

# 00bfe LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 3e 00 

# 00c01 LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 3f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 00c04 Copy32 [Register(0x68), Register(0x40)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 68 40 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 00c07 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 00c08 AddCarry32_1 [Register(0x40), Register(0x3c), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 40 3c 68 

# 00c0c AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 00c0d Copy8 [Register(0x6a), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 6a 49 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 00c10 Copy8 [Register(0x49), Register(0x6b)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 49 6b 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 00c13 Copy8 [Register(0x69), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 69 49 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 00c16 Copy8 [Register(0x49), Register(0x6a)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 49 6a 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 00c19 Copy8 [Register(0x68), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 68 49 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 00c1c Copy8 [Register(0x49), Register(0x69)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 49 69 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00c1f LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 64 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 00c22 Copy8 [Register(0x64), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 64 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 00c25 Copy32 [Register(0x68), Register(0x40)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 68 40 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 00c28 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 00c29 AddCarry32_1 [Register(0x44), Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 44 40 3c 

# 00c2d AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_RpnCalc_handle_mul32_32_12_tbe0a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tbe0a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32 None
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# 00c2e ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
03 

# 00c2f AddCarry32_1 [Register(0x54), Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
30 54 3c 3c 

# 00c33 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
31 

# inline_RpnCalc_handle_mul32_32_12_tbd6 <- inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(41,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 00c34 Copy8 [Register(0x3d), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_tbd6 <- inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(41,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 3d 49 

# inline_RpnCalc_handle_mul32_32_12_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(41,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 1)) }
# 00c37 Copy8 [Register(0x49), Register(0x3f)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(41,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 49 3f 

# inline_RpnCalc_handle_mul32_32_12_tac23 <- inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(42,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 00c3a Copy8 [Register(0x3c), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_tac23 <- inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(42,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 3c 49 

# inline_RpnCalc_handle_mul32_32_12_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(42,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 0)) }
# 00c3d Copy8 [Register(0x49), Register(0x3e)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(42,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 49 3e 

# inline_RpnCalc_handle_mul32_32_12_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(43,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00c40 LoadImm8 [Register(0x6c), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(43,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 6c 00 

# inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(43,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 00c43 Copy8 [Register(0x6c), Register(0x3d)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(43,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 6c 3d 

# inline_RpnCalc_handle_mul32_32_12_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(44,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00c46 LoadImm8 [Register(0x6c), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(44,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 6c 00 

# inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(44,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 00c49 Copy8 [Register(0x6c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(44,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 6c 3c 

# inline_RpnCalc_handle_mul32_32_12_tac13 <- inline_RpnCalc_handle_mul32_32_12_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# 00c4c Copy32 [Register(0x4c), Register(0x40)]
#       inline_RpnCalc_handle_mul32_32_12_tac13 <- inline_RpnCalc_handle_mul32_32_12_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("c")
21 4c 40 

# inline_RpnCalc_handle_mul32_32_12_t45f5 <- inline_RpnCalc_handle_mul32_32_12_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t45f5 <- inline_RpnCalc_handle_mul32_32_12_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(45,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"d\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 00c4f ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 00c50 AddCarry32_1 [Register(0x40), Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 40 3c 3c 

# 00c54 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# product <- inline_RpnCalc_handle_mul32_32_12_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 00c55 Copy32 [Register(0x3c), Register(0x40)]
#       product <- inline_RpnCalc_handle_mul32_32_12_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 3c 40 

# goto inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32 Some('/home/john/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32 Some('/home/john/lutcomp/programs/lib/mul.j':(45,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32 None
# inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32
# t2754 <- product U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("product")] })
# Ident("product")
# 00c58 Copy32 [Register(0x40), Register(0x3c)]
#       t2754 <- product U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
#       Ident("product")
21 40 3c 

# None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("product")] })
# 00c5b Copy32 [Register(0x3c), Register(0x00)]
#       Arg0[a]=t2754 None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
21 3c 00 

# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [108, 109, 110, 112, 113, 114, 115, 116, 117]
# 00c5e Push8 [Register(0x75)]
#       Saving reg0x75 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 75 

# 00c60 Push8 [Register(0x74)]
#       Saving reg0x74 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 74 

# 00c62 Push8 [Register(0x73)]
#       Saving reg0x73 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 73 

# 00c64 Push8 [Register(0x72)]
#       Saving reg0x72 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 72 

# 00c66 Push8 [Register(0x71)]
#       Saving reg0x71 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 71 

# 00c68 Push8 [Register(0x70)]
#       Saving reg0x70 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 70 

# 00c6a Push8 [Register(0x6e)]
#       Saving reg0x6e before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 6e 

# 00c6c Push8 [Register(0x6d)]
#       Saving reg0x6d before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 6d 

# 00c6e Push8 [Register(0x6c)]
#       Saving reg0x6c before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 6c 

# 00c70 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 00c76 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 80 0c 00 00 

# 00c7c JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 fa 2f 00 

# 00c80 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 00c86 Pop8 [Register(0x6c)]
#       Restoring reg0x6c after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 6c 

# 00c88 Pop8 [Register(0x6d)]
#       Restoring reg0x6d after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 6d 

# 00c8a Pop8 [Register(0x6e)]
#       Restoring reg0x6e after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 6e 

# 00c8c Pop8 [Register(0x70)]
#       Restoring reg0x70 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 70 

# 00c8e Pop8 [Register(0x71)]
#       Restoring reg0x71 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 71 

# 00c90 Pop8 [Register(0x72)]
#       Restoring reg0x72 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 72 

# 00c92 Pop8 [Register(0x73)]
#       Restoring reg0x73 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 73 

# 00c94 Pop8 [Register(0x74)]
#       Restoring reg0x74 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 74 

# 00c96 Pop8 [Register(0x75)]
#       Restoring reg0x75 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 75 

# td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 00c98 LoadImm8 [Register(0x75), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 75 0a 

# inline_RpnCalc_handle_putc_25_c <- td7b5 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# 00c9b Copy8 [Register(0x75), Register(0x49)]
#       inline_RpnCalc_handle_putc_25_c <- td7b5 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
0b 75 49 

# inline_RpnCalc_handle_putc_25_tac13 <- inline_RpnCalc_handle_putc_25_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_25_tac13 <- inline_RpnCalc_handle_putc_25_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_25_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 00c9e Out0 [Register(0x49)]
#       IoWrite0
68 49 

# inline_RpnCalc_handle_putc_25_tac13 <- inline_RpnCalc_handle_putc_25_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_25_tac13 <- inline_RpnCalc_handle_putc_25_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_25_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 00ca0 Copy8 [Register(0x49), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_25_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_25_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 49 00 

# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 00ca3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 00ca9 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c b3 0c 00 00 

# 00caf JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 00cb3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_25_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_25_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_25_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_25_function_end_putc None
# inline_RpnCalc_handle_putc_25_function_end_putc
# tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# Ident("stack")
# 00cb9 Copy32 [Register(0x70), Register(0x4c)]
#       tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
#       Ident("stack")
21 70 4c 

# t2754 <- product U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# Ident("product")
# 00cbc Copy32 [Register(0x40), Register(0x3c)]
#       t2754 <- product U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
#       Ident("product")
21 40 3c 

# inline_RpnCalc_handle_stack_push_95_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# 00cbf Copy32 [Register(0x4c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_95_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
21 4c 40 

# inline_RpnCalc_handle_stack_push_95_n <- t2754 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_95_n <- t2754 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_95_t587d <- inline_RpnCalc_handle_stack_push_95_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_95_t587d <- inline_RpnCalc_handle_stack_push_95_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_95_values <- inline_RpnCalc_handle_stack_push_95_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 00cc2 Copy32 [Register(0x40), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_95_values <- inline_RpnCalc_handle_stack_push_95_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 40 44 

# inline_RpnCalc_handle_stack_push_95_tf90a <- inline_RpnCalc_handle_stack_push_95_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 00cc5 Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_95_tf90a <- inline_RpnCalc_handle_stack_push_95_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 44 4c 

# inline_RpnCalc_handle_stack_push_95_t4bb9 <- inline_RpnCalc_handle_stack_push_95_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_95_t4bb9 <- inline_RpnCalc_handle_stack_push_95_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_95_tc957 <- inline_RpnCalc_handle_stack_push_95_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00cc8 Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_95_tc957 <- inline_RpnCalc_handle_stack_push_95_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 

# 00ccb AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_95_tc957 <- inline_RpnCalc_handle_stack_push_95_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 

# inline_RpnCalc_handle_stack_push_95_t14ab <- mem[inline_RpnCalc_handle_stack_push_95_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 00cd1 Load32 [Register(0x68), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_95_t14ab <- mem[inline_RpnCalc_handle_stack_push_95_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 68 44 

# inline_RpnCalc_handle_stack_push_95_tf659 <- inline_RpnCalc_handle_stack_push_95_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 00cd4 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_95_tf659 <- inline_RpnCalc_handle_stack_push_95_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 00cda Mul8_16 [Register(0x44), Register(0x00), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_95_tf659 <- inline_RpnCalc_handle_stack_push_95_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 44 00 44 

# 00cde LoadImm8 [Register(0x46), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_95_tf659 <- inline_RpnCalc_handle_stack_push_95_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 46 00 

# 00ce1 LoadImm8 [Register(0x47), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_95_tf659 <- inline_RpnCalc_handle_stack_push_95_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 47 00 

# inline_RpnCalc_handle_stack_push_95_t100e <- inline_RpnCalc_handle_stack_push_95_tf90a Add Var(inline_RpnCalc_handle_stack_push_95_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 00ce4 ClearCarry []
#       inline_RpnCalc_handle_stack_push_95_t100e <- inline_RpnCalc_handle_stack_push_95_tf90a Add Var(inline_RpnCalc_handle_stack_push_95_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 00ce5 AddCarry32_1 [Register(0x4c), Register(0x44), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_95_t100e <- inline_RpnCalc_handle_stack_push_95_tf90a Add Var(inline_RpnCalc_handle_stack_push_95_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 4c 44 44 

# 00ce9 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_95_t100e <- inline_RpnCalc_handle_stack_push_95_tf90a Add Var(inline_RpnCalc_handle_stack_push_95_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_stack_push_95_t531d <- inline_RpnCalc_handle_stack_push_95_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_95_t531d <- inline_RpnCalc_handle_stack_push_95_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_95_t100e] <- inline_RpnCalc_handle_stack_push_95_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 00cea Store32_1 [Register(0x3c), Register(0x44)]
#       mem[inline_RpnCalc_handle_stack_push_95_t100e] <- inline_RpnCalc_handle_stack_push_95_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 3c 44 

# 00ced Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_95_t100e] <- inline_RpnCalc_handle_stack_push_95_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_95_t4bb9 <- inline_RpnCalc_handle_stack_push_95_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_95_t4bb9 <- inline_RpnCalc_handle_stack_push_95_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_95_tc957 <- inline_RpnCalc_handle_stack_push_95_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00cee Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_95_tc957 <- inline_RpnCalc_handle_stack_push_95_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 

# 00cf1 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_95_tc957 <- inline_RpnCalc_handle_stack_push_95_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 

# inline_RpnCalc_handle_stack_push_95_t4bb9 <- inline_RpnCalc_handle_stack_push_95_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_95_t4bb9 <- inline_RpnCalc_handle_stack_push_95_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_95_tc957 <- inline_RpnCalc_handle_stack_push_95_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00cf7 Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_95_tc957 <- inline_RpnCalc_handle_stack_push_95_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 

# 00cfa AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_95_tc957 <- inline_RpnCalc_handle_stack_push_95_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 

# inline_RpnCalc_handle_stack_push_95_t14ab <- mem[inline_RpnCalc_handle_stack_push_95_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 00d00 Load32 [Register(0x68), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_95_t14ab <- mem[inline_RpnCalc_handle_stack_push_95_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 68 44 

# inline_RpnCalc_handle_stack_push_95_td757 <- inline_RpnCalc_handle_stack_push_95_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 00d03 Copy32 [Register(0x44), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_95_td757 <- inline_RpnCalc_handle_stack_push_95_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 44 3c 

# 00d06 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_95_td757 <- inline_RpnCalc_handle_stack_push_95_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 3c 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_95_tc957] <- inline_RpnCalc_handle_stack_push_95_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 00d0c Store32_1 [Register(0x3c), Register(0x68)]
#       mem[inline_RpnCalc_handle_stack_push_95_tc957] <- inline_RpnCalc_handle_stack_push_95_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 3c 68 

# 00d0f Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_95_tc957] <- inline_RpnCalc_handle_stack_push_95_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_stack_push_95_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_95_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_95_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_95_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_95_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# 00d10 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
70 36 12 00 

# :RpnCalc_handle_if_else_2_29 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_2_29
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# te668 <- 0n47/0x2fu8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
# Number(U8, 47)
# 00d14 LoadImm8 [Register(0x75), Constant8(0x2f=47)]
#       te668 <- 0n47/0x2fu8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
#       Number(U8, 47)
04 75 2f 

# if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
# 00d17 Cmp8 [Register(0x48), Register(0x75)]
#       if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
15 48 75 

# 00d1a JzImm [Label24(RpnCalc_handle_if_true_3_30)]
#       if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
72 22 0d 00 

# 00d1e JmpImm [Label24(RpnCalc_handle_if_else_3_31)]
#       if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
70 27 0e 00 

# :RpnCalc_handle_if_true_3_30 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_3_30
# tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# Ident("b")
# 00d22 Copy32 [Register(0x40), Register(0x44)]
#       tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
#       Ident("b")
21 40 44 

# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# Ident("a")
# 00d25 Copy32 [Register(0x3c), Register(0x68)]
#       t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
#       Ident("a")
21 3c 68 

# Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# 00d28 Copy32 [Register(0x44), Register(0x00)]
#       Arg0[a]=tace9 Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 44 00 

# 00d2b Copy32 [Register(0x68), Register(0x04)]
#       Arg1[b]=t8792 Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 68 04 

# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228}
# Registers to save: [108, 109, 110, 112, 113, 114, 115, 116, 117]
# 00d2e Push8 [Register(0x75)]
#       Saving reg0x75 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 75 

# 00d30 Push8 [Register(0x74)]
#       Saving reg0x74 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 74 

# 00d32 Push8 [Register(0x73)]
#       Saving reg0x73 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 73 

# 00d34 Push8 [Register(0x72)]
#       Saving reg0x72 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 72 

# 00d36 Push8 [Register(0x71)]
#       Saving reg0x71 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 71 

# 00d38 Push8 [Register(0x70)]
#       Saving reg0x70 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 70 

# 00d3a Push8 [Register(0x6e)]
#       Saving reg0x6e before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 6e 

# 00d3c Push8 [Register(0x6d)]
#       Saving reg0x6d before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 6d 

# 00d3e Push8 [Register(0x6c)]
#       Saving reg0x6c before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 6c 

# 00d40 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:div32))
32 0c fc ff ff ff 

# 00d46 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:div32))
25 0c 50 0d 00 00 

# 00d4c JmpImm [Label24(:div32)]
#       PseudoCall(Label24(:div32))
70 39 14 00 

# 00d50 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:div32))
32 0c 04 00 00 00 

# 00d56 Pop8 [Register(0x6c)]
#       Restoring reg0x6c after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 6c 

# 00d58 Pop8 [Register(0x6d)]
#       Restoring reg0x6d after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 6d 

# 00d5a Pop8 [Register(0x6e)]
#       Restoring reg0x6e after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 6e 

# 00d5c Pop8 [Register(0x70)]
#       Restoring reg0x70 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 70 

# 00d5e Pop8 [Register(0x71)]
#       Restoring reg0x71 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 71 

# 00d60 Pop8 [Register(0x72)]
#       Restoring reg0x72 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 72 

# 00d62 Pop8 [Register(0x73)]
#       Restoring reg0x73 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 73 

# 00d64 Pop8 [Register(0x74)]
#       Restoring reg0x74 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 74 

# 00d66 Pop8 [Register(0x75)]
#       Restoring reg0x75 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 75 

# 00d68 Copy32 [Register(0x00), Register(0x40)]
#       Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 00 40 

# t1ba9 <- quotient U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
# Ident("quotient")
# 00d6b Copy32 [Register(0x40), Register(0x3c)]
#       t1ba9 <- quotient U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
#       Ident("quotient")
21 40 3c 

# None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
# 00d6e Copy32 [Register(0x3c), Register(0x00)]
#       Arg0[a]=t1ba9 None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
21 3c 00 

# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [108, 109, 110, 112, 113, 114, 115, 116, 117]
# 00d71 Push8 [Register(0x75)]
#       Saving reg0x75 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 75 

# 00d73 Push8 [Register(0x74)]
#       Saving reg0x74 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 74 

# 00d75 Push8 [Register(0x73)]
#       Saving reg0x73 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 73 

# 00d77 Push8 [Register(0x72)]
#       Saving reg0x72 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 72 

# 00d79 Push8 [Register(0x71)]
#       Saving reg0x71 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 71 

# 00d7b Push8 [Register(0x70)]
#       Saving reg0x70 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 70 

# 00d7d Push8 [Register(0x6e)]
#       Saving reg0x6e before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 6e 

# 00d7f Push8 [Register(0x6d)]
#       Saving reg0x6d before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 6d 

# 00d81 Push8 [Register(0x6c)]
#       Saving reg0x6c before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 6c 

# 00d83 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 00d89 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 93 0d 00 00 

# 00d8f JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 fa 2f 00 

# 00d93 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 00d99 Pop8 [Register(0x6c)]
#       Restoring reg0x6c after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 6c 

# 00d9b Pop8 [Register(0x6d)]
#       Restoring reg0x6d after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 6d 

# 00d9d Pop8 [Register(0x6e)]
#       Restoring reg0x6e after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 6e 

# 00d9f Pop8 [Register(0x70)]
#       Restoring reg0x70 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 70 

# 00da1 Pop8 [Register(0x71)]
#       Restoring reg0x71 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 71 

# 00da3 Pop8 [Register(0x72)]
#       Restoring reg0x72 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 72 

# 00da5 Pop8 [Register(0x73)]
#       Restoring reg0x73 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 73 

# 00da7 Pop8 [Register(0x74)]
#       Restoring reg0x74 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 74 

# 00da9 Pop8 [Register(0x75)]
#       Restoring reg0x75 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 75 

# td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 00dab LoadImm8 [Register(0x75), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 75 0a 

# inline_RpnCalc_handle_putc_26_c <- td7b5 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# 00dae Copy8 [Register(0x75), Register(0x49)]
#       inline_RpnCalc_handle_putc_26_c <- td7b5 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
0b 75 49 

# inline_RpnCalc_handle_putc_26_tac13 <- inline_RpnCalc_handle_putc_26_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_26_tac13 <- inline_RpnCalc_handle_putc_26_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_26_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 00db1 Out0 [Register(0x49)]
#       IoWrite0
68 49 

# inline_RpnCalc_handle_putc_26_tac13 <- inline_RpnCalc_handle_putc_26_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_26_tac13 <- inline_RpnCalc_handle_putc_26_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_26_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 00db3 Copy8 [Register(0x49), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_26_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_26_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 49 00 

# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 00db6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 00dbc StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c c6 0d 00 00 

# 00dc2 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 00dc6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_26_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_26_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_26_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_26_function_end_putc None
# inline_RpnCalc_handle_putc_26_function_end_putc
# tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# Ident("stack")
# 00dcc Copy32 [Register(0x70), Register(0x4c)]
#       tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
#       Ident("stack")
21 70 4c 

# t1ba9 <- quotient U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# Ident("quotient")
# 00dcf Copy32 [Register(0x40), Register(0x3c)]
#       t1ba9 <- quotient U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
#       Ident("quotient")
21 40 3c 

# inline_RpnCalc_handle_stack_push_96_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# 00dd2 Copy32 [Register(0x4c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_96_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
21 4c 40 

# inline_RpnCalc_handle_stack_push_96_n <- t1ba9 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_96_n <- t1ba9 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_96_t587d <- inline_RpnCalc_handle_stack_push_96_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_96_t587d <- inline_RpnCalc_handle_stack_push_96_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_96_values <- inline_RpnCalc_handle_stack_push_96_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 00dd5 Copy32 [Register(0x40), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_96_values <- inline_RpnCalc_handle_stack_push_96_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 40 44 

# inline_RpnCalc_handle_stack_push_96_tf90a <- inline_RpnCalc_handle_stack_push_96_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 00dd8 Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_96_tf90a <- inline_RpnCalc_handle_stack_push_96_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 44 4c 

# inline_RpnCalc_handle_stack_push_96_t4bb9 <- inline_RpnCalc_handle_stack_push_96_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_96_t4bb9 <- inline_RpnCalc_handle_stack_push_96_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_96_tc957 <- inline_RpnCalc_handle_stack_push_96_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00ddb Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_96_tc957 <- inline_RpnCalc_handle_stack_push_96_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 

# 00dde AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_96_tc957 <- inline_RpnCalc_handle_stack_push_96_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 

# inline_RpnCalc_handle_stack_push_96_t14ab <- mem[inline_RpnCalc_handle_stack_push_96_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 00de4 Load32 [Register(0x68), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_96_t14ab <- mem[inline_RpnCalc_handle_stack_push_96_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 68 44 

# inline_RpnCalc_handle_stack_push_96_tf659 <- inline_RpnCalc_handle_stack_push_96_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 00de7 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_96_tf659 <- inline_RpnCalc_handle_stack_push_96_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 00ded Mul8_16 [Register(0x44), Register(0x00), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_96_tf659 <- inline_RpnCalc_handle_stack_push_96_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 44 00 44 

# 00df1 LoadImm8 [Register(0x46), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_96_tf659 <- inline_RpnCalc_handle_stack_push_96_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 46 00 

# 00df4 LoadImm8 [Register(0x47), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_96_tf659 <- inline_RpnCalc_handle_stack_push_96_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 47 00 

# inline_RpnCalc_handle_stack_push_96_t100e <- inline_RpnCalc_handle_stack_push_96_tf90a Add Var(inline_RpnCalc_handle_stack_push_96_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 00df7 ClearCarry []
#       inline_RpnCalc_handle_stack_push_96_t100e <- inline_RpnCalc_handle_stack_push_96_tf90a Add Var(inline_RpnCalc_handle_stack_push_96_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 00df8 AddCarry32_1 [Register(0x4c), Register(0x44), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_96_t100e <- inline_RpnCalc_handle_stack_push_96_tf90a Add Var(inline_RpnCalc_handle_stack_push_96_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 4c 44 44 

# 00dfc AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_96_t100e <- inline_RpnCalc_handle_stack_push_96_tf90a Add Var(inline_RpnCalc_handle_stack_push_96_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_stack_push_96_t531d <- inline_RpnCalc_handle_stack_push_96_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_96_t531d <- inline_RpnCalc_handle_stack_push_96_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_96_t100e] <- inline_RpnCalc_handle_stack_push_96_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 00dfd Store32_1 [Register(0x3c), Register(0x44)]
#       mem[inline_RpnCalc_handle_stack_push_96_t100e] <- inline_RpnCalc_handle_stack_push_96_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 3c 44 

# 00e00 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_96_t100e] <- inline_RpnCalc_handle_stack_push_96_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_96_t4bb9 <- inline_RpnCalc_handle_stack_push_96_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_96_t4bb9 <- inline_RpnCalc_handle_stack_push_96_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_96_tc957 <- inline_RpnCalc_handle_stack_push_96_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00e01 Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_96_tc957 <- inline_RpnCalc_handle_stack_push_96_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 

# 00e04 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_96_tc957 <- inline_RpnCalc_handle_stack_push_96_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 

# inline_RpnCalc_handle_stack_push_96_t4bb9 <- inline_RpnCalc_handle_stack_push_96_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_96_t4bb9 <- inline_RpnCalc_handle_stack_push_96_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_96_tc957 <- inline_RpnCalc_handle_stack_push_96_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00e0a Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_96_tc957 <- inline_RpnCalc_handle_stack_push_96_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 

# 00e0d AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_96_tc957 <- inline_RpnCalc_handle_stack_push_96_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 

# inline_RpnCalc_handle_stack_push_96_t14ab <- mem[inline_RpnCalc_handle_stack_push_96_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 00e13 Load32 [Register(0x68), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_96_t14ab <- mem[inline_RpnCalc_handle_stack_push_96_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 68 44 

# inline_RpnCalc_handle_stack_push_96_td757 <- inline_RpnCalc_handle_stack_push_96_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 00e16 Copy32 [Register(0x44), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_96_td757 <- inline_RpnCalc_handle_stack_push_96_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 44 3c 

# 00e19 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_96_td757 <- inline_RpnCalc_handle_stack_push_96_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 3c 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_96_tc957] <- inline_RpnCalc_handle_stack_push_96_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 00e1f Store32_1 [Register(0x3c), Register(0x68)]
#       mem[inline_RpnCalc_handle_stack_push_96_tc957] <- inline_RpnCalc_handle_stack_push_96_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 3c 68 

# 00e22 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_96_tc957] <- inline_RpnCalc_handle_stack_push_96_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_stack_push_96_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_96_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_96_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_96_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_96_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# 00e23 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
70 36 12 00 

# :RpnCalc_handle_if_else_3_31 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_3_31
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t39b5 <- 0n115/0x73u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# Number(U8, 115)
# 00e27 LoadImm8 [Register(0x75), Constant8(0x73=115)]
#       t39b5 <- 0n115/0x73u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
#       Number(U8, 115)
04 75 73 

# if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# 00e2a Cmp8 [Register(0x48), Register(0x75)]
#       if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
15 48 75 

# 00e2d JzImm [Label24(RpnCalc_handle_if_true_4_32)]
#       if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
72 35 0e 00 

# 00e31 JmpImm [Label24(RpnCalc_handle_if_else_4_33)]
#       if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
70 ed 0e 00 

# :RpnCalc_handle_if_true_4_32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_4_32
# tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# Ident("stack")
# 00e35 Copy32 [Register(0x70), Register(0x4c)]
#       tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
#       Ident("stack")
21 70 4c 

# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# Ident("a")
# 00e38 Copy32 [Register(0x3c), Register(0x68)]
#       t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
#       Ident("a")
21 3c 68 

# inline_RpnCalc_handle_stack_push_97_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# 00e3b Copy32 [Register(0x4c), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_97_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
21 4c 44 

# inline_RpnCalc_handle_stack_push_97_n <- t8792 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# 00e3e Copy32 [Register(0x68), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_97_n <- t8792 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
21 68 3c 

# inline_RpnCalc_handle_stack_push_97_t587d <- inline_RpnCalc_handle_stack_push_97_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_97_t587d <- inline_RpnCalc_handle_stack_push_97_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_push_97_values <- inline_RpnCalc_handle_stack_push_97_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 00e41 Copy32 [Register(0x44), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_97_values <- inline_RpnCalc_handle_stack_push_97_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 44 68 

# inline_RpnCalc_handle_stack_push_97_tf90a <- inline_RpnCalc_handle_stack_push_97_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 00e44 Copy32 [Register(0x68), Register(0x50)]
#       inline_RpnCalc_handle_stack_push_97_tf90a <- inline_RpnCalc_handle_stack_push_97_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 68 50 

# inline_RpnCalc_handle_stack_push_97_t4bb9 <- inline_RpnCalc_handle_stack_push_97_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_97_t4bb9 <- inline_RpnCalc_handle_stack_push_97_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_push_97_tc957 <- inline_RpnCalc_handle_stack_push_97_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00e47 Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_97_tc957 <- inline_RpnCalc_handle_stack_push_97_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 44 4c 

# 00e4a AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_97_tc957 <- inline_RpnCalc_handle_stack_push_97_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_97_t14ab <- mem[inline_RpnCalc_handle_stack_push_97_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 00e50 Load32 [Register(0x4c), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_97_t14ab <- mem[inline_RpnCalc_handle_stack_push_97_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 4c 68 

# inline_RpnCalc_handle_stack_push_97_tf659 <- inline_RpnCalc_handle_stack_push_97_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 00e53 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_97_tf659 <- inline_RpnCalc_handle_stack_push_97_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 00e59 Mul8_16 [Register(0x68), Register(0x00), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_97_tf659 <- inline_RpnCalc_handle_stack_push_97_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 68 00 68 

# 00e5d LoadImm8 [Register(0x6a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_97_tf659 <- inline_RpnCalc_handle_stack_push_97_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 6a 00 

# 00e60 LoadImm8 [Register(0x6b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_97_tf659 <- inline_RpnCalc_handle_stack_push_97_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 6b 00 

# inline_RpnCalc_handle_stack_push_97_t100e <- inline_RpnCalc_handle_stack_push_97_tf90a Add Var(inline_RpnCalc_handle_stack_push_97_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 00e63 ClearCarry []
#       inline_RpnCalc_handle_stack_push_97_t100e <- inline_RpnCalc_handle_stack_push_97_tf90a Add Var(inline_RpnCalc_handle_stack_push_97_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 00e64 AddCarry32_1 [Register(0x50), Register(0x68), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_97_t100e <- inline_RpnCalc_handle_stack_push_97_tf90a Add Var(inline_RpnCalc_handle_stack_push_97_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 50 68 68 

# 00e68 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_97_t100e <- inline_RpnCalc_handle_stack_push_97_tf90a Add Var(inline_RpnCalc_handle_stack_push_97_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_stack_push_97_t531d <- inline_RpnCalc_handle_stack_push_97_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_97_t531d <- inline_RpnCalc_handle_stack_push_97_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_97_t100e] <- inline_RpnCalc_handle_stack_push_97_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 00e69 Store32_1 [Register(0x3c), Register(0x68)]
#       mem[inline_RpnCalc_handle_stack_push_97_t100e] <- inline_RpnCalc_handle_stack_push_97_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 3c 68 

# 00e6c Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_97_t100e] <- inline_RpnCalc_handle_stack_push_97_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_97_t4bb9 <- inline_RpnCalc_handle_stack_push_97_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_97_t4bb9 <- inline_RpnCalc_handle_stack_push_97_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_push_97_tc957 <- inline_RpnCalc_handle_stack_push_97_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00e6d Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_97_tc957 <- inline_RpnCalc_handle_stack_push_97_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 44 4c 

# 00e70 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_97_tc957 <- inline_RpnCalc_handle_stack_push_97_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_97_t4bb9 <- inline_RpnCalc_handle_stack_push_97_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_97_t4bb9 <- inline_RpnCalc_handle_stack_push_97_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_push_97_tc957 <- inline_RpnCalc_handle_stack_push_97_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00e76 Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_97_tc957 <- inline_RpnCalc_handle_stack_push_97_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 44 4c 

# 00e79 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_97_tc957 <- inline_RpnCalc_handle_stack_push_97_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_97_t14ab <- mem[inline_RpnCalc_handle_stack_push_97_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 00e7f Load32 [Register(0x4c), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_97_t14ab <- mem[inline_RpnCalc_handle_stack_push_97_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 4c 68 

# inline_RpnCalc_handle_stack_push_97_td757 <- inline_RpnCalc_handle_stack_push_97_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 00e82 Copy32 [Register(0x68), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_97_td757 <- inline_RpnCalc_handle_stack_push_97_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 68 3c 

# 00e85 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_97_td757 <- inline_RpnCalc_handle_stack_push_97_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 3c 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_97_tc957] <- inline_RpnCalc_handle_stack_push_97_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 00e8b Store32_1 [Register(0x3c), Register(0x4c)]
#       mem[inline_RpnCalc_handle_stack_push_97_tc957] <- inline_RpnCalc_handle_stack_push_97_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 3c 4c 

# 00e8e Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_97_tc957] <- inline_RpnCalc_handle_stack_push_97_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_stack_push_97_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_97_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_97_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_97_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_97_function_end_stack_push
# tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# Ident("stack")
# 00e8f Copy32 [Register(0x70), Register(0x4c)]
#       tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
#       Ident("stack")
21 70 4c 

# tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# Ident("b")
# 00e92 Copy32 [Register(0x40), Register(0x44)]
#       tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
#       Ident("b")
21 40 44 

# inline_RpnCalc_handle_stack_push_98_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# 00e95 Copy32 [Register(0x4c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_98_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
21 4c 40 

# inline_RpnCalc_handle_stack_push_98_n <- tace9 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# 00e98 Copy32 [Register(0x44), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_98_n <- tace9 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
21 44 3c 

# inline_RpnCalc_handle_stack_push_98_t587d <- inline_RpnCalc_handle_stack_push_98_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_98_t587d <- inline_RpnCalc_handle_stack_push_98_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_98_values <- inline_RpnCalc_handle_stack_push_98_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 00e9b Copy32 [Register(0x40), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_98_values <- inline_RpnCalc_handle_stack_push_98_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 40 44 

# inline_RpnCalc_handle_stack_push_98_tf90a <- inline_RpnCalc_handle_stack_push_98_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 00e9e Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_98_tf90a <- inline_RpnCalc_handle_stack_push_98_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 44 4c 

# inline_RpnCalc_handle_stack_push_98_t4bb9 <- inline_RpnCalc_handle_stack_push_98_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_98_t4bb9 <- inline_RpnCalc_handle_stack_push_98_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_98_tc957 <- inline_RpnCalc_handle_stack_push_98_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00ea1 Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_98_tc957 <- inline_RpnCalc_handle_stack_push_98_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 

# 00ea4 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_98_tc957 <- inline_RpnCalc_handle_stack_push_98_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 

# inline_RpnCalc_handle_stack_push_98_t14ab <- mem[inline_RpnCalc_handle_stack_push_98_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 00eaa Load32 [Register(0x68), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_98_t14ab <- mem[inline_RpnCalc_handle_stack_push_98_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 68 44 

# inline_RpnCalc_handle_stack_push_98_tf659 <- inline_RpnCalc_handle_stack_push_98_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 00ead LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_98_tf659 <- inline_RpnCalc_handle_stack_push_98_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 00eb3 Mul8_16 [Register(0x44), Register(0x00), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_98_tf659 <- inline_RpnCalc_handle_stack_push_98_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 44 00 44 

# 00eb7 LoadImm8 [Register(0x46), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_98_tf659 <- inline_RpnCalc_handle_stack_push_98_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 46 00 

# 00eba LoadImm8 [Register(0x47), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_98_tf659 <- inline_RpnCalc_handle_stack_push_98_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 47 00 

# inline_RpnCalc_handle_stack_push_98_t100e <- inline_RpnCalc_handle_stack_push_98_tf90a Add Var(inline_RpnCalc_handle_stack_push_98_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 00ebd ClearCarry []
#       inline_RpnCalc_handle_stack_push_98_t100e <- inline_RpnCalc_handle_stack_push_98_tf90a Add Var(inline_RpnCalc_handle_stack_push_98_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 00ebe AddCarry32_1 [Register(0x4c), Register(0x44), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_98_t100e <- inline_RpnCalc_handle_stack_push_98_tf90a Add Var(inline_RpnCalc_handle_stack_push_98_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 4c 44 44 

# 00ec2 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_98_t100e <- inline_RpnCalc_handle_stack_push_98_tf90a Add Var(inline_RpnCalc_handle_stack_push_98_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_stack_push_98_t531d <- inline_RpnCalc_handle_stack_push_98_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_98_t531d <- inline_RpnCalc_handle_stack_push_98_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_98_t100e] <- inline_RpnCalc_handle_stack_push_98_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 00ec3 Store32_1 [Register(0x3c), Register(0x44)]
#       mem[inline_RpnCalc_handle_stack_push_98_t100e] <- inline_RpnCalc_handle_stack_push_98_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 3c 44 

# 00ec6 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_98_t100e] <- inline_RpnCalc_handle_stack_push_98_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_98_t4bb9 <- inline_RpnCalc_handle_stack_push_98_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_98_t4bb9 <- inline_RpnCalc_handle_stack_push_98_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_98_tc957 <- inline_RpnCalc_handle_stack_push_98_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00ec7 Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_98_tc957 <- inline_RpnCalc_handle_stack_push_98_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 

# 00eca AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_98_tc957 <- inline_RpnCalc_handle_stack_push_98_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 

# inline_RpnCalc_handle_stack_push_98_t4bb9 <- inline_RpnCalc_handle_stack_push_98_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_98_t4bb9 <- inline_RpnCalc_handle_stack_push_98_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_98_tc957 <- inline_RpnCalc_handle_stack_push_98_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00ed0 Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_98_tc957 <- inline_RpnCalc_handle_stack_push_98_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 

# 00ed3 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_98_tc957 <- inline_RpnCalc_handle_stack_push_98_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 

# inline_RpnCalc_handle_stack_push_98_t14ab <- mem[inline_RpnCalc_handle_stack_push_98_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 00ed9 Load32 [Register(0x68), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_98_t14ab <- mem[inline_RpnCalc_handle_stack_push_98_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 68 44 

# inline_RpnCalc_handle_stack_push_98_td757 <- inline_RpnCalc_handle_stack_push_98_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 00edc Copy32 [Register(0x44), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_98_td757 <- inline_RpnCalc_handle_stack_push_98_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 44 3c 

# 00edf AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_98_td757 <- inline_RpnCalc_handle_stack_push_98_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 3c 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_98_tc957] <- inline_RpnCalc_handle_stack_push_98_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 00ee5 Store32_1 [Register(0x3c), Register(0x68)]
#       mem[inline_RpnCalc_handle_stack_push_98_tc957] <- inline_RpnCalc_handle_stack_push_98_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 3c 68 

# 00ee8 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_98_tc957] <- inline_RpnCalc_handle_stack_push_98_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_stack_push_98_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_98_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_98_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_98_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_98_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# 00ee9 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
70 36 12 00 

# :RpnCalc_handle_if_else_4_33 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_4_33
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t1501 <- 0n113/0x71u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
# Number(U8, 113)
# 00eed LoadImm8 [Register(0x49), Constant8(0x71=113)]
#       t1501 <- 0n113/0x71u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
#       Number(U8, 113)
04 49 71 

# if tdcd9 == t1501 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
# 00ef0 Cmp8 [Register(0x48), Register(0x49)]
#       if tdcd9 == t1501 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
15 48 49 

# 00ef3 JzImm [Label24(RpnCalc_handle_if_true_5_34)]
#       if tdcd9 == t1501 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
72 fb 0e 00 

# 00ef7 JmpImm [Label24(RpnCalc_handle_if_else_5_35)]
#       if tdcd9 == t1501 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
70 07 0f 00 

# :RpnCalc_handle_if_true_5_34 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_5_34
# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Return { value: Some(Number(U8, 0)) }
# Number(U8, 0)
# 00efb LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Return { value: Some(Number(U8, 0)) }
#       Number(U8, 0)
04 64 00 

# return Some(tb36e) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Return { value: Some(Number(U8, 0)) }
# 00efe Copy8 [Register(0x64), Register(0x00)]
#       return Some(tb36e) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Return { value: Some(Number(U8, 0)) }
0b 64 00 

# 00f01 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# 00f03 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
70 36 12 00 

# :RpnCalc_handle_if_else_5_35 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_5_35
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# Number(U8, 10)
# 00f07 LoadImm8 [Register(0x75), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
#       Number(U8, 10)
04 75 0a 

# if tdcd9 == td7b5 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# 00f0a Cmp8 [Register(0x48), Register(0x75)]
#       if tdcd9 == td7b5 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
15 48 75 

# 00f0d JzImm [Label24(RpnCalc_handle_if_true_6_36)]
#       if tdcd9 == td7b5 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
72 15 0f 00 

# 00f11 JmpImm [Label24(RpnCalc_handle_if_else_6_37)]
#       if tdcd9 == td7b5 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
70 bb 0f 00 

# :RpnCalc_handle_if_true_6_36 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_6_36
# tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_101_c <- tac13 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 00f15 Copy32 [Register(0x44), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_c <- tac13 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 44 3c 

# inline_RpnCalc_handle_RpnCalc_push_pending_101_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_101_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_101_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_101_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }\nPtrFieldDeref(\"c\", \"have_num\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_101_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 00f18 Copy32 [Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
21 3c 40 

# 00f1b AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 40 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_101_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_101_tfdb7] U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# 00f21 Load8 [Register(0x40), Register(0x6c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_101_tfdb7] U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
05 40 6c 

# inline_RpnCalc_handle_RpnCalc_push_pending_101_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# Number(U8, 0)
# 00f24 LoadImm8 [Register(0x6d), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       Number(U8, 0)
04 6d 00 

# if inline_RpnCalc_handle_RpnCalc_push_pending_101_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_101_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_101_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_101_RpnCalc_push_pending_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# 00f27 Cmp8 [Register(0x6c), Register(0x6d)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_101_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_101_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_101_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_101_RpnCalc_push_pending_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
15 6c 6d 

# 00f2a JzImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_101_RpnCalc_push_pending_if_else_0_2)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_101_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_101_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_101_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_101_RpnCalc_push_pending_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
72 b7 0f 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_101_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_101_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_101_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_101_RpnCalc_push_pending_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_101_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_101_RpnCalc_push_pending_if_true_0_1 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_101_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_101_tbc15 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# AddressOf(PtrFieldDeref("c", "stack"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_101_tbc15 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nAddressOf(PtrFieldDeref(\"c\", \"stack\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_101_t4760 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_tbc15 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# AddressOf(PtrFieldDeref("c", "stack"))
# 00f2e Copy32 [Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_t4760 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_tbc15 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       AddressOf(PtrFieldDeref("c", "stack"))
21 3c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_101_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_101_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_101_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_101_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nPtrFieldDeref(\"c\", \"num\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_101_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_101_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 00f31 Copy32 [Register(0x3c), Register(0x44)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_101_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 3c 44 

# 00f34 AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_101_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 44 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_101_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_101_t6e8e] U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 00f3a Load32 [Register(0x44), Register(0x68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_101_t6e8e] U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 44 68 

# inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_s <- inline_RpnCalc_handle_RpnCalc_push_pending_101_t4760 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# 00f3d Copy32 [Register(0x40), Register(0x44)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_s <- inline_RpnCalc_handle_RpnCalc_push_pending_101_t4760 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
21 40 44 

# inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_n <- inline_RpnCalc_handle_RpnCalc_push_pending_101_td60 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# 00f40 Copy32 [Register(0x68), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_n <- inline_RpnCalc_handle_RpnCalc_push_pending_101_td60 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
21 68 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t587d <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t587d <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_values <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 00f43 Copy32 [Register(0x44), Register(0x68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_values <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 44 68 

# inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tf90a <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 00f46 Copy32 [Register(0x68), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tf90a <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 68 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00f49 Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 44 4c 

# 00f4c AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 00f52 Load32 [Register(0x4c), Register(0x68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 4c 68 

# inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 00f55 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 00f5b Mul8_16 [Register(0x68), Register(0x00), Register(0x68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 68 00 68 

# 00f5f LoadImm8 [Register(0x6a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 6a 00 

# 00f62 LoadImm8 [Register(0x6b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 6b 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 00f65 ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 00f66 AddCarry32_1 [Register(0x50), Register(0x68), Register(0x68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 50 68 68 

# 00f6a AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t531d <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t531d <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 00f6b Store32_1 [Register(0x40), Register(0x68)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 40 68 

# 00f6e Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00f6f Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 44 4c 

# 00f72 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00f78 Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 44 4c 

# 00f7b AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 00f81 Load32 [Register(0x4c), Register(0x68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 4c 68 

# inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 00f84 Copy32 [Register(0x68), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 68 40 

# 00f87 AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 40 01 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 00f8d Store32_1 [Register(0x40), Register(0x4c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 40 4c 

# 00f90 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_function_end_stack_push None
# inline_RpnCalc_handle_RpnCalc_push_pending_101_inline_RpnCalc_push_pending_stack_push_99_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_101_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_101_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_101_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_101_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_101_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_101_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 00f91 Copy32 [Register(0x3c), Register(0x44)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_101_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 3c 44 

# 00f94 AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_101_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 44 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_101_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 00f9a LoadImm32 [Register(0x40), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 40 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_101_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_101_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# 00fa0 Store32_1 [Register(0x40), Register(0x44)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_101_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_101_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
23 40 44 

# 00fa3 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_101_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_101_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_101_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_101_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_101_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_101_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_101_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 00fa4 Copy32 [Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
21 3c 40 

# 00fa7 AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_101_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 40 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_101_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00fad LoadImm8 [Register(0x6d), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_101_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 6d 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_101_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_101_tb36e U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# 00fb0 Store8 [Register(0x6d), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_101_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_101_tb36e U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
06 6d 40 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_101_RpnCalc_push_pending_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# 00fb3 JmpImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_101_RpnCalc_push_pending_if_end_0)]
#       goto inline_RpnCalc_handle_RpnCalc_push_pending_101_RpnCalc_push_pending_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
70 b7 0f 00 

# :inline_RpnCalc_handle_RpnCalc_push_pending_101_RpnCalc_push_pending_if_else_0_2 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_101_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_101_RpnCalc_push_pending_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_101_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_101_function_end_RpnCalc_push_pending None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_101_function_end_RpnCalc_push_pending None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_101_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_101_function_end_RpnCalc_push_pending None
# inline_RpnCalc_handle_RpnCalc_push_pending_101_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# 00fb7 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
70 36 12 00 

# :RpnCalc_handle_if_else_6_37 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_6_37
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# tac5f <- 0n32/0x20u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
# Number(U8, 32)
# 00fbb LoadImm8 [Register(0x49), Constant8(0x20=32)]
#       tac5f <- 0n32/0x20u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
#       Number(U8, 32)
04 49 20 

# if tdcd9 == tac5f then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
# 00fbe Cmp8 [Register(0x48), Register(0x49)]
#       if tdcd9 == tac5f then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
15 48 49 

# 00fc1 JzImm [Label24(RpnCalc_handle_if_true_7_38)]
#       if tdcd9 == tac5f then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
72 c9 0f 00 

# 00fc5 JmpImm [Label24(RpnCalc_handle_if_else_7_39)]
#       if tdcd9 == tac5f then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
70 6f 10 00 

# :RpnCalc_handle_if_true_7_38 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_7_38
# tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_102_c <- tac13 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 00fc9 Copy32 [Register(0x44), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_c <- tac13 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 44 3c 

# inline_RpnCalc_handle_RpnCalc_push_pending_102_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_102_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_102_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_102_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }\nPtrFieldDeref(\"c\", \"have_num\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_102_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 00fcc Copy32 [Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
21 3c 40 

# 00fcf AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 40 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_102_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_102_tfdb7] U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# 00fd5 Load8 [Register(0x40), Register(0x6c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_102_tfdb7] U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
05 40 6c 

# inline_RpnCalc_handle_RpnCalc_push_pending_102_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# Number(U8, 0)
# 00fd8 LoadImm8 [Register(0x6d), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       Number(U8, 0)
04 6d 00 

# if inline_RpnCalc_handle_RpnCalc_push_pending_102_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_102_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_102_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_102_RpnCalc_push_pending_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# 00fdb Cmp8 [Register(0x6c), Register(0x6d)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_102_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_102_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_102_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_102_RpnCalc_push_pending_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
15 6c 6d 

# 00fde JzImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_102_RpnCalc_push_pending_if_else_0_2)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_102_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_102_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_102_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_102_RpnCalc_push_pending_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
72 6b 10 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_102_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_102_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_102_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_102_RpnCalc_push_pending_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_102_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_102_RpnCalc_push_pending_if_true_0_1 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_102_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_102_tbc15 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# AddressOf(PtrFieldDeref("c", "stack"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_102_tbc15 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nAddressOf(PtrFieldDeref(\"c\", \"stack\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_102_t4760 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_tbc15 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# AddressOf(PtrFieldDeref("c", "stack"))
# 00fe2 Copy32 [Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_t4760 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_tbc15 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       AddressOf(PtrFieldDeref("c", "stack"))
21 3c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_102_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_102_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_102_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_102_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nPtrFieldDeref(\"c\", \"num\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_102_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_102_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 00fe5 Copy32 [Register(0x3c), Register(0x44)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_102_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 3c 44 

# 00fe8 AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_102_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 44 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_102_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_102_t6e8e] U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 00fee Load32 [Register(0x44), Register(0x68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_102_t6e8e] U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 44 68 

# inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_s <- inline_RpnCalc_handle_RpnCalc_push_pending_102_t4760 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# 00ff1 Copy32 [Register(0x40), Register(0x44)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_s <- inline_RpnCalc_handle_RpnCalc_push_pending_102_t4760 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
21 40 44 

# inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_n <- inline_RpnCalc_handle_RpnCalc_push_pending_102_td60 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# 00ff4 Copy32 [Register(0x68), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_n <- inline_RpnCalc_handle_RpnCalc_push_pending_102_td60 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
21 68 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t587d <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t587d <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_values <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 00ff7 Copy32 [Register(0x44), Register(0x68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_values <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 44 68 

# inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tf90a <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 00ffa Copy32 [Register(0x68), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tf90a <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 68 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00ffd Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 44 4c 

# 01000 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 01006 Load32 [Register(0x4c), Register(0x68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 4c 68 

# inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 01009 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 0100f Mul8_16 [Register(0x68), Register(0x00), Register(0x68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 68 00 68 

# 01013 LoadImm8 [Register(0x6a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 6a 00 

# 01016 LoadImm8 [Register(0x6b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 6b 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 01019 ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 0101a AddCarry32_1 [Register(0x50), Register(0x68), Register(0x68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 50 68 68 

# 0101e AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t531d <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t531d <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 0101f Store32_1 [Register(0x40), Register(0x68)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 40 68 

# 01022 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 01023 Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 44 4c 

# 01026 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 0102c Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 44 4c 

# 0102f AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 01035 Load32 [Register(0x4c), Register(0x68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 4c 68 

# inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 01038 Copy32 [Register(0x68), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 68 40 

# 0103b AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 40 01 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 01041 Store32_1 [Register(0x40), Register(0x4c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 40 4c 

# 01044 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_function_end_stack_push None
# inline_RpnCalc_handle_RpnCalc_push_pending_102_inline_RpnCalc_push_pending_stack_push_99_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_102_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_102_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_102_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_102_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_102_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_102_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 01045 Copy32 [Register(0x3c), Register(0x44)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_102_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 3c 44 

# 01048 AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_102_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 44 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_102_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 0104e LoadImm32 [Register(0x40), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 40 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_102_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_102_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# 01054 Store32_1 [Register(0x40), Register(0x44)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_102_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_102_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
23 40 44 

# 01057 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_102_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_102_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_102_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_102_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_102_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_102_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_102_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 01058 Copy32 [Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
21 3c 40 

# 0105b AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_102_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 40 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_102_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 01061 LoadImm8 [Register(0x6d), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_102_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 6d 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_102_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_102_tb36e U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# 01064 Store8 [Register(0x6d), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_102_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_102_tb36e U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
06 6d 40 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_102_RpnCalc_push_pending_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# 01067 JmpImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_102_RpnCalc_push_pending_if_end_0)]
#       goto inline_RpnCalc_handle_RpnCalc_push_pending_102_RpnCalc_push_pending_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
70 6b 10 00 

# :inline_RpnCalc_handle_RpnCalc_push_pending_102_RpnCalc_push_pending_if_else_0_2 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_102_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_102_RpnCalc_push_pending_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_102_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_102_function_end_RpnCalc_push_pending None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_102_function_end_RpnCalc_push_pending None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_102_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_102_function_end_RpnCalc_push_pending None
# inline_RpnCalc_handle_RpnCalc_push_pending_102_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# 0106b JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
70 36 12 00 

# :RpnCalc_handle_if_else_7_39 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_7_39
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t4e08 <- 0n99/0x63u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
# Number(U8, 99)
# 0106f LoadImm8 [Register(0x49), Constant8(0x63=99)]
#       t4e08 <- 0n99/0x63u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
#       Number(U8, 99)
04 49 63 

# if tdcd9 == t4e08 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
# 01072 Cmp8 [Register(0x48), Register(0x49)]
#       if tdcd9 == t4e08 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
15 48 49 

# 01075 JzImm [Label24(RpnCalc_handle_if_true_8_40)]
#       if tdcd9 == t4e08 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
72 7d 10 00 

# 01079 JmpImm [Label24(RpnCalc_handle_if_else_8_41)]
#       if tdcd9 == t4e08 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
70 ad 10 00 

# :RpnCalc_handle_if_true_8_40 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_8_40
# tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_89_c <- tac13 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
# 0107d Copy32 [Register(0x44), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_init_89_c <- tac13 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
21 44 3c 

# inline_RpnCalc_handle_RpnCalc_init_89_tbc15 <- inline_RpnCalc_handle_RpnCalc_init_89_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(14,5))
# Assign { target: Ident("s"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
# AddressOf(PtrFieldDeref("c", "stack"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_89_tbc15 <- inline_RpnCalc_handle_RpnCalc_init_89_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(14,5))\nAssign { target: Ident(\"s\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }\nAddressOf(PtrFieldDeref(\"c\", \"stack\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_89_s <- inline_RpnCalc_handle_RpnCalc_init_89_tbc15 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(14,5))
# Assign { target: Ident("s"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
# AddressOf(PtrFieldDeref("c", "stack"))
# 01080 Copy32 [Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_init_89_s <- inline_RpnCalc_handle_RpnCalc_init_89_tbc15 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(14,5))
#       Assign { target: Ident("s"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
#       AddressOf(PtrFieldDeref("c", "stack"))
21 3c 40 

# inline_RpnCalc_handle_RpnCalc_init_89_tb2e9 <- inline_RpnCalc_handle_RpnCalc_init_89_s U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(15,5))
# VoidExpression { expression: Call(Call { function: "stack_init", parameters: [Ident("s")] }) }
# Call(Call { function: "stack_init", parameters: [Ident("s")] })
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_89_tb2e9 <- inline_RpnCalc_handle_RpnCalc_init_89_s U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(15,5))\nVoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }\nCall(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_s <- inline_RpnCalc_handle_RpnCalc_init_89_tb2e9 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(15,5))
# VoidExpression { expression: Call(Call { function: "stack_init", parameters: [Ident("s")] }) }
# Call(Call { function: "stack_init", parameters: [Ident("s")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_s <- inline_RpnCalc_handle_RpnCalc_init_89_tb2e9 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(15,5))\nVoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }\nCall(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_t4bb9 <- inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_t4bb9 <- inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_tc957 <- inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 01083 Copy32 [Register(0x40), Register(0x44)]
#       inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_tc957 <- inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 44 

# 01086 AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_tc957 <- inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 44 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 0108c LoadImm32 [Register(0x40), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 40 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_tc957] <- inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_t60ec U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# 01092 Store32_1 [Register(0x40), Register(0x44)]
#       mem[inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_tc957] <- inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_t60ec U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
23 40 44 

# 01095 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_tc957] <- inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_t60ec U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
24 

# goto inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_function_end_stack_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_function_end_stack_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_function_end_stack_init)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_function_end_stack_init None
# inline_RpnCalc_handle_RpnCalc_init_89_inline_RpnCalc_init_stack_init_88_function_end_stack_init
# inline_RpnCalc_handle_RpnCalc_init_89_tb1ed <- inline_RpnCalc_handle_RpnCalc_init_89_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_89_tb1ed <- inline_RpnCalc_handle_RpnCalc_init_89_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_89_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_89_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 01096 Copy32 [Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_init_89_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_89_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 3c 40 

# 01099 AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_init_89_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_89_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 40 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_init_89_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 0109f LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_init_89_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 3c 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_init_89_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_89_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# 010a5 Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_init_89_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_89_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
23 3c 40 

# 010a8 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_init_89_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_89_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
24 

# goto inline_RpnCalc_handle_RpnCalc_init_89_function_end_RpnCalc_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_init_89_function_end_RpnCalc_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_init_89_function_end_RpnCalc_init)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_init_89_function_end_RpnCalc_init None
# inline_RpnCalc_handle_RpnCalc_init_89_function_end_RpnCalc_init
# goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# 010a9 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
70 36 12 00 

# :RpnCalc_handle_if_else_8_41 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_8_41
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t49a <- 0n100/0x64u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
# Number(U8, 100)
# 010ad LoadImm8 [Register(0x49), Constant8(0x64=100)]
#       t49a <- 0n100/0x64u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
#       Number(U8, 100)
04 49 64 

# if tdcd9 == t49a then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
# 010b0 Cmp8 [Register(0x48), Register(0x49)]
#       if tdcd9 == t49a then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
15 48 49 

# 010b3 JzImm [Label24(RpnCalc_handle_if_true_9_42)]
#       if tdcd9 == t49a then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
72 bb 10 00 

# 010b7 JmpImm [Label24(RpnCalc_handle_if_else_9_43)]
#       if tdcd9 == t49a then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
70 94 11 00 

# :RpnCalc_handle_if_true_9_42 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_9_42
# i <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }
# Number(U8, 0)
# 010bb LoadImm8 [Register(0x49), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }
#       Number(U8, 0)
04 49 00 

# :RpnCalc_handle_while_predicate_44 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# RpnCalc_handle_while_predicate_44
# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# t6001 <- stack_count U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# Ident("stack_count")
# 010be Copy8 [Register(0x6e), Register(0x64)]
#       t6001 <- stack_count U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
#       Ident("stack_count")
0b 6e 64 

# if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# 010c1 Cmp8 [Register(0x64), Register(0x49)]
#       if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
15 64 49 

# 010c4 JcImm [Label24(RpnCalc_handle_while_end_46)]
#       if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
71 90 11 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_while_body_45)], resolved: None }
# :RpnCalc_handle_while_body_45 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# RpnCalc_handle_while_body_45
# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("i")] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }\nCall(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call print_dec8(td0f3,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("i")] })
# 010c8 Copy8 [Register(0x49), Register(0x00)]
#       Arg0[a]=td0f3 None <= call print_dec8(td0f3,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("i")] })
0b 49 00 

# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 197, 198, 199, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 010cb AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 

# 010d1 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c db 10 00 00 

# 010d7 JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 e7 31 00 

# 010db AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 

# tebdf <- 0n58/0x3au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 58)] })
# Number(U8, 58)
# 010e1 LoadImm8 [Register(0x6c), Constant8(0x3a=58)]
#       tebdf <- 0n58/0x3au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 58)] })
#       Number(U8, 58)
04 6c 3a 

# inline_RpnCalc_handle_putc_27_c <- tebdf U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 58)] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_27_c <- tebdf U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 58)] })\n", opcode: Copy8, args: [Register(0x6c), Register(0x6c)], resolved: None }
# inline_RpnCalc_handle_putc_27_tac13 <- inline_RpnCalc_handle_putc_27_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_27_tac13 <- inline_RpnCalc_handle_putc_27_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x6c), Register(0x6c)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_27_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 010e4 Out0 [Register(0x6c)]
#       IoWrite0
68 6c 

# inline_RpnCalc_handle_putc_27_tac13 <- inline_RpnCalc_handle_putc_27_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_27_tac13 <- inline_RpnCalc_handle_putc_27_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x6c), Register(0x6c)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_27_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 010e6 Copy8 [Register(0x6c), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_27_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_27_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 6c 00 

# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 010e9 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 010ef StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c f9 10 00 00 

# 010f5 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 010f9 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_27_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_27_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_27_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_27_function_end_putc None
# inline_RpnCalc_handle_putc_27_function_end_putc
# tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
# Ident("stack")
# 010ff Copy32 [Register(0x70), Register(0x4c)]
#       tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
#       Ident("stack")
21 70 4c 

# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
# Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }\nCall(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })\nCall(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })\nCast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# t4376 U32 <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
# Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }
# 01102 LoadImm32 [Register(0x40), Constant32(0x00000000=0)]
#       Zero-pad for t4376 U32 <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
#       Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }
20 40 00 00 00 00 

# 01108 Copy8 [Register(0x49), Register(0x40)]
#       t4376 U32 <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
#       Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }
0b 49 40 

# inline_RpnCalc_handle_stack_get_87_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
# 0110b Copy32 [Register(0x4c), Register(0x44)]
#       inline_RpnCalc_handle_stack_get_87_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
21 4c 44 

# inline_RpnCalc_handle_stack_get_87_n <- t4376 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_87_n <- t4376 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }\nCall(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })\nCall(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_get_87_t587d <- inline_RpnCalc_handle_stack_get_87_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(23,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_87_t587d <- inline_RpnCalc_handle_stack_get_87_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(23,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_get_87_values <- inline_RpnCalc_handle_stack_get_87_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(23,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_87_values <- inline_RpnCalc_handle_stack_get_87_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(23,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_get_87_tf90a <- inline_RpnCalc_handle_stack_get_87_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_87_tf90a <- inline_RpnCalc_handle_stack_get_87_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))\nReturn { value: Some(Index(\"values\", Ident(\"n\"))) }\nIndex(\"values\", Ident(\"n\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4)))\nCast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }\nIdent(\"values\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_get_87_t531d <- inline_RpnCalc_handle_stack_get_87_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
# Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_87_t531d <- inline_RpnCalc_handle_stack_get_87_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))\nReturn { value: Some(Index(\"values\", Ident(\"n\"))) }\nIndex(\"values\", Ident(\"n\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4)))\nArithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_get_87_td38d <- inline_RpnCalc_handle_stack_get_87_t531d Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
# Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))
# 0110e LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_get_87_td38d <- inline_RpnCalc_handle_stack_get_87_t531d Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
#       Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))
20 00 04 00 00 00 

# 01114 Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_get_87_td38d <- inline_RpnCalc_handle_stack_get_87_t531d Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
#       Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))
11 40 00 40 

# 01118 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_get_87_td38d <- inline_RpnCalc_handle_stack_get_87_t531d Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
#       Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))
04 42 00 

# 0111b LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_get_87_td38d <- inline_RpnCalc_handle_stack_get_87_t531d Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
#       Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))
04 43 00 

# inline_RpnCalc_handle_stack_get_87_t5abb <- inline_RpnCalc_handle_stack_get_87_tf90a Add Var(inline_RpnCalc_handle_stack_get_87_td38d) Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
# 0111e ClearCarry []
#       inline_RpnCalc_handle_stack_get_87_t5abb <- inline_RpnCalc_handle_stack_get_87_tf90a Add Var(inline_RpnCalc_handle_stack_get_87_td38d) Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
03 

# 0111f AddCarry32_1 [Register(0x44), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_get_87_t5abb <- inline_RpnCalc_handle_stack_get_87_tf90a Add Var(inline_RpnCalc_handle_stack_get_87_td38d) Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
30 44 40 40 

# 01123 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_get_87_t5abb <- inline_RpnCalc_handle_stack_get_87_tf90a Add Var(inline_RpnCalc_handle_stack_get_87_td38d) Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_stack_get_87_t2db0 <- mem[inline_RpnCalc_handle_stack_get_87_t5abb] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# 01124 Load32 [Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_get_87_t2db0 <- mem[inline_RpnCalc_handle_stack_get_87_t5abb] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
22 40 40 

# tb336 <- inline_RpnCalc_handle_stack_get_87_t2db0 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# optimized away noop copy Instruction { source: "tb336 <- inline_RpnCalc_handle_stack_get_87_t2db0 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))\nReturn { value: Some(Index(\"values\", Ident(\"n\"))) }\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# goto inline_RpnCalc_handle_stack_get_87_function_end_stack_get Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_get_87_function_end_stack_get Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))\nReturn { value: Some(Index(\"values\", Ident(\"n\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_get_87_function_end_stack_get)], resolved: None }
# :inline_RpnCalc_handle_stack_get_87_function_end_stack_get None
# inline_RpnCalc_handle_stack_get_87_function_end_stack_get
# None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
# 01127 Copy32 [Register(0x40), Register(0x00)]
#       Arg0[a]=tb336 None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
21 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [108, 109, 110, 112, 113, 114, 115, 116, 117]
# 0112a Push8 [Register(0x75)]
#       Saving reg0x75 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 75 

# 0112c Push8 [Register(0x74)]
#       Saving reg0x74 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 74 

# 0112e Push8 [Register(0x73)]
#       Saving reg0x73 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 73 

# 01130 Push8 [Register(0x72)]
#       Saving reg0x72 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 72 

# 01132 Push8 [Register(0x71)]
#       Saving reg0x71 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 71 

# 01134 Push8 [Register(0x70)]
#       Saving reg0x70 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 70 

# 01136 Push8 [Register(0x6e)]
#       Saving reg0x6e before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 6e 

# 01138 Push8 [Register(0x6d)]
#       Saving reg0x6d before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 6d 

# 0113a Push8 [Register(0x6c)]
#       Saving reg0x6c before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 6c 

# 0113c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 01142 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 4c 11 00 00 

# 01148 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 fa 2f 00 

# 0114c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 01152 Pop8 [Register(0x6c)]
#       Restoring reg0x6c after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 6c 

# 01154 Pop8 [Register(0x6d)]
#       Restoring reg0x6d after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 6d 

# 01156 Pop8 [Register(0x6e)]
#       Restoring reg0x6e after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 6e 

# 01158 Pop8 [Register(0x70)]
#       Restoring reg0x70 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 70 

# 0115a Pop8 [Register(0x71)]
#       Restoring reg0x71 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 71 

# 0115c Pop8 [Register(0x72)]
#       Restoring reg0x72 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 72 

# 0115e Pop8 [Register(0x73)]
#       Restoring reg0x73 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 73 

# 01160 Pop8 [Register(0x74)]
#       Restoring reg0x74 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 74 

# 01162 Pop8 [Register(0x75)]
#       Restoring reg0x75 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 75 

# td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 01164 LoadImm8 [Register(0x75), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 75 0a 

# inline_RpnCalc_handle_putc_28_c <- td7b5 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# 01167 Copy8 [Register(0x75), Register(0x6c)]
#       inline_RpnCalc_handle_putc_28_c <- td7b5 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
0b 75 6c 

# inline_RpnCalc_handle_putc_28_tac13 <- inline_RpnCalc_handle_putc_28_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_28_tac13 <- inline_RpnCalc_handle_putc_28_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x6c), Register(0x6c)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_28_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 0116a Out0 [Register(0x6c)]
#       IoWrite0
68 6c 

# inline_RpnCalc_handle_putc_28_tac13 <- inline_RpnCalc_handle_putc_28_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_28_tac13 <- inline_RpnCalc_handle_putc_28_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x6c), Register(0x6c)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_28_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 0116c Copy8 [Register(0x6c), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_28_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_28_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 6c 00 

# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 0116f AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 01175 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 7f 11 00 00 

# 0117b JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 0117f AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_28_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_28_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_28_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_28_function_end_putc None
# inline_RpnCalc_handle_putc_28_function_end_putc
# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }\nArithmetic(Add, Ident(\"i\"), Number(U8, 1))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# 01185 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
04 00 01 

# 01188 Add8NoCarryIn [Register(0x49), Register(0x00), Register(0x49)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
14 49 00 49 

# goto RpnCalc_handle_while_predicate_44 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# 0118c JmpImm [Label24(RpnCalc_handle_while_predicate_44)]
#       goto RpnCalc_handle_while_predicate_44 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
70 be 10 00 

# :RpnCalc_handle_while_end_46 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_while_end_46
# goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# 01190 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
70 36 12 00 

# :RpnCalc_handle_if_else_9_43 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_9_43
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t2ac9 <- 0n57/0x39u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
# Number(U8, 57)
# 01194 LoadImm8 [Register(0x49), Constant8(0x39=57)]
#       t2ac9 <- 0n57/0x39u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
#       Number(U8, 57)
04 49 39 

# if tdcd9 <= t2ac9 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
# 01197 Cmp8 [Register(0x48), Register(0x49)]
#       if tdcd9 <= t2ac9 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
15 48 49 

# 0119a JcImm [Label24(RpnCalc_handle_if_true_10_47)]
#       if tdcd9 <= t2ac9 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
71 a2 11 00 

# 0119e JmpImm [Label24(RpnCalc_handle_if_else_10_48)]
#       if tdcd9 <= t2ac9 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
70 36 12 00 

# :RpnCalc_handle_if_true_10_47 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_10_47
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }\nComparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# tf48d <- 0n48/0x30u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
# Number(U8, 48)
# 011a2 LoadImm8 [Register(0x49), Constant8(0x30=48)]
#       tf48d <- 0n48/0x30u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
#       Number(U8, 48)
04 49 30 

# if tdcd9 >= tf48d then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
# 011a5 Cmp8 [Register(0x49), Register(0x48)]
#       if tdcd9 >= tf48d then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
15 49 48 

# 011a8 JcImm [Label24(RpnCalc_handle_if_true_0_50)]
#       if tdcd9 >= tf48d then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
71 b0 11 00 

# 011ac JmpImm [Label24(RpnCalc_handle_if_else_0_51)]
#       if tdcd9 >= tf48d then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
70 32 12 00 

# :RpnCalc_handle_if_true_0_50 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_50
# tb1ed <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# 011b0 Copy32 [Register(0x44), Register(0x3c)]
#       tb1ed <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
#       Ident("c")
21 44 3c 

# tfdb7 <- tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 011b3 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       tfdb7 <- tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 3c 48 00 00 00 

# tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
# Number(U8, 1)
# 011b9 LoadImm8 [Register(0x64), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
#       Number(U8, 1)
04 64 01 

# mem[tfdb7] <- tfcd U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
# 011bc Store8 [Register(0x64), Register(0x3c)]
#       mem[tfdb7] <- tfcd U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
06 64 3c 

# tb1ed <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# 011bf Copy32 [Register(0x44), Register(0x3c)]
#       tb1ed <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
#       Ident("c")
21 44 3c 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 011c2 Copy32 [Register(0x3c), Register(0x4c)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 3c 4c 

# 011c5 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 4c 44 00 00 00 

# tb1ed <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# 011cb Copy32 [Register(0x44), Register(0x3c)]
#       tb1ed <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
#       Ident("c")
21 44 3c 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 011ce Copy32 [Register(0x3c), Register(0x4c)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 3c 4c 

# 011d1 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 4c 44 00 00 00 

# td60 <- mem[t6e8e] U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 011d7 Load32 [Register(0x4c), Register(0x40)]
#       td60 <- mem[t6e8e] U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 4c 40 

# inline_RpnCalc_handle_mul32_by10_13_a <- td60 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# 011da Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_by10_13_a <- td60 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
21 40 3c 

# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 011dd ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 011de AddCarry32_1 [Register(0x3c), Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 3c 3c 3c 

# 011e2 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 011e3 ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 011e4 AddCarry32_1 [Register(0x3c), Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 3c 3c 40 

# 011e8 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# 011e9 ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
03 

# 011ea AddCarry32_1 [Register(0x40), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
30 40 40 40 

# 011ee AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
31 

# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 011ef ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 

# 011f0 AddCarry32_1 [Register(0x40), Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 40 3c 3c 

# 011f4 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 

# tadd <- inline_RpnCalc_handle_mul32_by10_13_t7eaf U32 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# optimized away noop copy Instruction { source: "tadd <- inline_RpnCalc_handle_mul32_by10_13_t7eaf U32 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# goto inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10)], resolved: None }
# :inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10 None
# inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10
# mem[t6e8e] <- tadd U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# 011f5 Store32_1 [Register(0x3c), Register(0x4c)]
#       mem[t6e8e] <- tadd U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
23 3c 4c 

# 011f8 Store32_2 []
#       mem[t6e8e] <- tadd U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
24 

# tb1ed <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# 011f9 Copy32 [Register(0x44), Register(0x3c)]
#       tb1ed <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
#       Ident("c")
21 44 3c 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 011fc Copy32 [Register(0x3c), Register(0x4c)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 3c 4c 

# 011ff AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 4c 44 00 00 00 

# tb1ed <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# 01205 Copy32 [Register(0x44), Register(0x3c)]
#       tb1ed <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
#       Ident("c")
21 44 3c 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 01208 Copy32 [Register(0x3c), Register(0x4c)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 3c 4c 

# 0120b AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 4c 44 00 00 00 

# td60 <- mem[t6e8e] U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# PtrFieldDeref("c", "num")
# 01211 Load32 [Register(0x4c), Register(0x40)]
#       td60 <- mem[t6e8e] U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       PtrFieldDeref("c", "num")
22 4c 40 

# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
# Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })\nCast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }\nArithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t7ff1 <- tdcd9 Subtract Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
# Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
# 01214 LoadImm8 [Register(0x00), Constant8(0xd0=208)]
#       t7ff1 <- tdcd9 Subtract Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
04 00 d0 

# 01217 Add8NoCarryIn [Register(0x48), Register(0x00), Register(0x49)]
#       t7ff1 <- tdcd9 Subtract Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
14 48 00 49 

# t3f70 U32 <- t7ff1 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
# 0121b LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       Zero-pad for t3f70 U32 <- t7ff1 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
20 3c 00 00 00 00 

# 01221 Copy8 [Register(0x49), Register(0x3c)]
#       t3f70 U32 <- t7ff1 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
0b 49 3c 

# tacf6 <- td60 Add Var(t3f70) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# 01224 ClearCarry []
#       tacf6 <- td60 Add Var(t3f70) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
03 

# 01225 AddCarry32_1 [Register(0x40), Register(0x3c), Register(0x3c)]
#       tacf6 <- td60 Add Var(t3f70) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
30 40 3c 3c 

# 01229 AddCarry32_2 []
#       tacf6 <- td60 Add Var(t3f70) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
31 

# mem[t6e8e] <- tacf6 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# 0122a Store32_1 [Register(0x3c), Register(0x4c)]
#       mem[t6e8e] <- tacf6 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
23 3c 4c 

# 0122d Store32_2 []
#       mem[t6e8e] <- tacf6 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
24 

# goto RpnCalc_handle_if_end_49 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# 0122e JmpImm [Label24(RpnCalc_handle_if_end_49)]
#       goto RpnCalc_handle_if_end_49 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
70 32 12 00 

# :RpnCalc_handle_if_else_0_51 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_0_51
# :RpnCalc_handle_if_end_49 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_end_49
# goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# 01232 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
70 36 12 00 

# :RpnCalc_handle_if_else_10_48 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_10_48
# :RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_end_23
# tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(118,5))
# Return { value: Some(Number(U8, 1)) }
# Number(U8, 1)
# 01236 LoadImm8 [Register(0x64), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(118,5))
#       Return { value: Some(Number(U8, 1)) }
#       Number(U8, 1)
04 64 01 

# return Some(tfcd) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(118,5))
# Return { value: Some(Number(U8, 1)) }
# 01239 Copy8 [Register(0x64), Register(0x00)]
#       return Some(tfcd) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(118,5))
#       Return { value: Some(Number(U8, 1)) }
0b 64 00 

# 0123c JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_RpnCalc_handle None
# function_end_RpnCalc_handle
# Unreachable None
# 0123e Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :RpnCalc_run
# Ret Some(U8)
# Arg0=calc
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var calc (Arg0 calc Ptr(Struct("RpnCalc"))) Reg(U32) Some([120, 121, 122, 123])
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_77_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_run_getchar_77_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([128, 129, 130, 131])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t1d36 (t1d36 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([136])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t44ed (t44ed Ident("value")) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([128, 129, 130, 131])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t565a (t565a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([128, 129, 130, 131])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t6fdb (t6fdb Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tae11 (tae11 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb469 (tb469 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) Reg(U32) Some([140, 141, 142, 143])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb6dd (tb6dd PtrFieldDeref("s", "first")) Reg(U8) Some([144])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb702 (tb702 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([148, 149, 150, 151])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_value (Local value Number(U8) Reg(U8)) Reg(U8) Some([136])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_n (Arg1 n Number(U8)) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t1d36 (t1d36 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([140, 141, 142, 143])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t2187 (t2187 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([140, 141, 142, 143])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([152])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t531d (t531d Ident("n")) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t565a (t565a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([148, 149, 150, 151])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t6778 (t6778 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([156, 157, 158, 159])
# Var inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([140, 141, 142, 143])
# Var inline_RpnCalc_run_getchar_77_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_run_getchar_77_t0 (static "stdin") Reg(U32) Some([128, 129, 130, 131])
# Var inline_RpnCalc_run_getchar_77_t1 (static "stdin") Reg(U32) Some([128, 129, 130, 131])
# Var inline_RpnCalc_run_getchar_77_t861f (t861f Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_77_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([136])
# Var inline_RpnCalc_run_getchar_77_tb816 (tb816 TtyIn) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_77_tc9d5 (tc9d5 Call(Call { function: "Keyboard_poll", parameters: [] })) Reg(U8) Some([160])
# Var inline_RpnCalc_run_getchar_77_tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_77_te31 (te31 Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })) Reg(U8) Some([160])
# Var inline_RpnCalc_run_getchar_77_tf0b5 (tf0b5 Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_77_tfff6 (tfff6 AddressOf(Ident("stdin"))) Reg(U32) Some([132, 133, 134, 135])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var result (Local result Number(U8) Reg(U8)) Reg(U8) Some([124])
# Var t57fd (t57fd Ident("result")) Reg(U8) Some([124])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([136])
# Var td337 (td337 Ident("calc")) Reg(U32) Some([120, 121, 122, 123])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([124])
# 01243 Copy32 [Register(0x00), Register(0x78)]
#       Save function parameter 'calc' registers [0, 1, 2, 3] to locals [120, 121, 122, 123].
21 00 78 

# :RpnCalc_run_while_predicate_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
# RpnCalc_run_while_predicate_0
# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
# Number(U8, 0)
# 01246 LoadImm8 [Register(0x88), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
#       Number(U8, 0)
04 88 00 

# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
# Number(U8, 0)
# 01249 LoadImm8 [Register(0x88), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
#       Number(U8, 0)
04 88 00 

# if tb36e == tb36e then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
# 0124c Cmp8 [Register(0x88), Register(0x88)]
#       if tb36e == tb36e then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
15 88 88 

# 0124f JzImm [Label24(RpnCalc_run_while_body_1)]
#       if tb36e == tb36e then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
72 57 12 00 

# 01253 JmpImm [Label24(RpnCalc_run_while_end_2)]
#       if tb36e == tb36e then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
70 0a 14 00 

# :RpnCalc_run_while_body_1 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
# RpnCalc_run_while_body_1
# inline_RpnCalc_run_getchar_77_ch <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/stdio.j':(15,5))
# Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(U8, 0) }
# Number(U8, 0)
# 01257 LoadImm8 [Register(0x7c), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_77_ch <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/stdio.j':(15,5))
#       Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(U8, 0) }
#       Number(U8, 0)
04 7c 00 

# :inline_RpnCalc_run_getchar_77_getchar_while_predicate_0 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# inline_RpnCalc_run_getchar_77_getchar_while_predicate_0
# inline_RpnCalc_run_getchar_77_tdcd9 <- inline_RpnCalc_run_getchar_77_ch U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_77_tdcd9 <- inline_RpnCalc_run_getchar_77_ch U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))\nWhile { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_RpnCalc_run_getchar_77_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
# Number(U8, 0)
# 0125a LoadImm8 [Register(0x88), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_77_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
#       Number(U8, 0)
04 88 00 

# if inline_RpnCalc_run_getchar_77_tdcd9 == inline_RpnCalc_run_getchar_77_tb36e then 'inline_RpnCalc_run_getchar_77_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_77_getchar_while_end_2' Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
# 0125d Cmp8 [Register(0x7c), Register(0x88)]
#       if inline_RpnCalc_run_getchar_77_tdcd9 == inline_RpnCalc_run_getchar_77_tb36e then 'inline_RpnCalc_run_getchar_77_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_77_getchar_while_end_2' Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
15 7c 88 

# 01260 JzImm [Label24(inline_RpnCalc_run_getchar_77_getchar_while_body_1)]
#       if inline_RpnCalc_run_getchar_77_tdcd9 == inline_RpnCalc_run_getchar_77_tb36e then 'inline_RpnCalc_run_getchar_77_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_77_getchar_while_end_2' Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
72 68 12 00 

# 01264 JmpImm [Label24(inline_RpnCalc_run_getchar_77_getchar_while_end_2)]
#       if inline_RpnCalc_run_getchar_77_tdcd9 == inline_RpnCalc_run_getchar_77_tb36e then 'inline_RpnCalc_run_getchar_77_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_77_getchar_while_end_2' Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
70 65 13 00 

# :inline_RpnCalc_run_getchar_77_getchar_while_body_1 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# inline_RpnCalc_run_getchar_77_getchar_while_body_1
# Some(inline_RpnCalc_run_getchar_77_t861f) <= call io_ready_to_read() Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
# Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
# Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))
# Call(Call { function: "io_ready_to_read", parameters: [] })
# 01268 IoReadyToRead [Register(0x7c)]
#       ReadyToRead
79 7c 

# inline_RpnCalc_run_getchar_77_tf0b5 <- inline_RpnCalc_run_getchar_77_t861f BitwiseAnd Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
# Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
# Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))
# 0126a LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_77_tf0b5 <- inline_RpnCalc_run_getchar_77_t861f BitwiseAnd Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
#       Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))
04 00 01 

# 0126d And8 [Register(0x7c), Register(0x00), Register(0x7c)]
#       inline_RpnCalc_run_getchar_77_tf0b5 <- inline_RpnCalc_run_getchar_77_t861f BitwiseAnd Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
#       Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))
1b 7c 00 7c 

# inline_RpnCalc_run_getchar_77_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
# Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
# Number(U8, 0)
# 01271 LoadImm8 [Register(0x88), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_77_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
#       Number(U8, 0)
04 88 00 

# if inline_RpnCalc_run_getchar_77_tf0b5 != inline_RpnCalc_run_getchar_77_tb36e then 'inline_RpnCalc_run_getchar_77_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_77_getchar_if_else_0_5' Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
# Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
# 01274 Cmp8 [Register(0x7c), Register(0x88)]
#       if inline_RpnCalc_run_getchar_77_tf0b5 != inline_RpnCalc_run_getchar_77_tb36e then 'inline_RpnCalc_run_getchar_77_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_77_getchar_if_else_0_5' Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
15 7c 88 

# 01277 JzImm [Label24(inline_RpnCalc_run_getchar_77_getchar_if_else_0_5)]
#       if inline_RpnCalc_run_getchar_77_tf0b5 != inline_RpnCalc_run_getchar_77_tb36e then 'inline_RpnCalc_run_getchar_77_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_77_getchar_if_else_0_5' Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
72 ca 12 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_run_getchar_77_tf0b5 != inline_RpnCalc_run_getchar_77_tb36e then 'inline_RpnCalc_run_getchar_77_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_77_getchar_if_else_0_5' Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }\nComparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_77_getchar_if_true_0_4)], resolved: None }
# :inline_RpnCalc_run_getchar_77_getchar_if_true_0_4 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
# inline_RpnCalc_run_getchar_77_getchar_if_true_0_4
# inline_RpnCalc_run_getchar_77_t0 <- 0n987228/0x000f105cu32  Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# AddressOf(Ident("stdin"))
# 0127b LoadImm32 [Register(0x80), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_run_getchar_77_t0 <- 0n987228/0x000f105cu32  Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       AddressOf(Ident("stdin"))
20 80 5c 10 0f 00 

# inline_RpnCalc_run_getchar_77_tfff6 <- inline_RpnCalc_run_getchar_77_t0 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# AddressOf(Ident("stdin"))
# 01281 Copy32 [Register(0x80), Register(0x84)]
#       inline_RpnCalc_run_getchar_77_tfff6 <- inline_RpnCalc_run_getchar_77_t0 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       AddressOf(Ident("stdin"))
21 80 84 

# inline_RpnCalc_run_getchar_77_tb816 <- ttyin Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# TtyIn
# 01284 In0 [Register(0x7c)]
#       inline_RpnCalc_run_getchar_77_tb816 <- ttyin Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       TtyIn
60 7c 

# inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_s <- inline_RpnCalc_run_getchar_77_tfff6 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_s <- inline_RpnCalc_run_getchar_77_tfff6 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })\n", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_n <- inline_RpnCalc_run_getchar_77_tb816 U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_n <- inline_RpnCalc_run_getchar_77_tb816 U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })\n", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t565a <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(24,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t565a <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(24,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_values <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t565a U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(24,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 01286 Copy32 [Register(0x84), Register(0x8c)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_values <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t565a U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(24,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 84 8c 

# inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t1d36 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_values U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t1d36 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_values U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\nCast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }\nIdent(\"values\")\n", opcode: Copy32, args: [Register(0x8c), Register(0x8c)], resolved: None }
# inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t4d4f <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t4d4f <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_tc1ff <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 01289 Copy32 [Register(0x84), Register(0x9c)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_tc1ff <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 84 9c 

# 0128c AddImm32IgnoreCarry [Register(0x9c), Constant32(0x00000104=260)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_tc1ff <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 9c 04 01 00 00 

# inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t3ee <- mem[inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_tc1ff] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 01292 Load8 [Register(0x9c), Register(0x98)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t3ee <- mem[inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_tc1ff] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 9c 98 

# inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t5bb7 U32 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t3ee U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# 01295 LoadImm32 [Register(0x94), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t5bb7 U32 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t3ee U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
20 94 00 00 00 00 

# 0129b Copy8 [Register(0x98), Register(0x94)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t5bb7 U32 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t3ee U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
0b 98 94 

# inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t2187 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t1d36 Add Var(inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t5bb7) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# 0129e ClearCarry []
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t2187 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t1d36 Add Var(inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t5bb7) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
03 

# 0129f AddCarry32_1 [Register(0x8c), Register(0x94), Register(0x8c)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t2187 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t1d36 Add Var(inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t5bb7) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
30 8c 94 8c 

# 012a3 AddCarry32_2 []
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t2187 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t1d36 Add Var(inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t5bb7) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
31 

# inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t531d <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_n U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t531d <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_n U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# mem[inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t2187] <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t531d U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 012a4 Store8 [Register(0x7c), Register(0x8c)]
#       mem[inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t2187] <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t531d U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 7c 8c 

# inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t4d4f <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t4d4f <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_tc1ff <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 012a7 Copy32 [Register(0x84), Register(0x9c)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_tc1ff <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 84 9c 

# 012aa AddImm32IgnoreCarry [Register(0x9c), Constant32(0x00000104=260)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_tc1ff <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 9c 04 01 00 00 

# inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t4d4f <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t4d4f <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_tc1ff <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 012b0 Copy32 [Register(0x84), Register(0x9c)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_tc1ff <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 84 9c 

# 012b3 AddImm32IgnoreCarry [Register(0x9c), Constant32(0x00000104=260)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_tc1ff <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 9c 04 01 00 00 

# inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t3ee <- mem[inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_tc1ff] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# 012b9 Load8 [Register(0x9c), Register(0x98)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t3ee <- mem[inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_tc1ff] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
05 9c 98 

# inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t6778 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t3ee Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# 012bc LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t6778 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t3ee Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
04 00 01 

# 012bf Add8NoCarryIn [Register(0x98), Register(0x00), Register(0x7c)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t6778 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t3ee Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
14 98 00 7c 

# mem[inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_tc1ff] <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t6778 U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# 012c3 Store8 [Register(0x7c), Register(0x9c)]
#       mem[inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_tc1ff] <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_t6778 U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
06 7c 9c 

# goto inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_function_end_queue_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_function_end_queue_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_function_end_queue_push)], resolved: None }
# :inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_function_end_queue_push None
# inline_RpnCalc_run_getchar_77_inline_getchar_queue_push_76_function_end_queue_push
# goto inline_RpnCalc_run_getchar_77_getchar_if_end_3 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# 012c6 JmpImm [Label24(inline_RpnCalc_run_getchar_77_getchar_if_end_3)]
#       goto inline_RpnCalc_run_getchar_77_getchar_if_end_3 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
70 e0 12 00 

# :inline_RpnCalc_run_getchar_77_getchar_if_else_0_5 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# inline_RpnCalc_run_getchar_77_getchar_if_else_0_5
# None <= call Keyboard_poll() Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }
# Call(Call { function: "Keyboard_poll", parameters: [] })
# Registers used by this function: {120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 156, 157, 158, 159, 160}
# Registers used by callee tree: {24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57}
# Registers to save: []
# 012ca AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:Keyboard_poll))
32 0c fc ff ff ff 

# 012d0 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:Keyboard_poll))
25 0c da 12 00 00 

# 012d6 JmpImm [Label24(:Keyboard_poll)]
#       PseudoCall(Label24(:Keyboard_poll))
70 46 04 00 

# 012da AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:Keyboard_poll))
32 0c 04 00 00 00 

# :inline_RpnCalc_run_getchar_77_getchar_if_end_3 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# inline_RpnCalc_run_getchar_77_getchar_if_end_3
# inline_RpnCalc_run_getchar_77_t1 <- 0n987228/0x000f105cu32  Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
# AddressOf(Ident("stdin"))
# 012e0 LoadImm32 [Register(0x80), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_run_getchar_77_t1 <- 0n987228/0x000f105cu32  Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
#       Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
#       AddressOf(Ident("stdin"))
20 80 5c 10 0f 00 

# inline_RpnCalc_run_getchar_77_tfff6 <- inline_RpnCalc_run_getchar_77_t1 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
# AddressOf(Ident("stdin"))
# 012e6 Copy32 [Register(0x80), Register(0x84)]
#       inline_RpnCalc_run_getchar_77_tfff6 <- inline_RpnCalc_run_getchar_77_t1 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
#       Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
#       AddressOf(Ident("stdin"))
21 80 84 

# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_s <- inline_RpnCalc_run_getchar_77_tfff6 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
# 012e9 Copy32 [Register(0x84), Register(0x80)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_s <- inline_RpnCalc_run_getchar_77_tfff6 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
#       Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
21 84 80 

# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t4d4f <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t4d4f <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\nComparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"first\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb702 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 012ec Copy32 [Register(0x80), Register(0x94)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb702 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 80 94 

# 012ef AddImm32IgnoreCarry [Register(0x94), Constant32(0x00000100=256)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb702 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 94 00 01 00 00 

# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb6dd <- mem[inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb702] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# 012f5 Load8 [Register(0x94), Register(0x90)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb6dd <- mem[inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb702] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
05 94 90 

# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t4d4f <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t4d4f <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\nComparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tc1ff <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 012f8 Copy32 [Register(0x80), Register(0x84)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tc1ff <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 80 84 

# 012fb AddImm32IgnoreCarry [Register(0x84), Constant32(0x00000104=260)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tc1ff <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 84 04 01 00 00 

# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t3ee <- mem[inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tc1ff] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 01301 Load8 [Register(0x84), Register(0x88)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t3ee <- mem[inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tc1ff] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 84 88 

# if inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb6dd == inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t3ee then 'inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_queue_pop_if_else_0_2' Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# 01304 Cmp8 [Register(0x90), Register(0x88)]
#       if inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb6dd == inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t3ee then 'inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_queue_pop_if_else_0_2' Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
15 90 88 

# 01307 JzImm [Label24(inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_queue_pop_if_true_0_1)]
#       if inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb6dd == inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t3ee then 'inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_queue_pop_if_else_0_2' Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
72 0f 13 00 

# 0130b JmpImm [Label24(inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_queue_pop_if_else_0_2)]
#       if inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb6dd == inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t3ee then 'inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_queue_pop_if_else_0_2' Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
70 1a 13 00 

# :inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_queue_pop_if_true_0_1 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_queue_pop_if_true_0_1
# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# Number(U8, 0)
# 0130f LoadImm8 [Register(0x7c), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(U8, 0)) }
#       Number(U8, 0)
04 7c 00 

# inline_RpnCalc_run_getchar_77_ch <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb36e U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_77_ch <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb36e U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))\nReturn { value: Some(Number(U8, 0)) }\n", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# goto inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_function_end_queue_pop Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# 01312 JmpImm [Label24(inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_function_end_queue_pop)]
#       goto inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_function_end_queue_pop Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(U8, 0)) }
70 61 13 00 

# goto inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_queue_pop_if_end_0 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# 01316 JmpImm [Label24(inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_queue_pop_if_end_0)]
#       goto inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_queue_pop_if_end_0 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
70 1a 13 00 

# :inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_queue_pop_if_else_0_2 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_queue_pop_if_else_0_2
# :inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_queue_pop_if_end_0 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_queue_pop_if_end_0
# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t565a <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t565a <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_values <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t565a U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 0131a Copy32 [Register(0x80), Register(0x84)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_values <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t565a U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 80 84 

# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t1d36 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_values U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t1d36 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_values U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))\nAssign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })\nCast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }\nIdent(\"values\")\n", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t4d4f <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t4d4f <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))\nAssign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }\nPtrFieldDeref(\"s\", \"first\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb702 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 0131d Copy32 [Register(0x80), Register(0x94)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb702 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 80 94 

# 01320 AddImm32IgnoreCarry [Register(0x94), Constant32(0x00000100=256)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb702 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 94 00 01 00 00 

# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb6dd <- mem[inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb702] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# 01326 Load8 [Register(0x94), Register(0x90)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb6dd <- mem[inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb702] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
05 94 90 

# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb469 U32 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb6dd U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# 01329 LoadImm32 [Register(0x8c), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb469 U32 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb6dd U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
20 8c 00 00 00 00 

# 0132f Copy8 [Register(0x90), Register(0x8c)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb469 U32 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb6dd U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
0b 90 8c 

# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tae11 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t1d36 Add Var(inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb469) Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# 01332 ClearCarry []
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tae11 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t1d36 Add Var(inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb469) Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
03 

# 01333 AddCarry32_1 [Register(0x84), Register(0x8c), Register(0x84)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tae11 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t1d36 Add Var(inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb469) Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
30 84 8c 84 

# 01337 AddCarry32_2 []
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tae11 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t1d36 Add Var(inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb469) Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
31 

# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_value <- mem[inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tae11] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# 01338 Load8 [Register(0x84), Register(0x88)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_value <- mem[inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tae11] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
05 84 88 

# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t4d4f <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t4d4f <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb702 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 0133b Copy32 [Register(0x80), Register(0x94)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb702 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 80 94 

# 0133e AddImm32IgnoreCarry [Register(0x94), Constant32(0x00000100=256)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb702 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 94 00 01 00 00 

# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t4d4f <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t4d4f <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb702 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 01344 Copy32 [Register(0x80), Register(0x94)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb702 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 80 94 

# 01347 AddImm32IgnoreCarry [Register(0x94), Constant32(0x00000100=256)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb702 <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 94 00 01 00 00 

# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb6dd <- mem[inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb702] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# 0134d Load8 [Register(0x94), Register(0x90)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb6dd <- mem[inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb702] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
05 94 90 

# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t6fdb <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb6dd Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# 01350 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t6fdb <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb6dd Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
04 00 01 

# 01353 Add8NoCarryIn [Register(0x90), Register(0x00), Register(0x7c)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t6fdb <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb6dd Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
14 90 00 7c 

# mem[inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb702] <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t6fdb U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# 01357 Store8 [Register(0x7c), Register(0x94)]
#       mem[inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_tb702] <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t6fdb U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
06 7c 94 

# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t44ed <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_value U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# Ident("value")
# 0135a Copy8 [Register(0x88), Register(0x7c)]
#       inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t44ed <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_value U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
#       Ident("value")
0b 88 7c 

# inline_RpnCalc_run_getchar_77_ch <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t44ed U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_77_ch <- inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_t44ed U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(20,5))\nReturn { value: Some(Ident(\"value\")) }\n", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# goto inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_function_end_queue_pop Some('/home/john/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# 0135d JmpImm [Label24(inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_function_end_queue_pop)]
#       goto inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_function_end_queue_pop Some('/home/john/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
70 61 13 00 

# :inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_function_end_queue_pop None
# inline_RpnCalc_run_getchar_77_inline_getchar_queue_pop_74_function_end_queue_pop
# goto inline_RpnCalc_run_getchar_77_getchar_while_predicate_0 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# 01361 JmpImm [Label24(inline_RpnCalc_run_getchar_77_getchar_while_predicate_0)]
#       goto inline_RpnCalc_run_getchar_77_getchar_while_predicate_0 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
70 5a 12 00 

# :inline_RpnCalc_run_getchar_77_getchar_while_end_2 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# inline_RpnCalc_run_getchar_77_getchar_while_end_2
# inline_RpnCalc_run_getchar_77_tdcd9 <- inline_RpnCalc_run_getchar_77_ch U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(27,5))
# Return { value: Some(Ident("ch")) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_77_tdcd9 <- inline_RpnCalc_run_getchar_77_ch U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(27,5))\nReturn { value: Some(Ident(\"ch\")) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# ch <- inline_RpnCalc_run_getchar_77_tdcd9 U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(27,5))
# Return { value: Some(Ident("ch")) }
# optimized away noop copy Instruction { source: "ch <- inline_RpnCalc_run_getchar_77_tdcd9 U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(27,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# goto inline_RpnCalc_run_getchar_77_function_end_getchar Some('/home/john/lutcomp/programs/lib/stdio.j':(27,5))
# Return { value: Some(Ident("ch")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_run_getchar_77_function_end_getchar Some('/home/john/lutcomp/programs/lib/stdio.j':(27,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_77_function_end_getchar)], resolved: None }
# :inline_RpnCalc_run_getchar_77_function_end_getchar None
# inline_RpnCalc_run_getchar_77_function_end_getchar
# td337 <- calc U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
# Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
# Ident("calc")
# optimized away noop copy Instruction { source: "td337 <- calc U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))\nAssign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }\nCall(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] })\nIdent(\"calc\")\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
# Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))\nAssign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }\nCall(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
# Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
# 01365 Copy32 [Register(0x78), Register(0x00)]
#       Arg0[c]=td337 Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
21 78 00 

# 01368 Copy8 [Register(0x7c), Register(0x04)]
#       Arg1[ch]=tdcd9 Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0b 7c 04 

# Registers used by this function: {120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 156, 157, 158, 159, 160}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 156, 160]
# 0136b Push8 [Register(0xa0)]
#       Saving reg0xa0 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 a0 

# 0136d Push8 [Register(0x9c)]
#       Saving reg0x9c before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 9c 

# 0136f Push8 [Register(0x98)]
#       Saving reg0x98 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 98 

# 01371 Push8 [Register(0x97)]
#       Saving reg0x97 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 97 

# 01373 Push8 [Register(0x96)]
#       Saving reg0x96 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 96 

# 01375 Push8 [Register(0x95)]
#       Saving reg0x95 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 95 

# 01377 Push8 [Register(0x94)]
#       Saving reg0x94 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 94 

# 01379 Push8 [Register(0x90)]
#       Saving reg0x90 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 90 

# 0137b Push8 [Register(0x8f)]
#       Saving reg0x8f before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 8f 

# 0137d Push8 [Register(0x8e)]
#       Saving reg0x8e before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 8e 

# 0137f Push8 [Register(0x8d)]
#       Saving reg0x8d before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 8d 

# 01381 Push8 [Register(0x8c)]
#       Saving reg0x8c before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 8c 

# 01383 Push8 [Register(0x88)]
#       Saving reg0x88 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 88 

# 01385 Push8 [Register(0x87)]
#       Saving reg0x87 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 87 

# 01387 Push8 [Register(0x86)]
#       Saving reg0x86 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 86 

# 01389 Push8 [Register(0x85)]
#       Saving reg0x85 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 85 

# 0138b Push8 [Register(0x84)]
#       Saving reg0x84 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 84 

# 0138d Push8 [Register(0x83)]
#       Saving reg0x83 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 83 

# 0138f Push8 [Register(0x82)]
#       Saving reg0x82 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 82 

# 01391 Push8 [Register(0x81)]
#       Saving reg0x81 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 81 

# 01393 Push8 [Register(0x80)]
#       Saving reg0x80 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 80 

# 01395 Push8 [Register(0x7c)]
#       Saving reg0x7c before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7c 

# 01397 Push8 [Register(0x7b)]
#       Saving reg0x7b before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7b 

# 01399 Push8 [Register(0x7a)]
#       Saving reg0x7a before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7a 

# 0139b Push8 [Register(0x79)]
#       Saving reg0x79 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 79 

# 0139d Push8 [Register(0x78)]
#       Saving reg0x78 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 78 

# 0139f AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:RpnCalc_handle))
32 0c fc ff ff ff 

# 013a5 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:RpnCalc_handle))
25 0c af 13 00 00 

# 013ab JmpImm [Label24(:RpnCalc_handle)]
#       PseudoCall(Label24(:RpnCalc_handle))
70 b4 05 00 

# 013af AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:RpnCalc_handle))
32 0c 04 00 00 00 

# 013b5 Pop8 [Register(0x78)]
#       Restoring reg0x78 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 78 

# 013b7 Pop8 [Register(0x79)]
#       Restoring reg0x79 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 79 

# 013b9 Pop8 [Register(0x7a)]
#       Restoring reg0x7a after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7a 

# 013bb Pop8 [Register(0x7b)]
#       Restoring reg0x7b after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7b 

# 013bd Pop8 [Register(0x7c)]
#       Restoring reg0x7c after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7c 

# 013bf Pop8 [Register(0x80)]
#       Restoring reg0x80 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 80 

# 013c1 Pop8 [Register(0x81)]
#       Restoring reg0x81 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 81 

# 013c3 Pop8 [Register(0x82)]
#       Restoring reg0x82 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 82 

# 013c5 Pop8 [Register(0x83)]
#       Restoring reg0x83 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 83 

# 013c7 Pop8 [Register(0x84)]
#       Restoring reg0x84 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 84 

# 013c9 Pop8 [Register(0x85)]
#       Restoring reg0x85 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 85 

# 013cb Pop8 [Register(0x86)]
#       Restoring reg0x86 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 86 

# 013cd Pop8 [Register(0x87)]
#       Restoring reg0x87 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 87 

# 013cf Pop8 [Register(0x88)]
#       Restoring reg0x88 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 88 

# 013d1 Pop8 [Register(0x8c)]
#       Restoring reg0x8c after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 8c 

# 013d3 Pop8 [Register(0x8d)]
#       Restoring reg0x8d after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 8d 

# 013d5 Pop8 [Register(0x8e)]
#       Restoring reg0x8e after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 8e 

# 013d7 Pop8 [Register(0x8f)]
#       Restoring reg0x8f after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 8f 

# 013d9 Pop8 [Register(0x90)]
#       Restoring reg0x90 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 90 

# 013db Pop8 [Register(0x94)]
#       Restoring reg0x94 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 94 

# 013dd Pop8 [Register(0x95)]
#       Restoring reg0x95 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 95 

# 013df Pop8 [Register(0x96)]
#       Restoring reg0x96 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 96 

# 013e1 Pop8 [Register(0x97)]
#       Restoring reg0x97 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 97 

# 013e3 Pop8 [Register(0x98)]
#       Restoring reg0x98 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 98 

# 013e5 Pop8 [Register(0x9c)]
#       Restoring reg0x9c after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 9c 

# 013e7 Pop8 [Register(0xa0)]
#       Restoring reg0xa0 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a a0 

# 013e9 Copy8 [Register(0x00), Register(0x7c)]
#       Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0b 00 7c 

# t57fd <- result U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
# Ident("result")
# optimized away noop copy Instruction { source: "t57fd <- result U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }\nIdent(\"result\")\n", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
# Number(U8, 0)
# 013ec LoadImm8 [Register(0x88), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
#       Number(U8, 0)
04 88 00 

# if t57fd == tb36e then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
# 013ef Cmp8 [Register(0x7c), Register(0x88)]
#       if t57fd == tb36e then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
15 7c 88 

# 013f2 JzImm [Label24(RpnCalc_run_if_true_0_4)]
#       if t57fd == tb36e then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
72 fa 13 00 

# 013f6 JmpImm [Label24(RpnCalc_run_if_else_0_5)]
#       if t57fd == tb36e then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
70 06 14 00 

# :RpnCalc_run_if_true_0_4 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# RpnCalc_run_if_true_0_4
# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# Return { value: Some(Number(U8, 0)) }
# Number(U8, 0)
# 013fa LoadImm8 [Register(0x88), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Return { value: Some(Number(U8, 0)) }
#       Number(U8, 0)
04 88 00 

# return Some(tb36e) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# Return { value: Some(Number(U8, 0)) }
# 013fd Copy8 [Register(0x88), Register(0x00)]
#       return Some(tb36e) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Return { value: Some(Number(U8, 0)) }
0b 88 00 

# 01400 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto RpnCalc_run_if_end_3 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# 01402 JmpImm [Label24(RpnCalc_run_if_end_3)]
#       goto RpnCalc_run_if_end_3 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
70 06 14 00 

# :RpnCalc_run_if_else_0_5 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# RpnCalc_run_if_else_0_5
# :RpnCalc_run_if_end_3 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# RpnCalc_run_if_end_3
# goto RpnCalc_run_while_predicate_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# 01406 JmpImm [Label24(RpnCalc_run_while_predicate_0)]
#       goto RpnCalc_run_while_predicate_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
70 46 12 00 

# :RpnCalc_run_while_end_2 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# RpnCalc_run_while_end_2
# :function_end_RpnCalc_run None
# function_end_RpnCalc_run
# Unreachable None
# 0140a Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :delay
# Ret None
# Arg0=x
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([164, 165, 166, 167])
# Var tad57 (tad57 Ident("x")) Reg(U32) Some([168, 169, 170, 171])
# Var x (Arg0 x Number(USIZE)) Reg(U32) Some([168, 169, 170, 171])
# 0140f Copy32 [Register(0x00), Register(0xa8)]
#       Save function parameter 'x' registers [0, 1, 2, 3] to locals [168, 169, 170, 171].
21 00 a8 

# :delay_while_predicate_0 Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
# delay_while_predicate_0
# tad57 <- x U32 Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))\nWhile { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }] }\nComparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
# Number(USIZE, 0)
# 01412 LoadImm32 [Register(0xa4), Constant32(0x00000000=0)]
#       t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 a4 00 00 00 00 

# if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
# 01418 Cmp8 [Register(0xab), Register(0xa7)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
15 ab a7 

# 0141b Cmp8IfZero [Register(0xaa), Register(0xa6)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
16 aa a6 

# 0141e Cmp8IfZero [Register(0xa9), Register(0xa5)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
16 a9 a5 

# 01421 Cmp8IfZero [Register(0xa8), Register(0xa4)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
16 a8 a4 

# 01424 JzImm [Label24(delay_while_end_2)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
72 32 14 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))\nWhile { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }] }\nComparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }\n", opcode: JmpImm, args: [Label24(delay_while_body_1)], resolved: None }
# :delay_while_body_1 Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
# delay_while_body_1
# tad57 <- x U32 Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
# Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }
# Arithmetic(Subtract, Ident("x"), Number(USIZE, 1))
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))\nAssign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }\nArithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# x <- tad57 Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
# Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }
# Arithmetic(Subtract, Ident("x"), Number(USIZE, 1))
# 01428 AddImm32IgnoreCarry [Register(0xa8), Constant32(0xffffffff=4294967295)]
#       x <- tad57 Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
#       Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }
#       Arithmetic(Subtract, Ident("x"), Number(USIZE, 1))
32 a8 ff ff ff ff 

# goto delay_while_predicate_0 Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
# 0142e JmpImm [Label24(delay_while_predicate_0)]
#       goto delay_while_predicate_0 Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
70 12 14 00 

# :delay_while_end_2 Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
# delay_while_end_2
# return None None
# Return { value: None }
# 01432 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_delay None
# function_end_delay
# Unreachable None
# 01434 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :div32
# Ret Some(U32)
# Arg0=a
# Arg1=b
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var a (Arg0 a Number(USIZE)) Reg(U32) Some([172, 173, 174, 175])
# Var b (Arg1 b Number(USIZE)) Reg(U32) Some([176, 177, 178, 179])
# Var hi (Local hi Number(USIZE) Reg(U32)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_82_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_div32_div16_82_a (Arg0 a Number(USIZE)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_82_b (Arg1 b Number(USIZE)) Reg(U32) Some([176, 177, 178, 179])
# Var inline_div32_div16_82_hi (Local hi Number(USIZE) Reg(U32)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_82_inline_div16_mul16_32_4_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_div32_div16_82_inline_div16_mul16_32_4_a (Arg0 a Number(USIZE)) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_82_inline_div16_mul16_32_4_b (Arg1 b Number(USIZE)) Reg(U32) Some([188, 189, 190, 191])
# Var inline_div32_div16_82_inline_div16_mul16_32_4_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([192, 193, 194, 195])
# Var inline_div32_div16_82_inline_div16_mul16_32_4_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([196, 197, 198, 199])
# Var inline_div32_div16_82_inline_div16_mul16_32_4_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_82_inline_div16_mul16_32_4_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([196, 197, 198, 199])
# Var inline_div32_div16_82_inline_div16_mul16_32_4_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_div32_div16_82_inline_div16_mul16_32_4_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([200])
# Var inline_div32_div16_82_inline_div16_mul16_32_4_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([200])
# Var inline_div32_div16_82_inline_div16_mul16_32_4_t3585 (t3585 Ident("e")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_82_inline_div16_mul16_32_4_t45f5 (t45f5 Ident("d")) Reg(U32) Some([188, 189, 190, 191])
# Var inline_div32_div16_82_inline_div16_mul16_32_4_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([201])
# Var inline_div32_div16_82_inline_div16_mul16_32_4_t8792 (t8792 Ident("a")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_82_inline_div16_mul16_32_4_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_div16_82_inline_div16_mul16_32_4_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_82_inline_div16_mul16_32_4_tac13 (tac13 Ident("c")) Reg(U32) Some([192, 193, 194, 195])
# Var inline_div32_div16_82_inline_div16_mul16_32_4_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([200])
# Var inline_div32_div16_82_inline_div16_mul16_32_4_tace9 (tace9 Ident("b")) Reg(U32) Some([188, 189, 190, 191])
# Var inline_div32_div16_82_inline_div16_mul16_32_4_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([203])
# Var inline_div32_div16_82_inline_div16_mul16_32_4_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([200])
# Var inline_div32_div16_82_inline_div16_mul16_32_4_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([196, 197, 198, 199])
# Var inline_div32_div16_82_inline_div16_mul16_32_4_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([201])
# Var inline_div32_div16_82_inline_div16_mul16_32_4_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([196, 197, 198, 199])
# Var inline_div32_div16_82_inline_div16_mul16_32_4_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([204, 205, 206, 207])
# Var inline_div32_div16_82_inline_div16_shiftright1_81_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_div32_div16_82_inline_div16_shiftright1_81_a (Arg0 a Number(USIZE)) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_82_inline_div16_shiftright1_81_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_div32_div16_82_inline_div16_shiftright1_81_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([200])
# Var inline_div32_div16_82_inline_div16_shiftright1_81_t1bbf (t1bbf Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))) Reg(U8) Some([202])
# Var inline_div32_div16_82_inline_div16_shiftright1_81_t1f15 (t1f15 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) Reg(U8) Some([202])
# Var inline_div32_div16_82_inline_div16_shiftright1_81_t350e (t350e Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_div16_82_inline_div16_shiftright1_81_t4d1a (t4d1a Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))) Reg(U8) Some([202])
# Var inline_div32_div16_82_inline_div16_shiftright1_81_t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([202])
# Var inline_div32_div16_82_inline_div16_shiftright1_81_t5a19 (t5a19 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_div16_82_inline_div16_shiftright1_81_t5a73 (t5a73 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_div16_82_inline_div16_shiftright1_81_t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([200])
# Var inline_div32_div16_82_inline_div16_shiftright1_81_t8384 (t8384 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) Reg(U8) Some([202])
# Var inline_div32_div16_82_inline_div16_shiftright1_81_t8792 (t8792 Ident("a")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_82_inline_div16_shiftright1_81_t887d (t887d Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_div16_82_inline_div16_shiftright1_81_t9144 (t9144 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_div16_82_inline_div16_shiftright1_81_ta431 (ta431 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_div16_82_inline_div16_shiftright1_81_taa3e (taa3e Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_div16_82_inline_div16_shiftright1_81_tb911 (tb911 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_div16_82_inline_div16_shiftright1_81_tc29b (tc29b Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) Reg(U8) Some([208])
# Var inline_div32_div16_82_inline_div16_shiftright1_81_tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([208])
# Var inline_div32_div16_82_inline_div16_shiftright1_81_tf572 (tf572 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))) Reg(U8) Some([202])
# Var inline_div32_div16_82_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_div32_div16_82_lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([212, 213, 214, 215])
# Var inline_div32_div16_82_mid (Local mid Number(USIZE) Reg(U32)) Reg(U32) Some([216, 217, 218, 219])
# Var inline_div32_div16_82_r (Local r Number(USIZE) Reg(U32)) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_82_t1506 (t1506 Ident("lo")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_82_t3c0e (t3c0e Index("b", Number(U8, 0))) Reg(U8) Some([220])
# Var inline_div32_div16_82_t5508 (t5508 Ident("hi")) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_82_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_82_t8792 (t8792 Ident("a")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_82_t9c15 (t9c15 Number(USIZE, 256)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_82_tace9 (tace9 Ident("b")) Reg(U32) Some([176, 177, 178, 179])
# Var inline_div32_div16_82_tad57 (tad57 Ident("x")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_82_taee0 (taee0 Ident("r")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_82_tb0a8 (tb0a8 Index("x", Number(U8, 2))) Reg(U8) Some([200])
# Var inline_div32_div16_82_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([202])
# Var inline_div32_div16_82_tda9f (tda9f Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))) Reg(U8) Some([220])
# Var inline_div32_div16_82_tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([221])
# Var inline_div32_div16_82_te264 (te264 Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_82_tf1d1 (tf1d1 Arithmetic(Add, Ident("lo"), Ident("hi"))) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_82_tf944 (tf944 Index("x", Number(U8, 3))) Reg(U8) Some([200])
# Var inline_div32_div16_82_tfd7e (tfd7e Ident("mid")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_82_x (Local x Number(USIZE) Reg(U32)) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_shiftright1_83_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_div32_shiftright1_83_a (Arg0 a Number(USIZE)) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_shiftright1_83_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_div32_shiftright1_83_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([200])
# Var inline_div32_shiftright1_83_t1bbf (t1bbf Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_83_t1f15 (t1f15 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_83_t350e (t350e Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_83_t4d1a (t4d1a Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_83_t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_83_t5a19 (t5a19 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_83_t5a73 (t5a73 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_83_t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([200])
# Var inline_div32_shiftright1_83_t8384 (t8384 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_83_t8792 (t8792 Ident("a")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_shiftright1_83_t887d (t887d Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_83_t9144 (t9144 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_83_ta431 (ta431 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_83_taa3e (taa3e Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_83_tb911 (tb911 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_83_tc29b (tc29b Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) Reg(U8) Some([208])
# Var inline_div32_shiftright1_83_tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([208])
# Var inline_div32_shiftright1_83_tf572 (tf572 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_84_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_div32_shiftright1_84_a (Arg0 a Number(USIZE)) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_shiftright1_84_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_div32_shiftright1_84_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([200])
# Var inline_div32_shiftright1_84_t1bbf (t1bbf Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_84_t1f15 (t1f15 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_84_t350e (t350e Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_84_t4d1a (t4d1a Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_84_t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_84_t5a19 (t5a19 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_84_t5a73 (t5a73 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_84_t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([200])
# Var inline_div32_shiftright1_84_t8384 (t8384 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_84_t8792 (t8792 Ident("a")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_shiftright1_84_t887d (t887d Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_84_t9144 (t9144 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_84_ta431 (ta431 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_84_taa3e (taa3e Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_84_tb911 (tb911 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_84_tc29b (tc29b Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) Reg(U8) Some([208])
# Var inline_div32_shiftright1_84_tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([208])
# Var inline_div32_shiftright1_84_tf572 (tf572 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))) Reg(U8) Some([202])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([196, 197, 198, 199])
# Var mid (Local mid Number(USIZE) Reg(U32)) Reg(U32) Some([184, 185, 186, 187])
# Var r (Local r Number(USIZE) Reg(U32)) Reg(U32) Some([188, 189, 190, 191])
# Var t0 (Stack size negated) Reg(U32) Some([224, 225, 226, 227])
# Var t1506 (t1506 Ident("lo")) Reg(U32) Some([184, 185, 186, 187])
# Var t1a85 (t1a85 Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })) Reg(U8) Some([228])
# Var t3803 (t3803 Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) Reg(U32) Some([184, 185, 186, 187])
# Var t3f2a (t3f2a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }) Reg(U32) Some([188, 189, 190, 191])
# Var t4917 (t4917 Number(USIZE, 65536)) Reg(U32) Some([180, 181, 182, 183])
# Var t4a94 (t4a94 Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))) Reg(U32) Some([188, 189, 190, 191])
# Var t5508 (t5508 Ident("hi")) Reg(U32) Some([180, 181, 182, 183])
# Var t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([188, 189, 190, 191])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([172, 173, 174, 175])
# Var t9599 (t9599 Call(Call { function: "shiftright1", parameters: [Ident("lo")] })) Reg(U32) Some([204, 205, 206, 207])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([176, 177, 178, 179])
# Var tad57 (tad57 Ident("x")) Reg(U32) Some([188, 189, 190, 191])
# Var taee0 (taee0 Ident("r")) Reg(U32) Some([188, 189, 190, 191])
# Var tb608 (tb608 AddressOf(Ident("x64"))) Reg(U32) Some([188, 189, 190, 191])
# Var tb973 (tb973 LocalFieldDeref("x64", "hi")) Reg(U32) Some([192, 193, 194, 195])
# Var te546 (te546 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }) Reg(U32) Some([224, 225, 226, 227])
# Var te81f (te81f Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) Reg(U32) Some([172, 173, 174, 175])
# Var te825 (te825 Ident("__frame_pointer")) Reg(U32) Some([224, 225, 226, 227])
# Var tfd7e (tfd7e Ident("mid")) Reg(U32) Some([184, 185, 186, 187])
# Var x (Local x Number(USIZE) Reg(U32)) Reg(U32) Some([188, 189, 190, 191])
# Var x64 (Local x64 Struct("U64") FrameOffset(0)) FrameOffset(0) None
# 01439 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       reserve 8 bytes of stack space for locals
32 0c f8 ff ff ff 

# 0143f Copy32 [Register(0x00), Register(0xac)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [172, 173, 174, 175].
21 00 ac 

# 01442 Copy32 [Register(0x04), Register(0xb0)]
#       Save function parameter 'b' registers [4, 5, 6, 7] to locals [176, 177, 178, 179].
21 04 b0 

# __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
# 01445 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
32 0c f8 ff ff ff 

# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# 0144b Cmp8 [Register(0xb3), Register(0xaf)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
15 b3 af 

# 0144e Cmp8IfZero [Register(0xb2), Register(0xae)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 b2 ae 

# 01451 Cmp8IfZero [Register(0xb1), Register(0xad)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 b1 ad 

# 01454 Cmp8IfZero [Register(0xb0), Register(0xac)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 b0 ac 

# 01457 JcImm [Label24(div32_if_else_0_2)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
71 76 14 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_1)], resolved: None }
# :div32_if_true_0_1 Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# div32_if_true_0_1
# t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(USIZE, 0)) }
# Number(USIZE, 0)
# 0145b LoadImm32 [Register(0xbc), Constant32(0x00000000=0)]
#       t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(USIZE, 0)) }
#       Number(USIZE, 0)
20 bc 00 00 00 00 

# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(USIZE, 0)) }
# 01461 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(USIZE, 0)) }
32 0c 08 00 00 00 

# return Some(t60ec) Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(USIZE, 0)) }
# 01467 Copy32 [Register(0xbc), Register(0x00)]
#       return Some(t60ec) Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(USIZE, 0)) }
21 bc 00 

# 0146a AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 01470 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto div32_if_end_0 Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
# 01472 JmpImm [Label24(div32_if_end_0)]
#       goto div32_if_end_0 Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
70 76 14 00 

# :div32_if_else_0_2 Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
# div32_if_else_0_2
# :div32_if_end_0 Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
# div32_if_end_0
# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# t4917 <- 0n65536/0x00010000u32  Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
# Number(USIZE, 65536)
# 01476 LoadImm32 [Register(0xb4), Constant32(0x00010000=65536)]
#       t4917 <- 0n65536/0x00010000u32  Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
#       Number(USIZE, 65536)
20 b4 00 00 01 00 

# if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
# 0147c Cmp8 [Register(0xb7), Register(0xaf)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
15 b7 af 

# 0147f Cmp8IfZero [Register(0xb6), Register(0xae)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
16 b6 ae 

# 01482 Cmp8IfZero [Register(0xb5), Register(0xad)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
16 b5 ad 

# 01485 Cmp8IfZero [Register(0xb4), Register(0xac)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
16 b4 ac 

# 01488 JcImm [Label24(div32_if_else_0_5)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
71 40 17 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(71,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_4)], resolved: None }
# :div32_if_true_0_4 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# div32_if_true_0_4
# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_div32_div16_82_a <- t8792 U32 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_82_a <- t8792 U32 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_82_b <- tace9 U32 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_82_b <- tace9 U32 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_div32_div16_82_t8792 <- inline_div32_div16_82_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_82_t8792 <- inline_div32_div16_82_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_82_tace9 <- inline_div32_div16_82_b U32 Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_82_tace9 <- inline_div32_div16_82_b U32 Some('/home/john/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# if inline_div32_div16_82_t8792 < inline_div32_div16_82_tace9 then 'inline_div32_div16_82_div16_if_true_0_1' else 'inline_div32_div16_82_div16_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# 0148c Cmp8 [Register(0xb3), Register(0xaf)]
#       if inline_div32_div16_82_t8792 < inline_div32_div16_82_tace9 then 'inline_div32_div16_82_div16_if_true_0_1' else 'inline_div32_div16_82_div16_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
15 b3 af 

# 0148f Cmp8IfZero [Register(0xb2), Register(0xae)]
#       if inline_div32_div16_82_t8792 < inline_div32_div16_82_tace9 then 'inline_div32_div16_82_div16_if_true_0_1' else 'inline_div32_div16_82_div16_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 b2 ae 

# 01492 Cmp8IfZero [Register(0xb1), Register(0xad)]
#       if inline_div32_div16_82_t8792 < inline_div32_div16_82_tace9 then 'inline_div32_div16_82_div16_if_true_0_1' else 'inline_div32_div16_82_div16_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 b1 ad 

# 01495 Cmp8IfZero [Register(0xb0), Register(0xac)]
#       if inline_div32_div16_82_t8792 < inline_div32_div16_82_tace9 then 'inline_div32_div16_82_div16_if_true_0_1' else 'inline_div32_div16_82_div16_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 b0 ac 

# 01498 JcImm [Label24(inline_div32_div16_82_div16_if_else_0_2)]
#       if inline_div32_div16_82_t8792 < inline_div32_div16_82_tace9 then 'inline_div32_div16_82_div16_if_true_0_1' else 'inline_div32_div16_82_div16_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
71 aa 14 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_82_t8792 < inline_div32_div16_82_tace9 then 'inline_div32_div16_82_div16_if_true_0_1' else 'inline_div32_div16_82_div16_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_82_div16_if_true_0_1)], resolved: None }
# :inline_div32_div16_82_div16_if_true_0_1 Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# inline_div32_div16_82_div16_if_true_0_1
# inline_div32_div16_82_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(USIZE, 0)) }
# Number(USIZE, 0)
# 0149c LoadImm32 [Register(0xac), Constant32(0x00000000=0)]
#       inline_div32_div16_82_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
#       Return { value: Some(Number(USIZE, 0)) }
#       Number(USIZE, 0)
20 ac 00 00 00 00 

# te81f <- inline_div32_div16_82_t60ec U32 Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(USIZE, 0)) }
# optimized away noop copy Instruction { source: "te81f <- inline_div32_div16_82_t60ec U32 Some('/home/john/lutcomp/programs/lib/div.j':(21,5))\nReturn { value: Some(Number(USIZE, 0)) }\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# goto inline_div32_div16_82_function_end_div16 Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(USIZE, 0)) }
# 014a2 JmpImm [Label24(inline_div32_div16_82_function_end_div16)]
#       goto inline_div32_div16_82_function_end_div16 Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
#       Return { value: Some(Number(USIZE, 0)) }
70 2b 17 00 

# goto inline_div32_div16_82_div16_if_end_0 Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
# 014a6 JmpImm [Label24(inline_div32_div16_82_div16_if_end_0)]
#       goto inline_div32_div16_82_div16_if_end_0 Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
70 aa 14 00 

# :inline_div32_div16_82_div16_if_else_0_2 Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
# inline_div32_div16_82_div16_if_else_0_2
# :inline_div32_div16_82_div16_if_end_0 Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
# inline_div32_div16_82_div16_if_end_0
# inline_div32_div16_82_t8792 <- inline_div32_div16_82_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_82_t8792 <- inline_div32_div16_82_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_82_t9c15 <- 0n256/0x00000100u32  Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
# Number(USIZE, 256)
# 014aa LoadImm32 [Register(0xb4), Constant32(0x00000100=256)]
#       inline_div32_div16_82_t9c15 <- 0n256/0x00000100u32  Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
#       Number(USIZE, 256)
20 b4 00 01 00 00 

# if inline_div32_div16_82_t8792 < inline_div32_div16_82_t9c15 then 'inline_div32_div16_82_div16_if_true_0_4' else 'inline_div32_div16_82_div16_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
# 014b0 Cmp8 [Register(0xb7), Register(0xaf)]
#       if inline_div32_div16_82_t8792 < inline_div32_div16_82_t9c15 then 'inline_div32_div16_82_div16_if_true_0_4' else 'inline_div32_div16_82_div16_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
15 b7 af 

# 014b3 Cmp8IfZero [Register(0xb6), Register(0xae)]
#       if inline_div32_div16_82_t8792 < inline_div32_div16_82_t9c15 then 'inline_div32_div16_82_div16_if_true_0_4' else 'inline_div32_div16_82_div16_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
16 b6 ae 

# 014b6 Cmp8IfZero [Register(0xb5), Register(0xad)]
#       if inline_div32_div16_82_t8792 < inline_div32_div16_82_t9c15 then 'inline_div32_div16_82_div16_if_true_0_4' else 'inline_div32_div16_82_div16_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
16 b5 ad 

# 014b9 Cmp8IfZero [Register(0xb4), Register(0xac)]
#       if inline_div32_div16_82_t8792 < inline_div32_div16_82_t9c15 then 'inline_div32_div16_82_div16_if_true_0_4' else 'inline_div32_div16_82_div16_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
16 b4 ac 

# 014bc JcImm [Label24(inline_div32_div16_82_div16_if_else_0_5)]
#       if inline_div32_div16_82_t8792 < inline_div32_div16_82_t9c15 then 'inline_div32_div16_82_div16_if_true_0_4' else 'inline_div32_div16_82_div16_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
71 db 14 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_82_t8792 < inline_div32_div16_82_t9c15 then 'inline_div32_div16_82_div16_if_true_0_4' else 'inline_div32_div16_82_div16_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_82_div16_if_true_0_4)], resolved: None }
# :inline_div32_div16_82_div16_if_true_0_4 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
# inline_div32_div16_82_div16_if_true_0_4
# inline_div32_div16_82_tdd9e <- inline_div32_div16_82_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
# Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))
# Index("a", Number(U8, 0))
# 014c0 Copy8 [Register(0xac), Register(0xdd)]
#       inline_div32_div16_82_tdd9e <- inline_div32_div16_82_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
#       Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))
#       Index("a", Number(U8, 0))
0b ac dd 

# inline_div32_div16_82_t3c0e <- inline_div32_div16_82_b[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
# Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))
# Index("b", Number(U8, 0))
# 014c3 Copy8 [Register(0xb0), Register(0xdc)]
#       inline_div32_div16_82_t3c0e <- inline_div32_div16_82_b[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
#       Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))
#       Index("b", Number(U8, 0))
0b b0 dc 

# inline_div32_div16_82_tda9f <- inline_div32_div16_82_tdd9e Divide Var(inline_div32_div16_82_t3c0e) Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
# Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))
# 014c6 Divide8 [Register(0xdd), Register(0xdc), Register(0xdc)]
#       inline_div32_div16_82_tda9f <- inline_div32_div16_82_tdd9e Divide Var(inline_div32_div16_82_t3c0e) Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
#       Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))
17 dd dc dc 

# inline_div32_div16_82_te264 U32 <- inline_div32_div16_82_tda9f U8 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
# 014ca LoadImm32 [Register(0xac), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_82_te264 U32 <- inline_div32_div16_82_tda9f U8 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
20 ac 00 00 00 00 

# 014d0 Copy8 [Register(0xdc), Register(0xac)]
#       inline_div32_div16_82_te264 U32 <- inline_div32_div16_82_tda9f U8 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
0b dc ac 

# te81f <- inline_div32_div16_82_te264 U32 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
# optimized away noop copy Instruction { source: "te81f <- inline_div32_div16_82_te264 U32 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))\nReturn { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# goto inline_div32_div16_82_function_end_div16 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
# 014d3 JmpImm [Label24(inline_div32_div16_82_function_end_div16)]
#       goto inline_div32_div16_82_function_end_div16 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
70 2b 17 00 

# goto inline_div32_div16_82_div16_if_end_3 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
# 014d7 JmpImm [Label24(inline_div32_div16_82_div16_if_end_3)]
#       goto inline_div32_div16_82_div16_if_end_3 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
70 db 14 00 

# :inline_div32_div16_82_div16_if_else_0_5 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
# inline_div32_div16_82_div16_if_else_0_5
# :inline_div32_div16_82_div16_if_end_3 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
# inline_div32_div16_82_div16_if_end_3
# inline_div32_div16_82_lo <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/div.j':(29,5))
# Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 014db LoadImm32 [Register(0xd4), Constant32(0x00000000=0)]
#       inline_div32_div16_82_lo <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/div.j':(29,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 d4 00 00 00 00 

# inline_div32_div16_82_hi <- 0n65535/0x0000ffffu32  Some('/home/john/lutcomp/programs/lib/div.j':(30,5))
# Assign { target: Ident("hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 65535) }
# Number(USIZE, 65535)
# 014e1 LoadImm32 [Register(0xb4), Constant32(0x0000ffff=65535)]
#       inline_div32_div16_82_hi <- 0n65535/0x0000ffffu32  Some('/home/john/lutcomp/programs/lib/div.j':(30,5))
#       Assign { target: Ident("hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 65535) }
#       Number(USIZE, 65535)
20 b4 ff ff 00 00 

# :inline_div32_div16_82_div16_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# inline_div32_div16_82_div16_while_predicate_6
# inline_div32_div16_82_t1506 <- inline_div32_div16_82_lo U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("lo")
# 014e7 Copy32 [Register(0xd4), Register(0xb8)]
#       inline_div32_div16_82_t1506 <- inline_div32_div16_82_lo U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
#       Ident("lo")
21 d4 b8 

# inline_div32_div16_82_t5508 <- inline_div32_div16_82_hi U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("hi")
# optimized away noop copy Instruction { source: "inline_div32_div16_82_t5508 <- inline_div32_div16_82_hi U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# if inline_div32_div16_82_t1506 < inline_div32_div16_82_t5508 then 'inline_div32_div16_82_div16_while_body_7' else 'inline_div32_div16_82_div16_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# 014ea Cmp8 [Register(0xb7), Register(0xbb)]
#       if inline_div32_div16_82_t1506 < inline_div32_div16_82_t5508 then 'inline_div32_div16_82_div16_while_body_7' else 'inline_div32_div16_82_div16_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
15 b7 bb 

# 014ed Cmp8IfZero [Register(0xb6), Register(0xba)]
#       if inline_div32_div16_82_t1506 < inline_div32_div16_82_t5508 then 'inline_div32_div16_82_div16_while_body_7' else 'inline_div32_div16_82_div16_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 b6 ba 

# 014f0 Cmp8IfZero [Register(0xb5), Register(0xb9)]
#       if inline_div32_div16_82_t1506 < inline_div32_div16_82_t5508 then 'inline_div32_div16_82_div16_while_body_7' else 'inline_div32_div16_82_div16_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 b5 b9 

# 014f3 Cmp8IfZero [Register(0xb4), Register(0xb8)]
#       if inline_div32_div16_82_t1506 < inline_div32_div16_82_t5508 then 'inline_div32_div16_82_div16_while_body_7' else 'inline_div32_div16_82_div16_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 b4 b8 

# 014f6 JcImm [Label24(inline_div32_div16_82_div16_while_end_8)]
#       if inline_div32_div16_82_t1506 < inline_div32_div16_82_t5508 then 'inline_div32_div16_82_div16_while_body_7' else 'inline_div32_div16_82_div16_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
71 21 17 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_82_t1506 < inline_div32_div16_82_t5508 then 'inline_div32_div16_82_div16_while_body_7' else 'inline_div32_div16_82_div16_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_82_div16_while_body_7)], resolved: None }
# :inline_div32_div16_82_div16_while_body_7 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# inline_div32_div16_82_div16_while_body_7
# inline_div32_div16_82_t1506 <- inline_div32_div16_82_lo U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# Ident("lo")
# 014fa Copy32 [Register(0xd4), Register(0xb8)]
#       inline_div32_div16_82_t1506 <- inline_div32_div16_82_lo U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
#       Ident("lo")
21 d4 b8 

# inline_div32_div16_82_t5508 <- inline_div32_div16_82_hi U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# Ident("hi")
# optimized away noop copy Instruction { source: "inline_div32_div16_82_t5508 <- inline_div32_div16_82_hi U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }\nCall(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })\nArithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_div32_div16_82_tf1d1 <- inline_div32_div16_82_t1506 Add Var(inline_div32_div16_82_t5508) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# 014fd ClearCarry []
#       inline_div32_div16_82_tf1d1 <- inline_div32_div16_82_t1506 Add Var(inline_div32_div16_82_t5508) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
03 

# 014fe AddCarry32_1 [Register(0xb8), Register(0xb4), Register(0xb8)]
#       inline_div32_div16_82_tf1d1 <- inline_div32_div16_82_t1506 Add Var(inline_div32_div16_82_t5508) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
30 b8 b4 b8 

# 01502 AddCarry32_2 []
#       inline_div32_div16_82_tf1d1 <- inline_div32_div16_82_t1506 Add Var(inline_div32_div16_82_t5508) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
31 

# inline_div32_div16_82_inline_div16_shiftright1_81_a <- inline_div32_div16_82_tf1d1 U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# optimized away noop copy Instruction { source: "inline_div32_div16_82_inline_div16_shiftright1_81_a <- inline_div32_div16_82_tf1d1 U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }\nCall(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_82_inline_div16_shiftright1_81_tdd9e <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
# Index("a", Number(U8, 0))
# 01503 Copy8 [Register(0xb8), Register(0xd0)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_tdd9e <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
#       Index("a", Number(U8, 0))
0b b8 d0 

# inline_div32_div16_82_inline_div16_shiftright1_81_t5a19 <- inline_div32_div16_82_inline_div16_shiftright1_81_tdd9e RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
# 01506 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t5a19 <- inline_div32_div16_82_inline_div16_shiftright1_81_tdd9e RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
04 00 01 

# 01509 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xd0), Register(0xca)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t5a19 <- inline_div32_div16_82_inline_div16_shiftright1_81_tdd9e RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
1e 04 00 d0 ca 

# inline_div32_div16_82_inline_div16_shiftright1_81_a[0x00..0x01] <- inline_div32_div16_82_inline_div16_shiftright1_81_t5a19 U8 Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# 0150e Copy8 [Register(0xca), Register(0xb8)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_a[0x00..0x01] <- inline_div32_div16_82_inline_div16_shiftright1_81_t5a19 U8 Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
0b ca b8 

# inline_div32_div16_82_inline_div16_shiftright1_81_t1539 <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
# Index("a", Number(U8, 1))
# 01511 Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t1539 <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
#       Index("a", Number(U8, 1))
0b b9 c8 

# inline_div32_div16_82_inline_div16_shiftright1_81_ta431 <- inline_div32_div16_82_inline_div16_shiftright1_81_t1539 RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
# 01514 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_ta431 <- inline_div32_div16_82_inline_div16_shiftright1_81_t1539 RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
04 00 01 

# 01517 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc8), Register(0xca)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_ta431 <- inline_div32_div16_82_inline_div16_shiftright1_81_t1539 RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
1e 04 00 c8 ca 

# inline_div32_div16_82_inline_div16_shiftright1_81_a[0x01..0x02] <- inline_div32_div16_82_inline_div16_shiftright1_81_ta431 U8 Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# 0151c Copy8 [Register(0xca), Register(0xb9)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_a[0x01..0x02] <- inline_div32_div16_82_inline_div16_shiftright1_81_ta431 U8 Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
0b ca b9 

# inline_div32_div16_82_inline_div16_shiftright1_81_t577f <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
# Index("a", Number(U8, 2))
# 0151f Copy8 [Register(0xba), Register(0xca)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t577f <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
#       Index("a", Number(U8, 2))
0b ba ca 

# inline_div32_div16_82_inline_div16_shiftright1_81_t350e <- inline_div32_div16_82_inline_div16_shiftright1_81_t577f RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
# 01522 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t350e <- inline_div32_div16_82_inline_div16_shiftright1_81_t577f RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
04 00 01 

# 01525 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xca), Register(0xca)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t350e <- inline_div32_div16_82_inline_div16_shiftright1_81_t577f RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
1e 04 00 ca ca 

# inline_div32_div16_82_inline_div16_shiftright1_81_a[0x02..0x03] <- inline_div32_div16_82_inline_div16_shiftright1_81_t350e U8 Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# 0152a Copy8 [Register(0xca), Register(0xba)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_a[0x02..0x03] <- inline_div32_div16_82_inline_div16_shiftright1_81_t350e U8 Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
0b ca ba 

# inline_div32_div16_82_inline_div16_shiftright1_81_t5b7c <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
# Index("a", Number(U8, 3))
# 0152d Copy8 [Register(0xbb), Register(0xc8)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t5b7c <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
#       Index("a", Number(U8, 3))
0b bb c8 

# inline_div32_div16_82_inline_div16_shiftright1_81_taa3e <- inline_div32_div16_82_inline_div16_shiftright1_81_t5b7c RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
# 01530 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_taa3e <- inline_div32_div16_82_inline_div16_shiftright1_81_t5b7c RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
04 00 01 

# 01533 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc8), Register(0xca)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_taa3e <- inline_div32_div16_82_inline_div16_shiftright1_81_t5b7c RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
1e 04 00 c8 ca 

# inline_div32_div16_82_inline_div16_shiftright1_81_a[0x03..0x04] <- inline_div32_div16_82_inline_div16_shiftright1_81_taa3e U8 Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# 01538 Copy8 [Register(0xca), Register(0xbb)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_a[0x03..0x04] <- inline_div32_div16_82_inline_div16_shiftright1_81_taa3e U8 Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
0b ca bb 

# inline_div32_div16_82_inline_div16_shiftright1_81_tdd9e <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
# Index("a", Number(U8, 0))
# 0153b Copy8 [Register(0xb8), Register(0xd0)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_tdd9e <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
#       Index("a", Number(U8, 0))
0b b8 d0 

# inline_div32_div16_82_inline_div16_shiftright1_81_t9144 <- inline_div32_div16_82_inline_div16_shiftright1_81_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
# 0153e LoadImm8 [Register(0x00), Constant8(0x7f=127)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t9144 <- inline_div32_div16_82_inline_div16_shiftright1_81_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
04 00 7f 

# 01541 And8 [Register(0xd0), Register(0x00), Register(0xca)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t9144 <- inline_div32_div16_82_inline_div16_shiftright1_81_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
1b d0 00 ca 

# inline_div32_div16_82_inline_div16_shiftright1_81_a[0x00..0x01] <- inline_div32_div16_82_inline_div16_shiftright1_81_t9144 U8 Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# 01545 Copy8 [Register(0xca), Register(0xb8)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_a[0x00..0x01] <- inline_div32_div16_82_inline_div16_shiftright1_81_t9144 U8 Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
0b ca b8 

# inline_div32_div16_82_inline_div16_shiftright1_81_tdd9e <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Index("a", Number(U8, 0))
# 01548 Copy8 [Register(0xb8), Register(0xd0)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_tdd9e <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Index("a", Number(U8, 0))
0b b8 d0 

# inline_div32_div16_82_inline_div16_shiftright1_81_t1539 <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
# Index("a", Number(U8, 1))
# 0154b Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t1539 <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
#       Index("a", Number(U8, 1))
0b b9 c8 

# inline_div32_div16_82_inline_div16_shiftright1_81_t8384 <- inline_div32_div16_82_inline_div16_shiftright1_81_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
# 0154e LoadImm8 [Register(0x00), Constant8(0x80=128)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t8384 <- inline_div32_div16_82_inline_div16_shiftright1_81_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
04 00 80 

# 01551 And8 [Register(0xc8), Register(0x00), Register(0xca)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t8384 <- inline_div32_div16_82_inline_div16_shiftright1_81_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
1b c8 00 ca 

# inline_div32_div16_82_inline_div16_shiftright1_81_tf572 <- inline_div32_div16_82_inline_div16_shiftright1_81_tdd9e BitwiseOr Var(inline_div32_div16_82_inline_div16_shiftright1_81_t8384) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# 01555 Or8 [Register(0xd0), Register(0xca), Register(0xca)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_tf572 <- inline_div32_div16_82_inline_div16_shiftright1_81_tdd9e BitwiseOr Var(inline_div32_div16_82_inline_div16_shiftright1_81_t8384) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
1c d0 ca ca 

# inline_div32_div16_82_inline_div16_shiftright1_81_a[0x00..0x01] <- inline_div32_div16_82_inline_div16_shiftright1_81_tf572 U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# 01559 Copy8 [Register(0xca), Register(0xb8)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_a[0x00..0x01] <- inline_div32_div16_82_inline_div16_shiftright1_81_tf572 U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
0b ca b8 

# inline_div32_div16_82_inline_div16_shiftright1_81_t1539 <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
# Index("a", Number(U8, 1))
# 0155c Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t1539 <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
#       Index("a", Number(U8, 1))
0b b9 c8 

# inline_div32_div16_82_inline_div16_shiftright1_81_t5a73 <- inline_div32_div16_82_inline_div16_shiftright1_81_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
# 0155f LoadImm8 [Register(0x00), Constant8(0x7f=127)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t5a73 <- inline_div32_div16_82_inline_div16_shiftright1_81_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
04 00 7f 

# 01562 And8 [Register(0xc8), Register(0x00), Register(0xca)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t5a73 <- inline_div32_div16_82_inline_div16_shiftright1_81_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
1b c8 00 ca 

# inline_div32_div16_82_inline_div16_shiftright1_81_a[0x01..0x02] <- inline_div32_div16_82_inline_div16_shiftright1_81_t5a73 U8 Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# 01566 Copy8 [Register(0xca), Register(0xb9)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_a[0x01..0x02] <- inline_div32_div16_82_inline_div16_shiftright1_81_t5a73 U8 Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
0b ca b9 

# inline_div32_div16_82_inline_div16_shiftright1_81_t1539 <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Index("a", Number(U8, 1))
# 01569 Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t1539 <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Index("a", Number(U8, 1))
0b b9 c8 

# inline_div32_div16_82_inline_div16_shiftright1_81_t577f <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
# Index("a", Number(U8, 2))
# 0156c Copy8 [Register(0xba), Register(0xca)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t577f <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
#       Index("a", Number(U8, 2))
0b ba ca 

# inline_div32_div16_82_inline_div16_shiftright1_81_t1f15 <- inline_div32_div16_82_inline_div16_shiftright1_81_t577f BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
# 0156f LoadImm8 [Register(0x00), Constant8(0x80=128)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t1f15 <- inline_div32_div16_82_inline_div16_shiftright1_81_t577f BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
04 00 80 

# 01572 And8 [Register(0xca), Register(0x00), Register(0xca)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t1f15 <- inline_div32_div16_82_inline_div16_shiftright1_81_t577f BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
1b ca 00 ca 

# inline_div32_div16_82_inline_div16_shiftright1_81_t4d1a <- inline_div32_div16_82_inline_div16_shiftright1_81_t1539 BitwiseOr Var(inline_div32_div16_82_inline_div16_shiftright1_81_t1f15) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# 01576 Or8 [Register(0xc8), Register(0xca), Register(0xca)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t4d1a <- inline_div32_div16_82_inline_div16_shiftright1_81_t1539 BitwiseOr Var(inline_div32_div16_82_inline_div16_shiftright1_81_t1f15) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
1c c8 ca ca 

# inline_div32_div16_82_inline_div16_shiftright1_81_a[0x01..0x02] <- inline_div32_div16_82_inline_div16_shiftright1_81_t4d1a U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# 0157a Copy8 [Register(0xca), Register(0xb9)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_a[0x01..0x02] <- inline_div32_div16_82_inline_div16_shiftright1_81_t4d1a U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
0b ca b9 

# inline_div32_div16_82_inline_div16_shiftright1_81_t577f <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
# Index("a", Number(U8, 2))
# 0157d Copy8 [Register(0xba), Register(0xca)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t577f <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
#       Index("a", Number(U8, 2))
0b ba ca 

# inline_div32_div16_82_inline_div16_shiftright1_81_t887d <- inline_div32_div16_82_inline_div16_shiftright1_81_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
# 01580 LoadImm8 [Register(0x00), Constant8(0x7f=127)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t887d <- inline_div32_div16_82_inline_div16_shiftright1_81_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
04 00 7f 

# 01583 And8 [Register(0xca), Register(0x00), Register(0xca)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t887d <- inline_div32_div16_82_inline_div16_shiftright1_81_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
1b ca 00 ca 

# inline_div32_div16_82_inline_div16_shiftright1_81_a[0x02..0x03] <- inline_div32_div16_82_inline_div16_shiftright1_81_t887d U8 Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# 01587 Copy8 [Register(0xca), Register(0xba)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_a[0x02..0x03] <- inline_div32_div16_82_inline_div16_shiftright1_81_t887d U8 Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
0b ca ba 

# inline_div32_div16_82_inline_div16_shiftright1_81_t577f <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Index("a", Number(U8, 2))
# 0158a Copy8 [Register(0xba), Register(0xca)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t577f <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Index("a", Number(U8, 2))
0b ba ca 

# inline_div32_div16_82_inline_div16_shiftright1_81_t5b7c <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
# Index("a", Number(U8, 3))
# 0158d Copy8 [Register(0xbb), Register(0xc8)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t5b7c <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
#       Index("a", Number(U8, 3))
0b bb c8 

# inline_div32_div16_82_inline_div16_shiftright1_81_tc29b <- inline_div32_div16_82_inline_div16_shiftright1_81_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
# 01590 LoadImm8 [Register(0x00), Constant8(0x80=128)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_tc29b <- inline_div32_div16_82_inline_div16_shiftright1_81_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
04 00 80 

# 01593 And8 [Register(0xc8), Register(0x00), Register(0xd0)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_tc29b <- inline_div32_div16_82_inline_div16_shiftright1_81_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
1b c8 00 d0 

# inline_div32_div16_82_inline_div16_shiftright1_81_t1bbf <- inline_div32_div16_82_inline_div16_shiftright1_81_t577f BitwiseOr Var(inline_div32_div16_82_inline_div16_shiftright1_81_tc29b) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# 01597 Or8 [Register(0xca), Register(0xd0), Register(0xca)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t1bbf <- inline_div32_div16_82_inline_div16_shiftright1_81_t577f BitwiseOr Var(inline_div32_div16_82_inline_div16_shiftright1_81_tc29b) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
1c ca d0 ca 

# inline_div32_div16_82_inline_div16_shiftright1_81_a[0x02..0x03] <- inline_div32_div16_82_inline_div16_shiftright1_81_t1bbf U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# 0159b Copy8 [Register(0xca), Register(0xba)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_a[0x02..0x03] <- inline_div32_div16_82_inline_div16_shiftright1_81_t1bbf U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
0b ca ba 

# inline_div32_div16_82_inline_div16_shiftright1_81_t5b7c <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
# Index("a", Number(U8, 3))
# 0159e Copy8 [Register(0xbb), Register(0xc8)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_t5b7c <- inline_div32_div16_82_inline_div16_shiftright1_81_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
#       Index("a", Number(U8, 3))
0b bb c8 

# inline_div32_div16_82_inline_div16_shiftright1_81_tb911 <- inline_div32_div16_82_inline_div16_shiftright1_81_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
# 015a1 LoadImm8 [Register(0x00), Constant8(0x7f=127)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_tb911 <- inline_div32_div16_82_inline_div16_shiftright1_81_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
04 00 7f 

# 015a4 And8 [Register(0xc8), Register(0x00), Register(0xca)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_tb911 <- inline_div32_div16_82_inline_div16_shiftright1_81_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
1b c8 00 ca 

# inline_div32_div16_82_inline_div16_shiftright1_81_a[0x03..0x04] <- inline_div32_div16_82_inline_div16_shiftright1_81_tb911 U8 Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# 015a8 Copy8 [Register(0xca), Register(0xbb)]
#       inline_div32_div16_82_inline_div16_shiftright1_81_a[0x03..0x04] <- inline_div32_div16_82_inline_div16_shiftright1_81_tb911 U8 Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
0b ca bb 

# inline_div32_div16_82_inline_div16_shiftright1_81_t8792 <- inline_div32_div16_82_inline_div16_shiftright1_81_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_82_inline_div16_shiftright1_81_t8792 <- inline_div32_div16_82_inline_div16_shiftright1_81_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_82_mid <- inline_div32_div16_82_inline_div16_shiftright1_81_t8792 U32 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# 015ab Copy32 [Register(0xb8), Register(0xd8)]
#       inline_div32_div16_82_mid <- inline_div32_div16_82_inline_div16_shiftright1_81_t8792 U32 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))
#       Return { value: Some(Ident("a")) }
21 b8 d8 

# goto inline_div32_div16_82_inline_div16_shiftright1_81_function_end_shiftright1 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_div16_82_inline_div16_shiftright1_81_function_end_shiftright1 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_82_inline_div16_shiftright1_81_function_end_shiftright1)], resolved: None }
# :inline_div32_div16_82_inline_div16_shiftright1_81_function_end_shiftright1 None
# inline_div32_div16_82_inline_div16_shiftright1_81_function_end_shiftright1
# inline_div32_div16_82_tfd7e <- inline_div32_div16_82_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# Ident("mid")
# 015ae Copy32 [Register(0xd8), Register(0xb8)]
#       inline_div32_div16_82_tfd7e <- inline_div32_div16_82_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
#       Ident("mid")
21 d8 b8 

# inline_div32_div16_82_tace9 <- inline_div32_div16_82_b U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_82_tace9 <- inline_div32_div16_82_b U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_div32_div16_82_inline_div16_mul16_32_4_a <- inline_div32_div16_82_tfd7e U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_82_inline_div16_mul16_32_4_a <- inline_div32_div16_82_tfd7e U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_82_inline_div16_mul16_32_4_b <- inline_div32_div16_82_tace9 U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# 015b1 Copy32 [Register(0xb0), Register(0xbc)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_b <- inline_div32_div16_82_tace9 U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
21 b0 bc 

# inline_div32_div16_82_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_82_inline_div16_mul16_32_4_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_82_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_82_inline_div16_mul16_32_4_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_82_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_82_inline_div16_mul16_32_4_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_82_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_82_inline_div16_mul16_32_4_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# inline_div32_div16_82_inline_div16_mul16_32_4_c <- inline_div32_div16_82_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_82_inline_div16_mul16_32_4_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 015b4 Mul8_16 [Register(0xb8), Register(0xbc), Register(0xc0)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_c <- inline_div32_div16_82_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_82_inline_div16_mul16_32_4_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 b8 bc c0 

# 015b8 LoadImm8 [Register(0xc2), Constant8(0x00=0)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_c <- inline_div32_div16_82_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_82_inline_div16_mul16_32_4_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 c2 00 

# 015bb LoadImm8 [Register(0xc3), Constant8(0x00=0)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_c <- inline_div32_div16_82_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_82_inline_div16_mul16_32_4_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 c3 00 

# inline_div32_div16_82_inline_div16_mul16_32_4_t1539 <- inline_div32_div16_82_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 015be Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_t1539 <- inline_div32_div16_82_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b b9 c8 

# inline_div32_div16_82_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_82_inline_div16_mul16_32_4_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 015c1 LoadImm32 [Register(0xcc), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_82_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_82_inline_div16_mul16_32_4_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 cc 00 00 00 00 

# 015c7 Copy8 [Register(0xc8), Register(0xcc)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_82_inline_div16_mul16_32_4_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b c8 cc 

# inline_div32_div16_82_inline_div16_mul16_32_4_t8b9 <- inline_div32_div16_82_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 015ca Copy8 [Register(0xbd), Register(0xca)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_t8b9 <- inline_div32_div16_82_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b bd ca 

# inline_div32_div16_82_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_82_inline_div16_mul16_32_4_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 015cd LoadImm32 [Register(0xc4), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_82_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_82_inline_div16_mul16_32_4_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 c4 00 00 00 00 

# 015d3 Copy8 [Register(0xca), Register(0xc4)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_82_inline_div16_mul16_32_4_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b ca c4 

# inline_div32_div16_82_inline_div16_mul16_32_4_f <- inline_div32_div16_82_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_82_inline_div16_mul16_32_4_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 015d6 Mul8_16 [Register(0xcc), Register(0xc4), Register(0xc4)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_f <- inline_div32_div16_82_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_82_inline_div16_mul16_32_4_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 cc c4 c4 

# 015da LoadImm8 [Register(0xc6), Constant8(0x00=0)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_f <- inline_div32_div16_82_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_82_inline_div16_mul16_32_4_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 c6 00 

# 015dd LoadImm8 [Register(0xc7), Constant8(0x00=0)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_f <- inline_div32_div16_82_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_82_inline_div16_mul16_32_4_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 c7 00 

# inline_div32_div16_82_inline_div16_mul16_32_4_t5d8 <- inline_div32_div16_82_inline_div16_mul16_32_4_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 015e0 Copy8 [Register(0xc5), Register(0xc9)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_t5d8 <- inline_div32_div16_82_inline_div16_mul16_32_4_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b c5 c9 

# inline_div32_div16_82_inline_div16_mul16_32_4_f[0x03..0x04] <- inline_div32_div16_82_inline_div16_mul16_32_4_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 015e3 Copy8 [Register(0xc9), Register(0xc7)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_f[0x03..0x04] <- inline_div32_div16_82_inline_div16_mul16_32_4_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b c9 c7 

# inline_div32_div16_82_inline_div16_mul16_32_4_te25f <- inline_div32_div16_82_inline_div16_mul16_32_4_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 015e6 Copy8 [Register(0xc4), Register(0xc9)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_te25f <- inline_div32_div16_82_inline_div16_mul16_32_4_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b c4 c9 

# inline_div32_div16_82_inline_div16_mul16_32_4_f[0x02..0x03] <- inline_div32_div16_82_inline_div16_mul16_32_4_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 015e9 Copy8 [Register(0xc9), Register(0xc6)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_f[0x02..0x03] <- inline_div32_div16_82_inline_div16_mul16_32_4_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b c9 c6 

# inline_div32_div16_82_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 015ec LoadImm8 [Register(0xcb), Constant8(0x00=0)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 cb 00 

# inline_div32_div16_82_inline_div16_mul16_32_4_f[0x01..0x02] <- inline_div32_div16_82_inline_div16_mul16_32_4_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 015ef Copy8 [Register(0xcb), Register(0xc5)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_f[0x01..0x02] <- inline_div32_div16_82_inline_div16_mul16_32_4_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b cb c5 

# inline_div32_div16_82_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 015f2 LoadImm8 [Register(0xcb), Constant8(0x00=0)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 cb 00 

# inline_div32_div16_82_inline_div16_mul16_32_4_f[0x00..0x01] <- inline_div32_div16_82_inline_div16_mul16_32_4_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 015f5 Copy8 [Register(0xcb), Register(0xc4)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_f[0x00..0x01] <- inline_div32_div16_82_inline_div16_mul16_32_4_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b cb c4 

# inline_div32_div16_82_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_82_inline_div16_mul16_32_4_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_div32_div16_82_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_82_inline_div16_mul16_32_4_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0xc0), Register(0xc0)], resolved: None }
# inline_div32_div16_82_inline_div16_mul16_32_4_tcbd4 <- inline_div32_div16_82_inline_div16_mul16_32_4_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_div32_div16_82_inline_div16_mul16_32_4_tcbd4 <- inline_div32_div16_82_inline_div16_mul16_32_4_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0xc4), Register(0xc4)], resolved: None }
# inline_div32_div16_82_inline_div16_mul16_32_4_c <- inline_div32_div16_82_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_82_inline_div16_mul16_32_4_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 015f8 ClearCarry []
#       inline_div32_div16_82_inline_div16_mul16_32_4_c <- inline_div32_div16_82_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_82_inline_div16_mul16_32_4_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 015f9 AddCarry32_1 [Register(0xc0), Register(0xc4), Register(0xc0)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_c <- inline_div32_div16_82_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_82_inline_div16_mul16_32_4_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 c0 c4 c0 

# 015fd AddCarry32_2 []
#       inline_div32_div16_82_inline_div16_mul16_32_4_c <- inline_div32_div16_82_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_82_inline_div16_mul16_32_4_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_div32_div16_82_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_82_inline_div16_mul16_32_4_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_82_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_82_inline_div16_mul16_32_4_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_82_inline_div16_mul16_32_4_t8b9 <- inline_div32_div16_82_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 015fe Copy8 [Register(0xbd), Register(0xca)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_t8b9 <- inline_div32_div16_82_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b bd ca 

# inline_div32_div16_82_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_82_inline_div16_mul16_32_4_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 01601 LoadImm32 [Register(0xc4), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_82_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_82_inline_div16_mul16_32_4_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 c4 00 00 00 00 

# 01607 Copy8 [Register(0xca), Register(0xc4)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_82_inline_div16_mul16_32_4_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b ca c4 

# inline_div32_div16_82_inline_div16_mul16_32_4_d <- inline_div32_div16_82_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_82_inline_div16_mul16_32_4_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 0160a Mul8_16 [Register(0xb8), Register(0xc4), Register(0xc4)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_d <- inline_div32_div16_82_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_82_inline_div16_mul16_32_4_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 b8 c4 c4 

# 0160e LoadImm8 [Register(0xc6), Constant8(0x00=0)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_d <- inline_div32_div16_82_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_82_inline_div16_mul16_32_4_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 c6 00 

# 01611 LoadImm8 [Register(0xc7), Constant8(0x00=0)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_d <- inline_div32_div16_82_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_82_inline_div16_mul16_32_4_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 c7 00 

# inline_div32_div16_82_inline_div16_mul16_32_4_t1539 <- inline_div32_div16_82_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 01614 Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_t1539 <- inline_div32_div16_82_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b b9 c8 

# inline_div32_div16_82_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_82_inline_div16_mul16_32_4_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 01617 LoadImm32 [Register(0xcc), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_82_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_82_inline_div16_mul16_32_4_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 cc 00 00 00 00 

# 0161d Copy8 [Register(0xc8), Register(0xcc)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_82_inline_div16_mul16_32_4_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b c8 cc 

# inline_div32_div16_82_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_82_inline_div16_mul16_32_4_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_82_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_82_inline_div16_mul16_32_4_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# inline_div32_div16_82_inline_div16_mul16_32_4_e <- inline_div32_div16_82_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_82_inline_div16_mul16_32_4_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 01620 Mul8_16 [Register(0xcc), Register(0xbc), Register(0xb8)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_e <- inline_div32_div16_82_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_82_inline_div16_mul16_32_4_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 cc bc b8 

# 01624 LoadImm8 [Register(0xba), Constant8(0x00=0)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_e <- inline_div32_div16_82_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_82_inline_div16_mul16_32_4_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 ba 00 

# 01627 LoadImm8 [Register(0xbb), Constant8(0x00=0)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_e <- inline_div32_div16_82_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_82_inline_div16_mul16_32_4_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 bb 00 

# inline_div32_div16_82_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_82_inline_div16_mul16_32_4_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 0162a Copy32 [Register(0xc4), Register(0xbc)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_82_inline_div16_mul16_32_4_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 c4 bc 

# inline_div32_div16_82_inline_div16_mul16_32_4_t3585 <- inline_div32_div16_82_inline_div16_mul16_32_4_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_div32_div16_82_inline_div16_mul16_32_4_t3585 <- inline_div32_div16_82_inline_div16_mul16_32_4_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_82_inline_div16_mul16_32_4_d <- inline_div32_div16_82_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_82_inline_div16_mul16_32_4_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 0162d ClearCarry []
#       inline_div32_div16_82_inline_div16_mul16_32_4_d <- inline_div32_div16_82_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_82_inline_div16_mul16_32_4_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 0162e AddCarry32_1 [Register(0xbc), Register(0xb8), Register(0xc4)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_d <- inline_div32_div16_82_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_82_inline_div16_mul16_32_4_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 bc b8 c4 

# 01632 AddCarry32_2 []
#       inline_div32_div16_82_inline_div16_mul16_32_4_d <- inline_div32_div16_82_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_82_inline_div16_mul16_32_4_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_div32_div16_82_inline_div16_mul16_32_4_t2d6f <- inline_div32_div16_82_inline_div16_mul16_32_4_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 01633 Copy8 [Register(0xc6), Register(0xc8)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_t2d6f <- inline_div32_div16_82_inline_div16_mul16_32_4_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b c6 c8 

# inline_div32_div16_82_inline_div16_mul16_32_4_d[0x03..0x04] <- inline_div32_div16_82_inline_div16_mul16_32_4_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 01636 Copy8 [Register(0xc8), Register(0xc7)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_d[0x03..0x04] <- inline_div32_div16_82_inline_div16_mul16_32_4_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b c8 c7 

# inline_div32_div16_82_inline_div16_mul16_32_4_tbd6 <- inline_div32_div16_82_inline_div16_mul16_32_4_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 01639 Copy8 [Register(0xc5), Register(0xc8)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_tbd6 <- inline_div32_div16_82_inline_div16_mul16_32_4_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b c5 c8 

# inline_div32_div16_82_inline_div16_mul16_32_4_d[0x02..0x03] <- inline_div32_div16_82_inline_div16_mul16_32_4_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 0163c Copy8 [Register(0xc8), Register(0xc6)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_d[0x02..0x03] <- inline_div32_div16_82_inline_div16_mul16_32_4_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b c8 c6 

# inline_div32_div16_82_inline_div16_mul16_32_4_tac23 <- inline_div32_div16_82_inline_div16_mul16_32_4_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 0163f Copy8 [Register(0xc4), Register(0xc8)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_tac23 <- inline_div32_div16_82_inline_div16_mul16_32_4_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b c4 c8 

# inline_div32_div16_82_inline_div16_mul16_32_4_d[0x01..0x02] <- inline_div32_div16_82_inline_div16_mul16_32_4_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 01642 Copy8 [Register(0xc8), Register(0xc5)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_d[0x01..0x02] <- inline_div32_div16_82_inline_div16_mul16_32_4_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b c8 c5 

# inline_div32_div16_82_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 01645 LoadImm8 [Register(0xcb), Constant8(0x00=0)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 cb 00 

# inline_div32_div16_82_inline_div16_mul16_32_4_d[0x00..0x01] <- inline_div32_div16_82_inline_div16_mul16_32_4_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 01648 Copy8 [Register(0xcb), Register(0xc4)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_d[0x00..0x01] <- inline_div32_div16_82_inline_div16_mul16_32_4_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b cb c4 

# inline_div32_div16_82_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_82_inline_div16_mul16_32_4_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_div32_div16_82_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_82_inline_div16_mul16_32_4_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0xc0), Register(0xc0)], resolved: None }
# inline_div32_div16_82_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_82_inline_div16_mul16_32_4_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 0164b Copy32 [Register(0xc4), Register(0xbc)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_82_inline_div16_mul16_32_4_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 c4 bc 

# inline_div32_div16_82_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_82_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_82_inline_div16_mul16_32_4_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 0164e ClearCarry []
#       inline_div32_div16_82_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_82_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_82_inline_div16_mul16_32_4_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 0164f AddCarry32_1 [Register(0xc0), Register(0xbc), Register(0xb8)]
#       inline_div32_div16_82_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_82_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_82_inline_div16_mul16_32_4_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 c0 bc b8 

# 01653 AddCarry32_2 []
#       inline_div32_div16_82_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_82_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_82_inline_div16_mul16_32_4_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_div32_div16_82_x <- inline_div32_div16_82_inline_div16_mul16_32_4_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "inline_div32_div16_82_x <- inline_div32_div16_82_inline_div16_mul16_32_4_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# goto inline_div32_div16_82_inline_div16_mul16_32_4_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_div16_82_inline_div16_mul16_32_4_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_82_inline_div16_mul16_32_4_function_end_mul16_32)], resolved: None }
# :inline_div32_div16_82_inline_div16_mul16_32_4_function_end_mul16_32 None
# inline_div32_div16_82_inline_div16_mul16_32_4_function_end_mul16_32
# inline_div32_div16_82_tb0a8 <- inline_div32_div16_82_x[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
# Index("x", Number(U8, 2))
# 01654 Copy8 [Register(0xba), Register(0xc8)]
#       inline_div32_div16_82_tb0a8 <- inline_div32_div16_82_x[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
#       Index("x", Number(U8, 2))
0b ba c8 

# inline_div32_div16_82_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
# Number(U8, 0)
# 01657 LoadImm8 [Register(0xca), Constant8(0x00=0)]
#       inline_div32_div16_82_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
#       Number(U8, 0)
04 ca 00 

# if inline_div32_div16_82_tb0a8 > inline_div32_div16_82_tb36e then 'inline_div32_div16_82_div16_if_true_0_10' else 'inline_div32_div16_82_div16_if_else_0_11' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
# 0165a Cmp8 [Register(0xc8), Register(0xca)]
#       if inline_div32_div16_82_tb0a8 > inline_div32_div16_82_tb36e then 'inline_div32_div16_82_div16_if_true_0_10' else 'inline_div32_div16_82_div16_if_else_0_11' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
15 c8 ca 

# 0165d JcImm [Label24(inline_div32_div16_82_div16_if_else_0_11)]
#       if inline_div32_div16_82_tb0a8 > inline_div32_div16_82_tb36e then 'inline_div32_div16_82_div16_if_true_0_10' else 'inline_div32_div16_82_div16_if_else_0_11' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
71 75 16 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_82_tb0a8 > inline_div32_div16_82_tb36e then 'inline_div32_div16_82_div16_if_true_0_10' else 'inline_div32_div16_82_div16_if_else_0_11' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_82_div16_if_true_0_10)], resolved: None }
# :inline_div32_div16_82_div16_if_true_0_10 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# inline_div32_div16_82_div16_if_true_0_10
# inline_div32_div16_82_tfd7e <- inline_div32_div16_82_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# Ident("mid")
# 01661 Copy32 [Register(0xd8), Register(0xb8)]
#       inline_div32_div16_82_tfd7e <- inline_div32_div16_82_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
#       Ident("mid")
21 d8 b8 

# inline_div32_div16_82_hi <- inline_div32_div16_82_tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# 01664 Copy32 [Register(0xb8), Register(0xb4)]
#       inline_div32_div16_82_hi <- inline_div32_div16_82_tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
21 b8 b4 

# 01667 AddImm32IgnoreCarry [Register(0xb4), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_82_hi <- inline_div32_div16_82_tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
32 b4 ff ff ff ff 

# goto inline_div32_div16_82_div16_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 0166d JmpImm [Label24(inline_div32_div16_82_div16_while_predicate_6)]
#       goto inline_div32_div16_82_div16_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 e7 14 00 

# goto inline_div32_div16_82_div16_if_end_9 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# 01671 JmpImm [Label24(inline_div32_div16_82_div16_if_end_9)]
#       goto inline_div32_div16_82_div16_if_end_9 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
70 75 16 00 

# :inline_div32_div16_82_div16_if_else_0_11 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_82_div16_if_else_0_11
# :inline_div32_div16_82_div16_if_end_9 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_82_div16_if_end_9
# inline_div32_div16_82_tf944 <- inline_div32_div16_82_x[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
# Index("x", Number(U8, 3))
# 01675 Copy8 [Register(0xbb), Register(0xc8)]
#       inline_div32_div16_82_tf944 <- inline_div32_div16_82_x[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
#       Index("x", Number(U8, 3))
0b bb c8 

# inline_div32_div16_82_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
# Number(U8, 0)
# 01678 LoadImm8 [Register(0xca), Constant8(0x00=0)]
#       inline_div32_div16_82_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
#       Number(U8, 0)
04 ca 00 

# if inline_div32_div16_82_tf944 > inline_div32_div16_82_tb36e then 'inline_div32_div16_82_div16_if_true_0_13' else 'inline_div32_div16_82_div16_if_else_0_14' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
# 0167b Cmp8 [Register(0xc8), Register(0xca)]
#       if inline_div32_div16_82_tf944 > inline_div32_div16_82_tb36e then 'inline_div32_div16_82_div16_if_true_0_13' else 'inline_div32_div16_82_div16_if_else_0_14' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
15 c8 ca 

# 0167e JcImm [Label24(inline_div32_div16_82_div16_if_else_0_14)]
#       if inline_div32_div16_82_tf944 > inline_div32_div16_82_tb36e then 'inline_div32_div16_82_div16_if_true_0_13' else 'inline_div32_div16_82_div16_if_else_0_14' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
71 96 16 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_82_tf944 > inline_div32_div16_82_tb36e then 'inline_div32_div16_82_div16_if_true_0_13' else 'inline_div32_div16_82_div16_if_else_0_14' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_82_div16_if_true_0_13)], resolved: None }
# :inline_div32_div16_82_div16_if_true_0_13 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# inline_div32_div16_82_div16_if_true_0_13
# inline_div32_div16_82_tfd7e <- inline_div32_div16_82_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# Ident("mid")
# 01682 Copy32 [Register(0xd8), Register(0xb8)]
#       inline_div32_div16_82_tfd7e <- inline_div32_div16_82_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
#       Ident("mid")
21 d8 b8 

# inline_div32_div16_82_hi <- inline_div32_div16_82_tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# 01685 Copy32 [Register(0xb8), Register(0xb4)]
#       inline_div32_div16_82_hi <- inline_div32_div16_82_tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
21 b8 b4 

# 01688 AddImm32IgnoreCarry [Register(0xb4), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_82_hi <- inline_div32_div16_82_tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
32 b4 ff ff ff ff 

# goto inline_div32_div16_82_div16_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 0168e JmpImm [Label24(inline_div32_div16_82_div16_while_predicate_6)]
#       goto inline_div32_div16_82_div16_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 e7 14 00 

# goto inline_div32_div16_82_div16_if_end_12 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# 01692 JmpImm [Label24(inline_div32_div16_82_div16_if_end_12)]
#       goto inline_div32_div16_82_div16_if_end_12 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
70 96 16 00 

# :inline_div32_div16_82_div16_if_else_0_14 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_82_div16_if_else_0_14
# :inline_div32_div16_82_div16_if_end_12 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_82_div16_if_end_12
# inline_div32_div16_82_tad57 <- inline_div32_div16_82_x U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_82_tad57 <- inline_div32_div16_82_x U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_82_t8792 <- inline_div32_div16_82_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_82_t8792 <- inline_div32_div16_82_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# if inline_div32_div16_82_tad57 > inline_div32_div16_82_t8792 then 'inline_div32_div16_82_div16_if_true_0_16' else 'inline_div32_div16_82_div16_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# 01696 Cmp8 [Register(0xbb), Register(0xaf)]
#       if inline_div32_div16_82_tad57 > inline_div32_div16_82_t8792 then 'inline_div32_div16_82_div16_if_true_0_16' else 'inline_div32_div16_82_div16_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
15 bb af 

# 01699 Cmp8IfZero [Register(0xba), Register(0xae)]
#       if inline_div32_div16_82_tad57 > inline_div32_div16_82_t8792 then 'inline_div32_div16_82_div16_if_true_0_16' else 'inline_div32_div16_82_div16_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 ba ae 

# 0169c Cmp8IfZero [Register(0xb9), Register(0xad)]
#       if inline_div32_div16_82_tad57 > inline_div32_div16_82_t8792 then 'inline_div32_div16_82_div16_if_true_0_16' else 'inline_div32_div16_82_div16_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 b9 ad 

# 0169f Cmp8IfZero [Register(0xb8), Register(0xac)]
#       if inline_div32_div16_82_tad57 > inline_div32_div16_82_t8792 then 'inline_div32_div16_82_div16_if_true_0_16' else 'inline_div32_div16_82_div16_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 b8 ac 

# 016a2 JcImm [Label24(inline_div32_div16_82_div16_if_else_0_17)]
#       if inline_div32_div16_82_tad57 > inline_div32_div16_82_t8792 then 'inline_div32_div16_82_div16_if_true_0_16' else 'inline_div32_div16_82_div16_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
71 ba 16 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_82_tad57 > inline_div32_div16_82_t8792 then 'inline_div32_div16_82_div16_if_true_0_16' else 'inline_div32_div16_82_div16_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_82_div16_if_true_0_16)], resolved: None }
# :inline_div32_div16_82_div16_if_true_0_16 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# inline_div32_div16_82_div16_if_true_0_16
# inline_div32_div16_82_tfd7e <- inline_div32_div16_82_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# Ident("mid")
# 016a6 Copy32 [Register(0xd8), Register(0xb8)]
#       inline_div32_div16_82_tfd7e <- inline_div32_div16_82_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
#       Ident("mid")
21 d8 b8 

# inline_div32_div16_82_hi <- inline_div32_div16_82_tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# 016a9 Copy32 [Register(0xb8), Register(0xb4)]
#       inline_div32_div16_82_hi <- inline_div32_div16_82_tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
21 b8 b4 

# 016ac AddImm32IgnoreCarry [Register(0xb4), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_82_hi <- inline_div32_div16_82_tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
32 b4 ff ff ff ff 

# goto inline_div32_div16_82_div16_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 016b2 JmpImm [Label24(inline_div32_div16_82_div16_while_predicate_6)]
#       goto inline_div32_div16_82_div16_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 e7 14 00 

# goto inline_div32_div16_82_div16_if_end_15 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# 016b6 JmpImm [Label24(inline_div32_div16_82_div16_if_end_15)]
#       goto inline_div32_div16_82_div16_if_end_15 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
70 ba 16 00 

# :inline_div32_div16_82_div16_if_else_0_17 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_82_div16_if_else_0_17
# :inline_div32_div16_82_div16_if_end_15 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_82_div16_if_end_15
# inline_div32_div16_82_tad57 <- inline_div32_div16_82_x U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_82_tad57 <- inline_div32_div16_82_x U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_82_t8792 <- inline_div32_div16_82_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_82_t8792 <- inline_div32_div16_82_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# if inline_div32_div16_82_tad57 == inline_div32_div16_82_t8792 then 'inline_div32_div16_82_div16_if_true_0_19' else 'inline_div32_div16_82_div16_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# 016ba Cmp8 [Register(0xbb), Register(0xaf)]
#       if inline_div32_div16_82_tad57 == inline_div32_div16_82_t8792 then 'inline_div32_div16_82_div16_if_true_0_19' else 'inline_div32_div16_82_div16_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
15 bb af 

# 016bd Cmp8IfZero [Register(0xba), Register(0xae)]
#       if inline_div32_div16_82_tad57 == inline_div32_div16_82_t8792 then 'inline_div32_div16_82_div16_if_true_0_19' else 'inline_div32_div16_82_div16_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 ba ae 

# 016c0 Cmp8IfZero [Register(0xb9), Register(0xad)]
#       if inline_div32_div16_82_tad57 == inline_div32_div16_82_t8792 then 'inline_div32_div16_82_div16_if_true_0_19' else 'inline_div32_div16_82_div16_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 b9 ad 

# 016c3 Cmp8IfZero [Register(0xb8), Register(0xac)]
#       if inline_div32_div16_82_tad57 == inline_div32_div16_82_t8792 then 'inline_div32_div16_82_div16_if_true_0_19' else 'inline_div32_div16_82_div16_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 b8 ac 

# 016c6 JzImm [Label24(inline_div32_div16_82_div16_if_true_0_19)]
#       if inline_div32_div16_82_tad57 == inline_div32_div16_82_t8792 then 'inline_div32_div16_82_div16_if_true_0_19' else 'inline_div32_div16_82_div16_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
72 ce 16 00 

# 016ca JmpImm [Label24(inline_div32_div16_82_div16_if_else_0_20)]
#       if inline_div32_div16_82_tad57 == inline_div32_div16_82_t8792 then 'inline_div32_div16_82_div16_if_true_0_19' else 'inline_div32_div16_82_div16_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
70 dc 16 00 

# :inline_div32_div16_82_div16_if_true_0_19 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# inline_div32_div16_82_div16_if_true_0_19
# inline_div32_div16_82_tfd7e <- inline_div32_div16_82_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# 016ce Copy32 [Register(0xd8), Register(0xb8)]
#       inline_div32_div16_82_tfd7e <- inline_div32_div16_82_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
#       Ident("mid")
21 d8 b8 

# te81f <- inline_div32_div16_82_tfd7e U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 016d1 Copy32 [Register(0xb8), Register(0xac)]
#       te81f <- inline_div32_div16_82_tfd7e U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
21 b8 ac 

# goto inline_div32_div16_82_function_end_div16 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 016d4 JmpImm [Label24(inline_div32_div16_82_function_end_div16)]
#       goto inline_div32_div16_82_function_end_div16 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
70 2b 17 00 

# goto inline_div32_div16_82_div16_if_end_18 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# 016d8 JmpImm [Label24(inline_div32_div16_82_div16_if_end_18)]
#       goto inline_div32_div16_82_div16_if_end_18 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
70 dc 16 00 

# :inline_div32_div16_82_div16_if_else_0_20 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_82_div16_if_else_0_20
# :inline_div32_div16_82_div16_if_end_18 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_82_div16_if_end_18
# inline_div32_div16_82_t8792 <- inline_div32_div16_82_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_82_t8792 <- inline_div32_div16_82_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_82_tad57 <- inline_div32_div16_82_x U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_82_tad57 <- inline_div32_div16_82_x U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_82_r <- inline_div32_div16_82_t8792 Subtract Var(inline_div32_div16_82_tad57) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# 016dc Copy32 [Register(0xb8), Register(0x00)]
#       inline_div32_div16_82_r <- inline_div32_div16_82_t8792 Subtract Var(inline_div32_div16_82_tad57) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
21 b8 00 

# 016df Invert8 [Register(0x00)]
#       inline_div32_div16_82_r <- inline_div32_div16_82_t8792 Subtract Var(inline_div32_div16_82_tad57) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 00 

# 016e1 Invert8 [Register(0x01)]
#       inline_div32_div16_82_r <- inline_div32_div16_82_t8792 Subtract Var(inline_div32_div16_82_tad57) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 01 

# 016e3 Invert8 [Register(0x02)]
#       inline_div32_div16_82_r <- inline_div32_div16_82_t8792 Subtract Var(inline_div32_div16_82_tad57) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 02 

# 016e5 Invert8 [Register(0x03)]
#       inline_div32_div16_82_r <- inline_div32_div16_82_t8792 Subtract Var(inline_div32_div16_82_tad57) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 03 

# 016e7 AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       inline_div32_div16_82_r <- inline_div32_div16_82_t8792 Subtract Var(inline_div32_div16_82_tad57) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
32 00 01 00 00 00 

# 016ed ClearCarry []
#       inline_div32_div16_82_r <- inline_div32_div16_82_t8792 Subtract Var(inline_div32_div16_82_tad57) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
03 

# 016ee AddCarry32_1 [Register(0xac), Register(0x00), Register(0xb8)]
#       inline_div32_div16_82_r <- inline_div32_div16_82_t8792 Subtract Var(inline_div32_div16_82_tad57) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
30 ac 00 b8 

# 016f2 AddCarry32_2 []
#       inline_div32_div16_82_r <- inline_div32_div16_82_t8792 Subtract Var(inline_div32_div16_82_tad57) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
31 

# inline_div32_div16_82_taee0 <- inline_div32_div16_82_r U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("r")
# optimized away noop copy Instruction { source: "inline_div32_div16_82_taee0 <- inline_div32_div16_82_r U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"r\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_82_tace9 <- inline_div32_div16_82_b U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_82_tace9 <- inline_div32_div16_82_b U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# if inline_div32_div16_82_taee0 < inline_div32_div16_82_tace9 then 'inline_div32_div16_82_div16_if_true_0_22' else 'inline_div32_div16_82_div16_if_else_0_23' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# 016f3 Cmp8 [Register(0xb3), Register(0xbb)]
#       if inline_div32_div16_82_taee0 < inline_div32_div16_82_tace9 then 'inline_div32_div16_82_div16_if_true_0_22' else 'inline_div32_div16_82_div16_if_else_0_23' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
15 b3 bb 

# 016f6 Cmp8IfZero [Register(0xb2), Register(0xba)]
#       if inline_div32_div16_82_taee0 < inline_div32_div16_82_tace9 then 'inline_div32_div16_82_div16_if_true_0_22' else 'inline_div32_div16_82_div16_if_else_0_23' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 b2 ba 

# 016f9 Cmp8IfZero [Register(0xb1), Register(0xb9)]
#       if inline_div32_div16_82_taee0 < inline_div32_div16_82_tace9 then 'inline_div32_div16_82_div16_if_true_0_22' else 'inline_div32_div16_82_div16_if_else_0_23' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 b1 b9 

# 016fc Cmp8IfZero [Register(0xb0), Register(0xb8)]
#       if inline_div32_div16_82_taee0 < inline_div32_div16_82_tace9 then 'inline_div32_div16_82_div16_if_true_0_22' else 'inline_div32_div16_82_div16_if_else_0_23' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 b0 b8 

# 016ff JcImm [Label24(inline_div32_div16_82_div16_if_else_0_23)]
#       if inline_div32_div16_82_taee0 < inline_div32_div16_82_tace9 then 'inline_div32_div16_82_div16_if_true_0_22' else 'inline_div32_div16_82_div16_if_else_0_23' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
71 11 17 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_82_taee0 < inline_div32_div16_82_tace9 then 'inline_div32_div16_82_div16_if_true_0_22' else 'inline_div32_div16_82_div16_if_else_0_23' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_82_div16_if_true_0_22)], resolved: None }
# :inline_div32_div16_82_div16_if_true_0_22 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# inline_div32_div16_82_div16_if_true_0_22
# inline_div32_div16_82_tfd7e <- inline_div32_div16_82_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# 01703 Copy32 [Register(0xd8), Register(0xb8)]
#       inline_div32_div16_82_tfd7e <- inline_div32_div16_82_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
#       Ident("mid")
21 d8 b8 

# te81f <- inline_div32_div16_82_tfd7e U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 01706 Copy32 [Register(0xb8), Register(0xac)]
#       te81f <- inline_div32_div16_82_tfd7e U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
21 b8 ac 

# goto inline_div32_div16_82_function_end_div16 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 01709 JmpImm [Label24(inline_div32_div16_82_function_end_div16)]
#       goto inline_div32_div16_82_function_end_div16 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
70 2b 17 00 

# goto inline_div32_div16_82_div16_if_end_21 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# 0170d JmpImm [Label24(inline_div32_div16_82_div16_if_end_21)]
#       goto inline_div32_div16_82_div16_if_end_21 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
70 11 17 00 

# :inline_div32_div16_82_div16_if_else_0_23 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_82_div16_if_else_0_23
# :inline_div32_div16_82_div16_if_end_21 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_82_div16_if_end_21
# inline_div32_div16_82_tfd7e <- inline_div32_div16_82_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Add, Ident("mid"), Number(U8, 1))
# Ident("mid")
# 01711 Copy32 [Register(0xd8), Register(0xb8)]
#       inline_div32_div16_82_tfd7e <- inline_div32_div16_82_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("mid"), Number(U8, 1))
#       Ident("mid")
21 d8 b8 

# inline_div32_div16_82_lo <- inline_div32_div16_82_tfd7e Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Add, Ident("mid"), Number(U8, 1))
# 01714 Copy32 [Register(0xb8), Register(0xd4)]
#       inline_div32_div16_82_lo <- inline_div32_div16_82_tfd7e Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("mid"), Number(U8, 1))
21 b8 d4 

# 01717 AddImm32IgnoreCarry [Register(0xd4), Constant32(0x00000001=1)]
#       inline_div32_div16_82_lo <- inline_div32_div16_82_tfd7e Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("mid"), Number(U8, 1))
32 d4 01 00 00 00 

# goto inline_div32_div16_82_div16_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# 0171d JmpImm [Label24(inline_div32_div16_82_div16_while_predicate_6)]
#       goto inline_div32_div16_82_div16_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
70 e7 14 00 

# :inline_div32_div16_82_div16_while_end_8 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_82_div16_while_end_8
# inline_div32_div16_82_t1506 <- inline_div32_div16_82_lo U32 Some('/home/john/lutcomp/programs/lib/div.j':(63,5))
# Return { value: Some(Ident("lo")) }
# Ident("lo")
# 01721 Copy32 [Register(0xd4), Register(0xb8)]
#       inline_div32_div16_82_t1506 <- inline_div32_div16_82_lo U32 Some('/home/john/lutcomp/programs/lib/div.j':(63,5))
#       Return { value: Some(Ident("lo")) }
#       Ident("lo")
21 d4 b8 

# te81f <- inline_div32_div16_82_t1506 U32 Some('/home/john/lutcomp/programs/lib/div.j':(63,5))
# Return { value: Some(Ident("lo")) }
# 01724 Copy32 [Register(0xb8), Register(0xac)]
#       te81f <- inline_div32_div16_82_t1506 U32 Some('/home/john/lutcomp/programs/lib/div.j':(63,5))
#       Return { value: Some(Ident("lo")) }
21 b8 ac 

# goto inline_div32_div16_82_function_end_div16 Some('/home/john/lutcomp/programs/lib/div.j':(63,5))
# Return { value: Some(Ident("lo")) }
# 01727 JmpImm [Label24(inline_div32_div16_82_function_end_div16)]
#       goto inline_div32_div16_82_function_end_div16 Some('/home/john/lutcomp/programs/lib/div.j':(63,5))
#       Return { value: Some(Ident("lo")) }
70 2b 17 00 

# :inline_div32_div16_82_function_end_div16 None
# inline_div32_div16_82_function_end_div16
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# 0172b AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
#       Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
32 0c 08 00 00 00 

# return Some(te81f) Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# 01731 Copy32 [Register(0xac), Register(0x00)]
#       return Some(te81f) Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
#       Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
21 ac 00 

# 01734 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 0173a JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto div32_if_end_3 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
# 0173c JmpImm [Label24(div32_if_end_3)]
#       goto div32_if_end_3 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
70 40 17 00 

# :div32_if_else_0_5 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
# div32_if_else_0_5
# :div32_if_end_3 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
# div32_if_end_3
# lo <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/div.j':(75,5))
# Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 01740 LoadImm32 [Register(0xc4), Constant32(0x00000000=0)]
#       lo <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/div.j':(75,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 c4 00 00 00 00 

# hi <- 0xffffffffu32  Some('/home/john/lutcomp/programs/lib/div.j':(76,5))
# Assign { target: Ident("hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 4294967295) }
# Number(USIZE, 4294967295)
# 01746 LoadImm32 [Register(0xb4), Constant32(0xffffffff=4294967295)]
#       hi <- 0xffffffffu32  Some('/home/john/lutcomp/programs/lib/div.j':(76,5))
#       Assign { target: Ident("hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 4294967295) }
#       Number(USIZE, 4294967295)
20 b4 ff ff ff ff 

# :div32_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# div32_while_predicate_6
# t1506 <- lo U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("lo")
# 0174c Copy32 [Register(0xc4), Register(0xb8)]
#       t1506 <- lo U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
#       Ident("lo")
21 c4 b8 

# t5508 <- hi U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("hi")
# optimized away noop copy Instruction { source: "t5508 <- hi U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# 0174f Cmp8 [Register(0xb7), Register(0xbb)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
15 b7 bb 

# 01752 Cmp8IfZero [Register(0xb6), Register(0xba)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 b6 ba 

# 01755 Cmp8IfZero [Register(0xb5), Register(0xb9)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 b5 b9 

# 01758 Cmp8IfZero [Register(0xb4), Register(0xb8)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 b4 b8 

# 0175b JcImm [Label24(div32_while_end_8)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
71 c8 19 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\n", opcode: JmpImm, args: [Label24(div32_while_body_7)], resolved: None }
# :div32_while_body_7 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# div32_while_body_7
# t1506 <- lo U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
# Ident("lo")
# 0175f Copy32 [Register(0xc4), Register(0xb8)]
#       t1506 <- lo U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
#       Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
#       Ident("lo")
21 c4 b8 

# inline_div32_shiftright1_83_a <- t1506 U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_83_a <- t1506 U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }\nArithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))\nCall(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] })\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_shiftright1_83_tdd9e <- inline_div32_shiftright1_83_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
# Index("a", Number(U8, 0))
# 01762 Copy8 [Register(0xb8), Register(0xd0)]
#       inline_div32_shiftright1_83_tdd9e <- inline_div32_shiftright1_83_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
#       Index("a", Number(U8, 0))
0b b8 d0 

# inline_div32_shiftright1_83_t5a19 <- inline_div32_shiftright1_83_tdd9e RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
# 01765 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_83_t5a19 <- inline_div32_shiftright1_83_tdd9e RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
04 00 01 

# 01768 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xd0), Register(0xca)]
#       inline_div32_shiftright1_83_t5a19 <- inline_div32_shiftright1_83_tdd9e RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
1e 04 00 d0 ca 

# inline_div32_shiftright1_83_a[0x00..0x01] <- inline_div32_shiftright1_83_t5a19 U8 Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# 0176d Copy8 [Register(0xca), Register(0xb8)]
#       inline_div32_shiftright1_83_a[0x00..0x01] <- inline_div32_shiftright1_83_t5a19 U8 Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
0b ca b8 

# inline_div32_shiftright1_83_t1539 <- inline_div32_shiftright1_83_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
# Index("a", Number(U8, 1))
# 01770 Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_shiftright1_83_t1539 <- inline_div32_shiftright1_83_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
#       Index("a", Number(U8, 1))
0b b9 c8 

# inline_div32_shiftright1_83_ta431 <- inline_div32_shiftright1_83_t1539 RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
# 01773 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_83_ta431 <- inline_div32_shiftright1_83_t1539 RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
04 00 01 

# 01776 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc8), Register(0xca)]
#       inline_div32_shiftright1_83_ta431 <- inline_div32_shiftright1_83_t1539 RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
1e 04 00 c8 ca 

# inline_div32_shiftright1_83_a[0x01..0x02] <- inline_div32_shiftright1_83_ta431 U8 Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# 0177b Copy8 [Register(0xca), Register(0xb9)]
#       inline_div32_shiftright1_83_a[0x01..0x02] <- inline_div32_shiftright1_83_ta431 U8 Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
0b ca b9 

# inline_div32_shiftright1_83_t577f <- inline_div32_shiftright1_83_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
# Index("a", Number(U8, 2))
# 0177e Copy8 [Register(0xba), Register(0xca)]
#       inline_div32_shiftright1_83_t577f <- inline_div32_shiftright1_83_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
#       Index("a", Number(U8, 2))
0b ba ca 

# inline_div32_shiftright1_83_t350e <- inline_div32_shiftright1_83_t577f RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
# 01781 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_83_t350e <- inline_div32_shiftright1_83_t577f RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
04 00 01 

# 01784 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xca), Register(0xca)]
#       inline_div32_shiftright1_83_t350e <- inline_div32_shiftright1_83_t577f RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
1e 04 00 ca ca 

# inline_div32_shiftright1_83_a[0x02..0x03] <- inline_div32_shiftright1_83_t350e U8 Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# 01789 Copy8 [Register(0xca), Register(0xba)]
#       inline_div32_shiftright1_83_a[0x02..0x03] <- inline_div32_shiftright1_83_t350e U8 Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
0b ca ba 

# inline_div32_shiftright1_83_t5b7c <- inline_div32_shiftright1_83_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
# Index("a", Number(U8, 3))
# 0178c Copy8 [Register(0xbb), Register(0xc8)]
#       inline_div32_shiftright1_83_t5b7c <- inline_div32_shiftright1_83_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
#       Index("a", Number(U8, 3))
0b bb c8 

# inline_div32_shiftright1_83_taa3e <- inline_div32_shiftright1_83_t5b7c RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
# 0178f LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_83_taa3e <- inline_div32_shiftright1_83_t5b7c RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
04 00 01 

# 01792 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc8), Register(0xca)]
#       inline_div32_shiftright1_83_taa3e <- inline_div32_shiftright1_83_t5b7c RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
1e 04 00 c8 ca 

# inline_div32_shiftright1_83_a[0x03..0x04] <- inline_div32_shiftright1_83_taa3e U8 Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# 01797 Copy8 [Register(0xca), Register(0xbb)]
#       inline_div32_shiftright1_83_a[0x03..0x04] <- inline_div32_shiftright1_83_taa3e U8 Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
0b ca bb 

# inline_div32_shiftright1_83_tdd9e <- inline_div32_shiftright1_83_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
# Index("a", Number(U8, 0))
# 0179a Copy8 [Register(0xb8), Register(0xd0)]
#       inline_div32_shiftright1_83_tdd9e <- inline_div32_shiftright1_83_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
#       Index("a", Number(U8, 0))
0b b8 d0 

# inline_div32_shiftright1_83_t9144 <- inline_div32_shiftright1_83_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
# 0179d LoadImm8 [Register(0x00), Constant8(0x7f=127)]
#       inline_div32_shiftright1_83_t9144 <- inline_div32_shiftright1_83_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
04 00 7f 

# 017a0 And8 [Register(0xd0), Register(0x00), Register(0xca)]
#       inline_div32_shiftright1_83_t9144 <- inline_div32_shiftright1_83_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
1b d0 00 ca 

# inline_div32_shiftright1_83_a[0x00..0x01] <- inline_div32_shiftright1_83_t9144 U8 Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# 017a4 Copy8 [Register(0xca), Register(0xb8)]
#       inline_div32_shiftright1_83_a[0x00..0x01] <- inline_div32_shiftright1_83_t9144 U8 Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
0b ca b8 

# inline_div32_shiftright1_83_tdd9e <- inline_div32_shiftright1_83_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Index("a", Number(U8, 0))
# 017a7 Copy8 [Register(0xb8), Register(0xd0)]
#       inline_div32_shiftright1_83_tdd9e <- inline_div32_shiftright1_83_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Index("a", Number(U8, 0))
0b b8 d0 

# inline_div32_shiftright1_83_t1539 <- inline_div32_shiftright1_83_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
# Index("a", Number(U8, 1))
# 017aa Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_shiftright1_83_t1539 <- inline_div32_shiftright1_83_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
#       Index("a", Number(U8, 1))
0b b9 c8 

# inline_div32_shiftright1_83_t8384 <- inline_div32_shiftright1_83_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
# 017ad LoadImm8 [Register(0x00), Constant8(0x80=128)]
#       inline_div32_shiftright1_83_t8384 <- inline_div32_shiftright1_83_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
04 00 80 

# 017b0 And8 [Register(0xc8), Register(0x00), Register(0xca)]
#       inline_div32_shiftright1_83_t8384 <- inline_div32_shiftright1_83_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
1b c8 00 ca 

# inline_div32_shiftright1_83_tf572 <- inline_div32_shiftright1_83_tdd9e BitwiseOr Var(inline_div32_shiftright1_83_t8384) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# 017b4 Or8 [Register(0xd0), Register(0xca), Register(0xca)]
#       inline_div32_shiftright1_83_tf572 <- inline_div32_shiftright1_83_tdd9e BitwiseOr Var(inline_div32_shiftright1_83_t8384) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
1c d0 ca ca 

# inline_div32_shiftright1_83_a[0x00..0x01] <- inline_div32_shiftright1_83_tf572 U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# 017b8 Copy8 [Register(0xca), Register(0xb8)]
#       inline_div32_shiftright1_83_a[0x00..0x01] <- inline_div32_shiftright1_83_tf572 U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
0b ca b8 

# inline_div32_shiftright1_83_t1539 <- inline_div32_shiftright1_83_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
# Index("a", Number(U8, 1))
# 017bb Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_shiftright1_83_t1539 <- inline_div32_shiftright1_83_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
#       Index("a", Number(U8, 1))
0b b9 c8 

# inline_div32_shiftright1_83_t5a73 <- inline_div32_shiftright1_83_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
# 017be LoadImm8 [Register(0x00), Constant8(0x7f=127)]
#       inline_div32_shiftright1_83_t5a73 <- inline_div32_shiftright1_83_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
04 00 7f 

# 017c1 And8 [Register(0xc8), Register(0x00), Register(0xca)]
#       inline_div32_shiftright1_83_t5a73 <- inline_div32_shiftright1_83_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
1b c8 00 ca 

# inline_div32_shiftright1_83_a[0x01..0x02] <- inline_div32_shiftright1_83_t5a73 U8 Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# 017c5 Copy8 [Register(0xca), Register(0xb9)]
#       inline_div32_shiftright1_83_a[0x01..0x02] <- inline_div32_shiftright1_83_t5a73 U8 Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
0b ca b9 

# inline_div32_shiftright1_83_t1539 <- inline_div32_shiftright1_83_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Index("a", Number(U8, 1))
# 017c8 Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_shiftright1_83_t1539 <- inline_div32_shiftright1_83_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Index("a", Number(U8, 1))
0b b9 c8 

# inline_div32_shiftright1_83_t577f <- inline_div32_shiftright1_83_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
# Index("a", Number(U8, 2))
# 017cb Copy8 [Register(0xba), Register(0xca)]
#       inline_div32_shiftright1_83_t577f <- inline_div32_shiftright1_83_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
#       Index("a", Number(U8, 2))
0b ba ca 

# inline_div32_shiftright1_83_t1f15 <- inline_div32_shiftright1_83_t577f BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
# 017ce LoadImm8 [Register(0x00), Constant8(0x80=128)]
#       inline_div32_shiftright1_83_t1f15 <- inline_div32_shiftright1_83_t577f BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
04 00 80 

# 017d1 And8 [Register(0xca), Register(0x00), Register(0xca)]
#       inline_div32_shiftright1_83_t1f15 <- inline_div32_shiftright1_83_t577f BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
1b ca 00 ca 

# inline_div32_shiftright1_83_t4d1a <- inline_div32_shiftright1_83_t1539 BitwiseOr Var(inline_div32_shiftright1_83_t1f15) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# 017d5 Or8 [Register(0xc8), Register(0xca), Register(0xca)]
#       inline_div32_shiftright1_83_t4d1a <- inline_div32_shiftright1_83_t1539 BitwiseOr Var(inline_div32_shiftright1_83_t1f15) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
1c c8 ca ca 

# inline_div32_shiftright1_83_a[0x01..0x02] <- inline_div32_shiftright1_83_t4d1a U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# 017d9 Copy8 [Register(0xca), Register(0xb9)]
#       inline_div32_shiftright1_83_a[0x01..0x02] <- inline_div32_shiftright1_83_t4d1a U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
0b ca b9 

# inline_div32_shiftright1_83_t577f <- inline_div32_shiftright1_83_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
# Index("a", Number(U8, 2))
# 017dc Copy8 [Register(0xba), Register(0xca)]
#       inline_div32_shiftright1_83_t577f <- inline_div32_shiftright1_83_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
#       Index("a", Number(U8, 2))
0b ba ca 

# inline_div32_shiftright1_83_t887d <- inline_div32_shiftright1_83_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
# 017df LoadImm8 [Register(0x00), Constant8(0x7f=127)]
#       inline_div32_shiftright1_83_t887d <- inline_div32_shiftright1_83_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
04 00 7f 

# 017e2 And8 [Register(0xca), Register(0x00), Register(0xca)]
#       inline_div32_shiftright1_83_t887d <- inline_div32_shiftright1_83_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
1b ca 00 ca 

# inline_div32_shiftright1_83_a[0x02..0x03] <- inline_div32_shiftright1_83_t887d U8 Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# 017e6 Copy8 [Register(0xca), Register(0xba)]
#       inline_div32_shiftright1_83_a[0x02..0x03] <- inline_div32_shiftright1_83_t887d U8 Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
0b ca ba 

# inline_div32_shiftright1_83_t577f <- inline_div32_shiftright1_83_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Index("a", Number(U8, 2))
# 017e9 Copy8 [Register(0xba), Register(0xca)]
#       inline_div32_shiftright1_83_t577f <- inline_div32_shiftright1_83_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Index("a", Number(U8, 2))
0b ba ca 

# inline_div32_shiftright1_83_t5b7c <- inline_div32_shiftright1_83_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
# Index("a", Number(U8, 3))
# 017ec Copy8 [Register(0xbb), Register(0xc8)]
#       inline_div32_shiftright1_83_t5b7c <- inline_div32_shiftright1_83_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
#       Index("a", Number(U8, 3))
0b bb c8 

# inline_div32_shiftright1_83_tc29b <- inline_div32_shiftright1_83_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
# 017ef LoadImm8 [Register(0x00), Constant8(0x80=128)]
#       inline_div32_shiftright1_83_tc29b <- inline_div32_shiftright1_83_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
04 00 80 

# 017f2 And8 [Register(0xc8), Register(0x00), Register(0xd0)]
#       inline_div32_shiftright1_83_tc29b <- inline_div32_shiftright1_83_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
1b c8 00 d0 

# inline_div32_shiftright1_83_t1bbf <- inline_div32_shiftright1_83_t577f BitwiseOr Var(inline_div32_shiftright1_83_tc29b) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# 017f6 Or8 [Register(0xca), Register(0xd0), Register(0xca)]
#       inline_div32_shiftright1_83_t1bbf <- inline_div32_shiftright1_83_t577f BitwiseOr Var(inline_div32_shiftright1_83_tc29b) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
1c ca d0 ca 

# inline_div32_shiftright1_83_a[0x02..0x03] <- inline_div32_shiftright1_83_t1bbf U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# 017fa Copy8 [Register(0xca), Register(0xba)]
#       inline_div32_shiftright1_83_a[0x02..0x03] <- inline_div32_shiftright1_83_t1bbf U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
0b ca ba 

# inline_div32_shiftright1_83_t5b7c <- inline_div32_shiftright1_83_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
# Index("a", Number(U8, 3))
# 017fd Copy8 [Register(0xbb), Register(0xc8)]
#       inline_div32_shiftright1_83_t5b7c <- inline_div32_shiftright1_83_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
#       Index("a", Number(U8, 3))
0b bb c8 

# inline_div32_shiftright1_83_tb911 <- inline_div32_shiftright1_83_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
# 01800 LoadImm8 [Register(0x00), Constant8(0x7f=127)]
#       inline_div32_shiftright1_83_tb911 <- inline_div32_shiftright1_83_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
04 00 7f 

# 01803 And8 [Register(0xc8), Register(0x00), Register(0xca)]
#       inline_div32_shiftright1_83_tb911 <- inline_div32_shiftright1_83_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
1b c8 00 ca 

# inline_div32_shiftright1_83_a[0x03..0x04] <- inline_div32_shiftright1_83_tb911 U8 Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# 01807 Copy8 [Register(0xca), Register(0xbb)]
#       inline_div32_shiftright1_83_a[0x03..0x04] <- inline_div32_shiftright1_83_tb911 U8 Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
0b ca bb 

# inline_div32_shiftright1_83_t8792 <- inline_div32_shiftright1_83_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_83_t8792 <- inline_div32_shiftright1_83_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# t9599 <- inline_div32_shiftright1_83_t8792 U32 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# 0180a Copy32 [Register(0xb8), Register(0xcc)]
#       t9599 <- inline_div32_shiftright1_83_t8792 U32 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))
#       Return { value: Some(Ident("a")) }
21 b8 cc 

# goto inline_div32_shiftright1_83_function_end_shiftright1 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_shiftright1_83_function_end_shiftright1 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: JmpImm, args: [Label24(inline_div32_shiftright1_83_function_end_shiftright1)], resolved: None }
# :inline_div32_shiftright1_83_function_end_shiftright1 None
# inline_div32_shiftright1_83_function_end_shiftright1
# t5508 <- hi U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
# Ident("hi")
# optimized away noop copy Instruction { source: "t5508 <- hi U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }\nArithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))\nCall(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_div32_shiftright1_84_a <- t5508 U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
# 0180d Copy32 [Register(0xb4), Register(0xb8)]
#       inline_div32_shiftright1_84_a <- t5508 U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
#       Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
21 b4 b8 

# inline_div32_shiftright1_84_tdd9e <- inline_div32_shiftright1_84_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
# Index("a", Number(U8, 0))
# 01810 Copy8 [Register(0xb8), Register(0xd0)]
#       inline_div32_shiftright1_84_tdd9e <- inline_div32_shiftright1_84_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
#       Index("a", Number(U8, 0))
0b b8 d0 

# inline_div32_shiftright1_84_t5a19 <- inline_div32_shiftright1_84_tdd9e RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
# 01813 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_84_t5a19 <- inline_div32_shiftright1_84_tdd9e RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
04 00 01 

# 01816 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xd0), Register(0xca)]
#       inline_div32_shiftright1_84_t5a19 <- inline_div32_shiftright1_84_tdd9e RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
1e 04 00 d0 ca 

# inline_div32_shiftright1_84_a[0x00..0x01] <- inline_div32_shiftright1_84_t5a19 U8 Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# 0181b Copy8 [Register(0xca), Register(0xb8)]
#       inline_div32_shiftright1_84_a[0x00..0x01] <- inline_div32_shiftright1_84_t5a19 U8 Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
0b ca b8 

# inline_div32_shiftright1_84_t1539 <- inline_div32_shiftright1_84_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
# Index("a", Number(U8, 1))
# 0181e Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_shiftright1_84_t1539 <- inline_div32_shiftright1_84_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
#       Index("a", Number(U8, 1))
0b b9 c8 

# inline_div32_shiftright1_84_ta431 <- inline_div32_shiftright1_84_t1539 RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
# 01821 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_84_ta431 <- inline_div32_shiftright1_84_t1539 RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
04 00 01 

# 01824 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc8), Register(0xca)]
#       inline_div32_shiftright1_84_ta431 <- inline_div32_shiftright1_84_t1539 RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
1e 04 00 c8 ca 

# inline_div32_shiftright1_84_a[0x01..0x02] <- inline_div32_shiftright1_84_ta431 U8 Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# 01829 Copy8 [Register(0xca), Register(0xb9)]
#       inline_div32_shiftright1_84_a[0x01..0x02] <- inline_div32_shiftright1_84_ta431 U8 Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
0b ca b9 

# inline_div32_shiftright1_84_t577f <- inline_div32_shiftright1_84_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
# Index("a", Number(U8, 2))
# 0182c Copy8 [Register(0xba), Register(0xca)]
#       inline_div32_shiftright1_84_t577f <- inline_div32_shiftright1_84_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
#       Index("a", Number(U8, 2))
0b ba ca 

# inline_div32_shiftright1_84_t350e <- inline_div32_shiftright1_84_t577f RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
# 0182f LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_84_t350e <- inline_div32_shiftright1_84_t577f RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
04 00 01 

# 01832 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xca), Register(0xca)]
#       inline_div32_shiftright1_84_t350e <- inline_div32_shiftright1_84_t577f RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
1e 04 00 ca ca 

# inline_div32_shiftright1_84_a[0x02..0x03] <- inline_div32_shiftright1_84_t350e U8 Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# 01837 Copy8 [Register(0xca), Register(0xba)]
#       inline_div32_shiftright1_84_a[0x02..0x03] <- inline_div32_shiftright1_84_t350e U8 Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
0b ca ba 

# inline_div32_shiftright1_84_t5b7c <- inline_div32_shiftright1_84_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
# Index("a", Number(U8, 3))
# 0183a Copy8 [Register(0xbb), Register(0xc8)]
#       inline_div32_shiftright1_84_t5b7c <- inline_div32_shiftright1_84_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
#       Index("a", Number(U8, 3))
0b bb c8 

# inline_div32_shiftright1_84_taa3e <- inline_div32_shiftright1_84_t5b7c RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
# 0183d LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_84_taa3e <- inline_div32_shiftright1_84_t5b7c RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
04 00 01 

# 01840 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc8), Register(0xca)]
#       inline_div32_shiftright1_84_taa3e <- inline_div32_shiftright1_84_t5b7c RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
1e 04 00 c8 ca 

# inline_div32_shiftright1_84_a[0x03..0x04] <- inline_div32_shiftright1_84_taa3e U8 Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# 01845 Copy8 [Register(0xca), Register(0xbb)]
#       inline_div32_shiftright1_84_a[0x03..0x04] <- inline_div32_shiftright1_84_taa3e U8 Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
0b ca bb 

# inline_div32_shiftright1_84_tdd9e <- inline_div32_shiftright1_84_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
# Index("a", Number(U8, 0))
# 01848 Copy8 [Register(0xb8), Register(0xd0)]
#       inline_div32_shiftright1_84_tdd9e <- inline_div32_shiftright1_84_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
#       Index("a", Number(U8, 0))
0b b8 d0 

# inline_div32_shiftright1_84_t9144 <- inline_div32_shiftright1_84_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
# 0184b LoadImm8 [Register(0x00), Constant8(0x7f=127)]
#       inline_div32_shiftright1_84_t9144 <- inline_div32_shiftright1_84_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
04 00 7f 

# 0184e And8 [Register(0xd0), Register(0x00), Register(0xca)]
#       inline_div32_shiftright1_84_t9144 <- inline_div32_shiftright1_84_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
1b d0 00 ca 

# inline_div32_shiftright1_84_a[0x00..0x01] <- inline_div32_shiftright1_84_t9144 U8 Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# 01852 Copy8 [Register(0xca), Register(0xb8)]
#       inline_div32_shiftright1_84_a[0x00..0x01] <- inline_div32_shiftright1_84_t9144 U8 Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
0b ca b8 

# inline_div32_shiftright1_84_tdd9e <- inline_div32_shiftright1_84_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Index("a", Number(U8, 0))
# 01855 Copy8 [Register(0xb8), Register(0xd0)]
#       inline_div32_shiftright1_84_tdd9e <- inline_div32_shiftright1_84_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Index("a", Number(U8, 0))
0b b8 d0 

# inline_div32_shiftright1_84_t1539 <- inline_div32_shiftright1_84_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
# Index("a", Number(U8, 1))
# 01858 Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_shiftright1_84_t1539 <- inline_div32_shiftright1_84_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
#       Index("a", Number(U8, 1))
0b b9 c8 

# inline_div32_shiftright1_84_t8384 <- inline_div32_shiftright1_84_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
# 0185b LoadImm8 [Register(0x00), Constant8(0x80=128)]
#       inline_div32_shiftright1_84_t8384 <- inline_div32_shiftright1_84_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
04 00 80 

# 0185e And8 [Register(0xc8), Register(0x00), Register(0xca)]
#       inline_div32_shiftright1_84_t8384 <- inline_div32_shiftright1_84_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
1b c8 00 ca 

# inline_div32_shiftright1_84_tf572 <- inline_div32_shiftright1_84_tdd9e BitwiseOr Var(inline_div32_shiftright1_84_t8384) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# 01862 Or8 [Register(0xd0), Register(0xca), Register(0xca)]
#       inline_div32_shiftright1_84_tf572 <- inline_div32_shiftright1_84_tdd9e BitwiseOr Var(inline_div32_shiftright1_84_t8384) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
1c d0 ca ca 

# inline_div32_shiftright1_84_a[0x00..0x01] <- inline_div32_shiftright1_84_tf572 U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# 01866 Copy8 [Register(0xca), Register(0xb8)]
#       inline_div32_shiftright1_84_a[0x00..0x01] <- inline_div32_shiftright1_84_tf572 U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
0b ca b8 

# inline_div32_shiftright1_84_t1539 <- inline_div32_shiftright1_84_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
# Index("a", Number(U8, 1))
# 01869 Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_shiftright1_84_t1539 <- inline_div32_shiftright1_84_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
#       Index("a", Number(U8, 1))
0b b9 c8 

# inline_div32_shiftright1_84_t5a73 <- inline_div32_shiftright1_84_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
# 0186c LoadImm8 [Register(0x00), Constant8(0x7f=127)]
#       inline_div32_shiftright1_84_t5a73 <- inline_div32_shiftright1_84_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
04 00 7f 

# 0186f And8 [Register(0xc8), Register(0x00), Register(0xca)]
#       inline_div32_shiftright1_84_t5a73 <- inline_div32_shiftright1_84_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
1b c8 00 ca 

# inline_div32_shiftright1_84_a[0x01..0x02] <- inline_div32_shiftright1_84_t5a73 U8 Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# 01873 Copy8 [Register(0xca), Register(0xb9)]
#       inline_div32_shiftright1_84_a[0x01..0x02] <- inline_div32_shiftright1_84_t5a73 U8 Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
0b ca b9 

# inline_div32_shiftright1_84_t1539 <- inline_div32_shiftright1_84_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Index("a", Number(U8, 1))
# 01876 Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_shiftright1_84_t1539 <- inline_div32_shiftright1_84_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Index("a", Number(U8, 1))
0b b9 c8 

# inline_div32_shiftright1_84_t577f <- inline_div32_shiftright1_84_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
# Index("a", Number(U8, 2))
# 01879 Copy8 [Register(0xba), Register(0xca)]
#       inline_div32_shiftright1_84_t577f <- inline_div32_shiftright1_84_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
#       Index("a", Number(U8, 2))
0b ba ca 

# inline_div32_shiftright1_84_t1f15 <- inline_div32_shiftright1_84_t577f BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
# 0187c LoadImm8 [Register(0x00), Constant8(0x80=128)]
#       inline_div32_shiftright1_84_t1f15 <- inline_div32_shiftright1_84_t577f BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
04 00 80 

# 0187f And8 [Register(0xca), Register(0x00), Register(0xca)]
#       inline_div32_shiftright1_84_t1f15 <- inline_div32_shiftright1_84_t577f BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
1b ca 00 ca 

# inline_div32_shiftright1_84_t4d1a <- inline_div32_shiftright1_84_t1539 BitwiseOr Var(inline_div32_shiftright1_84_t1f15) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# 01883 Or8 [Register(0xc8), Register(0xca), Register(0xca)]
#       inline_div32_shiftright1_84_t4d1a <- inline_div32_shiftright1_84_t1539 BitwiseOr Var(inline_div32_shiftright1_84_t1f15) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
1c c8 ca ca 

# inline_div32_shiftright1_84_a[0x01..0x02] <- inline_div32_shiftright1_84_t4d1a U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# 01887 Copy8 [Register(0xca), Register(0xb9)]
#       inline_div32_shiftright1_84_a[0x01..0x02] <- inline_div32_shiftright1_84_t4d1a U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
0b ca b9 

# inline_div32_shiftright1_84_t577f <- inline_div32_shiftright1_84_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
# Index("a", Number(U8, 2))
# 0188a Copy8 [Register(0xba), Register(0xca)]
#       inline_div32_shiftright1_84_t577f <- inline_div32_shiftright1_84_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
#       Index("a", Number(U8, 2))
0b ba ca 

# inline_div32_shiftright1_84_t887d <- inline_div32_shiftright1_84_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
# 0188d LoadImm8 [Register(0x00), Constant8(0x7f=127)]
#       inline_div32_shiftright1_84_t887d <- inline_div32_shiftright1_84_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
04 00 7f 

# 01890 And8 [Register(0xca), Register(0x00), Register(0xca)]
#       inline_div32_shiftright1_84_t887d <- inline_div32_shiftright1_84_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
1b ca 00 ca 

# inline_div32_shiftright1_84_a[0x02..0x03] <- inline_div32_shiftright1_84_t887d U8 Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# 01894 Copy8 [Register(0xca), Register(0xba)]
#       inline_div32_shiftright1_84_a[0x02..0x03] <- inline_div32_shiftright1_84_t887d U8 Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
0b ca ba 

# inline_div32_shiftright1_84_t577f <- inline_div32_shiftright1_84_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Index("a", Number(U8, 2))
# 01897 Copy8 [Register(0xba), Register(0xca)]
#       inline_div32_shiftright1_84_t577f <- inline_div32_shiftright1_84_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Index("a", Number(U8, 2))
0b ba ca 

# inline_div32_shiftright1_84_t5b7c <- inline_div32_shiftright1_84_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
# Index("a", Number(U8, 3))
# 0189a Copy8 [Register(0xbb), Register(0xc8)]
#       inline_div32_shiftright1_84_t5b7c <- inline_div32_shiftright1_84_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
#       Index("a", Number(U8, 3))
0b bb c8 

# inline_div32_shiftright1_84_tc29b <- inline_div32_shiftright1_84_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
# 0189d LoadImm8 [Register(0x00), Constant8(0x80=128)]
#       inline_div32_shiftright1_84_tc29b <- inline_div32_shiftright1_84_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
04 00 80 

# 018a0 And8 [Register(0xc8), Register(0x00), Register(0xd0)]
#       inline_div32_shiftright1_84_tc29b <- inline_div32_shiftright1_84_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
1b c8 00 d0 

# inline_div32_shiftright1_84_t1bbf <- inline_div32_shiftright1_84_t577f BitwiseOr Var(inline_div32_shiftright1_84_tc29b) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# 018a4 Or8 [Register(0xca), Register(0xd0), Register(0xca)]
#       inline_div32_shiftright1_84_t1bbf <- inline_div32_shiftright1_84_t577f BitwiseOr Var(inline_div32_shiftright1_84_tc29b) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
1c ca d0 ca 

# inline_div32_shiftright1_84_a[0x02..0x03] <- inline_div32_shiftright1_84_t1bbf U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# 018a8 Copy8 [Register(0xca), Register(0xba)]
#       inline_div32_shiftright1_84_a[0x02..0x03] <- inline_div32_shiftright1_84_t1bbf U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
0b ca ba 

# inline_div32_shiftright1_84_t5b7c <- inline_div32_shiftright1_84_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
# Index("a", Number(U8, 3))
# 018ab Copy8 [Register(0xbb), Register(0xc8)]
#       inline_div32_shiftright1_84_t5b7c <- inline_div32_shiftright1_84_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
#       Index("a", Number(U8, 3))
0b bb c8 

# inline_div32_shiftright1_84_tb911 <- inline_div32_shiftright1_84_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
# 018ae LoadImm8 [Register(0x00), Constant8(0x7f=127)]
#       inline_div32_shiftright1_84_tb911 <- inline_div32_shiftright1_84_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
04 00 7f 

# 018b1 And8 [Register(0xc8), Register(0x00), Register(0xca)]
#       inline_div32_shiftright1_84_tb911 <- inline_div32_shiftright1_84_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
1b c8 00 ca 

# inline_div32_shiftright1_84_a[0x03..0x04] <- inline_div32_shiftright1_84_tb911 U8 Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# 018b5 Copy8 [Register(0xca), Register(0xbb)]
#       inline_div32_shiftright1_84_a[0x03..0x04] <- inline_div32_shiftright1_84_tb911 U8 Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
0b ca bb 

# inline_div32_shiftright1_84_t8792 <- inline_div32_shiftright1_84_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_84_t8792 <- inline_div32_shiftright1_84_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# t3803 <- inline_div32_shiftright1_84_t8792 U32 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# optimized away noop copy Instruction { source: "t3803 <- inline_div32_shiftright1_84_t8792 U32 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# goto inline_div32_shiftright1_84_function_end_shiftright1 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_shiftright1_84_function_end_shiftright1 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: JmpImm, args: [Label24(inline_div32_shiftright1_84_function_end_shiftright1)], resolved: None }
# :inline_div32_shiftright1_84_function_end_shiftright1 None
# inline_div32_shiftright1_84_function_end_shiftright1
# mid <- t9599 Add Var(t3803) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# 018b8 ClearCarry []
#       mid <- t9599 Add Var(t3803) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
03 

# 018b9 AddCarry32_1 [Register(0xcc), Register(0xb8), Register(0xb8)]
#       mid <- t9599 Add Var(t3803) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
30 cc b8 b8 

# 018bd AddCarry32_2 []
#       mid <- t9599 Add Var(t3803) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
31 

# tfd7e <- mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nVoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }\nCall(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nVoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }\nCall(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# te825 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# AddressOf(Ident("x64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
# Ident("__frame_pointer")
# 018be Copy32 [Register(0x0c), Register(0xe0)]
#       te825 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
#       AddressOf(Ident("x64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
#       Ident("__frame_pointer")
21 0c e0 

# t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# AddressOf(Ident("x64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
# 018c1 Copy32 [Register(0xe0), Register(0xbc)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
#       AddressOf(Ident("x64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
21 e0 bc 

# 018c4 AddImm32IgnoreCarry [Register(0xbc), Constant32(0x00000000=0)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
#       AddressOf(Ident("x64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
32 bc 00 00 00 00 

# tb608 <- t4a94 U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# AddressOf(Ident("x64"))
# optimized away noop copy Instruction { source: "tb608 <- t4a94 U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nVoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }\nCall(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })\nAddressOf(Ident(\"x64\"))\n", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# None <= call mul32_64(tfd7e,tace9,tb608,) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# 018ca Copy32 [Register(0xb8), Register(0x00)]
#       Arg0[a]=tfd7e None <= call mul32_64(tfd7e,tace9,tb608,) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 b8 00 

# 018cd Copy32 [Register(0xb0), Register(0x04)]
#       Arg1[b]=tace9 None <= call mul32_64(tfd7e,tace9,tb608,) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 b0 04 

# 018d0 Copy32 [Register(0xbc), Register(0x08)]
#       Arg2[c]=tb608 None <= call mul32_64(tfd7e,tace9,tb608,) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 bc 08 

# Registers used by this function: {172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228}
# Registers used by callee tree: {108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175}
# Registers to save: [172, 173, 174, 175]
# 018d3 Push8 [Register(0xaf)]
#       Saving reg0xaf before None <= call mul32_64(tfd7e,tace9,tb608,) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
09 af 

# 018d5 Push8 [Register(0xae)]
#       Saving reg0xae before None <= call mul32_64(tfd7e,tace9,tb608,) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
09 ae 

# 018d7 Push8 [Register(0xad)]
#       Saving reg0xad before None <= call mul32_64(tfd7e,tace9,tb608,) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
09 ad 

# 018d9 Push8 [Register(0xac)]
#       Saving reg0xac before None <= call mul32_64(tfd7e,tace9,tb608,) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
09 ac 

# 018db AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:mul32_64))
32 0c fc ff ff ff 

# 018e1 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:mul32_64))
25 0c eb 18 00 00 

# 018e7 JmpImm [Label24(:mul32_64)]
#       PseudoCall(Label24(:mul32_64))
70 74 2b 00 

# 018eb AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:mul32_64))
32 0c 04 00 00 00 

# 018f1 Pop8 [Register(0xac)]
#       Restoring reg0xac after None <= call mul32_64(tfd7e,tace9,tb608,) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
0a ac 

# 018f3 Pop8 [Register(0xad)]
#       Restoring reg0xad after None <= call mul32_64(tfd7e,tace9,tb608,) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
0a ad 

# 018f5 Pop8 [Register(0xae)]
#       Restoring reg0xae after None <= call mul32_64(tfd7e,tace9,tb608,) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
0a ae 

# 018f7 Pop8 [Register(0xaf)]
#       Restoring reg0xaf after None <= call mul32_64(tfd7e,tace9,tb608,) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
0a af 

# te825 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
# LocalFieldDeref("x64", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
# Ident("__frame_pointer")
# 018f9 Copy32 [Register(0x0c), Register(0xe0)]
#       te825 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
#       Ident("__frame_pointer")
21 0c e0 

# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
# LocalFieldDeref("x64", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
# 018fc Copy32 [Register(0xe0), Register(0xbc)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
21 e0 bc 

# 018ff AddImm32IgnoreCarry [Register(0xbc), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
32 bc 04 00 00 00 

# tb973 <- mem[t3f2a] U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
# LocalFieldDeref("x64", "hi")
# 01905 Load32 [Register(0xbc), Register(0xc0)]
#       tb973 <- mem[t3f2a] U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
#       LocalFieldDeref("x64", "hi")
22 bc c0 

# t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
# Number(USIZE, 0)
# 01908 LoadImm32 [Register(0xbc), Constant32(0x00000000=0)]
#       t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 bc 00 00 00 00 

# if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
# 0190e Cmp8 [Register(0xc3), Register(0xbf)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
15 c3 bf 

# 01911 Cmp8IfZero [Register(0xc2), Register(0xbe)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
16 c2 be 

# 01914 Cmp8IfZero [Register(0xc1), Register(0xbd)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
16 c1 bd 

# 01917 Cmp8IfZero [Register(0xc0), Register(0xbc)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
16 c0 bc 

# 0191a JcImm [Label24(div32_if_else_0_11)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
71 2f 19 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_10)], resolved: None }
# :div32_if_true_0_10 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# div32_if_true_0_10
# tfd7e <- mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }\nArithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# 0191e Copy32 [Register(0xb8), Register(0xb4)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
21 b8 b4 

# 01921 AddImm32IgnoreCarry [Register(0xb4), Constant32(0xffffffff=4294967295)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
32 b4 ff ff ff ff 

# goto div32_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Continue
# 01927 JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Continue
70 4c 17 00 

# goto div32_if_end_9 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# 0192b JmpImm [Label24(div32_if_end_9)]
#       goto div32_if_end_9 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
70 2f 19 00 

# :div32_if_else_0_11 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_11
# :div32_if_end_9 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_9
# te546 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }
# LocalFieldDeref("x64", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 0192f Copy32 [Register(0x0c), Register(0xe0)]
#       te546 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }
#       LocalFieldDeref("x64", "lo")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c e0 

# x <- mem[te546] U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }
# LocalFieldDeref("x64", "lo")
# 01932 Load32 [Register(0xe0), Register(0xbc)]
#       x <- mem[te546] U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }
#       LocalFieldDeref("x64", "lo")
22 e0 bc 

# tad57 <- x U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# 01935 Cmp8 [Register(0xbf), Register(0xaf)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
15 bf af 

# 01938 Cmp8IfZero [Register(0xbe), Register(0xae)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 be ae 

# 0193b Cmp8IfZero [Register(0xbd), Register(0xad)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 bd ad 

# 0193e Cmp8IfZero [Register(0xbc), Register(0xac)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 bc ac 

# 01941 JcImm [Label24(div32_if_else_0_14)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
71 56 19 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_13)], resolved: None }
# :div32_if_true_0_13 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# div32_if_true_0_13
# tfd7e <- mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }\nArithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# 01945 Copy32 [Register(0xb8), Register(0xb4)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
21 b8 b4 

# 01948 AddImm32IgnoreCarry [Register(0xb4), Constant32(0xffffffff=4294967295)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
32 b4 ff ff ff ff 

# goto div32_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Continue
# 0194e JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Continue
70 4c 17 00 

# goto div32_if_end_12 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# 01952 JmpImm [Label24(div32_if_end_12)]
#       goto div32_if_end_12 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
70 56 19 00 

# :div32_if_else_0_14 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_14
# :div32_if_end_12 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_12
# tad57 <- x U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# 01956 Cmp8 [Register(0xbf), Register(0xaf)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
15 bf af 

# 01959 Cmp8IfZero [Register(0xbe), Register(0xae)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 be ae 

# 0195c Cmp8IfZero [Register(0xbd), Register(0xad)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 bd ad 

# 0195f Cmp8IfZero [Register(0xbc), Register(0xac)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 bc ac 

# 01962 JzImm [Label24(div32_if_true_0_16)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
72 6a 19 00 

# 01966 JmpImm [Label24(div32_if_else_0_17)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
70 7f 19 00 

# :div32_if_true_0_16 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# div32_if_true_0_16
# tfd7e <- mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nReturn { value: Some(Ident(\"mid\")) }\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 0196a AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
32 0c 08 00 00 00 

# return Some(tfd7e) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 01970 Copy32 [Register(0xb8), Register(0x00)]
#       return Some(tfd7e) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
21 b8 00 

# 01973 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 01979 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto div32_if_end_15 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# 0197b JmpImm [Label24(div32_if_end_15)]
#       goto div32_if_end_15 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
70 7f 19 00 

# :div32_if_else_0_17 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_17
# :div32_if_end_15 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_15
# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# tad57 <- x U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# r <- t8792 Subtract Var(tad57) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# 0197f Copy32 [Register(0xbc), Register(0x00)]
#       r <- t8792 Subtract Var(tad57) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
21 bc 00 

# 01982 Invert8 [Register(0x00)]
#       r <- t8792 Subtract Var(tad57) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 00 

# 01984 Invert8 [Register(0x01)]
#       r <- t8792 Subtract Var(tad57) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 01 

# 01986 Invert8 [Register(0x02)]
#       r <- t8792 Subtract Var(tad57) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 02 

# 01988 Invert8 [Register(0x03)]
#       r <- t8792 Subtract Var(tad57) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 03 

# 0198a AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       r <- t8792 Subtract Var(tad57) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
32 00 01 00 00 00 

# 01990 ClearCarry []
#       r <- t8792 Subtract Var(tad57) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
03 

# 01991 AddCarry32_1 [Register(0xac), Register(0x00), Register(0xbc)]
#       r <- t8792 Subtract Var(tad57) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
30 ac 00 bc 

# 01995 AddCarry32_2 []
#       r <- t8792 Subtract Var(tad57) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
31 

# taee0 <- r U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("r")
# optimized away noop copy Instruction { source: "taee0 <- r U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"r\")\n", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# 01996 Cmp8 [Register(0xb3), Register(0xbf)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
15 b3 bf 

# 01999 Cmp8IfZero [Register(0xb2), Register(0xbe)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 b2 be 

# 0199c Cmp8IfZero [Register(0xb1), Register(0xbd)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 b1 bd 

# 0199f Cmp8IfZero [Register(0xb0), Register(0xbc)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 b0 bc 

# 019a2 JcImm [Label24(div32_if_else_0_20)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
71 bb 19 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_19)], resolved: None }
# :div32_if_true_0_19 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# div32_if_true_0_19
# tfd7e <- mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nReturn { value: Some(Ident(\"mid\")) }\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 019a6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
32 0c 08 00 00 00 

# return Some(tfd7e) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 019ac Copy32 [Register(0xb8), Register(0x00)]
#       return Some(tfd7e) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
21 b8 00 

# 019af AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 019b5 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto div32_if_end_18 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# 019b7 JmpImm [Label24(div32_if_end_18)]
#       goto div32_if_end_18 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
70 bb 19 00 

# :div32_if_else_0_20 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_20
# :div32_if_end_18 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_18
# tfd7e <- mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Add, Ident("mid"), Number(U8, 1))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }\nArithmetic(Add, Ident(\"mid\"), Number(U8, 1))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Add, Ident("mid"), Number(U8, 1))
# 019bb Copy32 [Register(0xb8), Register(0xc4)]
#       lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("mid"), Number(U8, 1))
21 b8 c4 

# 019be AddImm32IgnoreCarry [Register(0xc4), Constant32(0x00000001=1)]
#       lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("mid"), Number(U8, 1))
32 c4 01 00 00 00 

# goto div32_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# 019c4 JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
70 4c 17 00 

# :div32_while_end_8 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# div32_while_end_8
# t1506 <- lo U32 Some('/home/john/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# Ident("lo")
# 019c8 Copy32 [Register(0xc4), Register(0xb8)]
#       t1506 <- lo U32 Some('/home/john/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
#       Ident("lo")
21 c4 b8 

# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/home/john/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# 019cb AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/home/john/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
32 0c 08 00 00 00 

# return Some(t1506) Some('/home/john/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# 019d1 Copy32 [Register(0xb8), Register(0x00)]
#       return Some(t1506) Some('/home/john/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
21 b8 00 

# 019d4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 019da JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_div32 None
# function_end_div32
# Unreachable None
# 019dc Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_draw_char
# Ret None
# Arg0=i
# Arg1=ch
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var ch (Arg1 ch Number(U8)) Reg(U8) Some([231])
# Var i (Arg0 i Number(U8)) Reg(U8) Some([232])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_col (Local col Number(U8) Reg(U8)) Reg(U8) Some([232])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_i (Arg0 i Number(U8)) Reg(U8) Some([232])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_row (Local row Number(U8) Reg(U8)) Reg(U8) Some([233])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd (t1acd Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) Reg(U8) Some([232])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 (t2f80 Index("lcd_row_start", Ident("row"))) Reg(U8) Some([233])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7 (t38c7 Arithmetic(Multiply, Ident("row"), Number(U8, 20))) Reg(U8) Some([232])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd (t50bd Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) Reg(U32) Some([236, 237, 238, 239])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf (t9eaf Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }) Reg(U32) Some([236, 237, 238, 239])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 (tb1b6 Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }) Reg(U32) Some([240, 241, 242, 243])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_td007 (td007 Ident("row")) Reg(U8) Some([233])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 (td0f3 Ident("i")) Reg(U8) Some([244])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 (tfee9 Ident("col")) Reg(U8) Some([232])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var pos (Local pos Number(U8) Reg(U8)) Reg(U8) Some([232])
# Var t1261 (t1261 Arithmetic(And, Ident("ch"), Number(U8, 15))) Reg(U8) Some([231])
# Var t136d (t136d Ident("pos")) Reg(U8) Some([232])
# Var t263d (t263d Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })) Reg(U8) Some([231])
# Var t38dc (t38dc Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })) Reg(U8) Some([231])
# Var t62fa (t62fa Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })) Reg(U8) Some([231])
# Var t6e3a (t6e3a Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))) Reg(U8) Some([233])
# Var t7d80 (t7d80 Arithmetic(And, Ident("pos"), Number(U8, 15))) Reg(U8) Some([232])
# Var t8d12 (t8d12 Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4))) Reg(U8) Some([233])
# Var t9498 (t9498 Number(USIZE, 2)) Reg(U32) Some([248, 249, 250, 251])
# Var tb875 (tb875 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))) Reg(U8) Some([231])
# Var tbd94 (tbd94 Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })) Reg(U8) Some([231])
# Var tcd38 (tcd38 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))) Reg(U8) Some([232])
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([232])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([231])
# Var tdf0 (tdf0 Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] })) Reg(U8) Some([231])
# Var tec9e (tec9e Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4))) Reg(U8) Some([232])
# 019e1 Copy8 [Register(0x00), Register(0xe8)]
#       Save function parameter 'i' registers [0] to locals [232].
0b 00 e8 

# 019e4 Copy8 [Register(0x04), Register(0xe7)]
#       Save function parameter 'ch' registers [4] to locals [231].
0b 04 e7 

# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(15,5))
# Assign { target: Ident("pos"), var_type: Some(Number(U8)), value: Call(Call { function: "lcd_logical_to_physical", parameters: [Ident("i")] }) }
# Call(Call { function: "lcd_logical_to_physical", parameters: [Ident("i")] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(15,5))\nAssign { target: Ident(\"pos\"), var_type: Some(Number(U8)), value: Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] }) }\nCall(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xe8), Register(0xe8)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_i <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(15,5))
# Assign { target: Ident("pos"), var_type: Some(Number(U8)), value: Call(Call { function: "lcd_logical_to_physical", parameters: [Ident("i")] }) }
# Call(Call { function: "lcd_logical_to_physical", parameters: [Ident("i")] })
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_i <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(15,5))\nAssign { target: Ident(\"pos\"), var_type: Some(Number(U8)), value: Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] }) }\nCall(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })\n", opcode: Copy8, args: [Register(0xe8), Register(0xe8)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- inline_lcd_draw_char_lcd_logical_to_physical_3_i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(9,5))
# Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(U8, 20)) }
# Arithmetic(Divide, Ident("i"), Number(U8, 20))
# Ident("i")
# 019e7 Copy8 [Register(0xe8), Register(0xf4)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- inline_lcd_draw_char_lcd_logical_to_physical_3_i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(9,5))
#       Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(U8, 20)) }
#       Arithmetic(Divide, Ident("i"), Number(U8, 20))
#       Ident("i")
0b e8 f4 

# inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(9,5))
# Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(U8, 20)) }
# Arithmetic(Divide, Ident("i"), Number(U8, 20))
# 019ea LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(9,5))
#       Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(U8, 20)) }
#       Arithmetic(Divide, Ident("i"), Number(U8, 20))
04 00 14 

# 019ed Divide8 [Register(0xf4), Register(0x00), Register(0xe9)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(9,5))
#       Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(U8, 20)) }
#       Arithmetic(Divide, Ident("i"), Number(U8, 20))
17 f4 00 e9 

# inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- inline_lcd_draw_char_lcd_logical_to_physical_3_i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
# Ident("i")
# 019f1 Copy8 [Register(0xe8), Register(0xf4)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- inline_lcd_draw_char_lcd_logical_to_physical_3_i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
#       Ident("i")
0b e8 f4 

# inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
# Arithmetic(Multiply, Ident("row"), Number(U8, 20))
# Ident("row")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(10,5))\nAssign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }\nArithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))\nArithmetic(Multiply, Ident(\"row\"), Number(U8, 20))\nIdent(\"row\")\n", opcode: Copy8, args: [Register(0xe9), Register(0xe9)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
# Arithmetic(Multiply, Ident("row"), Number(U8, 20))
# 019f4 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
#       Arithmetic(Multiply, Ident("row"), Number(U8, 20))
04 00 14 

# 019f7 Mul8_8 [Register(0xe9), Register(0x00), Register(0xe8)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
#       Arithmetic(Multiply, Ident("row"), Number(U8, 20))
10 e9 00 e8 

# inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7) Some('/home/john/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
# 019fb Copy8 [Register(0xe8), Register(0x00)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7) Some('/home/john/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
0b e8 00 

# 019fe Negate8 [Register(0x00)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7) Some('/home/john/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
02 00 

# 01a00 Add8NoCarryIn [Register(0xf4), Register(0x00), Register(0xe8)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7) Some('/home/john/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
14 f4 00 e8 

# inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 <- const &lcd_row_start Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }
# Ident("lcd_row_start")
# 01a04 LoadImm32 [Register(0xf0), Label32(:lcd_row_start)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 <- const &lcd_row_start Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }
#       Ident("lcd_row_start")
20 f0 23 04 00 00 

# inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }
# Ident("row")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\nArithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))\nIndex(\"lcd_row_start\", Ident(\"row\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }\nIdent(\"row\")\n", opcode: Copy8, args: [Register(0xe9), Register(0xe9)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }
# 01a0a LoadImm32 [Register(0xec), Constant32(0x00000000=0)]
#       Zero-pad for inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }
20 ec 00 00 00 00 

# 01a10 Copy8 [Register(0xe9), Register(0xec)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }
0b e9 ec 

# inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
# 01a13 ClearCarry []
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
03 

# 01a14 AddCarry32_1 [Register(0xf0), Register(0xec), Register(0xec)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
30 f0 ec ec 

# 01a18 AddCarry32_2 []
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
31 

# inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# 01a19 Load8 [Register(0xec), Register(0xe9)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
05 ec e9 

# inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_3_col U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Ident("col")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_3_col U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\nArithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))\nIdent(\"col\")\n", opcode: Copy8, args: [Register(0xe8), Register(0xe8)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9) Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# 01a1c Add8NoCarryIn [Register(0xe9), Register(0xe8), Register(0xe8)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9) Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
14 e9 e8 e8 

# pos <- inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# optimized away noop copy Instruction { source: "pos <- inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\n", opcode: Copy8, args: [Register(0xe8), Register(0xe8)], resolved: None }
# goto inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\n", opcode: JmpImm, args: [Label24(inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical)], resolved: None }
# :inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical None
# inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical
# t136d <- pos U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
# Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))
# Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4))
# Ident("pos")
# optimized away noop copy Instruction { source: "t136d <- pos U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(17,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })\nArithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))\nArithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4))\nIdent(\"pos\")\n", opcode: Copy8, args: [Register(0xe8), Register(0xe8)], resolved: None }
# t8d12 <- t136d ShiftRight Number(0n4/0x04u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
# Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))
# Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4))
# 01a20 LoadImm8 [Register(0x00), Constant8(0x04=4)]
#       t8d12 <- t136d ShiftRight Number(0n4/0x04u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))
#       Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4))
04 00 04 

# 01a23 Shift8 [Constant8(0x05=5), Register(0x00), Register(0xe8), Register(0xe9)]
#       t8d12 <- t136d ShiftRight Number(0n4/0x04u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))
#       Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4))
1e 05 00 e8 e9 

# t6e3a <- t8d12 BitwiseOr Number(0n8/0x08u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
# Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))
# 01a28 LoadImm8 [Register(0x00), Constant8(0x08=8)]
#       t6e3a <- t8d12 BitwiseOr Number(0n8/0x08u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))
04 00 08 

# 01a2b Or8 [Register(0xe9), Register(0x00), Register(0xe9)]
#       t6e3a <- t8d12 BitwiseOr Number(0n8/0x08u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))
1c e9 00 e9 

# None <= call io_write1(t6e3a,) Some('/home/john/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
# 01a2f Out1 [Register(0xe9)]
#       IoWrite1
69 e9 

# t136d <- pos U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] })
# Arithmetic(And, Ident("pos"), Number(U8, 15))
# Ident("pos")
# optimized away noop copy Instruction { source: "t136d <- pos U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(18,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] })\nArithmetic(And, Ident(\"pos\"), Number(U8, 15))\nIdent(\"pos\")\n", opcode: Copy8, args: [Register(0xe8), Register(0xe8)], resolved: None }
# t7d80 <- t136d BitwiseAnd Number(0n15/0x0fu8) Some('/home/john/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] })
# Arithmetic(And, Ident("pos"), Number(U8, 15))
# 01a31 LoadImm8 [Register(0x00), Constant8(0x0f=15)]
#       t7d80 <- t136d BitwiseAnd Number(0n15/0x0fu8) Some('/home/john/lutcomp/programs/lib/lcd.j':(18,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] })
#       Arithmetic(And, Ident("pos"), Number(U8, 15))
04 00 0f 

# 01a34 And8 [Register(0xe8), Register(0x00), Register(0xe8)]
#       t7d80 <- t136d BitwiseAnd Number(0n15/0x0fu8) Some('/home/john/lutcomp/programs/lib/lcd.j':(18,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] })
#       Arithmetic(And, Ident("pos"), Number(U8, 15))
1b e8 00 e8 

# None <= call io_write1(t7d80,) Some('/home/john/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] })
# 01a38 Out1 [Register(0xe8)]
#       IoWrite1
69 e8 

# t9498 <- 0n2/0x00000002u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(19,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# Number(USIZE, 2)
# 01a3a LoadImm32 [Register(0xf8), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(19,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
#       Number(USIZE, 2)
20 f8 02 00 00 00 

# None <= call delay(t9498,) Some('/home/john/lutcomp/programs/lib/lcd.j':(19,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# 01a40 Copy32 [Register(0xf8), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/home/john/lutcomp/programs/lib/lcd.j':(19,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
21 f8 00 

# Registers used by this function: {231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 01a43 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01a49 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 53 1a 00 00 

# 01a4f JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 0f 14 00 

# 01a53 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
# Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))
# Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(21,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })\nArithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))\nArithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xe7), Register(0xe7)], resolved: None }
# tec9e <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
# Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))
# Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4))
# 01a59 LoadImm8 [Register(0x00), Constant8(0x04=4)]
#       tec9e <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))
#       Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4))
04 00 04 

# 01a5c Shift8 [Constant8(0x05=5), Register(0x00), Register(0xe7), Register(0xe8)]
#       tec9e <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))
#       Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4))
1e 05 00 e7 e8 

# tcd38 <- tec9e BitwiseOr Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
# Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))
# 01a61 LoadImm8 [Register(0x00), Constant8(0x80=128)]
#       tcd38 <- tec9e BitwiseOr Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))
04 00 80 

# 01a64 Or8 [Register(0xe8), Register(0x00), Register(0xe8)]
#       tcd38 <- tec9e BitwiseOr Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))
1c e8 00 e8 

# None <= call io_write1(tcd38,) Some('/home/john/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
# 01a68 Out1 [Register(0xe8)]
#       IoWrite1
69 e8 

# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
# Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))
# Arithmetic(And, Ident("ch"), Number(U8, 15))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })\nArithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))\nArithmetic(And, Ident(\"ch\"), Number(U8, 15))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xe7), Register(0xe7)], resolved: None }
# t1261 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) Some('/home/john/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
# Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))
# Arithmetic(And, Ident("ch"), Number(U8, 15))
# 01a6a LoadImm8 [Register(0x00), Constant8(0x0f=15)]
#       t1261 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) Some('/home/john/lutcomp/programs/lib/lcd.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
#       Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))
#       Arithmetic(And, Ident("ch"), Number(U8, 15))
04 00 0f 

# 01a6d And8 [Register(0xe7), Register(0x00), Register(0xe7)]
#       t1261 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) Some('/home/john/lutcomp/programs/lib/lcd.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
#       Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))
#       Arithmetic(And, Ident("ch"), Number(U8, 15))
1b e7 00 e7 

# tb875 <- t1261 BitwiseOr Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
# Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))
# 01a71 LoadImm8 [Register(0x00), Constant8(0x80=128)]
#       tb875 <- t1261 BitwiseOr Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
#       Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))
04 00 80 

# 01a74 Or8 [Register(0xe7), Register(0x00), Register(0xe7)]
#       tb875 <- t1261 BitwiseOr Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
#       Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))
1c e7 00 e7 

# None <= call io_write1(tb875,) Some('/home/john/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
# 01a78 Out1 [Register(0xe7)]
#       IoWrite1
69 e7 

# t9498 <- 0n2/0x00000002u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(23,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# Number(USIZE, 2)
# 01a7a LoadImm32 [Register(0xf8), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(23,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
#       Number(USIZE, 2)
20 f8 02 00 00 00 

# None <= call delay(t9498,) Some('/home/john/lutcomp/programs/lib/lcd.j':(23,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# 01a80 Copy32 [Register(0xf8), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/home/john/lutcomp/programs/lib/lcd.j':(23,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
21 f8 00 

# Registers used by this function: {231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 01a83 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01a89 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 93 1a 00 00 

# 01a8f JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 0f 14 00 

# 01a93 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 01a99 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_draw_char None
# function_end_lcd_draw_char
# Unreachable None
# 01a9b Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_init
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([252])
# Var lcd_current (Local lcd_current Number(U8) Reg(U8)) Reg(U8) Some([252])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t1f11 (t1f11 Call(Call { function: "io_write1", parameters: [Number(U8, 1)] })) Reg(U8) Some([252])
# Var t2bc4 (t2bc4 Call(Call { function: "io_write1", parameters: [Number(U8, 8)] })) Reg(U8) Some([252])
# Var t385d (t385d Number(USIZE, 1)) Reg(U32) Some([16, 17, 18, 19])
# Var t40c1 (t40c1 Number(U8, 2)) Reg(U8) Some([252])
# Var t7bb3 (t7bb3 Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })) Reg(U8) Some([252])
# Var t80a1 (t80a1 Number(U8, 12)) Reg(U8) Some([252])
# Var t8820 (t8820 Number(U8, 3)) Reg(U8) Some([252])
# Var t8fe0 (t8fe0 Number(U8, 80)) Reg(U8) Some([20])
# Var t9498 (t9498 Number(USIZE, 2)) Reg(U32) Some([16, 17, 18, 19])
# Var t9725 (t9725 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) Reg(U32) Some([24, 25, 26, 27])
# Var t9bbb (t9bbb Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })) Reg(U8) Some([252])
# Var t9e70 (t9e70 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }) Reg(U32) Some([24, 25, 26, 27])
# Var t9f32 (t9f32 Number(U8, 8)) Reg(U8) Some([252])
# Var tac5f (tac5f Number(U8, 32)) Reg(U8) Some([28])
# Var tb018 (tb018 Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })) Reg(U8) Some([252])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([252])
# Var tb9f6 (tb9f6 Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })) Reg(U8) Some([252])
# Var tbd94 (tbd94 Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })) Reg(U8) Some([252])
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([252])
# Var td623 (td623 Call(Call { function: "io_write1", parameters: [Number(U8, 12)] })) Reg(U8) Some([252])
# Var tfcd (tfcd Number(U8, 1)) Reg(U8) Some([252])
# lcd_current <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(65,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 01aa0 LoadImm8 [Register(0xfc), Constant8(0x00=0)]
#       lcd_current <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(65,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 fc 00 

# i <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(68,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }
# Number(U8, 0)
# 01aa3 LoadImm8 [Register(0xfc), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(68,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }
#       Number(U8, 0)
04 fc 00 

# :lcd_init_while_predicate_0 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# lcd_init_while_predicate_0
# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xfc), Register(0xfc)], resolved: None }
# t8fe0 <- 0n80/0x50u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
# Number(U8, 80)
# 01aa6 LoadImm8 [Register(0x14), Constant8(0x50=80)]
#       t8fe0 <- 0n80/0x50u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
#       Number(U8, 80)
04 14 50 

# if td0f3 < t8fe0 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
# 01aa9 Cmp8 [Register(0x14), Register(0xfc)]
#       if td0f3 < t8fe0 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
15 14 fc 

# 01aac JcImm [Label24(lcd_init_while_end_2)]
#       if td0f3 < t8fe0 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
71 d0 1a 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t8fe0 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }\n", opcode: JmpImm, args: [Label24(lcd_init_while_body_1)], resolved: None }
# :lcd_init_while_body_1 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# lcd_init_while_body_1
# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }\nArithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xfc), Register(0xfc)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# 01ab0 LoadImm32 [Register(0x18), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
20 18 00 00 00 00 

# 01ab6 Copy8 [Register(0xfc), Register(0x18)]
#       t9725 U32 <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
0b fc 18 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# 01ab9 AddImm32IgnoreCarry [Register(0x18), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
32 18 0c 10 0f 00 

# tac5f <- 0n32/0x20u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Number(U8, 32)
# 01abf LoadImm8 [Register(0x1c), Constant8(0x20=32)]
#       tac5f <- 0n32/0x20u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Number(U8, 32)
04 1c 20 

# mem[t9e70] <- tac5f U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# 01ac2 Store8 [Register(0x1c), Register(0x18)]
#       mem[t9e70] <- tac5f U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
06 1c 18 

# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }\nArithmetic(Add, Ident(\"i\"), Number(U8, 1))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xfc), Register(0xfc)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# 01ac5 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
04 00 01 

# 01ac8 Add8NoCarryIn [Register(0xfc), Register(0x00), Register(0xfc)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
14 fc 00 fc 

# goto lcd_init_while_predicate_0 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# 01acc JmpImm [Label24(lcd_init_while_predicate_0)]
#       goto lcd_init_while_predicate_0 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
70 a6 1a 00 

# :lcd_init_while_end_2 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# lcd_init_while_end_2
# t8820 <- 0n3/0x03u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(74,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
# Number(U8, 3)
# 01ad0 LoadImm8 [Register(0xfc), Constant8(0x03=3)]
#       t8820 <- 0n3/0x03u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(74,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
#       Number(U8, 3)
04 fc 03 

# None <= call io_write1(t8820,) Some('/home/john/lutcomp/programs/lib/lcd.j':(74,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
# 01ad3 Out1 [Register(0xfc)]
#       IoWrite1
69 fc 

# t385d <- 0n1/0x00000001u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(75,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
# Number(USIZE, 1)
# 01ad5 LoadImm32 [Register(0x10), Constant32(0x00000001=1)]
#       t385d <- 0n1/0x00000001u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(75,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
#       Number(USIZE, 1)
20 10 01 00 00 00 

# None <= call delay(t385d,) Some('/home/john/lutcomp/programs/lib/lcd.j':(75,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
# 01adb Copy32 [Register(0x10), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/home/john/lutcomp/programs/lib/lcd.j':(75,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
21 10 00 

# Registers used by this function: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 252}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 01ade AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01ae4 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c ee 1a 00 00 

# 01aea JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 0f 14 00 

# 01aee AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t8820 <- 0n3/0x03u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(76,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
# Number(U8, 3)
# 01af4 LoadImm8 [Register(0xfc), Constant8(0x03=3)]
#       t8820 <- 0n3/0x03u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(76,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
#       Number(U8, 3)
04 fc 03 

# None <= call io_write1(t8820,) Some('/home/john/lutcomp/programs/lib/lcd.j':(76,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
# 01af7 Out1 [Register(0xfc)]
#       IoWrite1
69 fc 

# t385d <- 0n1/0x00000001u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(77,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
# Number(USIZE, 1)
# 01af9 LoadImm32 [Register(0x10), Constant32(0x00000001=1)]
#       t385d <- 0n1/0x00000001u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(77,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
#       Number(USIZE, 1)
20 10 01 00 00 00 

# None <= call delay(t385d,) Some('/home/john/lutcomp/programs/lib/lcd.j':(77,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
# 01aff Copy32 [Register(0x10), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/home/john/lutcomp/programs/lib/lcd.j':(77,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
21 10 00 

# Registers used by this function: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 252}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 01b02 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01b08 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 12 1b 00 00 

# 01b0e JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 0f 14 00 

# 01b12 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t8820 <- 0n3/0x03u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(78,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
# Number(U8, 3)
# 01b18 LoadImm8 [Register(0xfc), Constant8(0x03=3)]
#       t8820 <- 0n3/0x03u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
#       Number(U8, 3)
04 fc 03 

# None <= call io_write1(t8820,) Some('/home/john/lutcomp/programs/lib/lcd.j':(78,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
# 01b1b Out1 [Register(0xfc)]
#       IoWrite1
69 fc 

# t385d <- 0n1/0x00000001u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(79,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
# Number(USIZE, 1)
# 01b1d LoadImm32 [Register(0x10), Constant32(0x00000001=1)]
#       t385d <- 0n1/0x00000001u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(79,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
#       Number(USIZE, 1)
20 10 01 00 00 00 

# None <= call delay(t385d,) Some('/home/john/lutcomp/programs/lib/lcd.j':(79,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
# 01b23 Copy32 [Register(0x10), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/home/john/lutcomp/programs/lib/lcd.j':(79,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
21 10 00 

# Registers used by this function: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 252}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 01b26 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01b2c StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 36 1b 00 00 

# 01b32 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 0f 14 00 

# 01b36 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t40c1 <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(81,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 2)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })
# Number(U8, 2)
# 01b3c LoadImm8 [Register(0xfc), Constant8(0x02=2)]
#       t40c1 <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(81,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 2)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })
#       Number(U8, 2)
04 fc 02 

# None <= call io_write1(t40c1,) Some('/home/john/lutcomp/programs/lib/lcd.j':(81,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 2)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })
# 01b3f Out1 [Register(0xfc)]
#       IoWrite1
69 fc 

# t9498 <- 0n2/0x00000002u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(82,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# Number(USIZE, 2)
# 01b41 LoadImm32 [Register(0x10), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
#       Number(USIZE, 2)
20 10 02 00 00 00 

# None <= call delay(t9498,) Some('/home/john/lutcomp/programs/lib/lcd.j':(82,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# 01b47 Copy32 [Register(0x10), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/home/john/lutcomp/programs/lib/lcd.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
21 10 00 

# Registers used by this function: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 252}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 01b4a AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01b50 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 5a 1b 00 00 

# 01b56 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 0f 14 00 

# 01b5a AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t40c1 <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(84,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 2)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })
# Number(U8, 2)
# 01b60 LoadImm8 [Register(0xfc), Constant8(0x02=2)]
#       t40c1 <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(84,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 2)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })
#       Number(U8, 2)
04 fc 02 

# None <= call io_write1(t40c1,) Some('/home/john/lutcomp/programs/lib/lcd.j':(84,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 2)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })
# 01b63 Out1 [Register(0xfc)]
#       IoWrite1
69 fc 

# t9f32 <- 0n8/0x08u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(85,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 8)] })
# Number(U8, 8)
# 01b65 LoadImm8 [Register(0xfc), Constant8(0x08=8)]
#       t9f32 <- 0n8/0x08u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(85,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 8)] })
#       Number(U8, 8)
04 fc 08 

# None <= call io_write1(t9f32,) Some('/home/john/lutcomp/programs/lib/lcd.j':(85,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 8)] })
# 01b68 Out1 [Register(0xfc)]
#       IoWrite1
69 fc 

# t9498 <- 0n2/0x00000002u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(86,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# Number(USIZE, 2)
# 01b6a LoadImm32 [Register(0x10), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(86,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
#       Number(USIZE, 2)
20 10 02 00 00 00 

# None <= call delay(t9498,) Some('/home/john/lutcomp/programs/lib/lcd.j':(86,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# 01b70 Copy32 [Register(0x10), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/home/john/lutcomp/programs/lib/lcd.j':(86,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
21 10 00 

# Registers used by this function: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 252}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 01b73 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01b79 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 83 1b 00 00 

# 01b7f JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 0f 14 00 

# 01b83 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(88,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 0)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })
# Number(U8, 0)
# 01b89 LoadImm8 [Register(0xfc), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(88,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 0)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })
#       Number(U8, 0)
04 fc 00 

# None <= call io_write1(tb36e,) Some('/home/john/lutcomp/programs/lib/lcd.j':(88,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 0)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })
# 01b8c Out1 [Register(0xfc)]
#       IoWrite1
69 fc 

# t80a1 <- 0n12/0x0cu8  Some('/home/john/lutcomp/programs/lib/lcd.j':(89,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 12)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 12)] })
# Number(U8, 12)
# 01b8e LoadImm8 [Register(0xfc), Constant8(0x0c=12)]
#       t80a1 <- 0n12/0x0cu8  Some('/home/john/lutcomp/programs/lib/lcd.j':(89,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 12)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 12)] })
#       Number(U8, 12)
04 fc 0c 

# None <= call io_write1(t80a1,) Some('/home/john/lutcomp/programs/lib/lcd.j':(89,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 12)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 12)] })
# 01b91 Out1 [Register(0xfc)]
#       IoWrite1
69 fc 

# t9498 <- 0n2/0x00000002u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(90,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# Number(USIZE, 2)
# 01b93 LoadImm32 [Register(0x10), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(90,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
#       Number(USIZE, 2)
20 10 02 00 00 00 

# None <= call delay(t9498,) Some('/home/john/lutcomp/programs/lib/lcd.j':(90,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# 01b99 Copy32 [Register(0x10), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/home/john/lutcomp/programs/lib/lcd.j':(90,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
21 10 00 

# Registers used by this function: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 252}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 01b9c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01ba2 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c ac 1b 00 00 

# 01ba8 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 0f 14 00 

# 01bac AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(92,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 0)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })
# Number(U8, 0)
# 01bb2 LoadImm8 [Register(0xfc), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 0)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })
#       Number(U8, 0)
04 fc 00 

# None <= call io_write1(tb36e,) Some('/home/john/lutcomp/programs/lib/lcd.j':(92,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 0)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })
# 01bb5 Out1 [Register(0xfc)]
#       IoWrite1
69 fc 

# tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(93,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 1)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 1)] })
# Number(U8, 1)
# 01bb7 LoadImm8 [Register(0xfc), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(93,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 1)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 1)] })
#       Number(U8, 1)
04 fc 01 

# None <= call io_write1(tfcd,) Some('/home/john/lutcomp/programs/lib/lcd.j':(93,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 1)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 1)] })
# 01bba Out1 [Register(0xfc)]
#       IoWrite1
69 fc 

# t9498 <- 0n2/0x00000002u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(94,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# Number(USIZE, 2)
# 01bbc LoadImm32 [Register(0x10), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(94,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
#       Number(USIZE, 2)
20 10 02 00 00 00 

# None <= call delay(t9498,) Some('/home/john/lutcomp/programs/lib/lcd.j':(94,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# 01bc2 Copy32 [Register(0x10), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/home/john/lutcomp/programs/lib/lcd.j':(94,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
21 10 00 

# Registers used by this function: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 252}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 01bc5 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01bcb StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c d5 1b 00 00 

# 01bd1 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 0f 14 00 

# 01bd5 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 01bdb JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_init None
# function_end_lcd_init
# Unreachable None
# 01bdd Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_putc
# Ret None
# Arg0=ch
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var ch (Arg0 ch Number(U8)) Reg(U8) Some([29])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var next (Local next Number(U8) Reg(U8)) Reg(U8) Some([29])
# Var t0 (static "lcd_current") Reg(U32) Some([32, 33, 34, 35])
# Var t1 (static "lcd_current") Reg(U32) Some([36, 37, 38, 39])
# Var t164d (t164d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }) Reg(U32) Some([36, 37, 38, 39])
# Var t2 (static "lcd_current") Reg(U32) Some([36, 37, 38, 39])
# Var t3 (static "lcd_current") Reg(U32) Some([36, 37, 38, 39])
# Var t31c0 (t31c0 Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })) Reg(U8) Some([29])
# Var t4 (static "lcd_current") Reg(U32) Some([40, 41, 42, 43])
# Var t4584 (t4584 Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))) Reg(U8) Some([44])
# Var t5 (static "lcd_current") Reg(U32) Some([36, 37, 38, 39])
# Var t5880 (t5880 Call(Call { function: "lcd_scroll_up", parameters: [] })) Reg(U8) Some([29])
# Var t5dda (t5dda Ident("lcd_current")) Reg(U8) Some([44])
# Var t6 (static "lcd_current") Reg(U32) Some([36, 37, 38, 39])
# Var t7 (static "lcd_current") Reg(U32) Some([32, 33, 34, 35])
# Var t8 (static "lcd_current") Reg(U32) Some([36, 37, 38, 39])
# Var t8658 (t8658 Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))) Reg(U8) Some([29])
# Var t8fe0 (t8fe0 Number(U8, 80)) Reg(U8) Some([29])
# Var t9 (static "lcd_current") Reg(U32) Some([32, 33, 34, 35])
# Var ta5ff (ta5ff Ident("next")) Reg(U8) Some([29])
# Var tab78 (tab78 Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))) Reg(U8) Some([29])
# Var tac5f (tac5f Number(U8, 32)) Reg(U8) Some([44])
# Var tad4e (tad4e Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) Reg(U32) Some([36, 37, 38, 39])
# Var td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([45])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([29])
# 01be2 Copy8 [Register(0x00), Register(0x1d)]
#       Save function parameter 'ch' registers [0] to locals [29].
0b 00 1d 

# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# Number(U8, 10)
# 01be5 LoadImm8 [Register(0x2d), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
#       Number(U8, 10)
04 2d 0a 

# if tdcd9 == td7b5 then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# 01be8 Cmp8 [Register(0x1d), Register(0x2d)]
#       if tdcd9 == td7b5 then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
15 1d 2d 

# 01beb JzImm [Label24(lcd_putc_if_true_0_1)]
#       if tdcd9 == td7b5 then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
72 f3 1b 00 

# 01bef JmpImm [Label24(lcd_putc_if_else_0_2)]
#       if tdcd9 == td7b5 then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
70 60 1c 00 

# :lcd_putc_if_true_0_1 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# lcd_putc_if_true_0_1
# t0 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
# Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
# Ident("lcd_current")
# 01bf3 LoadImm32 [Register(0x20), Constant32(0x000f1008=987144)]
#       t0 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
#       Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
#       Ident("lcd_current")
20 20 08 10 0f 00 

# t5dda <- mem[t0] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
# Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
# Ident("lcd_current")
# 01bf9 Load8 [Register(0x20), Register(0x2c)]
#       t5dda <- mem[t0] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
#       Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
#       Ident("lcd_current")
05 20 2c 

# tab78 <- t5dda Divide Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
# Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
# 01bfc LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       tab78 <- t5dda Divide Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
#       Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
04 00 14 

# 01bff Divide8 [Register(0x2c), Register(0x00), Register(0x1d)]
#       tab78 <- t5dda Divide Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
#       Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
17 2c 00 1d 

# t8658 <- tab78 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
# 01c03 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       t8658 <- tab78 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
04 00 01 

# 01c06 Add8NoCarryIn [Register(0x1d), Register(0x00), Register(0x1d)]
#       t8658 <- tab78 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
14 1d 00 1d 

# next <- t8658 Multiply Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
# 01c0a LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       next <- t8658 Multiply Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
04 00 14 

# 01c0d Mul8_8 [Register(0x1d), Register(0x00), Register(0x1d)]
#       next <- t8658 Multiply Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
10 1d 00 1d 

# :lcd_putc_while_predicate_3 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# lcd_putc_while_predicate_3
# t1 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("lcd_current")
# 01c11 LoadImm32 [Register(0x24), Constant32(0x000f1008=987144)]
#       t1 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
#       Ident("lcd_current")
20 24 08 10 0f 00 

# t5dda <- mem[t1] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("lcd_current")
# 01c17 Load8 [Register(0x24), Register(0x2c)]
#       t5dda <- mem[t1] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
#       Ident("lcd_current")
05 24 2c 

# ta5ff <- next U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("next")
# optimized away noop copy Instruction { source: "ta5ff <- next U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }\nIdent(\"next\")\n", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# 01c1a Cmp8 [Register(0x1d), Register(0x2c)]
#       if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
15 1d 2c 

# 01c1d JcImm [Label24(lcd_putc_while_end_5)]
#       if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
71 5c 1c 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }\n", opcode: JmpImm, args: [Label24(lcd_putc_while_body_4)], resolved: None }
# :lcd_putc_while_body_4 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# lcd_putc_while_body_4
# t2 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
# Ident("lcd_current")
# 01c21 LoadImm32 [Register(0x24), Constant32(0x000f1008=987144)]
#       t2 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
#       Ident("lcd_current")
20 24 08 10 0f 00 

# t5dda <- mem[t2] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
# Ident("lcd_current")
# 01c27 Load8 [Register(0x24), Register(0x2c)]
#       t5dda <- mem[t2] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
#       Ident("lcd_current")
05 24 2c 

# tad4e U32 <- t5dda U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
# 01c2a LoadImm32 [Register(0x24), Constant32(0x00000000=0)]
#       Zero-pad for tad4e U32 <- t5dda U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
20 24 00 00 00 00 

# 01c30 Copy8 [Register(0x2c), Register(0x24)]
#       tad4e U32 <- t5dda U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
0b 2c 24 

# t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# 01c33 AddImm32IgnoreCarry [Register(0x24), Constant32(0x000f100c=987148)]
#       t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
32 24 0c 10 0f 00 

# tac5f <- 0n32/0x20u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
# Number(U8, 32)
# 01c39 LoadImm8 [Register(0x2c), Constant8(0x20=32)]
#       tac5f <- 0n32/0x20u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
#       Number(U8, 32)
04 2c 20 

# mem[t164d] <- tac5f U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
# 01c3c Store8 [Register(0x2c), Register(0x24)]
#       mem[t164d] <- tac5f U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
06 2c 24 

# t3 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# 01c3f LoadImm32 [Register(0x24), Constant32(0x000f1008=987144)]
#       t3 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
20 24 08 10 0f 00 

# t4 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
# Ident("lcd_current")
# 01c45 LoadImm32 [Register(0x28), Constant32(0x000f1008=987144)]
#       t4 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
#       Ident("lcd_current")
20 28 08 10 0f 00 

# t5dda <- mem[t4] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
# Ident("lcd_current")
# 01c4b Load8 [Register(0x28), Register(0x2c)]
#       t5dda <- mem[t4] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
#       Ident("lcd_current")
05 28 2c 

# t4584 <- t5dda Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
# 01c4e LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       t4584 <- t5dda Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
04 00 01 

# 01c51 Add8NoCarryIn [Register(0x2c), Register(0x00), Register(0x2c)]
#       t4584 <- t5dda Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
14 2c 00 2c 

# mem[t3] <- t4584 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# 01c55 Store8 [Register(0x2c), Register(0x24)]
#       mem[t3] <- t4584 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
06 2c 24 

# goto lcd_putc_while_predicate_3 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# 01c58 JmpImm [Label24(lcd_putc_while_predicate_3)]
#       goto lcd_putc_while_predicate_3 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
70 11 1c 00 

# :lcd_putc_while_end_5 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# lcd_putc_while_end_5
# goto lcd_putc_if_end_0 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# 01c5c JmpImm [Label24(lcd_putc_if_end_0)]
#       goto lcd_putc_if_end_0 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
70 b9 1c 00 

# :lcd_putc_if_else_0_2 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# lcd_putc_if_else_0_2
# t5 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
# Ident("lcd_current")
# 01c60 LoadImm32 [Register(0x24), Constant32(0x000f1008=987144)]
#       t5 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
#       Ident("lcd_current")
20 24 08 10 0f 00 

# t5dda <- mem[t5] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
# Ident("lcd_current")
# 01c66 Load8 [Register(0x24), Register(0x2c)]
#       t5dda <- mem[t5] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
#       Ident("lcd_current")
05 24 2c 

# tad4e U32 <- t5dda U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
# 01c69 LoadImm32 [Register(0x24), Constant32(0x00000000=0)]
#       Zero-pad for tad4e U32 <- t5dda U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
20 24 00 00 00 00 

# 01c6f Copy8 [Register(0x2c), Register(0x24)]
#       tad4e U32 <- t5dda U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
0b 2c 24 

# t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# 01c72 AddImm32IgnoreCarry [Register(0x24), Constant32(0x000f100c=987148)]
#       t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
32 24 0c 10 0f 00 

# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))\nAssign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# mem[t164d] <- tdcd9 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# 01c78 Store8 [Register(0x1d), Register(0x24)]
#       mem[t164d] <- tdcd9 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
06 1d 24 

# t6 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("lcd_current")
# 01c7b LoadImm32 [Register(0x24), Constant32(0x000f1008=987144)]
#       t6 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
#       Ident("lcd_current")
20 24 08 10 0f 00 

# t5dda <- mem[t6] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("lcd_current")
# 01c81 Load8 [Register(0x24), Register(0x2c)]
#       t5dda <- mem[t6] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
#       Ident("lcd_current")
05 24 2c 

# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# None <= call lcd_draw_char(t5dda,tdcd9,) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# 01c84 Copy8 [Register(0x2c), Register(0x00)]
#       Arg0[i]=t5dda None <= call lcd_draw_char(t5dda,tdcd9,) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
0b 2c 00 

# 01c87 Copy8 [Register(0x1d), Register(0x04)]
#       Arg1[ch]=tdcd9 None <= call lcd_draw_char(t5dda,tdcd9,) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
0b 1d 04 

# Registers used by this function: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 01c8a AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 01c90 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c 9a 1c 00 00 

# 01c96 JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 e1 19 00 

# 01c9a AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# t7 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# 01ca0 LoadImm32 [Register(0x20), Constant32(0x000f1008=987144)]
#       t7 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
20 20 08 10 0f 00 

# t8 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
# Ident("lcd_current")
# 01ca6 LoadImm32 [Register(0x24), Constant32(0x000f1008=987144)]
#       t8 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
#       Ident("lcd_current")
20 24 08 10 0f 00 

# t5dda <- mem[t8] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
# Ident("lcd_current")
# 01cac Load8 [Register(0x24), Register(0x2c)]
#       t5dda <- mem[t8] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
#       Ident("lcd_current")
05 24 2c 

# t4584 <- t5dda Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
# 01caf LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       t4584 <- t5dda Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
04 00 01 

# 01cb2 Add8NoCarryIn [Register(0x2c), Register(0x00), Register(0x2c)]
#       t4584 <- t5dda Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
14 2c 00 2c 

# mem[t7] <- t4584 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# 01cb6 Store8 [Register(0x2c), Register(0x20)]
#       mem[t7] <- t4584 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
06 2c 20 

# :lcd_putc_if_end_0 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# lcd_putc_if_end_0
# t9 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
# Ident("lcd_current")
# 01cb9 LoadImm32 [Register(0x20), Constant32(0x000f1008=987144)]
#       t9 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
#       Ident("lcd_current")
20 20 08 10 0f 00 

# t5dda <- mem[t9] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
# Ident("lcd_current")
# 01cbf Load8 [Register(0x20), Register(0x2c)]
#       t5dda <- mem[t9] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
#       Ident("lcd_current")
05 20 2c 

# t8fe0 <- 0n80/0x50u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
# Number(U8, 80)
# 01cc2 LoadImm8 [Register(0x1d), Constant8(0x50=80)]
#       t8fe0 <- 0n80/0x50u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
#       Number(U8, 80)
04 1d 50 

# if t5dda >= t8fe0 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
# 01cc5 Cmp8 [Register(0x1d), Register(0x2c)]
#       if t5dda >= t8fe0 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
15 1d 2c 

# 01cc8 JcImm [Label24(lcd_putc_if_true_0_7)]
#       if t5dda >= t8fe0 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
71 d0 1c 00 

# 01ccc JmpImm [Label24(lcd_putc_if_else_0_8)]
#       if t5dda >= t8fe0 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
70 ea 1c 00 

# :lcd_putc_if_true_0_7 Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# lcd_putc_if_true_0_7
# None <= call lcd_scroll_up() Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
# VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }
# Call(Call { function: "lcd_scroll_up", parameters: [] })
# Registers used by this function: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45}
# Registers used by callee tree: {46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 01cd0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_scroll_up))
32 0c fc ff ff ff 

# 01cd6 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_scroll_up))
25 0c e0 1c 00 00 

# 01cdc JmpImm [Label24(:lcd_scroll_up)]
#       PseudoCall(Label24(:lcd_scroll_up))
70 f1 1c 00 

# 01ce0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_scroll_up))
32 0c 04 00 00 00 

# goto lcd_putc_if_end_6 Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
# 01ce6 JmpImm [Label24(lcd_putc_if_end_6)]
#       goto lcd_putc_if_end_6 Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
70 ea 1c 00 

# :lcd_putc_if_else_0_8 Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
# lcd_putc_if_else_0_8
# :lcd_putc_if_end_6 Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
# lcd_putc_if_end_6
# return None None
# Return { value: None }
# 01cea JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_putc None
# function_end_lcd_putc
# Unreachable None
# 01cec Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_scroll_up
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([46])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([47])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (static "lcd_current") Reg(U32) Some([48, 49, 50, 51])
# Var t1 (static "lcd_current") Reg(U32) Some([52, 53, 54, 55])
# Var t21b4 (t21b4 Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })) Reg(U8) Some([46])
# Var t2aa3 (t2aa3 Number(U8, 60)) Reg(U8) Some([46])
# Var t5dda (t5dda Ident("lcd_current")) Reg(U8) Some([47])
# Var t763a (t763a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }) Reg(U32) Some([48, 49, 50, 51])
# Var t7e9 (t7e9 Arithmetic(Add, Ident("i"), Number(U8, 20))) Reg(U8) Some([46])
# Var t8fe0 (t8fe0 Number(U8, 80)) Reg(U8) Some([46])
# Var t9725 (t9725 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) Reg(U32) Some([56, 57, 58, 59])
# Var t9e70 (t9e70 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }) Reg(U32) Some([56, 57, 58, 59])
# Var tac5f (tac5f Number(U8, 32)) Reg(U8) Some([46])
# Var tb02d (tb02d Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })) Reg(U8) Some([46])
# Var tb175 (tb175 Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))) Reg(U8) Some([47])
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([47])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([46])
# Var tfd7d (tfd7d Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) Reg(U32) Some([48, 49, 50, 51])
# t0 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
# 01cf1 LoadImm32 [Register(0x30), Constant32(0x000f1008=987144)]
#       t0 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
20 30 08 10 0f 00 

# t1 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
# Ident("lcd_current")
# 01cf7 LoadImm32 [Register(0x34), Constant32(0x000f1008=987144)]
#       t1 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
#       Ident("lcd_current")
20 34 08 10 0f 00 

# t5dda <- mem[t1] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
# Ident("lcd_current")
# 01cfd Load8 [Register(0x34), Register(0x2f)]
#       t5dda <- mem[t1] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
#       Ident("lcd_current")
05 34 2f 

# tb175 <- t5dda Subtract Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
# 01d00 LoadImm8 [Register(0x00), Constant8(0xec=236)]
#       tb175 <- t5dda Subtract Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
04 00 ec 

# 01d03 Add8NoCarryIn [Register(0x2f), Register(0x00), Register(0x2f)]
#       tb175 <- t5dda Subtract Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
14 2f 00 2f 

# mem[t0] <- tb175 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
# 01d07 Store8 [Register(0x2f), Register(0x30)]
#       mem[t0] <- tb175 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
06 2f 30 

# i <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(29,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }
# Number(U8, 0)
# 01d0a LoadImm8 [Register(0x2f), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(29,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }
#       Number(U8, 0)
04 2f 00 

# :lcd_scroll_up_while_predicate_0 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# lcd_scroll_up_while_predicate_0
# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }, Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# t2aa3 <- 0n60/0x3cu8  Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }
# Number(U8, 60)
# 01d0d LoadImm8 [Register(0x2e), Constant8(0x3c=60)]
#       t2aa3 <- 0n60/0x3cu8  Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }
#       Number(U8, 60)
04 2e 3c 

# if td0f3 < t2aa3 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }
# 01d10 Cmp8 [Register(0x2e), Register(0x2f)]
#       if td0f3 < t2aa3 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }
15 2e 2f 

# 01d13 JcImm [Label24(lcd_scroll_up_while_end_2)]
#       if td0f3 < t2aa3 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }
71 69 1d 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t2aa3 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }, Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_1)], resolved: None }
# :lcd_scroll_up_while_body_1 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# lcd_scroll_up_while_body_1
# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
# Arithmetic(Add, Ident("i"), Number(U8, 20))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }\nIndex(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20)))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }\nArithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }\nArithmetic(Add, Ident(\"i\"), Number(U8, 20))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# t7e9 <- td0f3 Add Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
# Arithmetic(Add, Ident("i"), Number(U8, 20))
# 01d17 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       t7e9 <- td0f3 Add Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 20))
04 00 14 

# 01d1a Add8NoCarryIn [Register(0x2f), Register(0x00), Register(0x2e)]
#       t7e9 <- td0f3 Add Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 20))
14 2f 00 2e 

# tfd7d U32 <- t7e9 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
# 01d1e LoadImm32 [Register(0x30), Constant32(0x00000000=0)]
#       Zero-pad for tfd7d U32 <- t7e9 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
20 30 00 00 00 00 

# 01d24 Copy8 [Register(0x2e), Register(0x30)]
#       tfd7d U32 <- t7e9 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
0b 2e 30 

# t763a <- tfd7d Add Number(0n987148/0x000f100cu32) Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
# 01d27 AddImm32IgnoreCarry [Register(0x30), Constant32(0x000f100c=987148)]
#       t763a <- tfd7d Add Number(0n987148/0x000f100cu32) Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
32 30 0c 10 0f 00 

# ch <- mem[t763a] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
# 01d2d Load8 [Register(0x30), Register(0x2e)]
#       ch <- mem[t763a] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
05 30 2e 

# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }\nArithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# 01d30 LoadImm32 [Register(0x38), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
20 38 00 00 00 00 

# 01d36 Copy8 [Register(0x2f), Register(0x38)]
#       t9725 U32 <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
0b 2f 38 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# 01d39 AddImm32IgnoreCarry [Register(0x38), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
32 38 0c 10 0f 00 

# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x2e), Register(0x2e)], resolved: None }
# mem[t9e70] <- tdcd9 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# 01d3f Store8 [Register(0x2e), Register(0x38)]
#       mem[t9e70] <- tdcd9 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
06 2e 38 

# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x2e), Register(0x2e)], resolved: None }
# None <= call lcd_draw_char(td0f3,tdcd9,) Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# 01d42 Copy8 [Register(0x2f), Register(0x00)]
#       Arg0[i]=td0f3 None <= call lcd_draw_char(td0f3,tdcd9,) Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
0b 2f 00 

# 01d45 Copy8 [Register(0x2e), Register(0x04)]
#       Arg1[ch]=tdcd9 None <= call lcd_draw_char(td0f3,tdcd9,) Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
0b 2e 04 

# Registers used by this function: {46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 01d48 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 01d4e StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c 58 1d 00 00 

# 01d54 JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 e1 19 00 

# 01d58 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }\nArithmetic(Add, Ident(\"i\"), Number(U8, 1))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# 01d5e LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
04 00 01 

# 01d61 Add8NoCarryIn [Register(0x2f), Register(0x00), Register(0x2f)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
14 2f 00 2f 

# goto lcd_scroll_up_while_predicate_0 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# 01d65 JmpImm [Label24(lcd_scroll_up_while_predicate_0)]
#       goto lcd_scroll_up_while_predicate_0 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
70 0d 1d 00 

# :lcd_scroll_up_while_end_2 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# lcd_scroll_up_while_end_2
# :lcd_scroll_up_while_predicate_3 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# lcd_scroll_up_while_predicate_3
# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# t8fe0 <- 0n80/0x50u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
# Number(U8, 80)
# 01d69 LoadImm8 [Register(0x2e), Constant8(0x50=80)]
#       t8fe0 <- 0n80/0x50u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
#       Number(U8, 80)
04 2e 50 

# if td0f3 < t8fe0 then 'lcd_scroll_up_while_body_4' else 'lcd_scroll_up_while_end_5' Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
# 01d6c Cmp8 [Register(0x2e), Register(0x2f)]
#       if td0f3 < t8fe0 then 'lcd_scroll_up_while_body_4' else 'lcd_scroll_up_while_end_5' Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
15 2e 2f 

# 01d6f JcImm [Label24(lcd_scroll_up_while_end_5)]
#       if td0f3 < t8fe0 then 'lcd_scroll_up_while_body_4' else 'lcd_scroll_up_while_end_5' Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
71 b2 1d 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t8fe0 then 'lcd_scroll_up_while_body_4' else 'lcd_scroll_up_while_end_5' Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_4)], resolved: None }
# :lcd_scroll_up_while_body_4 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# lcd_scroll_up_while_body_4
# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }\nArithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# 01d73 LoadImm32 [Register(0x38), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
20 38 00 00 00 00 

# 01d79 Copy8 [Register(0x2f), Register(0x38)]
#       t9725 U32 <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
0b 2f 38 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# 01d7c AddImm32IgnoreCarry [Register(0x38), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
32 38 0c 10 0f 00 

# tac5f <- 0n32/0x20u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Number(U8, 32)
# 01d82 LoadImm8 [Register(0x2e), Constant8(0x20=32)]
#       tac5f <- 0n32/0x20u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Number(U8, 32)
04 2e 20 

# mem[t9e70] <- tac5f U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# 01d85 Store8 [Register(0x2e), Register(0x38)]
#       mem[t9e70] <- tac5f U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
06 2e 38 

# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# tac5f <- 0n32/0x20u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })
# Number(U8, 32)
# 01d88 LoadImm8 [Register(0x2e), Constant8(0x20=32)]
#       tac5f <- 0n32/0x20u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })
#       Number(U8, 32)
04 2e 20 

# None <= call lcd_draw_char(td0f3,tac5f,) Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })
# 01d8b Copy8 [Register(0x2f), Register(0x00)]
#       Arg0[i]=td0f3 None <= call lcd_draw_char(td0f3,tac5f,) Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })
0b 2f 00 

# 01d8e Copy8 [Register(0x2e), Register(0x04)]
#       Arg1[ch]=tac5f None <= call lcd_draw_char(td0f3,tac5f,) Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })
0b 2e 04 

# Registers used by this function: {46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 01d91 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 01d97 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c a1 1d 00 00 

# 01d9d JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 e1 19 00 

# 01da1 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }\nArithmetic(Add, Ident(\"i\"), Number(U8, 1))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# 01da7 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
04 00 01 

# 01daa Add8NoCarryIn [Register(0x2f), Register(0x00), Register(0x2f)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
14 2f 00 2f 

# goto lcd_scroll_up_while_predicate_3 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# 01dae JmpImm [Label24(lcd_scroll_up_while_predicate_3)]
#       goto lcd_scroll_up_while_predicate_3 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
70 69 1d 00 

# :lcd_scroll_up_while_end_5 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# lcd_scroll_up_while_end_5
# return None None
# Return { value: None }
# 01db2 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_scroll_up None
# function_end_lcd_scroll_up
# Unreachable None
# 01db4 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :main
# Ret Some(U8)
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var addr (Local addr Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var buf (Local buf Array(Number(U8), Some(20)) FrameOffset(0)) FrameOffset(0) None
# Var calc (Local calc Struct("RpnCalc") Static(987500)) Static(987500) None
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([64])
# Var i (Local i Number(USIZE) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_main_RpnCalc_init_90_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_RpnCalc_init_90_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_main_RpnCalc_init_90_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_RpnCalc_init_90_s (Local s Ptr(Struct("Stack")) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_main_RpnCalc_init_90_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_main_RpnCalc_init_90_t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_main_RpnCalc_init_90_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_main_RpnCalc_init_90_tb2e9 (tb2e9 Ident("s")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_main_RpnCalc_init_90_tbc15 (tbc15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_main_RpnCalc_init_90_tf462 (tf462 Call(Call { function: "stack_init", parameters: [Ident("s")] })) Reg(U8) Some([80])
# Var inline_main_parseHex_17_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_parseHex_17_c (Arg0 c Ptr(Number(U8))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_main_parseHex_17_h (Local h Number(U8) Reg(U8)) Reg(U8) Some([81])
# Var inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_ch (Arg0 ch Number(U8)) Reg(U8) Some([81])
# Var inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t2ac9 (t2ac9 Number(U8, 57)) Reg(U8) Some([82])
# Var inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t3fb8 (t3fb8 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) Reg(U8) Some([81])
# Var inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t4421 (t4421 Number(U8, 97)) Reg(U8) Some([82])
# Var inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t45e4 (t45e4 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) Reg(U8) Some([81])
# Var inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t7ff1 (t7ff1 Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) Reg(U8) Some([81])
# Var inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_td437 (td437 Arithmetic(Subtract, Ident("ch"), Number(U8, 65))) Reg(U8) Some([81])
# Var inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([81])
# Var inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_te3ca (te3ca Arithmetic(Subtract, Ident("ch"), Number(U8, 97))) Reg(U8) Some([81])
# Var inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_ch (Arg0 ch Number(U8)) Reg(U8) Some([64])
# Var inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t2ac9 (t2ac9 Number(U8, 57)) Reg(U8) Some([81])
# Var inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t3fb8 (t3fb8 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) Reg(U8) Some([64])
# Var inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t4421 (t4421 Number(U8, 97)) Reg(U8) Some([81])
# Var inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t45e4 (t45e4 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) Reg(U8) Some([64])
# Var inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t7ff1 (t7ff1 Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) Reg(U8) Some([64])
# Var inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_td437 (td437 Arithmetic(Subtract, Ident("ch"), Number(U8, 65))) Reg(U8) Some([64])
# Var inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([64])
# Var inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_te3ca (te3ca Arithmetic(Subtract, Ident("ch"), Number(U8, 97))) Reg(U8) Some([64])
# Var inline_main_parseHex_17_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_parseHex_17_t2fed (t2fed Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 1)) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_main_parseHex_17_t4768 (t4768 Ident("h")) Reg(U8) Some([82])
# Var inline_main_parseHex_17_t61f3 (t61f3 Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) Reg(U8) Some([81])
# Var inline_main_parseHex_17_t87c3 (t87c3 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_main_parseHex_17_tac13 (tac13 Ident("c")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_main_parseHex_17_tea8d (tea8d Deref(Ident("c"))) Reg(U8) Some([81])
# Var inline_main_parseHex_18_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_parseHex_18_c (Arg0 c Ptr(Number(U8))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_main_parseHex_18_h (Local h Number(U8) Reg(U8)) Reg(U8) Some([82])
# Var inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_ch (Arg0 ch Number(U8)) Reg(U8) Some([82])
# Var inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t2ac9 (t2ac9 Number(U8, 57)) Reg(U8) Some([83])
# Var inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t3fb8 (t3fb8 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) Reg(U8) Some([82])
# Var inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t4421 (t4421 Number(U8, 97)) Reg(U8) Some([83])
# Var inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t45e4 (t45e4 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) Reg(U8) Some([82])
# Var inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t7ff1 (t7ff1 Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) Reg(U8) Some([82])
# Var inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_td437 (td437 Arithmetic(Subtract, Ident("ch"), Number(U8, 65))) Reg(U8) Some([82])
# Var inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([82])
# Var inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_te3ca (te3ca Arithmetic(Subtract, Ident("ch"), Number(U8, 97))) Reg(U8) Some([82])
# Var inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_ch (Arg0 ch Number(U8)) Reg(U8) Some([81])
# Var inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t2ac9 (t2ac9 Number(U8, 57)) Reg(U8) Some([82])
# Var inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t3fb8 (t3fb8 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) Reg(U8) Some([81])
# Var inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t4421 (t4421 Number(U8, 97)) Reg(U8) Some([82])
# Var inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t45e4 (t45e4 Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) Reg(U8) Some([81])
# Var inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t7ff1 (t7ff1 Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) Reg(U8) Some([81])
# Var inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_td437 (td437 Arithmetic(Subtract, Ident("ch"), Number(U8, 65))) Reg(U8) Some([81])
# Var inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([81])
# Var inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_te3ca (te3ca Arithmetic(Subtract, Ident("ch"), Number(U8, 97))) Reg(U8) Some([81])
# Var inline_main_parseHex_18_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_parseHex_18_t2fed (t2fed Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 1)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_main_parseHex_18_t4768 (t4768 Ident("h")) Reg(U8) Some([83])
# Var inline_main_parseHex_18_t61f3 (t61f3 Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) Reg(U8) Some([82])
# Var inline_main_parseHex_18_t87c3 (t87c3 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_main_parseHex_18_tac13 (tac13 Ident("c")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_main_parseHex_18_tea8d (tea8d Deref(Ident("c"))) Reg(U8) Some([82])
# Var inline_main_printHex_60_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_60_a (Arg0 a Number(U8)) Reg(U8) Some([64])
# Var inline_main_printHex_60_b (Local b Number(U8) Reg(U8)) Reg(U8) Some([81])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_58_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_60_inline_printHex_printHexDigit_58_a (Arg0 a Number(U8)) Reg(U8) Some([82])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c (Arg0 c Number(U8)) Reg(U8) Some([82])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 (tac13 Ident("c")) Reg(U8) Some([82])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c (Arg0 c Number(U8)) Reg(U8) Some([82])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 (tac13 Ident("c")) Reg(U8) Some([82])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_58_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_60_inline_printHex_printHexDigit_58_t6db1 (t6db1 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([82])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_58_t8792 (t8792 Ident("a")) Reg(U8) Some([82])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_58_tabcf (tabcf Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([80])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_58_td36e (td36e Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([80])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_58_td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([83])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_59_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_60_inline_printHex_printHexDigit_59_a (Arg0 a Number(U8)) Reg(U8) Some([64])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_59_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_60_inline_printHex_printHexDigit_59_t6db1 (t6db1 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([64])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_59_t8792 (t8792 Ident("a")) Reg(U8) Some([64])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_59_tabcf (tabcf Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([80])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_59_td36e (td36e Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([80])
# Var inline_main_printHex_60_inline_printHex_printHexDigit_59_td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([81])
# Var inline_main_printHex_60_inline_printHex_putc_55_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_60_inline_printHex_putc_55_c (Arg0 c Number(U8)) Reg(U8) Some([81])
# Var inline_main_printHex_60_inline_printHex_putc_55_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_60_inline_printHex_putc_55_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_60_inline_printHex_putc_55_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_60_inline_printHex_putc_55_tac13 (tac13 Ident("c")) Reg(U8) Some([81])
# Var inline_main_printHex_60_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_60_t4271 (t4271 Arithmetic(Multiply, Ident("b"), Number(U8, 16))) Reg(U8) Some([64])
# Var inline_main_printHex_60_t610c (t610c Number(U8, 15)) Reg(U8) Some([81])
# Var inline_main_printHex_60_t70eb (t70eb Call(Call { function: "printHexDigit", parameters: [Ident("a")] })) Reg(U8) Some([80])
# Var inline_main_printHex_60_t8792 (t8792 Ident("a")) Reg(U8) Some([82])
# Var inline_main_printHex_60_tace9 (tace9 Ident("b")) Reg(U8) Some([81])
# Var inline_main_printHex_60_tc52b (tc52b Call(Call { function: "putc", parameters: [Number(U8, 48)] })) Reg(U8) Some([80])
# Var inline_main_printHex_60_te3b2 (te3b2 Call(Call { function: "printHexDigit", parameters: [Ident("b")] })) Reg(U8) Some([80])
# Var inline_main_printHex_60_tf48d (tf48d Number(U8, 48)) Reg(U8) Some([81])
# Var inline_main_printHex_61_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_61_a (Arg0 a Number(U8)) Reg(U8) Some([64])
# Var inline_main_printHex_61_b (Local b Number(U8) Reg(U8)) Reg(U8) Some([81])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_58_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_61_inline_printHex_printHexDigit_58_a (Arg0 a Number(U8)) Reg(U8) Some([82])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c (Arg0 c Number(U8)) Reg(U8) Some([82])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 (tac13 Ident("c")) Reg(U8) Some([82])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c (Arg0 c Number(U8)) Reg(U8) Some([82])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 (tac13 Ident("c")) Reg(U8) Some([82])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_58_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_61_inline_printHex_printHexDigit_58_t6db1 (t6db1 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([82])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_58_t8792 (t8792 Ident("a")) Reg(U8) Some([82])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_58_tabcf (tabcf Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([80])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_58_td36e (td36e Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([80])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_58_td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([83])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_59_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_61_inline_printHex_printHexDigit_59_a (Arg0 a Number(U8)) Reg(U8) Some([64])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_59_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_61_inline_printHex_printHexDigit_59_t6db1 (t6db1 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([64])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_59_t8792 (t8792 Ident("a")) Reg(U8) Some([64])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_59_tabcf (tabcf Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([80])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_59_td36e (td36e Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([80])
# Var inline_main_printHex_61_inline_printHex_printHexDigit_59_td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([81])
# Var inline_main_printHex_61_inline_printHex_putc_55_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_61_inline_printHex_putc_55_c (Arg0 c Number(U8)) Reg(U8) Some([81])
# Var inline_main_printHex_61_inline_printHex_putc_55_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_61_inline_printHex_putc_55_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_61_inline_printHex_putc_55_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_61_inline_printHex_putc_55_tac13 (tac13 Ident("c")) Reg(U8) Some([81])
# Var inline_main_printHex_61_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_61_t4271 (t4271 Arithmetic(Multiply, Ident("b"), Number(U8, 16))) Reg(U8) Some([64])
# Var inline_main_printHex_61_t610c (t610c Number(U8, 15)) Reg(U8) Some([81])
# Var inline_main_printHex_61_t70eb (t70eb Call(Call { function: "printHexDigit", parameters: [Ident("a")] })) Reg(U8) Some([80])
# Var inline_main_printHex_61_t8792 (t8792 Ident("a")) Reg(U8) Some([82])
# Var inline_main_printHex_61_tace9 (tace9 Ident("b")) Reg(U8) Some([81])
# Var inline_main_printHex_61_tc52b (tc52b Call(Call { function: "putc", parameters: [Number(U8, 48)] })) Reg(U8) Some([80])
# Var inline_main_printHex_61_te3b2 (te3b2 Call(Call { function: "printHexDigit", parameters: [Ident("b")] })) Reg(U8) Some([80])
# Var inline_main_printHex_61_tf48d (tf48d Number(U8, 48)) Reg(U8) Some([81])
# Var inline_main_printHex_62_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_62_a (Arg0 a Number(U8)) Reg(U8) Some([64])
# Var inline_main_printHex_62_b (Local b Number(U8) Reg(U8)) Reg(U8) Some([81])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_58_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_62_inline_printHex_printHexDigit_58_a (Arg0 a Number(U8)) Reg(U8) Some([82])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c (Arg0 c Number(U8)) Reg(U8) Some([82])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 (tac13 Ident("c")) Reg(U8) Some([82])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c (Arg0 c Number(U8)) Reg(U8) Some([82])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 (tac13 Ident("c")) Reg(U8) Some([82])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_58_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_62_inline_printHex_printHexDigit_58_t6db1 (t6db1 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([82])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_58_t8792 (t8792 Ident("a")) Reg(U8) Some([82])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_58_tabcf (tabcf Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([80])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_58_td36e (td36e Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([80])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_58_td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([83])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_59_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_62_inline_printHex_printHexDigit_59_a (Arg0 a Number(U8)) Reg(U8) Some([64])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_59_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_62_inline_printHex_printHexDigit_59_t6db1 (t6db1 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([64])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_59_t8792 (t8792 Ident("a")) Reg(U8) Some([64])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_59_tabcf (tabcf Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([80])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_59_td36e (td36e Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([80])
# Var inline_main_printHex_62_inline_printHex_printHexDigit_59_td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([81])
# Var inline_main_printHex_62_inline_printHex_putc_55_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_62_inline_printHex_putc_55_c (Arg0 c Number(U8)) Reg(U8) Some([81])
# Var inline_main_printHex_62_inline_printHex_putc_55_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_62_inline_printHex_putc_55_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_62_inline_printHex_putc_55_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_62_inline_printHex_putc_55_tac13 (tac13 Ident("c")) Reg(U8) Some([81])
# Var inline_main_printHex_62_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_62_t4271 (t4271 Arithmetic(Multiply, Ident("b"), Number(U8, 16))) Reg(U8) Some([64])
# Var inline_main_printHex_62_t610c (t610c Number(U8, 15)) Reg(U8) Some([81])
# Var inline_main_printHex_62_t70eb (t70eb Call(Call { function: "printHexDigit", parameters: [Ident("a")] })) Reg(U8) Some([80])
# Var inline_main_printHex_62_t8792 (t8792 Ident("a")) Reg(U8) Some([82])
# Var inline_main_printHex_62_tace9 (tace9 Ident("b")) Reg(U8) Some([81])
# Var inline_main_printHex_62_tc52b (tc52b Call(Call { function: "putc", parameters: [Number(U8, 48)] })) Reg(U8) Some([80])
# Var inline_main_printHex_62_te3b2 (te3b2 Call(Call { function: "printHexDigit", parameters: [Ident("b")] })) Reg(U8) Some([80])
# Var inline_main_printHex_62_tf48d (tf48d Number(U8, 48)) Reg(U8) Some([81])
# Var inline_main_printHex_63_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_63_a (Arg0 a Number(U8)) Reg(U8) Some([64])
# Var inline_main_printHex_63_b (Local b Number(U8) Reg(U8)) Reg(U8) Some([81])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_58_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_63_inline_printHex_printHexDigit_58_a (Arg0 a Number(U8)) Reg(U8) Some([82])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c (Arg0 c Number(U8)) Reg(U8) Some([82])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 (tac13 Ident("c")) Reg(U8) Some([82])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c (Arg0 c Number(U8)) Reg(U8) Some([82])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 (tac13 Ident("c")) Reg(U8) Some([82])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_58_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_63_inline_printHex_printHexDigit_58_t6db1 (t6db1 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([82])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_58_t8792 (t8792 Ident("a")) Reg(U8) Some([82])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_58_tabcf (tabcf Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([80])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_58_td36e (td36e Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([80])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_58_td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([83])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_59_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_63_inline_printHex_printHexDigit_59_a (Arg0 a Number(U8)) Reg(U8) Some([64])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_59_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_63_inline_printHex_printHexDigit_59_t6db1 (t6db1 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([64])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_59_t8792 (t8792 Ident("a")) Reg(U8) Some([64])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_59_tabcf (tabcf Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([80])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_59_td36e (td36e Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([80])
# Var inline_main_printHex_63_inline_printHex_printHexDigit_59_td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([81])
# Var inline_main_printHex_63_inline_printHex_putc_55_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_63_inline_printHex_putc_55_c (Arg0 c Number(U8)) Reg(U8) Some([81])
# Var inline_main_printHex_63_inline_printHex_putc_55_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_63_inline_printHex_putc_55_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_63_inline_printHex_putc_55_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_63_inline_printHex_putc_55_tac13 (tac13 Ident("c")) Reg(U8) Some([81])
# Var inline_main_printHex_63_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_63_t4271 (t4271 Arithmetic(Multiply, Ident("b"), Number(U8, 16))) Reg(U8) Some([64])
# Var inline_main_printHex_63_t610c (t610c Number(U8, 15)) Reg(U8) Some([81])
# Var inline_main_printHex_63_t70eb (t70eb Call(Call { function: "printHexDigit", parameters: [Ident("a")] })) Reg(U8) Some([80])
# Var inline_main_printHex_63_t8792 (t8792 Ident("a")) Reg(U8) Some([82])
# Var inline_main_printHex_63_tace9 (tace9 Ident("b")) Reg(U8) Some([81])
# Var inline_main_printHex_63_tc52b (tc52b Call(Call { function: "putc", parameters: [Number(U8, 48)] })) Reg(U8) Some([80])
# Var inline_main_printHex_63_te3b2 (te3b2 Call(Call { function: "printHexDigit", parameters: [Ident("b")] })) Reg(U8) Some([80])
# Var inline_main_printHex_63_tf48d (tf48d Number(U8, 48)) Reg(U8) Some([81])
# Var inline_main_printHex_64_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_64_a (Arg0 a Number(U8)) Reg(U8) Some([64])
# Var inline_main_printHex_64_b (Local b Number(U8) Reg(U8)) Reg(U8) Some([81])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_58_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_64_inline_printHex_printHexDigit_58_a (Arg0 a Number(U8)) Reg(U8) Some([82])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c (Arg0 c Number(U8)) Reg(U8) Some([82])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 (tac13 Ident("c")) Reg(U8) Some([82])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c (Arg0 c Number(U8)) Reg(U8) Some([82])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 (tac13 Ident("c")) Reg(U8) Some([82])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_58_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_64_inline_printHex_printHexDigit_58_t6db1 (t6db1 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([82])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_58_t8792 (t8792 Ident("a")) Reg(U8) Some([82])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_58_tabcf (tabcf Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([80])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_58_td36e (td36e Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([80])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_58_td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([83])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_59_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_64_inline_printHex_printHexDigit_59_a (Arg0 a Number(U8)) Reg(U8) Some([64])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_59_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_64_inline_printHex_printHexDigit_59_t6db1 (t6db1 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([64])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_59_t8792 (t8792 Ident("a")) Reg(U8) Some([64])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_59_tabcf (tabcf Call(Call { function: "putc", parameters: [Ident("a")] })) Reg(U8) Some([80])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_59_td36e (td36e Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([80])
# Var inline_main_printHex_64_inline_printHex_printHexDigit_59_td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([81])
# Var inline_main_printHex_64_inline_printHex_putc_55_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_printHex_64_inline_printHex_putc_55_c (Arg0 c Number(U8)) Reg(U8) Some([81])
# Var inline_main_printHex_64_inline_printHex_putc_55_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_64_inline_printHex_putc_55_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_64_inline_printHex_putc_55_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_printHex_64_inline_printHex_putc_55_tac13 (tac13 Ident("c")) Reg(U8) Some([81])
# Var inline_main_printHex_64_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_printHex_64_t4271 (t4271 Arithmetic(Multiply, Ident("b"), Number(U8, 16))) Reg(U8) Some([64])
# Var inline_main_printHex_64_t610c (t610c Number(U8, 15)) Reg(U8) Some([81])
# Var inline_main_printHex_64_t70eb (t70eb Call(Call { function: "printHexDigit", parameters: [Ident("a")] })) Reg(U8) Some([80])
# Var inline_main_printHex_64_t8792 (t8792 Ident("a")) Reg(U8) Some([82])
# Var inline_main_printHex_64_tace9 (tace9 Ident("b")) Reg(U8) Some([81])
# Var inline_main_printHex_64_tc52b (tc52b Call(Call { function: "putc", parameters: [Number(U8, 48)] })) Reg(U8) Some([80])
# Var inline_main_printHex_64_te3b2 (te3b2 Call(Call { function: "printHexDigit", parameters: [Ident("b")] })) Reg(U8) Some([80])
# Var inline_main_printHex_64_tf48d (tf48d Number(U8, 48)) Reg(U8) Some([81])
# Var inline_main_putc_29_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_29_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_putc_29_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_29_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_29_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_29_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_putc_30_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_30_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_putc_30_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_30_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_30_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_30_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_putc_31_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_31_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_putc_31_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_31_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_31_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_31_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_putc_32_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_32_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_putc_32_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_32_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_32_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_32_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_putc_33_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_33_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_putc_33_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_33_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_33_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_33_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_putc_34_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_34_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_putc_34_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_34_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_34_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_34_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_putc_35_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_35_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_putc_35_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_35_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_35_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_35_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_putc_36_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_36_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_putc_36_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_36_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_36_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_36_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_putc_37_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_37_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_putc_37_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_37_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_37_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_37_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_putc_38_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_38_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_putc_38_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_38_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_38_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_38_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_putc_39_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_39_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_putc_39_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_39_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_39_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_39_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_putc_40_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_40_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_putc_40_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_40_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_40_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_40_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_putc_41_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_41_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_putc_41_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_41_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_41_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_41_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_putc_42_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_42_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_putc_42_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_42_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_42_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_42_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_putc_43_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_43_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_putc_43_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_43_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_43_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_43_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_putc_44_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_44_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_putc_44_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_44_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_44_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_44_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_putc_45_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_45_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_putc_45_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_45_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_45_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_45_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_putc_46_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_46_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_putc_46_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_46_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_46_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_46_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_putc_47_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_47_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_putc_47_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_47_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_47_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_47_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_putc_48_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_48_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_putc_48_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_48_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_48_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_48_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_putc_49_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_49_c (Arg0 c Number(U8)) Reg(U8) Some([81])
# Var inline_main_putc_49_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_49_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_49_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_49_tac13 (tac13 Ident("c")) Reg(U8) Some([81])
# Var inline_main_putc_50_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_50_c (Arg0 c Number(U8)) Reg(U8) Some([81])
# Var inline_main_putc_50_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_50_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_50_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_50_tac13 (tac13 Ident("c")) Reg(U8) Some([81])
# Var inline_main_putc_51_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_51_c (Arg0 c Number(U8)) Reg(U8) Some([81])
# Var inline_main_putc_51_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_51_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_51_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_51_tac13 (tac13 Ident("c")) Reg(U8) Some([81])
# Var inline_main_putc_52_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_52_c (Arg0 c Number(U8)) Reg(U8) Some([81])
# Var inline_main_putc_52_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_52_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_52_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_52_tac13 (tac13 Ident("c")) Reg(U8) Some([81])
# Var inline_main_putc_53_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_53_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_putc_53_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_53_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_53_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_53_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_putc_54_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_54_c (Arg0 c Number(U8)) Reg(U8) Some([64])
# Var inline_main_putc_54_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_54_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_54_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([80])
# Var inline_main_putc_54_tac13 (tac13 Ident("c")) Reg(U8) Some([64])
# Var inline_main_readline_79_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_readline_79_buf (Arg0 buf Ptr(Number(U8))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_main_readline_79_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([81])
# Var inline_main_readline_79_inline_readline_getchar_78_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_readline_79_inline_readline_getchar_78_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([81])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t1d36 (t1d36 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([82])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t44ed (t44ed Ident("value")) Reg(U8) Some([81])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t565a (t565a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t6fdb (t6fdb Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))) Reg(U8) Some([81])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tae11 (tae11 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([81])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb469 (tb469 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb6dd (tb6dd PtrFieldDeref("s", "first")) Reg(U8) Some([83])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb702 (tb702 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_value (Local value Number(U8) Reg(U8)) Reg(U8) Some([82])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_n (Arg1 n Number(U8)) Reg(U8) Some([81])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t1d36 (t1d36 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t2187 (t2187 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([92])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t531d (t531d Ident("n")) Reg(U8) Some([81])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t565a (t565a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t6778 (t6778 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))) Reg(U8) Some([81])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_main_readline_79_inline_readline_getchar_78_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_readline_79_inline_readline_getchar_78_t0 (static "stdin") Reg(U32) Some([72, 73, 74, 75])
# Var inline_main_readline_79_inline_readline_getchar_78_t1 (static "stdin") Reg(U32) Some([72, 73, 74, 75])
# Var inline_main_readline_79_inline_readline_getchar_78_t861f (t861f Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([81])
# Var inline_main_readline_79_inline_readline_getchar_78_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([82])
# Var inline_main_readline_79_inline_readline_getchar_78_tb816 (tb816 TtyIn) Reg(U8) Some([81])
# Var inline_main_readline_79_inline_readline_getchar_78_tc9d5 (tc9d5 Call(Call { function: "Keyboard_poll", parameters: [] })) Reg(U8) Some([80])
# Var inline_main_readline_79_inline_readline_getchar_78_tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([81])
# Var inline_main_readline_79_inline_readline_getchar_78_te31 (te31 Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })) Reg(U8) Some([80])
# Var inline_main_readline_79_inline_readline_getchar_78_tf0b5 (tf0b5 Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))) Reg(U8) Some([81])
# Var inline_main_readline_79_inline_readline_getchar_78_tfff6 (tfff6 AddressOf(Ident("stdin"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_main_readline_79_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_readline_79_t1d08 (t1d08 Ident("buf")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_main_readline_79_t2b28 (t2b28 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("buf") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_main_readline_79_t65d5 (t65d5 Number(U8, 13)) Reg(U8) Some([82])
# Var inline_main_readline_79_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([81])
# Var inline_main_readline_79_td4a0 (td4a0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("buf") }, Number(USIZE, 1)) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_main_readline_79_td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([82])
# Var inline_main_readline_79_tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([81])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var p_byte (Local p_byte Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var t0 (Stack size negated) Reg(U32) Some([100, 101, 102, 103])
# Var t1 (static "calc") Reg(U32) Some([68, 69, 70, 71])
# Var t1129 (t1129 Number(U8, 110)) Reg(U8) Some([81])
# Var t113b (t113b AddressOf(Index("buf", Number(USIZE, 1)))) Reg(U32) Some([68, 69, 70, 71])
# Var t1501 (t1501 Number(U8, 113)) Reg(U8) Some([81])
# Var t1653 (t1653 Call(Call { function: "putc", parameters: [Number(U8, 65)] })) Reg(U8) Some([80])
# Var t1709 (t1709 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0)) }) Reg(U32) Some([68, 69, 70, 71])
# Var t1f57 (t1f57 Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] })) Reg(U8) Some([80])
# Var t2 (static "calc") Reg(U32) Some([68, 69, 70, 71])
# Var t226a (t226a Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] })) Reg(U8) Some([80])
# Var t22ae (t22ae AddressOf(Index("buf", Ident("i")))) Reg(U32) Some([72, 73, 74, 75])
# Var t281 (t281 Call(Call { function: "putc", parameters: [Number(U8, 63)] })) Reg(U8) Some([80])
# Var t2a99 (t2a99 Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) Reg(U8) Some([64])
# Var t2af9 (t2af9 Call(Call { function: "putc", parameters: [Number(U8, 69)] })) Reg(U8) Some([80])
# Var t2bc4 (t2bc4 Ident("addr")) Reg(U32) Some([60, 61, 62, 63])
# Var t2bfd (t2bfd Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] })) Reg(U8) Some([64])
# Var t2c71 (t2c71 Number(U8, 89)) Reg(U8) Some([64])
# Var t3837 (t3837 Index("buf", Ident("i"))) Reg(U8) Some([81])
# Var t39b5 (t39b5 Number(U8, 115)) Reg(U8) Some([81])
# Var t3c19 (t3c19 Number(U8, 65)) Reg(U8) Some([64])
# Var t41d0 (t41d0 Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] })) Reg(U8) Some([80])
# Var t4421 (t4421 Number(U8, 97)) Reg(U8) Some([81])
# Var t4b0c (t4b0c Call(Call { function: "putc", parameters: [Number(U8, 109)] })) Reg(U8) Some([80])
# Var t4e2d (t4e2d Number(U8, 117)) Reg(U8) Some([81])
# Var t4f0d (t4f0d Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] })) Reg(U8) Some([80])
# Var t5467 (t5467 Deref(Ident("p_byte"))) Reg(U8) Some([64])
# Var t5add (t5add Call(Call { function: "putc", parameters: [Ident("ch")] })) Reg(U8) Some([80])
# Var t60e4 (t60e4 Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] })) Reg(U8) Some([80])
# Var t6100 (t6100 Number(U8, 72)) Reg(U8) Some([81])
# Var t61d1 (t61d1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 1)) }) Reg(U32) Some([68, 69, 70, 71])
# Var t70ab (t70ab Call(Call { function: "putc", parameters: [Number(U8, 116)] })) Reg(U8) Some([80])
# Var t71cb (t71cb Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Ident("i")) }) Reg(U32) Some([72, 73, 74, 75])
# Var t71d9 (t71d9 Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })) Reg(U8) Some([80])
# Var t7ddc (t7ddc Call(Call { function: "putc", parameters: [Number(U8, 78)] })) Reg(U8) Some([80])
# Var t7f1c (t7f1c Index("addr", Number(USIZE, 3))) Reg(U8) Some([104])
# Var t8ed0 (t8ed0 Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] })) Reg(U8) Some([81])
# Var t8ef5 (t8ef5 Call(Call { function: "putc", parameters: [Number(U8, 117)] })) Reg(U8) Some([80])
# Var t8fe0 (t8fe0 Number(U8, 80)) Reg(U8) Some([64])
# Var t92f6 (t92f6 Index("addr", Number(USIZE, 1))) Reg(U8) Some([104])
# Var t9959 (t9959 Number(U8, 104)) Reg(U8) Some([81])
# Var t99f2 (t99f2 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }) Reg(U32) Some([68, 69, 70, 71])
# Var t9af9 (t9af9 AddressOf(Index("buf", Number(U8, 0)))) Reg(U32) Some([68, 69, 70, 71])
# Var t9c2e (t9c2e Number(U8, 68)) Reg(U8) Some([64])
# Var t9c38 (t9c38 Number(U8, 82)) Reg(U8) Some([64])
# Var t9eb0 (t9eb0 Call(Call { function: "putc", parameters: [Number(U8, 114)] })) Reg(U8) Some([80])
# Var ta7f7 (ta7f7 Call(Call { function: "putc", parameters: [Number(U8, 111)] })) Reg(U8) Some([80])
# Var ta852 (ta852 Number(U8, 63)) Reg(U8) Some([81])
# Var tab15 (tab15 Number(U8, 103)) Reg(U8) Some([81])
# Var tb303 (tb303 Call(Call { function: "putc", parameters: [Number(U8, 82)] })) Reg(U8) Some([80])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([82])
# Var tb507 (tb507 Number(U8, 69)) Reg(U8) Some([64])
# Var tb699 (tb699 Number(U8, 111)) Reg(U8) Some([64])
# Var tbf00 (tbf00 Ident("p_byte")) Reg(U32) Some([84, 85, 86, 87])
# Var tc076 (tc076 Number(U8, 114)) Reg(U8) Some([81])
# Var tc0b9 (tc0b9 Number(U8, 116)) Reg(U8) Some([64])
# Var tc33b (tc33b Call(Call { function: "putc", parameters: [Number(U8, 66)] })) Reg(U8) Some([80])
# Var tc49a (tc49a Number(U8, 105)) Reg(U8) Some([81])
# Var tc4c6 (tc4c6 Number(U8, 66)) Reg(U8) Some([64])
# Var tc4e2 (tc4e2 Call(Call { function: "putc", parameters: [Number(U8, 104)] })) Reg(U8) Some([80])
# Var tc82c (tc82c Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] })) Reg(U8) Some([80])
# Var tc8fd (tc8fd Number(U8, 119)) Reg(U8) Some([81])
# Var tca8 (tca8 AddressOf(Ident("calc"))) Reg(U32) Some([68, 69, 70, 71])
# Var td0f3 (td0f3 Ident("i")) Reg(U32) Some([68, 69, 70, 71])
# Var td33c (td33c Call(Call { function: "putc", parameters: [Number(U8, 68)] })) Reg(U8) Some([80])
# Var td3df (td3df Call(Call { function: "putc", parameters: [Number(U8, 89)] })) Reg(U8) Some([80])
# Var td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([64])
# Var tdb99 (tdb99 Call(Call { function: "putc", parameters: [Number(U8, 72)] })) Reg(U8) Some([80])
# Var tdcaa (tdcaa Call(Call { function: "stdio_init", parameters: [] })) Reg(U8) Some([80])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([64])
# Var te6fd (te6fd Number(U8, 78)) Reg(U8) Some([64])
# Var te7a4 (te7a4 Call(Call { function: "putc", parameters: [Number(U8, 80)] })) Reg(U8) Some([80])
# Var te825 (te825 Ident("__frame_pointer")) Reg(U32) Some([100, 101, 102, 103])
# Var te879 (te879 Number(U8, 109)) Reg(U8) Some([64])
# Var teaed (teaed Index("addr", Number(USIZE, 2))) Reg(U8) Some([104])
# Var tec99 (tec99 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([80])
# Var tf40c (tf40c Call(Call { function: "putc", parameters: [Number(U8, 97)] })) Reg(U8) Some([80])
# Var tf5dc (tf5dc Index("addr", Number(USIZE, 0))) Reg(U8) Some([104])
# 01db9 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xffffffec=4294967276)]
#       reserve 20 bytes of stack space for locals
32 0c ec ff ff ff 

# __frame_pointer <- __frame_pointer Add Number(0xffffffecu32) None
# 01dbf AddImm32IgnoreCarry [Register(0x0c), Constant32(0xffffffec=4294967276)]
#       __frame_pointer <- __frame_pointer Add Number(0xffffffecu32) None
32 0c ec ff ff ff 

# None <= call stdio_init() Some('programs/app/bootram.j':(6,5))
# VoidExpression { expression: Call(Call { function: "stdio_init", parameters: [] }) }
# Call(Call { function: "stdio_init", parameters: [] })
# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 164, 165, 166, 167, 168, 169, 170, 171, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 230, 252}
# Registers to save: []
# 01dc5 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:stdio_init))
32 0c fc ff ff ff 

# 01dcb StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:stdio_init))
25 0c d5 1d 00 00 

# 01dd1 JmpImm [Label24(:stdio_init)]
#       PseudoCall(Label24(:stdio_init))
70 6d 32 00 

# 01dd5 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:stdio_init))
32 0c 04 00 00 00 

# addr <- 0n0/0x00000000u32  Some('programs/app/bootram.j':(8,5))
# Assign { target: Ident("addr"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 01ddb LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       addr <- 0n0/0x00000000u32  Some('programs/app/bootram.j':(8,5))
#       Assign { target: Ident("addr"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 3c 00 00 00 00 

# i <- 0n0/0x00000000u32  Some('programs/app/bootram.j':(9,5))
# Assign { target: Ident("i"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 01de1 LoadImm32 [Register(0x44), Constant32(0x00000000=0)]
#       i <- 0n0/0x00000000u32  Some('programs/app/bootram.j':(9,5))
#       Assign { target: Ident("i"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 44 00 00 00 00 

# ch <- 0n0/0x00u8  Some('programs/app/bootram.j':(10,5))
# Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(U8, 0) }
# Number(U8, 0)
# 01de7 LoadImm8 [Register(0x40), Constant8(0x00=0)]
#       ch <- 0n0/0x00u8  Some('programs/app/bootram.j':(10,5))
#       Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(U8, 0) }
#       Number(U8, 0)
04 40 00 

# t9c38 <- 0n82/0x52u8  Some('programs/app/bootram.j':(13,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 82)] })
# Number(U8, 82)
# 01dea LoadImm8 [Register(0x40), Constant8(0x52=82)]
#       t9c38 <- 0n82/0x52u8  Some('programs/app/bootram.j':(13,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 82)] })
#       Number(U8, 82)
04 40 52 

# inline_main_putc_29_c <- t9c38 U8 Some('programs/app/bootram.j':(13,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 82)] })
# optimized away noop copy Instruction { source: "inline_main_putc_29_c <- t9c38 U8 Some('programs/app/bootram.j':(13,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 82)] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_putc_29_tac13 <- inline_main_putc_29_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_29_tac13 <- inline_main_putc_29_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_putc_29_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 01ded Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_putc_29_tac13 <- inline_main_putc_29_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_29_tac13 <- inline_main_putc_29_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_putc_29_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 01def Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_putc_29_tac13 None <= call lcd_putc(inline_main_putc_29_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 01df2 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 01df8 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 02 1e 00 00 

# 01dfe JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 01e02 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_29_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_29_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_29_function_end_putc)], resolved: None }
# :inline_main_putc_29_function_end_putc None
# inline_main_putc_29_function_end_putc
# tb507 <- 0n69/0x45u8  Some('programs/app/bootram.j':(14,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 69)] })
# Number(U8, 69)
# 01e08 LoadImm8 [Register(0x40), Constant8(0x45=69)]
#       tb507 <- 0n69/0x45u8  Some('programs/app/bootram.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 69)] })
#       Number(U8, 69)
04 40 45 

# inline_main_putc_30_c <- tb507 U8 Some('programs/app/bootram.j':(14,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 69)] })
# optimized away noop copy Instruction { source: "inline_main_putc_30_c <- tb507 U8 Some('programs/app/bootram.j':(14,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 69)] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_putc_30_tac13 <- inline_main_putc_30_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_30_tac13 <- inline_main_putc_30_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_putc_30_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 01e0b Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_putc_30_tac13 <- inline_main_putc_30_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_30_tac13 <- inline_main_putc_30_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_putc_30_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 01e0d Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_putc_30_tac13 None <= call lcd_putc(inline_main_putc_30_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 01e10 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 01e16 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 20 1e 00 00 

# 01e1c JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 01e20 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_30_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_30_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_30_function_end_putc)], resolved: None }
# :inline_main_putc_30_function_end_putc None
# inline_main_putc_30_function_end_putc
# t3c19 <- 0n65/0x41u8  Some('programs/app/bootram.j':(15,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 65)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 65)] })
# Number(U8, 65)
# 01e26 LoadImm8 [Register(0x40), Constant8(0x41=65)]
#       t3c19 <- 0n65/0x41u8  Some('programs/app/bootram.j':(15,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 65)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 65)] })
#       Number(U8, 65)
04 40 41 

# inline_main_putc_31_c <- t3c19 U8 Some('programs/app/bootram.j':(15,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 65)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 65)] })
# optimized away noop copy Instruction { source: "inline_main_putc_31_c <- t3c19 U8 Some('programs/app/bootram.j':(15,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 65)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 65)] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_putc_31_tac13 <- inline_main_putc_31_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_31_tac13 <- inline_main_putc_31_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_putc_31_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 01e29 Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_putc_31_tac13 <- inline_main_putc_31_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_31_tac13 <- inline_main_putc_31_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_putc_31_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 01e2b Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_putc_31_tac13 None <= call lcd_putc(inline_main_putc_31_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 01e2e AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 01e34 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 3e 1e 00 00 

# 01e3a JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 01e3e AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_31_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_31_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_31_function_end_putc)], resolved: None }
# :inline_main_putc_31_function_end_putc None
# inline_main_putc_31_function_end_putc
# t9c2e <- 0n68/0x44u8  Some('programs/app/bootram.j':(16,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 68)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 68)] })
# Number(U8, 68)
# 01e44 LoadImm8 [Register(0x40), Constant8(0x44=68)]
#       t9c2e <- 0n68/0x44u8  Some('programs/app/bootram.j':(16,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 68)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 68)] })
#       Number(U8, 68)
04 40 44 

# inline_main_putc_32_c <- t9c2e U8 Some('programs/app/bootram.j':(16,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 68)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 68)] })
# optimized away noop copy Instruction { source: "inline_main_putc_32_c <- t9c2e U8 Some('programs/app/bootram.j':(16,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 68)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 68)] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_putc_32_tac13 <- inline_main_putc_32_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_32_tac13 <- inline_main_putc_32_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_putc_32_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 01e47 Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_putc_32_tac13 <- inline_main_putc_32_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_32_tac13 <- inline_main_putc_32_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_putc_32_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 01e49 Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_putc_32_tac13 None <= call lcd_putc(inline_main_putc_32_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 01e4c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 01e52 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 5c 1e 00 00 

# 01e58 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 01e5c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_32_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_32_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_32_function_end_putc)], resolved: None }
# :inline_main_putc_32_function_end_putc None
# inline_main_putc_32_function_end_putc
# t2c71 <- 0n89/0x59u8  Some('programs/app/bootram.j':(17,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 89)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 89)] })
# Number(U8, 89)
# 01e62 LoadImm8 [Register(0x40), Constant8(0x59=89)]
#       t2c71 <- 0n89/0x59u8  Some('programs/app/bootram.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 89)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 89)] })
#       Number(U8, 89)
04 40 59 

# inline_main_putc_33_c <- t2c71 U8 Some('programs/app/bootram.j':(17,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 89)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 89)] })
# optimized away noop copy Instruction { source: "inline_main_putc_33_c <- t2c71 U8 Some('programs/app/bootram.j':(17,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 89)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 89)] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_putc_33_tac13 <- inline_main_putc_33_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_33_tac13 <- inline_main_putc_33_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_putc_33_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 01e65 Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_putc_33_tac13 <- inline_main_putc_33_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_33_tac13 <- inline_main_putc_33_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_putc_33_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 01e67 Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_putc_33_tac13 None <= call lcd_putc(inline_main_putc_33_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 01e6a AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 01e70 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 7a 1e 00 00 

# 01e76 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 01e7a AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_33_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_33_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_33_function_end_putc)], resolved: None }
# :inline_main_putc_33_function_end_putc None
# inline_main_putc_33_function_end_putc
# td7b5 <- 0n10/0x0au8  Some('programs/app/bootram.j':(18,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 01e80 LoadImm8 [Register(0x40), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('programs/app/bootram.j':(18,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 40 0a 

# inline_main_putc_34_c <- td7b5 U8 Some('programs/app/bootram.j':(18,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# optimized away noop copy Instruction { source: "inline_main_putc_34_c <- td7b5 U8 Some('programs/app/bootram.j':(18,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 10)] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_putc_34_tac13 <- inline_main_putc_34_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_34_tac13 <- inline_main_putc_34_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_putc_34_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 01e83 Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_putc_34_tac13 <- inline_main_putc_34_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_34_tac13 <- inline_main_putc_34_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_putc_34_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 01e85 Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_putc_34_tac13 None <= call lcd_putc(inline_main_putc_34_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 01e88 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 01e8e StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 98 1e 00 00 

# 01e94 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 01e98 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_34_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_34_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_34_function_end_putc)], resolved: None }
# :inline_main_putc_34_function_end_putc None
# inline_main_putc_34_function_end_putc
# p_byte <- 0n0/0x00000000u32  Some('programs/app/bootram.j':(20,5))
# Assign { target: Ident("p_byte"), var_type: Some(Ptr(Number(U8))), value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Number(USIZE, 0) } }
# Cast { old_type: None, new_type: Ptr(Number(U8)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 01e9e LoadImm32 [Register(0x44), Constant32(0x00000000=0)]
#       p_byte <- 0n0/0x00000000u32  Some('programs/app/bootram.j':(20,5))
#       Assign { target: Ident("p_byte"), var_type: Some(Ptr(Number(U8))), value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Number(USIZE, 0) } }
#       Cast { old_type: None, new_type: Ptr(Number(U8)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 44 00 00 00 00 

# :main_while_predicate_0 Some('programs/app/bootram.j':(22,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] }) }, Assign { target: Ident("ch"), var_type: None, value: Index("buf", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 103) }, [Declare { scope: Static, name: "calc", var_type: Struct("RpnCalc") }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 114) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 119) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 110) }, [Assign { target: Ident("addr"), var_type: None, value: Arithmetic(Add, Ident("addr"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("i"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident("addr"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 105) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 66)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 116)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 114)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 97)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 109)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 72)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 117)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 104)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 63)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("ch")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }] }] }
# main_while_predicate_0
# tb36e <- 0n0/0x00u8  Some('programs/app/bootram.j':(22,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] }) }, Assign { target: Ident("ch"), var_type: None, value: Index("buf", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 103) }, [Declare { scope: Static, name: "calc", var_type: Struct("RpnCalc") }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 114) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 119) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 110) }, [Assign { target: Ident("addr"), var_type: None, value: Arithmetic(Add, Ident("addr"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("i"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident("addr"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 105) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 66)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 116)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 114)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 97)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 109)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 72)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 117)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 104)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 63)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("ch")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }] }] }
# Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
# Number(U8, 0)
# 01ea4 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('programs/app/bootram.j':(22,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] }) }, Assign { target: Ident("ch"), var_type: None, value: Index("buf", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 103) }, [Declare { scope: Static, name: "calc", var_type: Struct("RpnCalc") }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 114) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 119) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 110) }, [Assign { target: Ident("addr"), var_type: None, value: Arithmetic(Add, Ident("addr"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("i"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident("addr"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 105) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 66)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 116)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 114)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 97)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 109)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 72)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 117)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 104)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 63)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("ch")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
#       Number(U8, 0)
04 52 00 

# tb36e <- 0n0/0x00u8  Some('programs/app/bootram.j':(22,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] }) }, Assign { target: Ident("ch"), var_type: None, value: Index("buf", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 103) }, [Declare { scope: Static, name: "calc", var_type: Struct("RpnCalc") }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 114) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 119) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 110) }, [Assign { target: Ident("addr"), var_type: None, value: Arithmetic(Add, Ident("addr"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("i"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident("addr"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 105) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 66)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 116)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 114)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 97)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 109)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 72)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 117)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 104)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 63)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("ch")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }] }] }
# Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
# Number(U8, 0)
# 01ea7 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('programs/app/bootram.j':(22,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] }) }, Assign { target: Ident("ch"), var_type: None, value: Index("buf", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 103) }, [Declare { scope: Static, name: "calc", var_type: Struct("RpnCalc") }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 114) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 119) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 110) }, [Assign { target: Ident("addr"), var_type: None, value: Arithmetic(Add, Ident("addr"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("i"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident("addr"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 105) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 66)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 116)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 114)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 97)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 109)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 72)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 117)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 104)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 63)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("ch")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
#       Number(U8, 0)
04 52 00 

# if tb36e == tb36e then 'main_while_body_1' else 'main_while_end_2' Some('programs/app/bootram.j':(22,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] }) }, Assign { target: Ident("ch"), var_type: None, value: Index("buf", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 103) }, [Declare { scope: Static, name: "calc", var_type: Struct("RpnCalc") }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 114) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 119) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 110) }, [Assign { target: Ident("addr"), var_type: None, value: Arithmetic(Add, Ident("addr"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("i"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident("addr"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 105) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 66)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 116)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 114)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 97)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 109)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 72)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 117)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 104)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 63)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("ch")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }] }] }
# Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
# 01eaa Cmp8 [Register(0x52), Register(0x52)]
#       if tb36e == tb36e then 'main_while_body_1' else 'main_while_end_2' Some('programs/app/bootram.j':(22,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] }) }, Assign { target: Ident("ch"), var_type: None, value: Index("buf", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 103) }, [Declare { scope: Static, name: "calc", var_type: Struct("RpnCalc") }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 114) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 119) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 110) }, [Assign { target: Ident("addr"), var_type: None, value: Arithmetic(Add, Ident("addr"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("i"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident("addr"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 105) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 66)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 116)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 114)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 97)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 109)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 72)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 117)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 104)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 63)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("ch")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
15 52 52 

# 01ead JzImm [Label24(main_while_body_1)]
#       if tb36e == tb36e then 'main_while_body_1' else 'main_while_end_2' Some('programs/app/bootram.j':(22,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] }) }, Assign { target: Ident("ch"), var_type: None, value: Index("buf", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 103) }, [Declare { scope: Static, name: "calc", var_type: Struct("RpnCalc") }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 114) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 119) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 110) }, [Assign { target: Ident("addr"), var_type: None, value: Arithmetic(Add, Ident("addr"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("i"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident("addr"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 105) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 66)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 116)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 114)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 97)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 109)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 72)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 117)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 104)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 63)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("ch")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
72 b5 1e 00 

# 01eb1 JmpImm [Label24(main_while_end_2)]
#       if tb36e == tb36e then 'main_while_body_1' else 'main_while_end_2' Some('programs/app/bootram.j':(22,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] }) }, Assign { target: Ident("ch"), var_type: None, value: Index("buf", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 103) }, [Declare { scope: Static, name: "calc", var_type: Struct("RpnCalc") }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 114) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 119) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 110) }, [Assign { target: Ident("addr"), var_type: None, value: Arithmetic(Add, Ident("addr"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("i"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident("addr"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 105) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 66)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 116)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 114)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 97)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 109)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 72)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 117)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 104)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 63)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("ch")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
70 5b 2b 00 

# :main_while_body_1 Some('programs/app/bootram.j':(22,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] }) }, Assign { target: Ident("ch"), var_type: None, value: Index("buf", Number(USIZE, 0)) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 103) }, [Declare { scope: Static, name: "calc", var_type: Struct("RpnCalc") }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 114) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 119) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 110) }, [Assign { target: Ident("addr"), var_type: None, value: Arithmetic(Add, Ident("addr"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("i"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident("addr"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 105) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 66)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 116)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 114)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 97)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 109)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 72)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 117)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 104)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 63)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("ch")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }] }] }
# main_while_body_1
# te825 <- __frame_pointer U32 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] }) }
# Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] })
# AddressOf(Index("buf", Number(U8, 0)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }
# Arithmetic(Add, Ident("__frame_pointer"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })
# Ident("__frame_pointer")
# 01eb5 Copy32 [Register(0x0c), Register(0x64)]
#       te825 <- __frame_pointer U32 Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] }) }
#       Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] })
#       AddressOf(Index("buf", Number(U8, 0)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }
#       Arithmetic(Add, Ident("__frame_pointer"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })
#       Ident("__frame_pointer")
21 0c 64 

# t99f2 <- te825 Add Number(0n0/0x00000000u32) Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] }) }
# Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] })
# AddressOf(Index("buf", Number(U8, 0)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }
# Arithmetic(Add, Ident("__frame_pointer"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })
# 01eb8 Copy32 [Register(0x64), Register(0x44)]
#       t99f2 <- te825 Add Number(0n0/0x00000000u32) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] }) }
#       Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] })
#       AddressOf(Index("buf", Number(U8, 0)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }
#       Arithmetic(Add, Ident("__frame_pointer"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })
21 64 44 

# 01ebb AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000000=0)]
#       t99f2 <- te825 Add Number(0n0/0x00000000u32) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] }) }
#       Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] })
#       AddressOf(Index("buf", Number(U8, 0)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) }) }
#       Arithmetic(Add, Ident("__frame_pointer"), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Number(U8, 0) })
32 44 00 00 00 00 

# t9af9 <- t99f2 U32 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] }) }
# Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] })
# AddressOf(Index("buf", Number(U8, 0)))
# optimized away noop copy Instruction { source: "t9af9 <- t99f2 U32 Some('programs/app/bootram.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }\nCall(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })\nAddressOf(Index(\"buf\", Number(U8, 0)))\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_main_readline_79_buf <- t9af9 U32 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] }) }
# Call(Call { function: "readline", parameters: [AddressOf(Index("buf", Number(U8, 0)))] })
# optimized away noop copy Instruction { source: "inline_main_readline_79_buf <- t9af9 U32 Some('programs/app/bootram.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] }) }\nCall(Call { function: \"readline\", parameters: [AddressOf(Index(\"buf\", Number(U8, 0)))] })\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# :inline_main_readline_79_readline_while_predicate_0 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }] }
# inline_main_readline_79_readline_while_predicate_0
# inline_main_readline_79_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }] }
# Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
# Number(U8, 0)
# 01ec1 LoadImm8 [Register(0x51), Constant8(0x00=0)]
#       inline_main_readline_79_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
#       Number(U8, 0)
04 51 00 

# inline_main_readline_79_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }] }
# Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
# Number(U8, 0)
# 01ec4 LoadImm8 [Register(0x51), Constant8(0x00=0)]
#       inline_main_readline_79_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
#       Number(U8, 0)
04 51 00 

# if inline_main_readline_79_tb36e == inline_main_readline_79_tb36e then 'inline_main_readline_79_readline_while_body_1' else 'inline_main_readline_79_readline_while_end_2' Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }] }
# Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
# 01ec7 Cmp8 [Register(0x51), Register(0x51)]
#       if inline_main_readline_79_tb36e == inline_main_readline_79_tb36e then 'inline_main_readline_79_readline_while_body_1' else 'inline_main_readline_79_readline_while_end_2' Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
15 51 51 

# 01eca JzImm [Label24(inline_main_readline_79_readline_while_body_1)]
#       if inline_main_readline_79_tb36e == inline_main_readline_79_tb36e then 'inline_main_readline_79_readline_while_body_1' else 'inline_main_readline_79_readline_while_end_2' Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
72 d2 1e 00 

# 01ece JmpImm [Label24(inline_main_readline_79_readline_while_end_2)]
#       if inline_main_readline_79_tb36e == inline_main_readline_79_tb36e then 'inline_main_readline_79_readline_while_body_1' else 'inline_main_readline_79_readline_while_end_2' Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
70 1b 20 00 

# :inline_main_readline_79_readline_while_body_1 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }] }
# inline_main_readline_79_readline_while_body_1
# inline_main_readline_79_inline_readline_getchar_78_ch <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/stdio.j':(15,5))
# Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(U8, 0) }
# Number(U8, 0)
# 01ed2 LoadImm8 [Register(0x51), Constant8(0x00=0)]
#       inline_main_readline_79_inline_readline_getchar_78_ch <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/stdio.j':(15,5))
#       Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(U8, 0) }
#       Number(U8, 0)
04 51 00 

# :inline_main_readline_79_inline_readline_getchar_78_getchar_while_predicate_0 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# inline_main_readline_79_inline_readline_getchar_78_getchar_while_predicate_0
# inline_main_readline_79_inline_readline_getchar_78_tdcd9 <- inline_main_readline_79_inline_readline_getchar_78_ch U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_readline_79_inline_readline_getchar_78_tdcd9 <- inline_main_readline_79_inline_readline_getchar_78_ch U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))\nWhile { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_readline_79_inline_readline_getchar_78_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
# Number(U8, 0)
# 01ed5 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_main_readline_79_inline_readline_getchar_78_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
#       Number(U8, 0)
04 52 00 

# if inline_main_readline_79_inline_readline_getchar_78_tdcd9 == inline_main_readline_79_inline_readline_getchar_78_tb36e then 'inline_main_readline_79_inline_readline_getchar_78_getchar_while_body_1' else 'inline_main_readline_79_inline_readline_getchar_78_getchar_while_end_2' Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
# 01ed8 Cmp8 [Register(0x51), Register(0x52)]
#       if inline_main_readline_79_inline_readline_getchar_78_tdcd9 == inline_main_readline_79_inline_readline_getchar_78_tb36e then 'inline_main_readline_79_inline_readline_getchar_78_getchar_while_body_1' else 'inline_main_readline_79_inline_readline_getchar_78_getchar_while_end_2' Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
15 51 52 

# 01edb JzImm [Label24(inline_main_readline_79_inline_readline_getchar_78_getchar_while_body_1)]
#       if inline_main_readline_79_inline_readline_getchar_78_tdcd9 == inline_main_readline_79_inline_readline_getchar_78_tb36e then 'inline_main_readline_79_inline_readline_getchar_78_getchar_while_body_1' else 'inline_main_readline_79_inline_readline_getchar_78_getchar_while_end_2' Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
72 e3 1e 00 

# 01edf JmpImm [Label24(inline_main_readline_79_inline_readline_getchar_78_getchar_while_end_2)]
#       if inline_main_readline_79_inline_readline_getchar_78_tdcd9 == inline_main_readline_79_inline_readline_getchar_78_tb36e then 'inline_main_readline_79_inline_readline_getchar_78_getchar_while_body_1' else 'inline_main_readline_79_inline_readline_getchar_78_getchar_while_end_2' Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
70 e0 1f 00 

# :inline_main_readline_79_inline_readline_getchar_78_getchar_while_body_1 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# inline_main_readline_79_inline_readline_getchar_78_getchar_while_body_1
# Some(inline_main_readline_79_inline_readline_getchar_78_t861f) <= call io_ready_to_read() Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
# Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
# Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))
# Call(Call { function: "io_ready_to_read", parameters: [] })
# 01ee3 IoReadyToRead [Register(0x51)]
#       ReadyToRead
79 51 

# inline_main_readline_79_inline_readline_getchar_78_tf0b5 <- inline_main_readline_79_inline_readline_getchar_78_t861f BitwiseAnd Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
# Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
# Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))
# 01ee5 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_main_readline_79_inline_readline_getchar_78_tf0b5 <- inline_main_readline_79_inline_readline_getchar_78_t861f BitwiseAnd Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
#       Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))
04 00 01 

# 01ee8 And8 [Register(0x51), Register(0x00), Register(0x51)]
#       inline_main_readline_79_inline_readline_getchar_78_tf0b5 <- inline_main_readline_79_inline_readline_getchar_78_t861f BitwiseAnd Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
#       Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))
1b 51 00 51 

# inline_main_readline_79_inline_readline_getchar_78_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
# Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
# Number(U8, 0)
# 01eec LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_main_readline_79_inline_readline_getchar_78_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
#       Number(U8, 0)
04 52 00 

# if inline_main_readline_79_inline_readline_getchar_78_tf0b5 != inline_main_readline_79_inline_readline_getchar_78_tb36e then 'inline_main_readline_79_inline_readline_getchar_78_getchar_if_true_0_4' else 'inline_main_readline_79_inline_readline_getchar_78_getchar_if_else_0_5' Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
# Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
# 01eef Cmp8 [Register(0x51), Register(0x52)]
#       if inline_main_readline_79_inline_readline_getchar_78_tf0b5 != inline_main_readline_79_inline_readline_getchar_78_tb36e then 'inline_main_readline_79_inline_readline_getchar_78_getchar_if_true_0_4' else 'inline_main_readline_79_inline_readline_getchar_78_getchar_if_else_0_5' Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
15 51 52 

# 01ef2 JzImm [Label24(inline_main_readline_79_inline_readline_getchar_78_getchar_if_else_0_5)]
#       if inline_main_readline_79_inline_readline_getchar_78_tf0b5 != inline_main_readline_79_inline_readline_getchar_78_tb36e then 'inline_main_readline_79_inline_readline_getchar_78_getchar_if_true_0_4' else 'inline_main_readline_79_inline_readline_getchar_78_getchar_if_else_0_5' Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
72 45 1f 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_readline_79_inline_readline_getchar_78_tf0b5 != inline_main_readline_79_inline_readline_getchar_78_tb36e then 'inline_main_readline_79_inline_readline_getchar_78_getchar_if_true_0_4' else 'inline_main_readline_79_inline_readline_getchar_78_getchar_if_else_0_5' Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }\nComparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_main_readline_79_inline_readline_getchar_78_getchar_if_true_0_4)], resolved: None }
# :inline_main_readline_79_inline_readline_getchar_78_getchar_if_true_0_4 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
# inline_main_readline_79_inline_readline_getchar_78_getchar_if_true_0_4
# inline_main_readline_79_inline_readline_getchar_78_t0 <- 0n987228/0x000f105cu32  Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# AddressOf(Ident("stdin"))
# 01ef6 LoadImm32 [Register(0x48), Constant32(0x000f105c=987228)]
#       inline_main_readline_79_inline_readline_getchar_78_t0 <- 0n987228/0x000f105cu32  Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       AddressOf(Ident("stdin"))
20 48 5c 10 0f 00 

# inline_main_readline_79_inline_readline_getchar_78_tfff6 <- inline_main_readline_79_inline_readline_getchar_78_t0 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# AddressOf(Ident("stdin"))
# 01efc Copy32 [Register(0x48), Register(0x4c)]
#       inline_main_readline_79_inline_readline_getchar_78_tfff6 <- inline_main_readline_79_inline_readline_getchar_78_t0 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       AddressOf(Ident("stdin"))
21 48 4c 

# inline_main_readline_79_inline_readline_getchar_78_tb816 <- ttyin Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# TtyIn
# 01eff In0 [Register(0x51)]
#       inline_main_readline_79_inline_readline_getchar_78_tb816 <- ttyin Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       TtyIn
60 51 

# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_s <- inline_main_readline_79_inline_readline_getchar_78_tfff6 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# optimized away noop copy Instruction { source: "inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_s <- inline_main_readline_79_inline_readline_getchar_78_tfff6 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_n <- inline_main_readline_79_inline_readline_getchar_78_tb816 U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# optimized away noop copy Instruction { source: "inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_n <- inline_main_readline_79_inline_readline_getchar_78_tb816 U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t565a <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(24,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t565a <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(24,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_values <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t565a U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(24,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 01f01 Copy32 [Register(0x4c), Register(0x54)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_values <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t565a U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(24,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 4c 54 

# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t1d36 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_values U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# optimized away noop copy Instruction { source: "inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t1d36 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_values U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\nCast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }\nIdent(\"values\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t4d4f <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t4d4f <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_tc1ff <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 01f04 Copy32 [Register(0x4c), Register(0x60)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_tc1ff <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 4c 60 

# 01f07 AddImm32IgnoreCarry [Register(0x60), Constant32(0x00000104=260)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_tc1ff <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 60 04 01 00 00 

# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t3ee <- mem[inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_tc1ff] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 01f0d Load8 [Register(0x60), Register(0x5c)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t3ee <- mem[inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_tc1ff] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 60 5c 

# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t5bb7 U32 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t3ee U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# 01f10 LoadImm32 [Register(0x58), Constant32(0x00000000=0)]
#       Zero-pad for inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t5bb7 U32 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t3ee U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
20 58 00 00 00 00 

# 01f16 Copy8 [Register(0x5c), Register(0x58)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t5bb7 U32 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t3ee U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
0b 5c 58 

# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t2187 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t1d36 Add Var(inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t5bb7) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# 01f19 ClearCarry []
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t2187 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t1d36 Add Var(inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t5bb7) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
03 

# 01f1a AddCarry32_1 [Register(0x54), Register(0x58), Register(0x54)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t2187 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t1d36 Add Var(inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t5bb7) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
30 54 58 54 

# 01f1e AddCarry32_2 []
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t2187 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t1d36 Add Var(inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t5bb7) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
31 

# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t531d <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_n U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t531d <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_n U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# mem[inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t2187] <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t531d U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 01f1f Store8 [Register(0x51), Register(0x54)]
#       mem[inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t2187] <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t531d U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 51 54 

# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t4d4f <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t4d4f <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_tc1ff <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 01f22 Copy32 [Register(0x4c), Register(0x60)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_tc1ff <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 4c 60 

# 01f25 AddImm32IgnoreCarry [Register(0x60), Constant32(0x00000104=260)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_tc1ff <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 60 04 01 00 00 

# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t4d4f <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t4d4f <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_tc1ff <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 01f2b Copy32 [Register(0x4c), Register(0x60)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_tc1ff <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 4c 60 

# 01f2e AddImm32IgnoreCarry [Register(0x60), Constant32(0x00000104=260)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_tc1ff <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 60 04 01 00 00 

# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t3ee <- mem[inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_tc1ff] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# 01f34 Load8 [Register(0x60), Register(0x5c)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t3ee <- mem[inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_tc1ff] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
05 60 5c 

# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t6778 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t3ee Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# 01f37 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t6778 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t3ee Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
04 00 01 

# 01f3a Add8NoCarryIn [Register(0x5c), Register(0x00), Register(0x51)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t6778 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t3ee Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
14 5c 00 51 

# mem[inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_tc1ff] <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t6778 U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# 01f3e Store8 [Register(0x51), Register(0x60)]
#       mem[inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_tc1ff] <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_t6778 U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
06 51 60 

# goto inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_function_end_queue_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_function_end_queue_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_function_end_queue_push)], resolved: None }
# :inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_function_end_queue_push None
# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_push_76_function_end_queue_push
# goto inline_main_readline_79_inline_readline_getchar_78_getchar_if_end_3 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# 01f41 JmpImm [Label24(inline_main_readline_79_inline_readline_getchar_78_getchar_if_end_3)]
#       goto inline_main_readline_79_inline_readline_getchar_78_getchar_if_end_3 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
70 5b 1f 00 

# :inline_main_readline_79_inline_readline_getchar_78_getchar_if_else_0_5 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# inline_main_readline_79_inline_readline_getchar_78_getchar_if_else_0_5
# None <= call Keyboard_poll() Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }
# Call(Call { function: "Keyboard_poll", parameters: [] })
# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57}
# Registers to save: []
# 01f45 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:Keyboard_poll))
32 0c fc ff ff ff 

# 01f4b StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:Keyboard_poll))
25 0c 55 1f 00 00 

# 01f51 JmpImm [Label24(:Keyboard_poll)]
#       PseudoCall(Label24(:Keyboard_poll))
70 46 04 00 

# 01f55 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:Keyboard_poll))
32 0c 04 00 00 00 

# :inline_main_readline_79_inline_readline_getchar_78_getchar_if_end_3 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# inline_main_readline_79_inline_readline_getchar_78_getchar_if_end_3
# inline_main_readline_79_inline_readline_getchar_78_t1 <- 0n987228/0x000f105cu32  Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
# AddressOf(Ident("stdin"))
# 01f5b LoadImm32 [Register(0x48), Constant32(0x000f105c=987228)]
#       inline_main_readline_79_inline_readline_getchar_78_t1 <- 0n987228/0x000f105cu32  Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
#       Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
#       AddressOf(Ident("stdin"))
20 48 5c 10 0f 00 

# inline_main_readline_79_inline_readline_getchar_78_tfff6 <- inline_main_readline_79_inline_readline_getchar_78_t1 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
# AddressOf(Ident("stdin"))
# 01f61 Copy32 [Register(0x48), Register(0x4c)]
#       inline_main_readline_79_inline_readline_getchar_78_tfff6 <- inline_main_readline_79_inline_readline_getchar_78_t1 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
#       Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
#       AddressOf(Ident("stdin"))
21 48 4c 

# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_s <- inline_main_readline_79_inline_readline_getchar_78_tfff6 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
# 01f64 Copy32 [Register(0x4c), Register(0x48)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_s <- inline_main_readline_79_inline_readline_getchar_78_tfff6 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
#       Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
21 4c 48 

# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t4d4f <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t4d4f <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\nComparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"first\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb702 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 01f67 Copy32 [Register(0x48), Register(0x58)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb702 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 48 58 

# 01f6a AddImm32IgnoreCarry [Register(0x58), Constant32(0x00000100=256)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb702 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 58 00 01 00 00 

# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb6dd <- mem[inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb702] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# 01f70 Load8 [Register(0x58), Register(0x53)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb6dd <- mem[inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb702] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
05 58 53 

# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t4d4f <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t4d4f <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\nComparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tc1ff <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 01f73 Copy32 [Register(0x48), Register(0x4c)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tc1ff <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 48 4c 

# 01f76 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000104=260)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tc1ff <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 4c 04 01 00 00 

# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t3ee <- mem[inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tc1ff] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 01f7c Load8 [Register(0x4c), Register(0x52)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t3ee <- mem[inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tc1ff] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 4c 52 

# if inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb6dd == inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t3ee then 'inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_queue_pop_if_true_0_1' else 'inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_queue_pop_if_else_0_2' Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# 01f7f Cmp8 [Register(0x53), Register(0x52)]
#       if inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb6dd == inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t3ee then 'inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_queue_pop_if_true_0_1' else 'inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_queue_pop_if_else_0_2' Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
15 53 52 

# 01f82 JzImm [Label24(inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_queue_pop_if_true_0_1)]
#       if inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb6dd == inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t3ee then 'inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_queue_pop_if_true_0_1' else 'inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_queue_pop_if_else_0_2' Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
72 8a 1f 00 

# 01f86 JmpImm [Label24(inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_queue_pop_if_else_0_2)]
#       if inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb6dd == inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t3ee then 'inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_queue_pop_if_true_0_1' else 'inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_queue_pop_if_else_0_2' Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
70 95 1f 00 

# :inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_queue_pop_if_true_0_1 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_queue_pop_if_true_0_1
# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# Number(U8, 0)
# 01f8a LoadImm8 [Register(0x51), Constant8(0x00=0)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(U8, 0)) }
#       Number(U8, 0)
04 51 00 

# inline_main_readline_79_inline_readline_getchar_78_ch <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb36e U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# optimized away noop copy Instruction { source: "inline_main_readline_79_inline_readline_getchar_78_ch <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb36e U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))\nReturn { value: Some(Number(U8, 0)) }\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# goto inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_function_end_queue_pop Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# 01f8d JmpImm [Label24(inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_function_end_queue_pop)]
#       goto inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_function_end_queue_pop Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(U8, 0)) }
70 dc 1f 00 

# goto inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_queue_pop_if_end_0 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# 01f91 JmpImm [Label24(inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_queue_pop_if_end_0)]
#       goto inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_queue_pop_if_end_0 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
70 95 1f 00 

# :inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_queue_pop_if_else_0_2 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_queue_pop_if_else_0_2
# :inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_queue_pop_if_end_0 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_queue_pop_if_end_0
# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t565a <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t565a <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_values <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t565a U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 01f95 Copy32 [Register(0x48), Register(0x4c)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_values <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t565a U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 48 4c 

# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t1d36 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_values U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# optimized away noop copy Instruction { source: "inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t1d36 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_values U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))\nAssign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })\nCast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }\nIdent(\"values\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t4d4f <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t4d4f <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))\nAssign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }\nPtrFieldDeref(\"s\", \"first\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb702 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 01f98 Copy32 [Register(0x48), Register(0x58)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb702 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 48 58 

# 01f9b AddImm32IgnoreCarry [Register(0x58), Constant32(0x00000100=256)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb702 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 58 00 01 00 00 

# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb6dd <- mem[inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb702] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# 01fa1 Load8 [Register(0x58), Register(0x53)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb6dd <- mem[inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb702] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
05 58 53 

# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb469 U32 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb6dd U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# 01fa4 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb469 U32 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb6dd U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
20 54 00 00 00 00 

# 01faa Copy8 [Register(0x53), Register(0x54)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb469 U32 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb6dd U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
0b 53 54 

# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tae11 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t1d36 Add Var(inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb469) Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# 01fad ClearCarry []
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tae11 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t1d36 Add Var(inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb469) Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
03 

# 01fae AddCarry32_1 [Register(0x4c), Register(0x54), Register(0x4c)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tae11 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t1d36 Add Var(inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb469) Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
30 4c 54 4c 

# 01fb2 AddCarry32_2 []
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tae11 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t1d36 Add Var(inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb469) Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
31 

# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_value <- mem[inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tae11] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# 01fb3 Load8 [Register(0x4c), Register(0x52)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_value <- mem[inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tae11] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
05 4c 52 

# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t4d4f <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t4d4f <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb702 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 01fb6 Copy32 [Register(0x48), Register(0x58)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb702 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 48 58 

# 01fb9 AddImm32IgnoreCarry [Register(0x58), Constant32(0x00000100=256)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb702 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 58 00 01 00 00 

# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t4d4f <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t4d4f <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb702 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 01fbf Copy32 [Register(0x48), Register(0x58)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb702 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 48 58 

# 01fc2 AddImm32IgnoreCarry [Register(0x58), Constant32(0x00000100=256)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb702 <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 58 00 01 00 00 

# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb6dd <- mem[inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb702] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# 01fc8 Load8 [Register(0x58), Register(0x53)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb6dd <- mem[inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb702] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
05 58 53 

# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t6fdb <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb6dd Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# 01fcb LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t6fdb <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb6dd Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
04 00 01 

# 01fce Add8NoCarryIn [Register(0x53), Register(0x00), Register(0x51)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t6fdb <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb6dd Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
14 53 00 51 

# mem[inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb702] <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t6fdb U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# 01fd2 Store8 [Register(0x51), Register(0x58)]
#       mem[inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_tb702] <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t6fdb U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
06 51 58 

# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t44ed <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_value U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# Ident("value")
# 01fd5 Copy8 [Register(0x52), Register(0x51)]
#       inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t44ed <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_value U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
#       Ident("value")
0b 52 51 

# inline_main_readline_79_inline_readline_getchar_78_ch <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t44ed U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# optimized away noop copy Instruction { source: "inline_main_readline_79_inline_readline_getchar_78_ch <- inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_t44ed U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(20,5))\nReturn { value: Some(Ident(\"value\")) }\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# goto inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_function_end_queue_pop Some('/home/john/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# 01fd8 JmpImm [Label24(inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_function_end_queue_pop)]
#       goto inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_function_end_queue_pop Some('/home/john/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
70 dc 1f 00 

# :inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_function_end_queue_pop None
# inline_main_readline_79_inline_readline_getchar_78_inline_getchar_queue_pop_74_function_end_queue_pop
# goto inline_main_readline_79_inline_readline_getchar_78_getchar_while_predicate_0 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# 01fdc JmpImm [Label24(inline_main_readline_79_inline_readline_getchar_78_getchar_while_predicate_0)]
#       goto inline_main_readline_79_inline_readline_getchar_78_getchar_while_predicate_0 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
70 d5 1e 00 

# :inline_main_readline_79_inline_readline_getchar_78_getchar_while_end_2 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# inline_main_readline_79_inline_readline_getchar_78_getchar_while_end_2
# inline_main_readline_79_inline_readline_getchar_78_tdcd9 <- inline_main_readline_79_inline_readline_getchar_78_ch U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(27,5))
# Return { value: Some(Ident("ch")) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_readline_79_inline_readline_getchar_78_tdcd9 <- inline_main_readline_79_inline_readline_getchar_78_ch U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(27,5))\nReturn { value: Some(Ident(\"ch\")) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_readline_79_ch <- inline_main_readline_79_inline_readline_getchar_78_tdcd9 U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(27,5))
# Return { value: Some(Ident("ch")) }
# optimized away noop copy Instruction { source: "inline_main_readline_79_ch <- inline_main_readline_79_inline_readline_getchar_78_tdcd9 U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(27,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# goto inline_main_readline_79_inline_readline_getchar_78_function_end_getchar Some('/home/john/lutcomp/programs/lib/stdio.j':(27,5))
# Return { value: Some(Ident("ch")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_readline_79_inline_readline_getchar_78_function_end_getchar Some('/home/john/lutcomp/programs/lib/stdio.j':(27,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: JmpImm, args: [Label24(inline_main_readline_79_inline_readline_getchar_78_function_end_getchar)], resolved: None }
# :inline_main_readline_79_inline_readline_getchar_78_function_end_getchar None
# inline_main_readline_79_inline_readline_getchar_78_function_end_getchar
# inline_main_readline_79_tdcd9 <- inline_main_readline_79_ch U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_readline_79_tdcd9 <- inline_main_readline_79_ch U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_readline_79_t65d5 <- 0n13/0x0du8  Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }
# Number(U8, 13)
# 01fe0 LoadImm8 [Register(0x52), Constant8(0x0d=13)]
#       inline_main_readline_79_t65d5 <- 0n13/0x0du8  Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }
#       Number(U8, 13)
04 52 0d 

# if inline_main_readline_79_tdcd9 == inline_main_readline_79_t65d5 then 'inline_main_readline_79_readline_if_true_0_4' else 'inline_main_readline_79_readline_if_else_0_5' Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }
# 01fe3 Cmp8 [Register(0x51), Register(0x52)]
#       if inline_main_readline_79_tdcd9 == inline_main_readline_79_t65d5 then 'inline_main_readline_79_readline_if_true_0_4' else 'inline_main_readline_79_readline_if_else_0_5' Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }
15 51 52 

# 01fe6 JzImm [Label24(inline_main_readline_79_readline_if_true_0_4)]
#       if inline_main_readline_79_tdcd9 == inline_main_readline_79_t65d5 then 'inline_main_readline_79_readline_if_true_0_4' else 'inline_main_readline_79_readline_if_else_0_5' Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }
72 ee 1f 00 

# 01fea JmpImm [Label24(inline_main_readline_79_readline_if_else_0_5)]
#       if inline_main_readline_79_tdcd9 == inline_main_readline_79_t65d5 then 'inline_main_readline_79_readline_if_true_0_4' else 'inline_main_readline_79_readline_if_else_0_5' Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }
70 f2 1f 00 

# :inline_main_readline_79_readline_if_true_0_4 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }
# inline_main_readline_79_readline_if_true_0_4
# goto inline_main_readline_79_readline_if_end_3 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }
# 01fee JmpImm [Label24(inline_main_readline_79_readline_if_end_3)]
#       goto inline_main_readline_79_readline_if_end_3 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }
70 17 20 00 

# :inline_main_readline_79_readline_if_else_0_5 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }
# inline_main_readline_79_readline_if_else_0_5
# inline_main_readline_79_tdcd9 <- inline_main_readline_79_ch U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_readline_79_tdcd9 <- inline_main_readline_79_ch U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }, Assign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_readline_79_td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# Number(U8, 10)
# 01ff2 LoadImm8 [Register(0x52), Constant8(0x0a=10)]
#       inline_main_readline_79_td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
#       Number(U8, 10)
04 52 0a 

# if inline_main_readline_79_tdcd9 == inline_main_readline_79_td7b5 then 'inline_main_readline_79_readline_if_true_1_6' else 'inline_main_readline_79_readline_if_else_1_7' Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# 01ff5 Cmp8 [Register(0x51), Register(0x52)]
#       if inline_main_readline_79_tdcd9 == inline_main_readline_79_td7b5 then 'inline_main_readline_79_readline_if_true_1_6' else 'inline_main_readline_79_readline_if_else_1_7' Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
15 51 52 

# 01ff8 JzImm [Label24(inline_main_readline_79_readline_if_true_1_6)]
#       if inline_main_readline_79_tdcd9 == inline_main_readline_79_td7b5 then 'inline_main_readline_79_readline_if_true_1_6' else 'inline_main_readline_79_readline_if_else_1_7' Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
72 00 20 00 

# 01ffc JmpImm [Label24(inline_main_readline_79_readline_if_else_1_7)]
#       if inline_main_readline_79_tdcd9 == inline_main_readline_79_td7b5 then 'inline_main_readline_79_readline_if_true_1_6' else 'inline_main_readline_79_readline_if_else_1_7' Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
70 0e 20 00 

# :inline_main_readline_79_readline_if_true_1_6 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 13) }, []), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }, Return { value: None }])], else_block: [Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }, Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }] }
# inline_main_readline_79_readline_if_true_1_6
# inline_main_readline_79_t1d08 <- inline_main_readline_79_buf U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }
# Ident("buf")
# optimized away noop copy Instruction { source: "inline_main_readline_79_t1d08 <- inline_main_readline_79_buf U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))\nAssign { target: Deref(Ident(\"buf\")), var_type: None, value: Number(U8, 0) }\nIdent(\"buf\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_main_readline_79_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 02000 LoadImm8 [Register(0x51), Constant8(0x00=0)]
#       inline_main_readline_79_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
#       Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 51 00 

# mem[inline_main_readline_79_t1d08] <- inline_main_readline_79_tb36e U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }
# 02003 Store8 [Register(0x51), Register(0x44)]
#       mem[inline_main_readline_79_t1d08] <- inline_main_readline_79_tb36e U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
#       Assign { target: Deref(Ident("buf")), var_type: None, value: Number(U8, 0) }
06 51 44 

# goto inline_main_readline_79_function_end_readline Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# Return { value: None }
# 02006 JmpImm [Label24(inline_main_readline_79_function_end_readline)]
#       goto inline_main_readline_79_function_end_readline Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
#       Return { value: None }
70 1f 20 00 

# goto inline_main_readline_79_readline_if_end_3 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# 0200a JmpImm [Label24(inline_main_readline_79_readline_if_end_3)]
#       goto inline_main_readline_79_readline_if_end_3 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
70 17 20 00 

# :inline_main_readline_79_readline_if_else_1_7 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_readline_79_readline_if_else_1_7
# inline_main_readline_79_t1d08 <- inline_main_readline_79_buf U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }
# Ident("buf")
# optimized away noop copy Instruction { source: "inline_main_readline_79_t1d08 <- inline_main_readline_79_buf U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))\nAssign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }\nIdent(\"buf\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_main_readline_79_tdcd9 <- inline_main_readline_79_ch U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_readline_79_tdcd9 <- inline_main_readline_79_ch U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))\nAssign { target: Deref(Ident(\"buf\")), var_type: None, value: Ident(\"ch\") }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# mem[inline_main_readline_79_t1d08] <- inline_main_readline_79_tdcd9 U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }
# 0200e Store8 [Register(0x51), Register(0x44)]
#       mem[inline_main_readline_79_t1d08] <- inline_main_readline_79_tdcd9 U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
#       Assign { target: Deref(Ident("buf")), var_type: None, value: Ident("ch") }
06 51 44 

# inline_main_readline_79_t2b28 <- inline_main_readline_79_buf U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }
# AddressOf(Index("buf", Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("buf") }, Number(USIZE, 1)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("buf") }, Number(USIZE, 1))
# Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("buf") }
# Ident("buf")
# optimized away noop copy Instruction { source: "inline_main_readline_79_t2b28 <- inline_main_readline_79_buf U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))\nAssign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }\nAddressOf(Index(\"buf\", Number(USIZE, 1)))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }, Number(USIZE, 1))\nCast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"buf\") }\nIdent(\"buf\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_main_readline_79_td4a0 <- inline_main_readline_79_t2b28 Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }
# AddressOf(Index("buf", Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("buf") }, Number(USIZE, 1)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("buf") }, Number(USIZE, 1))
# 02011 AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000001=1)]
#       inline_main_readline_79_td4a0 <- inline_main_readline_79_t2b28 Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
#       Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }
#       AddressOf(Index("buf", Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("buf") }, Number(USIZE, 1)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("buf") }, Number(USIZE, 1))
32 44 01 00 00 00 

# inline_main_readline_79_buf <- inline_main_readline_79_td4a0 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# Assign { target: Ident("buf"), var_type: None, value: AddressOf(Index("buf", Number(USIZE, 1))) }
# AddressOf(Index("buf", Number(USIZE, 1)))
# optimized away noop copy Instruction { source: "inline_main_readline_79_buf <- inline_main_readline_79_td4a0 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))\nAssign { target: Ident(\"buf\"), var_type: None, value: AddressOf(Index(\"buf\", Number(USIZE, 1))) }\nAddressOf(Index(\"buf\", Number(USIZE, 1)))\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# :inline_main_readline_79_readline_if_end_3 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_readline_79_readline_if_end_3
# goto inline_main_readline_79_readline_while_predicate_0 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# 02017 JmpImm [Label24(inline_main_readline_79_readline_while_predicate_0)]
#       goto inline_main_readline_79_readline_while_predicate_0 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
70 c1 1e 00 

# :inline_main_readline_79_readline_while_end_2 Some('/home/john/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_readline_79_readline_while_end_2
# goto inline_main_readline_79_function_end_readline None
# Return { value: None }
# 0201b JmpImm [Label24(inline_main_readline_79_function_end_readline)]
#       goto inline_main_readline_79_function_end_readline None
#       Return { value: None }
70 1f 20 00 

# :inline_main_readline_79_function_end_readline None
# inline_main_readline_79_function_end_readline
# te825 <- __frame_pointer U32 Some('programs/app/bootram.j':(22,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("buf", Number(USIZE, 0)) }
# Index("buf", Number(USIZE, 0))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
# Ident("__frame_pointer")
# 0201f Copy32 [Register(0x0c), Register(0x64)]
#       te825 <- __frame_pointer U32 Some('programs/app/bootram.j':(22,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("buf", Number(USIZE, 0)) }
#       Index("buf", Number(USIZE, 0))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
#       Ident("__frame_pointer")
21 0c 64 

# t1709 <- te825 Add Number(0n0/0x00000000u32) Some('programs/app/bootram.j':(22,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("buf", Number(USIZE, 0)) }
# Index("buf", Number(USIZE, 0))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
# 02022 Copy32 [Register(0x64), Register(0x44)]
#       t1709 <- te825 Add Number(0n0/0x00000000u32) Some('programs/app/bootram.j':(22,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("buf", Number(USIZE, 0)) }
#       Index("buf", Number(USIZE, 0))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
21 64 44 

# 02025 AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000000=0)]
#       t1709 <- te825 Add Number(0n0/0x00000000u32) Some('programs/app/bootram.j':(22,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("buf", Number(USIZE, 0)) }
#       Index("buf", Number(USIZE, 0))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
32 44 00 00 00 00 

# ch <- mem[t1709] U8 Some('programs/app/bootram.j':(22,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("buf", Number(USIZE, 0)) }
# Index("buf", Number(USIZE, 0))
# 0202b Load8 [Register(0x44), Register(0x40)]
#       ch <- mem[t1709] U8 Some('programs/app/bootram.j':(22,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("buf", Number(USIZE, 0)) }
#       Index("buf", Number(USIZE, 0))
05 44 40 

# tdcd9 <- ch U8 Some('programs/app/bootram.j':(22,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 103) }, [Declare { scope: Static, name: "calc", var_type: Struct("RpnCalc") }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 114) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 119) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 110) }, [Assign { target: Ident("addr"), var_type: None, value: Arithmetic(Add, Ident("addr"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("i"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident("addr"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 105) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 66)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 116)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 114)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 97)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 109)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 72)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 117)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 104)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 63)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("ch")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 103) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/app/bootram.j':(22,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 103) }, [Declare { scope: Static, name: \"calc\", var_type: Struct(\"RpnCalc\") }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 80)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 78)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }, VoidExpression { expression: Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }, [Assign { target: Ident(\"p_byte\"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident(\"addr\") } }, Assign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }, [Assign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Index(\"addr\", Number(USIZE, 0))] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"i\"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident(\"addr\"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 66)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 116)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 114)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 97)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 109)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 72)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 117)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 104)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 63)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"ch\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 103) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# tab15 <- 0n103/0x67u8  Some('programs/app/bootram.j':(22,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 103) }, [Declare { scope: Static, name: "calc", var_type: Struct("RpnCalc") }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 114) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 119) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 110) }, [Assign { target: Ident("addr"), var_type: None, value: Arithmetic(Add, Ident("addr"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("i"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident("addr"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 105) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 66)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 116)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 114)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 97)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 109)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 72)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 117)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 104)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 63)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("ch")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 103) }
# Number(U8, 103)
# 0202e LoadImm8 [Register(0x51), Constant8(0x67=103)]
#       tab15 <- 0n103/0x67u8  Some('programs/app/bootram.j':(22,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 103) }, [Declare { scope: Static, name: "calc", var_type: Struct("RpnCalc") }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 114) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 119) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 110) }, [Assign { target: Ident("addr"), var_type: None, value: Arithmetic(Add, Ident("addr"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("i"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident("addr"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 105) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 66)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 116)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 114)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 97)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 109)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 72)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 117)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 104)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 63)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("ch")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 103) }
#       Number(U8, 103)
04 51 67 

# if tdcd9 == tab15 then 'main_if_true_0_4' else 'main_if_else_0_5' Some('programs/app/bootram.j':(22,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 103) }, [Declare { scope: Static, name: "calc", var_type: Struct("RpnCalc") }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 114) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 119) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 110) }, [Assign { target: Ident("addr"), var_type: None, value: Arithmetic(Add, Ident("addr"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("i"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident("addr"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 105) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 66)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 116)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 114)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 97)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 109)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 72)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 117)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 104)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 63)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("ch")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 103) }
# 02031 Cmp8 [Register(0x40), Register(0x51)]
#       if tdcd9 == tab15 then 'main_if_true_0_4' else 'main_if_else_0_5' Some('programs/app/bootram.j':(22,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 103) }, [Declare { scope: Static, name: "calc", var_type: Struct("RpnCalc") }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 114) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 119) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 110) }, [Assign { target: Ident("addr"), var_type: None, value: Arithmetic(Add, Ident("addr"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("i"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident("addr"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 105) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 66)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 116)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 114)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 97)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 109)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 72)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 117)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 104)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 63)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("ch")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 103) }
15 40 51 

# 02034 JzImm [Label24(main_if_true_0_4)]
#       if tdcd9 == tab15 then 'main_if_true_0_4' else 'main_if_else_0_5' Some('programs/app/bootram.j':(22,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 103) }, [Declare { scope: Static, name: "calc", var_type: Struct("RpnCalc") }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 114) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 119) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 110) }, [Assign { target: Ident("addr"), var_type: None, value: Arithmetic(Add, Ident("addr"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("i"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident("addr"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 105) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 66)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 116)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 114)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 97)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 109)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 72)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 117)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 104)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 63)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("ch")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 103) }
72 3c 20 00 

# 02038 JmpImm [Label24(main_if_else_0_5)]
#       if tdcd9 == tab15 then 'main_if_true_0_4' else 'main_if_else_0_5' Some('programs/app/bootram.j':(22,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 103) }, [Declare { scope: Static, name: "calc", var_type: Struct("RpnCalc") }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 114) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 119) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 110) }, [Assign { target: Ident("addr"), var_type: None, value: Arithmetic(Add, Ident("addr"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("i"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident("addr"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 105) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 66)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 116)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 114)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 97)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 109)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 72)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 117)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 104)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 63)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("ch")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 103) }
70 95 21 00 

# :main_if_true_0_4 Some('programs/app/bootram.j':(22,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 103) }, [Declare { scope: Static, name: "calc", var_type: Struct("RpnCalc") }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }, VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 114) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 119) }, [Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }, Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 110) }, [Assign { target: Ident("addr"), var_type: None, value: Arithmetic(Add, Ident("addr"), Number(U8, 1)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 97) }, [VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] }) }, VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("i"), var_type: None, value: Number(USIZE, 1) }, Assign { target: Ident("addr"), var_type: None, value: Number(USIZE, 0) }, While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 105) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 66)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 116)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 114)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 97)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 109)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 72)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 117)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 104)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 63)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("ch")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }] }
# main_if_true_0_4
# t9c38 <- 0n82/0x52u8  Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 82)] })
# Number(U8, 82)
# 0203c LoadImm8 [Register(0x40), Constant8(0x52=82)]
#       t9c38 <- 0n82/0x52u8  Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 82)] })
#       Number(U8, 82)
04 40 52 

# inline_main_putc_35_c <- t9c38 U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 82)] })
# optimized away noop copy Instruction { source: "inline_main_putc_35_c <- t9c38 U8 Some('programs/app/bootram.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 82)] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_putc_35_tac13 <- inline_main_putc_35_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_35_tac13 <- inline_main_putc_35_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_putc_35_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 0203f Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_putc_35_tac13 <- inline_main_putc_35_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_35_tac13 <- inline_main_putc_35_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_putc_35_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 02041 Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_putc_35_tac13 None <= call lcd_putc(inline_main_putc_35_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02044 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 0204a StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 54 20 00 00 

# 02050 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02054 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_35_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_35_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_35_function_end_putc)], resolved: None }
# :inline_main_putc_35_function_end_putc None
# inline_main_putc_35_function_end_putc
# t8fe0 <- 0n80/0x50u8  Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 80)] })
# Number(U8, 80)
# 0205a LoadImm8 [Register(0x40), Constant8(0x50=80)]
#       t8fe0 <- 0n80/0x50u8  Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 80)] })
#       Number(U8, 80)
04 40 50 

# inline_main_putc_36_c <- t8fe0 U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 80)] })
# optimized away noop copy Instruction { source: "inline_main_putc_36_c <- t8fe0 U8 Some('programs/app/bootram.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 80)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 80)] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_putc_36_tac13 <- inline_main_putc_36_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_36_tac13 <- inline_main_putc_36_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_putc_36_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 0205d Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_putc_36_tac13 <- inline_main_putc_36_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_36_tac13 <- inline_main_putc_36_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_putc_36_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 0205f Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_putc_36_tac13 None <= call lcd_putc(inline_main_putc_36_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02062 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02068 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 72 20 00 00 

# 0206e JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02072 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_36_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_36_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_36_function_end_putc)], resolved: None }
# :inline_main_putc_36_function_end_putc None
# inline_main_putc_36_function_end_putc
# te6fd <- 0n78/0x4eu8  Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 78)] })
# Number(U8, 78)
# 02078 LoadImm8 [Register(0x40), Constant8(0x4e=78)]
#       te6fd <- 0n78/0x4eu8  Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 78)] })
#       Number(U8, 78)
04 40 4e 

# inline_main_putc_37_c <- te6fd U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 78)] })
# optimized away noop copy Instruction { source: "inline_main_putc_37_c <- te6fd U8 Some('programs/app/bootram.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 78)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 78)] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_putc_37_tac13 <- inline_main_putc_37_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_37_tac13 <- inline_main_putc_37_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_putc_37_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 0207b Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_putc_37_tac13 <- inline_main_putc_37_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_37_tac13 <- inline_main_putc_37_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_putc_37_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 0207d Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_putc_37_tac13 None <= call lcd_putc(inline_main_putc_37_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02080 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02086 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 90 20 00 00 

# 0208c JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02090 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_37_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_37_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_37_function_end_putc)], resolved: None }
# :inline_main_putc_37_function_end_putc None
# inline_main_putc_37_function_end_putc
# td7b5 <- 0n10/0x0au8  Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 02096 LoadImm8 [Register(0x40), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 40 0a 

# inline_main_putc_38_c <- td7b5 U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# optimized away noop copy Instruction { source: "inline_main_putc_38_c <- td7b5 U8 Some('programs/app/bootram.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 10)] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_putc_38_tac13 <- inline_main_putc_38_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_38_tac13 <- inline_main_putc_38_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_putc_38_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02099 Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_putc_38_tac13 <- inline_main_putc_38_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_38_tac13 <- inline_main_putc_38_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_putc_38_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 0209b Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_putc_38_tac13 None <= call lcd_putc(inline_main_putc_38_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 0209e AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 020a4 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c ae 20 00 00 

# 020aa JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 020ae AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_38_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_38_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_38_function_end_putc)], resolved: None }
# :inline_main_putc_38_function_end_putc None
# inline_main_putc_38_function_end_putc
# t1 <- 0n987500/0x000f116cu32  Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }
# Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })
# AddressOf(Ident("calc"))
# 020b4 LoadImm32 [Register(0x44), Constant32(0x000f116c=987500)]
#       t1 <- 0n987500/0x000f116cu32  Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })
#       AddressOf(Ident("calc"))
20 44 6c 11 0f 00 

# tca8 <- t1 U32 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }
# Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })
# AddressOf(Ident("calc"))
# optimized away noop copy Instruction { source: "tca8 <- t1 U32 Some('programs/app/bootram.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }\nCall(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })\nAddressOf(Ident(\"calc\"))\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_main_RpnCalc_init_90_c <- tca8 U32 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }
# Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_90_c <- tca8 U32 Some('programs/app/bootram.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }\nCall(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_main_RpnCalc_init_90_tbc15 <- inline_main_RpnCalc_init_90_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(14,5))
# Assign { target: Ident("s"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
# AddressOf(PtrFieldDeref("c", "stack"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_90_tbc15 <- inline_main_RpnCalc_init_90_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(14,5))\nAssign { target: Ident(\"s\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }\nAddressOf(PtrFieldDeref(\"c\", \"stack\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_main_RpnCalc_init_90_s <- inline_main_RpnCalc_init_90_tbc15 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(14,5))
# Assign { target: Ident("s"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
# AddressOf(PtrFieldDeref("c", "stack"))
# 020ba Copy32 [Register(0x44), Register(0x48)]
#       inline_main_RpnCalc_init_90_s <- inline_main_RpnCalc_init_90_tbc15 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(14,5))
#       Assign { target: Ident("s"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
#       AddressOf(PtrFieldDeref("c", "stack"))
21 44 48 

# inline_main_RpnCalc_init_90_tb2e9 <- inline_main_RpnCalc_init_90_s U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(15,5))
# VoidExpression { expression: Call(Call { function: "stack_init", parameters: [Ident("s")] }) }
# Call(Call { function: "stack_init", parameters: [Ident("s")] })
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_90_tb2e9 <- inline_main_RpnCalc_init_90_s U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(15,5))\nVoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }\nCall(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_s <- inline_main_RpnCalc_init_90_tb2e9 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(15,5))
# VoidExpression { expression: Call(Call { function: "stack_init", parameters: [Ident("s")] }) }
# Call(Call { function: "stack_init", parameters: [Ident("s")] })
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_s <- inline_main_RpnCalc_init_90_tb2e9 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(15,5))\nVoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }\nCall(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_t4bb9 <- inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_t4bb9 <- inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_tc957 <- inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 020bd Copy32 [Register(0x48), Register(0x4c)]
#       inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_tc957 <- inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 48 4c 

# 020c0 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_tc957 <- inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 

# inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 020c6 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 48 00 00 00 00 

# mem[inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_tc957] <- inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_t60ec U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# 020cc Store32_1 [Register(0x48), Register(0x4c)]
#       mem[inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_tc957] <- inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_t60ec U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
23 48 4c 

# 020cf Store32_2 []
#       mem[inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_tc957] <- inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_t60ec U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
24 

# goto inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_function_end_stack_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_function_end_stack_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_function_end_stack_init)], resolved: None }
# :inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_function_end_stack_init None
# inline_main_RpnCalc_init_90_inline_RpnCalc_init_stack_init_88_function_end_stack_init
# inline_main_RpnCalc_init_90_tb1ed <- inline_main_RpnCalc_init_90_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_90_tb1ed <- inline_main_RpnCalc_init_90_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_main_RpnCalc_init_90_t6e8e <- inline_main_RpnCalc_init_90_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 020d0 Copy32 [Register(0x44), Register(0x48)]
#       inline_main_RpnCalc_init_90_t6e8e <- inline_main_RpnCalc_init_90_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 44 48 

# 020d3 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       inline_main_RpnCalc_init_90_t6e8e <- inline_main_RpnCalc_init_90_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 48 44 00 00 00 

# inline_main_RpnCalc_init_90_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 020d9 LoadImm32 [Register(0x44), Constant32(0x00000000=0)]
#       inline_main_RpnCalc_init_90_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 44 00 00 00 00 

# mem[inline_main_RpnCalc_init_90_t6e8e] <- inline_main_RpnCalc_init_90_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# 020df Store32_1 [Register(0x44), Register(0x48)]
#       mem[inline_main_RpnCalc_init_90_t6e8e] <- inline_main_RpnCalc_init_90_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
23 44 48 

# 020e2 Store32_2 []
#       mem[inline_main_RpnCalc_init_90_t6e8e] <- inline_main_RpnCalc_init_90_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
24 

# goto inline_main_RpnCalc_init_90_function_end_RpnCalc_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_RpnCalc_init_90_function_end_RpnCalc_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_RpnCalc_init_90_function_end_RpnCalc_init)], resolved: None }
# :inline_main_RpnCalc_init_90_function_end_RpnCalc_init None
# inline_main_RpnCalc_init_90_function_end_RpnCalc_init
# t2 <- 0n987500/0x000f116cu32  Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
# Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
# AddressOf(Ident("calc"))
# 020e3 LoadImm32 [Register(0x44), Constant32(0x000f116c=987500)]
#       t2 <- 0n987500/0x000f116cu32  Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
#       AddressOf(Ident("calc"))
20 44 6c 11 0f 00 

# tca8 <- t2 U32 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
# Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
# AddressOf(Ident("calc"))
# optimized away noop copy Instruction { source: "tca8 <- t2 U32 Some('programs/app/bootram.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] }) }\nCall(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })\nAddressOf(Ident(\"calc\"))\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
# Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
# 020e9 Copy32 [Register(0x44), Register(0x00)]
#       Arg0[calc]=tca8 Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
21 44 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 104]
# 020ec Push8 [Register(0x68)]
#       Saving reg0x68 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 68 

# 020ee Push8 [Register(0x65)]
#       Saving reg0x65 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 65 

# 020f0 Push8 [Register(0x64)]
#       Saving reg0x64 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 64 

# 020f2 Push8 [Register(0x63)]
#       Saving reg0x63 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 63 

# 020f4 Push8 [Register(0x62)]
#       Saving reg0x62 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 62 

# 020f6 Push8 [Register(0x61)]
#       Saving reg0x61 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 61 

# 020f8 Push8 [Register(0x60)]
#       Saving reg0x60 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 60 

# 020fa Push8 [Register(0x5c)]
#       Saving reg0x5c before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 5c 

# 020fc Push8 [Register(0x5b)]
#       Saving reg0x5b before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 5b 

# 020fe Push8 [Register(0x5a)]
#       Saving reg0x5a before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 5a 

# 02100 Push8 [Register(0x59)]
#       Saving reg0x59 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 59 

# 02102 Push8 [Register(0x58)]
#       Saving reg0x58 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 58 

# 02104 Push8 [Register(0x57)]
#       Saving reg0x57 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 57 

# 02106 Push8 [Register(0x56)]
#       Saving reg0x56 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 56 

# 02108 Push8 [Register(0x55)]
#       Saving reg0x55 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 55 

# 0210a Push8 [Register(0x54)]
#       Saving reg0x54 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 54 

# 0210c Push8 [Register(0x53)]
#       Saving reg0x53 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 53 

# 0210e Push8 [Register(0x52)]
#       Saving reg0x52 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 52 

# 02110 Push8 [Register(0x51)]
#       Saving reg0x51 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 51 

# 02112 Push8 [Register(0x50)]
#       Saving reg0x50 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 50 

# 02114 Push8 [Register(0x4f)]
#       Saving reg0x4f before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 4f 

# 02116 Push8 [Register(0x4e)]
#       Saving reg0x4e before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 4e 

# 02118 Push8 [Register(0x4d)]
#       Saving reg0x4d before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 4d 

# 0211a Push8 [Register(0x4c)]
#       Saving reg0x4c before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 4c 

# 0211c Push8 [Register(0x49)]
#       Saving reg0x49 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 49 

# 0211e Push8 [Register(0x48)]
#       Saving reg0x48 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 48 

# 02120 Push8 [Register(0x47)]
#       Saving reg0x47 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 47 

# 02122 Push8 [Register(0x46)]
#       Saving reg0x46 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 46 

# 02124 Push8 [Register(0x45)]
#       Saving reg0x45 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 45 

# 02126 Push8 [Register(0x44)]
#       Saving reg0x44 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 44 

# 02128 Push8 [Register(0x40)]
#       Saving reg0x40 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 40 

# 0212a Push8 [Register(0x3f)]
#       Saving reg0x3f before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 3f 

# 0212c Push8 [Register(0x3e)]
#       Saving reg0x3e before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 3e 

# 0212e Push8 [Register(0x3d)]
#       Saving reg0x3d before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 3d 

# 02130 Push8 [Register(0x3c)]
#       Saving reg0x3c before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 3c 

# 02132 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:RpnCalc_run))
32 0c fc ff ff ff 

# 02138 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:RpnCalc_run))
25 0c 42 21 00 00 

# 0213e JmpImm [Label24(:RpnCalc_run)]
#       PseudoCall(Label24(:RpnCalc_run))
70 43 12 00 

# 02142 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:RpnCalc_run))
32 0c 04 00 00 00 

# 02148 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 3c 

# 0214a Pop8 [Register(0x3d)]
#       Restoring reg0x3d after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 3d 

# 0214c Pop8 [Register(0x3e)]
#       Restoring reg0x3e after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 3e 

# 0214e Pop8 [Register(0x3f)]
#       Restoring reg0x3f after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 3f 

# 02150 Pop8 [Register(0x40)]
#       Restoring reg0x40 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 40 

# 02152 Pop8 [Register(0x44)]
#       Restoring reg0x44 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 44 

# 02154 Pop8 [Register(0x45)]
#       Restoring reg0x45 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 45 

# 02156 Pop8 [Register(0x46)]
#       Restoring reg0x46 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 46 

# 02158 Pop8 [Register(0x47)]
#       Restoring reg0x47 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 47 

# 0215a Pop8 [Register(0x48)]
#       Restoring reg0x48 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 48 

# 0215c Pop8 [Register(0x49)]
#       Restoring reg0x49 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 49 

# 0215e Pop8 [Register(0x4c)]
#       Restoring reg0x4c after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 4c 

# 02160 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 4d 

# 02162 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 4e 

# 02164 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 4f 

# 02166 Pop8 [Register(0x50)]
#       Restoring reg0x50 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 50 

# 02168 Pop8 [Register(0x51)]
#       Restoring reg0x51 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 51 

# 0216a Pop8 [Register(0x52)]
#       Restoring reg0x52 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 52 

# 0216c Pop8 [Register(0x53)]
#       Restoring reg0x53 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 53 

# 0216e Pop8 [Register(0x54)]
#       Restoring reg0x54 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 54 

# 02170 Pop8 [Register(0x55)]
#       Restoring reg0x55 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 55 

# 02172 Pop8 [Register(0x56)]
#       Restoring reg0x56 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 56 

# 02174 Pop8 [Register(0x57)]
#       Restoring reg0x57 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 57 

# 02176 Pop8 [Register(0x58)]
#       Restoring reg0x58 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 58 

# 02178 Pop8 [Register(0x59)]
#       Restoring reg0x59 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 59 

# 0217a Pop8 [Register(0x5a)]
#       Restoring reg0x5a after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 5a 

# 0217c Pop8 [Register(0x5b)]
#       Restoring reg0x5b after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 5b 

# 0217e Pop8 [Register(0x5c)]
#       Restoring reg0x5c after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 5c 

# 02180 Pop8 [Register(0x60)]
#       Restoring reg0x60 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 60 

# 02182 Pop8 [Register(0x61)]
#       Restoring reg0x61 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 61 

# 02184 Pop8 [Register(0x62)]
#       Restoring reg0x62 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 62 

# 02186 Pop8 [Register(0x63)]
#       Restoring reg0x63 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 63 

# 02188 Pop8 [Register(0x64)]
#       Restoring reg0x64 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 64 

# 0218a Pop8 [Register(0x65)]
#       Restoring reg0x65 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 65 

# 0218c Pop8 [Register(0x68)]
#       Restoring reg0x68 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 68 

# 0218e Copy8 [Register(0x00), Register(0x40)]
#       Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0b 00 40 

# goto main_if_end_3 Some('programs/app/bootram.j':(22,5))
# 02191 JmpImm [Label24(main_if_end_3)]
#       goto main_if_end_3 Some('programs/app/bootram.j':(22,5))
70 57 2b 00 

# :main_if_else_0_5 Some('programs/app/bootram.j':(22,5))
# main_if_else_0_5
# tdcd9 <- ch U8 Some('programs/app/bootram.j':(22,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 114) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/app/bootram.j':(22,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 114) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# tc076 <- 0n114/0x72u8  Some('programs/app/bootram.j':(22,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 114) }
# Number(U8, 114)
# 02195 LoadImm8 [Register(0x51), Constant8(0x72=114)]
#       tc076 <- 0n114/0x72u8  Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 114) }
#       Number(U8, 114)
04 51 72 

# if tdcd9 == tc076 then 'main_if_true_1_6' else 'main_if_else_1_7' Some('programs/app/bootram.j':(22,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 114) }
# 02198 Cmp8 [Register(0x40), Register(0x51)]
#       if tdcd9 == tc076 then 'main_if_true_1_6' else 'main_if_else_1_7' Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 114) }
15 40 51 

# 0219b JzImm [Label24(main_if_true_1_6)]
#       if tdcd9 == tc076 then 'main_if_true_1_6' else 'main_if_else_1_7' Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 114) }
72 a3 21 00 

# 0219f JmpImm [Label24(main_if_else_1_7)]
#       if tdcd9 == tc076 then 'main_if_true_1_6' else 'main_if_else_1_7' Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 114) }
70 d5 22 00 

# :main_if_true_1_6 Some('programs/app/bootram.j':(22,5))
# main_if_true_1_6
# p_byte <- addr U32 Some('programs/app/bootram.j':(22,5))
# Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }
# Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") }
# Ident("addr")
# 021a3 Copy32 [Register(0x3c), Register(0x44)]
#       p_byte <- addr U32 Some('programs/app/bootram.j':(22,5))
#       Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }
#       Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") }
#       Ident("addr")
21 3c 44 

# tbf00 <- p_byte U32 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] }) }
# Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] })
# Deref(Ident("p_byte"))
# Ident("p_byte")
# 021a6 Copy32 [Register(0x44), Register(0x54)]
#       tbf00 <- p_byte U32 Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] }) }
#       Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] })
#       Deref(Ident("p_byte"))
#       Ident("p_byte")
21 44 54 

# t5467 <- mem[tbf00] U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] }) }
# Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] })
# Deref(Ident("p_byte"))
# 021a9 Load8 [Register(0x54), Register(0x40)]
#       t5467 <- mem[tbf00] U8 Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] }) }
#       Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] })
#       Deref(Ident("p_byte"))
05 54 40 

# inline_main_printHex_60_a <- t5467 U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] }) }
# Call(Call { function: "printHex", parameters: [Deref(Ident("p_byte"))] })
# optimized away noop copy Instruction { source: "inline_main_printHex_60_a <- t5467 U8 Some('programs/app/bootram.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] }) }\nCall(Call { function: \"printHex\", parameters: [Deref(Ident(\"p_byte\"))] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_60_t8792 <- inline_main_printHex_60_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
# Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
# Ident("a")
# 021ac Copy8 [Register(0x40), Register(0x52)]
#       inline_main_printHex_60_t8792 <- inline_main_printHex_60_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
#       Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
#       Ident("a")
0b 40 52 

# inline_main_printHex_60_t610c <- 0n15/0x0fu8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
# Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
# Number(U8, 15)
# 021af LoadImm8 [Register(0x51), Constant8(0x0f=15)]
#       inline_main_printHex_60_t610c <- 0n15/0x0fu8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
#       Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
#       Number(U8, 15)
04 51 0f 

# if inline_main_printHex_60_t8792 > inline_main_printHex_60_t610c then 'inline_main_printHex_60_printHex_if_true_0_1' else 'inline_main_printHex_60_printHex_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
# Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
# 021b2 Cmp8 [Register(0x52), Register(0x51)]
#       if inline_main_printHex_60_t8792 > inline_main_printHex_60_t610c then 'inline_main_printHex_60_printHex_if_true_0_1' else 'inline_main_printHex_60_printHex_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
#       Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
15 52 51 

# 021b5 JcImm [Label24(inline_main_printHex_60_printHex_if_else_0_2)]
#       if inline_main_printHex_60_t8792 > inline_main_printHex_60_t610c then 'inline_main_printHex_60_printHex_if_true_0_1' else 'inline_main_printHex_60_printHex_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
#       Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
71 36 22 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_60_t8792 > inline_main_printHex_60_t610c then 'inline_main_printHex_60_printHex_if_true_0_1' else 'inline_main_printHex_60_printHex_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }\nComparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_60_printHex_if_true_0_1)], resolved: None }
# :inline_main_printHex_60_printHex_if_true_0_1 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
# inline_main_printHex_60_printHex_if_true_0_1
# inline_main_printHex_60_t8792 <- inline_main_printHex_60_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }
# Arithmetic(Divide, Ident("a"), Number(U8, 16))
# Ident("a")
# 021b9 Copy8 [Register(0x40), Register(0x52)]
#       inline_main_printHex_60_t8792 <- inline_main_printHex_60_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 16))
#       Ident("a")
0b 40 52 

# inline_main_printHex_60_b <- inline_main_printHex_60_t8792 Divide Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }
# Arithmetic(Divide, Ident("a"), Number(U8, 16))
# 021bc LoadImm8 [Register(0x00), Constant8(0x10=16)]
#       inline_main_printHex_60_b <- inline_main_printHex_60_t8792 Divide Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 16))
04 00 10 

# 021bf Divide8 [Register(0x52), Register(0x00), Register(0x51)]
#       inline_main_printHex_60_b <- inline_main_printHex_60_t8792 Divide Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 16))
17 52 00 51 

# inline_main_printHex_60_tace9 <- inline_main_printHex_60_b U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }
# Call(Call { function: "printHexDigit", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_main_printHex_60_tace9 <- inline_main_printHex_60_b U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))\nVoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }\nCall(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_printHex_60_inline_printHex_printHexDigit_58_a <- inline_main_printHex_60_tace9 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }
# Call(Call { function: "printHexDigit", parameters: [Ident("b")] })
# 021c3 Copy8 [Register(0x51), Register(0x52)]
#       inline_main_printHex_60_inline_printHex_printHexDigit_58_a <- inline_main_printHex_60_tace9 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }
#       Call(Call { function: "printHexDigit", parameters: [Ident("b")] })
0b 51 52 

# inline_main_printHex_60_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_60_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_60_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_60_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_60_inline_printHex_printHexDigit_58_td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# Number(U8, 10)
# 021c6 LoadImm8 [Register(0x53), Constant8(0x0a=10)]
#       inline_main_printHex_60_inline_printHex_printHexDigit_58_td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
#       Number(U8, 10)
04 53 0a 

# if inline_main_printHex_60_inline_printHex_printHexDigit_58_t8792 < inline_main_printHex_60_inline_printHex_printHexDigit_58_td7b5 then 'inline_main_printHex_60_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1' else 'inline_main_printHex_60_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# 021c9 Cmp8 [Register(0x53), Register(0x52)]
#       if inline_main_printHex_60_inline_printHex_printHexDigit_58_t8792 < inline_main_printHex_60_inline_printHex_printHexDigit_58_td7b5 then 'inline_main_printHex_60_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1' else 'inline_main_printHex_60_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
15 53 52 

# 021cc JcImm [Label24(inline_main_printHex_60_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2)]
#       if inline_main_printHex_60_inline_printHex_printHexDigit_58_t8792 < inline_main_printHex_60_inline_printHex_printHexDigit_58_td7b5 then 'inline_main_printHex_60_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1' else 'inline_main_printHex_60_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
71 f6 21 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_60_inline_printHex_printHexDigit_58_t8792 < inline_main_printHex_60_inline_printHex_printHexDigit_58_td7b5 then 'inline_main_printHex_60_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1' else 'inline_main_printHex_60_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_60_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_60_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# inline_main_printHex_60_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1
# inline_main_printHex_60_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_60_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_60_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_60_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })\nArithmetic(Add, Ident(\"a\"), Number(U8, 48))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_60_inline_printHex_printHexDigit_58_t6db1 <- inline_main_printHex_60_inline_printHex_printHexDigit_58_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# 021d0 LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       inline_main_printHex_60_inline_printHex_printHexDigit_58_t6db1 <- inline_main_printHex_60_inline_printHex_printHexDigit_58_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
04 00 30 

# 021d3 Add8NoCarryIn [Register(0x52), Register(0x00), Register(0x52)]
#       inline_main_printHex_60_inline_printHex_printHexDigit_58_t6db1 <- inline_main_printHex_60_inline_printHex_printHexDigit_58_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
14 52 00 52 

# inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c <- inline_main_printHex_60_inline_printHex_printHexDigit_58_t6db1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# optimized away noop copy Instruction { source: "inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c <- inline_main_printHex_60_inline_printHex_printHexDigit_58_t6db1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# None <= call io_write0(inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 021d7 Out0 [Register(0x52)]
#       IoWrite0
68 52 

# inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# None <= call lcd_putc(inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 021d9 Copy8 [Register(0x52), Register(0x00)]
#       Arg0[ch]=inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 None <= call lcd_putc(inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 52 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 021dc AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 021e2 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c ec 21 00 00 

# 021e8 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 021ec AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_function_end_putc)], resolved: None }
# :inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_function_end_putc None
# inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_function_end_putc
# goto inline_main_printHex_60_inline_printHex_printHexDigit_58_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# 021f2 JmpImm [Label24(inline_main_printHex_60_inline_printHex_printHexDigit_58_printHexDigit_if_end_0)]
#       goto inline_main_printHex_60_inline_printHex_printHexDigit_58_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
70 1f 22 00 

# :inline_main_printHex_60_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# inline_main_printHex_60_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2
# inline_main_printHex_60_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_60_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
# Arithmetic(Subtract, Ident("a"), Number(U8, 10))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_60_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_60_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }\nArithmetic(Subtract, Ident(\"a\"), Number(U8, 10))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_60_inline_printHex_printHexDigit_58_a <- inline_main_printHex_60_inline_printHex_printHexDigit_58_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
# Arithmetic(Subtract, Ident("a"), Number(U8, 10))
# 021f6 LoadImm8 [Register(0x00), Constant8(0xf6=246)]
#       inline_main_printHex_60_inline_printHex_printHexDigit_58_a <- inline_main_printHex_60_inline_printHex_printHexDigit_58_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Subtract, Ident("a"), Number(U8, 10))
04 00 f6 

# 021f9 Add8NoCarryIn [Register(0x52), Register(0x00), Register(0x52)]
#       inline_main_printHex_60_inline_printHex_printHexDigit_58_a <- inline_main_printHex_60_inline_printHex_printHexDigit_58_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Subtract, Ident("a"), Number(U8, 10))
14 52 00 52 

# inline_main_printHex_60_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_60_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
# Arithmetic(Add, Ident("a"), Number(U8, 65))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_60_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_60_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }\nArithmetic(Add, Ident(\"a\"), Number(U8, 65))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_60_inline_printHex_printHexDigit_58_a <- inline_main_printHex_60_inline_printHex_printHexDigit_58_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
# Arithmetic(Add, Ident("a"), Number(U8, 65))
# 021fd LoadImm8 [Register(0x00), Constant8(0x41=65)]
#       inline_main_printHex_60_inline_printHex_printHexDigit_58_a <- inline_main_printHex_60_inline_printHex_printHexDigit_58_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
#       Arithmetic(Add, Ident("a"), Number(U8, 65))
04 00 41 

# 02200 Add8NoCarryIn [Register(0x52), Register(0x00), Register(0x52)]
#       inline_main_printHex_60_inline_printHex_printHexDigit_58_a <- inline_main_printHex_60_inline_printHex_printHexDigit_58_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
#       Arithmetic(Add, Ident("a"), Number(U8, 65))
14 52 00 52 

# inline_main_printHex_60_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_60_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }
# Call(Call { function: "putc", parameters: [Ident("a")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_60_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_60_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }\nCall(Call { function: \"putc\", parameters: [Ident(\"a\")] })\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c <- inline_main_printHex_60_inline_printHex_printHexDigit_58_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }
# Call(Call { function: "putc", parameters: [Ident("a")] })
# optimized away noop copy Instruction { source: "inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c <- inline_main_printHex_60_inline_printHex_printHexDigit_58_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }\nCall(Call { function: \"putc\", parameters: [Ident(\"a\")] })\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# None <= call io_write0(inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02204 Out0 [Register(0x52)]
#       IoWrite0
68 52 

# inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# None <= call lcd_putc(inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 02206 Copy8 [Register(0x52), Register(0x00)]
#       Arg0[ch]=inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 None <= call lcd_putc(inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 52 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02209 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 0220f StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 19 22 00 00 

# 02215 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02219 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_function_end_putc)], resolved: None }
# :inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_function_end_putc None
# inline_main_printHex_60_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_function_end_putc
# :inline_main_printHex_60_inline_printHex_printHexDigit_58_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# inline_main_printHex_60_inline_printHex_printHexDigit_58_printHexDigit_if_end_0
# goto inline_main_printHex_60_inline_printHex_printHexDigit_58_function_end_printHexDigit None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_60_inline_printHex_printHexDigit_58_function_end_printHexDigit None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_60_inline_printHex_printHexDigit_58_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_60_inline_printHex_printHexDigit_58_function_end_printHexDigit None
# inline_main_printHex_60_inline_printHex_printHexDigit_58_function_end_printHexDigit
# inline_main_printHex_60_t8792 <- inline_main_printHex_60_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
# Ident("a")
# 0221f Copy8 [Register(0x40), Register(0x52)]
#       inline_main_printHex_60_t8792 <- inline_main_printHex_60_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
#       Ident("a")
0b 40 52 

# inline_main_printHex_60_tace9 <- inline_main_printHex_60_b U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
# Arithmetic(Multiply, Ident("b"), Number(U8, 16))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_main_printHex_60_tace9 <- inline_main_printHex_60_b U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }\nArithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))\nArithmetic(Multiply, Ident(\"b\"), Number(U8, 16))\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_printHex_60_t4271 <- inline_main_printHex_60_tace9 Multiply Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
# Arithmetic(Multiply, Ident("b"), Number(U8, 16))
# 02222 LoadImm8 [Register(0x00), Constant8(0x10=16)]
#       inline_main_printHex_60_t4271 <- inline_main_printHex_60_tace9 Multiply Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
#       Arithmetic(Multiply, Ident("b"), Number(U8, 16))
04 00 10 

# 02225 Mul8_8 [Register(0x51), Register(0x00), Register(0x40)]
#       inline_main_printHex_60_t4271 <- inline_main_printHex_60_tace9 Multiply Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
#       Arithmetic(Multiply, Ident("b"), Number(U8, 16))
10 51 00 40 

# inline_main_printHex_60_a <- inline_main_printHex_60_t8792 Subtract Var(inline_main_printHex_60_t4271) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
# 02229 Copy8 [Register(0x40), Register(0x00)]
#       inline_main_printHex_60_a <- inline_main_printHex_60_t8792 Subtract Var(inline_main_printHex_60_t4271) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
0b 40 00 

# 0222c Negate8 [Register(0x00)]
#       inline_main_printHex_60_a <- inline_main_printHex_60_t8792 Subtract Var(inline_main_printHex_60_t4271) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
02 00 

# 0222e Add8NoCarryIn [Register(0x52), Register(0x00), Register(0x40)]
#       inline_main_printHex_60_a <- inline_main_printHex_60_t8792 Subtract Var(inline_main_printHex_60_t4271) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
14 52 00 40 

# goto inline_main_printHex_60_printHex_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# 02232 JmpImm [Label24(inline_main_printHex_60_printHex_if_end_0)]
#       goto inline_main_printHex_60_printHex_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
70 54 22 00 

# :inline_main_printHex_60_printHex_if_else_0_2 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# inline_main_printHex_60_printHex_if_else_0_2
# inline_main_printHex_60_tf48d <- 0n48/0x30u8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 48)] })
# Number(U8, 48)
# 02236 LoadImm8 [Register(0x51), Constant8(0x30=48)]
#       inline_main_printHex_60_tf48d <- 0n48/0x30u8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 48)] })
#       Number(U8, 48)
04 51 30 

# inline_main_printHex_60_inline_printHex_putc_55_c <- inline_main_printHex_60_tf48d U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 48)] })
# optimized away noop copy Instruction { source: "inline_main_printHex_60_inline_printHex_putc_55_c <- inline_main_printHex_60_tf48d U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 48)] })\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_printHex_60_inline_printHex_putc_55_tac13 <- inline_main_printHex_60_inline_printHex_putc_55_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_60_inline_printHex_putc_55_tac13 <- inline_main_printHex_60_inline_printHex_putc_55_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# None <= call io_write0(inline_main_printHex_60_inline_printHex_putc_55_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02239 Out0 [Register(0x51)]
#       IoWrite0
68 51 

# inline_main_printHex_60_inline_printHex_putc_55_tac13 <- inline_main_printHex_60_inline_printHex_putc_55_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_60_inline_printHex_putc_55_tac13 <- inline_main_printHex_60_inline_printHex_putc_55_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# None <= call lcd_putc(inline_main_printHex_60_inline_printHex_putc_55_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 0223b Copy8 [Register(0x51), Register(0x00)]
#       Arg0[ch]=inline_main_printHex_60_inline_printHex_putc_55_tac13 None <= call lcd_putc(inline_main_printHex_60_inline_printHex_putc_55_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 51 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 0223e AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02244 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 4e 22 00 00 

# 0224a JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 0224e AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_printHex_60_inline_printHex_putc_55_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_60_inline_printHex_putc_55_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_60_inline_printHex_putc_55_function_end_putc)], resolved: None }
# :inline_main_printHex_60_inline_printHex_putc_55_function_end_putc None
# inline_main_printHex_60_inline_printHex_putc_55_function_end_putc
# :inline_main_printHex_60_printHex_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# inline_main_printHex_60_printHex_if_end_0
# inline_main_printHex_60_t8792 <- inline_main_printHex_60_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(22,5))
# VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("a")] }) }
# Call(Call { function: "printHexDigit", parameters: [Ident("a")] })
# Ident("a")
# 02254 Copy8 [Register(0x40), Register(0x52)]
#       inline_main_printHex_60_t8792 <- inline_main_printHex_60_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("a")] }) }
#       Call(Call { function: "printHexDigit", parameters: [Ident("a")] })
#       Ident("a")
0b 40 52 

# inline_main_printHex_60_inline_printHex_printHexDigit_59_a <- inline_main_printHex_60_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(22,5))
# VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("a")] }) }
# Call(Call { function: "printHexDigit", parameters: [Ident("a")] })
# 02257 Copy8 [Register(0x52), Register(0x40)]
#       inline_main_printHex_60_inline_printHex_printHexDigit_59_a <- inline_main_printHex_60_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("a")] }) }
#       Call(Call { function: "printHexDigit", parameters: [Ident("a")] })
0b 52 40 

# inline_main_printHex_60_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_60_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_60_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_60_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_60_inline_printHex_printHexDigit_59_td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# Number(U8, 10)
# 0225a LoadImm8 [Register(0x51), Constant8(0x0a=10)]
#       inline_main_printHex_60_inline_printHex_printHexDigit_59_td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
#       Number(U8, 10)
04 51 0a 

# if inline_main_printHex_60_inline_printHex_printHexDigit_59_t8792 < inline_main_printHex_60_inline_printHex_printHexDigit_59_td7b5 then 'inline_main_printHex_60_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1' else 'inline_main_printHex_60_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# 0225d Cmp8 [Register(0x51), Register(0x40)]
#       if inline_main_printHex_60_inline_printHex_printHexDigit_59_t8792 < inline_main_printHex_60_inline_printHex_printHexDigit_59_td7b5 then 'inline_main_printHex_60_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1' else 'inline_main_printHex_60_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
15 51 40 

# 02260 JcImm [Label24(inline_main_printHex_60_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2)]
#       if inline_main_printHex_60_inline_printHex_printHexDigit_59_t8792 < inline_main_printHex_60_inline_printHex_printHexDigit_59_td7b5 then 'inline_main_printHex_60_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1' else 'inline_main_printHex_60_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
71 8a 22 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_60_inline_printHex_printHexDigit_59_t8792 < inline_main_printHex_60_inline_printHex_printHexDigit_59_td7b5 then 'inline_main_printHex_60_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1' else 'inline_main_printHex_60_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_60_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_60_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# inline_main_printHex_60_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1
# inline_main_printHex_60_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_60_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_60_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_60_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })\nArithmetic(Add, Ident(\"a\"), Number(U8, 48))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_60_inline_printHex_printHexDigit_59_t6db1 <- inline_main_printHex_60_inline_printHex_printHexDigit_59_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# 02264 LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       inline_main_printHex_60_inline_printHex_printHexDigit_59_t6db1 <- inline_main_printHex_60_inline_printHex_printHexDigit_59_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
04 00 30 

# 02267 Add8NoCarryIn [Register(0x40), Register(0x00), Register(0x40)]
#       inline_main_printHex_60_inline_printHex_printHexDigit_59_t6db1 <- inline_main_printHex_60_inline_printHex_printHexDigit_59_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
14 40 00 40 

# inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c <- inline_main_printHex_60_inline_printHex_printHexDigit_59_t6db1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# optimized away noop copy Instruction { source: "inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c <- inline_main_printHex_60_inline_printHex_printHexDigit_59_t6db1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 0226b Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 0226d Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 None <= call lcd_putc(inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02270 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02276 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 80 22 00 00 

# 0227c JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02280 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_function_end_putc)], resolved: None }
# :inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_function_end_putc None
# inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_function_end_putc
# goto inline_main_printHex_60_inline_printHex_printHexDigit_59_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# 02286 JmpImm [Label24(inline_main_printHex_60_inline_printHex_printHexDigit_59_printHexDigit_if_end_0)]
#       goto inline_main_printHex_60_inline_printHex_printHexDigit_59_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
70 b3 22 00 

# :inline_main_printHex_60_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# inline_main_printHex_60_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2
# inline_main_printHex_60_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_60_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
# Arithmetic(Subtract, Ident("a"), Number(U8, 10))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_60_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_60_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }\nArithmetic(Subtract, Ident(\"a\"), Number(U8, 10))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_60_inline_printHex_printHexDigit_59_a <- inline_main_printHex_60_inline_printHex_printHexDigit_59_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
# Arithmetic(Subtract, Ident("a"), Number(U8, 10))
# 0228a LoadImm8 [Register(0x00), Constant8(0xf6=246)]
#       inline_main_printHex_60_inline_printHex_printHexDigit_59_a <- inline_main_printHex_60_inline_printHex_printHexDigit_59_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Subtract, Ident("a"), Number(U8, 10))
04 00 f6 

# 0228d Add8NoCarryIn [Register(0x40), Register(0x00), Register(0x40)]
#       inline_main_printHex_60_inline_printHex_printHexDigit_59_a <- inline_main_printHex_60_inline_printHex_printHexDigit_59_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Subtract, Ident("a"), Number(U8, 10))
14 40 00 40 

# inline_main_printHex_60_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_60_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
# Arithmetic(Add, Ident("a"), Number(U8, 65))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_60_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_60_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }\nArithmetic(Add, Ident(\"a\"), Number(U8, 65))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_60_inline_printHex_printHexDigit_59_a <- inline_main_printHex_60_inline_printHex_printHexDigit_59_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
# Arithmetic(Add, Ident("a"), Number(U8, 65))
# 02291 LoadImm8 [Register(0x00), Constant8(0x41=65)]
#       inline_main_printHex_60_inline_printHex_printHexDigit_59_a <- inline_main_printHex_60_inline_printHex_printHexDigit_59_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
#       Arithmetic(Add, Ident("a"), Number(U8, 65))
04 00 41 

# 02294 Add8NoCarryIn [Register(0x40), Register(0x00), Register(0x40)]
#       inline_main_printHex_60_inline_printHex_printHexDigit_59_a <- inline_main_printHex_60_inline_printHex_printHexDigit_59_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
#       Arithmetic(Add, Ident("a"), Number(U8, 65))
14 40 00 40 

# inline_main_printHex_60_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_60_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }
# Call(Call { function: "putc", parameters: [Ident("a")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_60_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_60_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }\nCall(Call { function: \"putc\", parameters: [Ident(\"a\")] })\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c <- inline_main_printHex_60_inline_printHex_printHexDigit_59_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }
# Call(Call { function: "putc", parameters: [Ident("a")] })
# optimized away noop copy Instruction { source: "inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c <- inline_main_printHex_60_inline_printHex_printHexDigit_59_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }\nCall(Call { function: \"putc\", parameters: [Ident(\"a\")] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02298 Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 0229a Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 None <= call lcd_putc(inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 0229d AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 022a3 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c ad 22 00 00 

# 022a9 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 022ad AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_function_end_putc)], resolved: None }
# :inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_function_end_putc None
# inline_main_printHex_60_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_function_end_putc
# :inline_main_printHex_60_inline_printHex_printHexDigit_59_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# inline_main_printHex_60_inline_printHex_printHexDigit_59_printHexDigit_if_end_0
# goto inline_main_printHex_60_inline_printHex_printHexDigit_59_function_end_printHexDigit None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_60_inline_printHex_printHexDigit_59_function_end_printHexDigit None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_60_inline_printHex_printHexDigit_59_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_60_inline_printHex_printHexDigit_59_function_end_printHexDigit None
# inline_main_printHex_60_inline_printHex_printHexDigit_59_function_end_printHexDigit
# goto inline_main_printHex_60_function_end_printHex None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_60_function_end_printHex None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_60_function_end_printHex)], resolved: None }
# :inline_main_printHex_60_function_end_printHex None
# inline_main_printHex_60_function_end_printHex
# td7b5 <- 0n10/0x0au8  Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 022b3 LoadImm8 [Register(0x40), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 40 0a 

# inline_main_putc_39_c <- td7b5 U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# optimized away noop copy Instruction { source: "inline_main_putc_39_c <- td7b5 U8 Some('programs/app/bootram.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 10)] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_putc_39_tac13 <- inline_main_putc_39_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_39_tac13 <- inline_main_putc_39_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_putc_39_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 022b6 Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_putc_39_tac13 <- inline_main_putc_39_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_39_tac13 <- inline_main_putc_39_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_putc_39_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 022b8 Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_putc_39_tac13 None <= call lcd_putc(inline_main_putc_39_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 022bb AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 022c1 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c cb 22 00 00 

# 022c7 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 022cb AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_39_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_39_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_39_function_end_putc)], resolved: None }
# :inline_main_putc_39_function_end_putc None
# inline_main_putc_39_function_end_putc
# goto main_if_end_3 Some('programs/app/bootram.j':(22,5))
# 022d1 JmpImm [Label24(main_if_end_3)]
#       goto main_if_end_3 Some('programs/app/bootram.j':(22,5))
70 57 2b 00 

# :main_if_else_1_7 Some('programs/app/bootram.j':(22,5))
# main_if_else_1_7
# tdcd9 <- ch U8 Some('programs/app/bootram.j':(22,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 119) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/app/bootram.j':(22,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 119) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# tc8fd <- 0n119/0x77u8  Some('programs/app/bootram.j':(22,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 119) }
# Number(U8, 119)
# 022d5 LoadImm8 [Register(0x51), Constant8(0x77=119)]
#       tc8fd <- 0n119/0x77u8  Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 119) }
#       Number(U8, 119)
04 51 77 

# if tdcd9 == tc8fd then 'main_if_true_2_8' else 'main_if_else_2_9' Some('programs/app/bootram.j':(22,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 119) }
# 022d8 Cmp8 [Register(0x40), Register(0x51)]
#       if tdcd9 == tc8fd then 'main_if_true_2_8' else 'main_if_else_2_9' Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 119) }
15 40 51 

# 022db JzImm [Label24(main_if_true_2_8)]
#       if tdcd9 == tc8fd then 'main_if_true_2_8' else 'main_if_else_2_9' Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 119) }
72 e3 22 00 

# 022df JmpImm [Label24(main_if_else_2_9)]
#       if tdcd9 == tc8fd then 'main_if_true_2_8' else 'main_if_else_2_9' Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 119) }
70 ce 23 00 

# :main_if_true_2_8 Some('programs/app/bootram.j':(22,5))
# main_if_true_2_8
# p_byte <- addr U32 Some('programs/app/bootram.j':(22,5))
# Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }
# Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") }
# Ident("addr")
# 022e3 Copy32 [Register(0x3c), Register(0x44)]
#       p_byte <- addr U32 Some('programs/app/bootram.j':(22,5))
#       Assign { target: Ident("p_byte"), var_type: None, value: Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") } }
#       Cast { old_type: None, new_type: Ptr(Number(U8)), value: Ident("addr") }
#       Ident("addr")
21 3c 44 

# tbf00 <- p_byte U32 Some('programs/app/bootram.j':(22,5))
# Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }
# Ident("p_byte")
# 022e6 Copy32 [Register(0x44), Register(0x54)]
#       tbf00 <- p_byte U32 Some('programs/app/bootram.j':(22,5))
#       Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }
#       Ident("p_byte")
21 44 54 

# te825 <- __frame_pointer U32 Some('programs/app/bootram.j':(22,5))
# Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }
# Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] })
# AddressOf(Index("buf", Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 1)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 1))
# Ident("__frame_pointer")
# 022e9 Copy32 [Register(0x0c), Register(0x64)]
#       te825 <- __frame_pointer U32 Some('programs/app/bootram.j':(22,5))
#       Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }
#       Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] })
#       AddressOf(Index("buf", Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 1)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 1))
#       Ident("__frame_pointer")
21 0c 64 

# t61d1 <- te825 Add Number(0n1/0x00000001u32) Some('programs/app/bootram.j':(22,5))
# Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }
# Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] })
# AddressOf(Index("buf", Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 1)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 1))
# 022ec Copy32 [Register(0x64), Register(0x44)]
#       t61d1 <- te825 Add Number(0n1/0x00000001u32) Some('programs/app/bootram.j':(22,5))
#       Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }
#       Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] })
#       AddressOf(Index("buf", Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 1)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 1))
21 64 44 

# 022ef AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000001=1)]
#       t61d1 <- te825 Add Number(0n1/0x00000001u32) Some('programs/app/bootram.j':(22,5))
#       Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }
#       Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] })
#       AddressOf(Index("buf", Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 1)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 1))
32 44 01 00 00 00 

# t113b <- t61d1 U32 Some('programs/app/bootram.j':(22,5))
# Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }
# Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] })
# AddressOf(Index("buf", Number(USIZE, 1)))
# optimized away noop copy Instruction { source: "t113b <- t61d1 U32 Some('programs/app/bootram.j':(22,5))\nAssign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }\nCall(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })\nAddressOf(Index(\"buf\", Number(USIZE, 1)))\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_main_parseHex_17_c <- t113b U32 Some('programs/app/bootram.j':(22,5))
# Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }
# Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] })
# optimized away noop copy Instruction { source: "inline_main_parseHex_17_c <- t113b U32 Some('programs/app/bootram.j':(22,5))\nAssign { target: Deref(Ident(\"p_byte\")), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] }) }\nCall(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Number(USIZE, 1)))] })\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_main_parseHex_17_tac13 <- inline_main_parseHex_17_c U32 Some('/home/john/lutcomp/programs/lib/print_hex.j':(43,5))
# Assign { target: Ident("h"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
# Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
# Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })
# Deref(Ident("c"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_parseHex_17_tac13 <- inline_main_parseHex_17_c U32 Some('/home/john/lutcomp/programs/lib/print_hex.j':(43,5))\nAssign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }\nArithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))\nCall(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })\nDeref(Ident(\"c\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_main_parseHex_17_tea8d <- mem[inline_main_parseHex_17_tac13] U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(43,5))
# Assign { target: Ident("h"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
# Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
# Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })
# Deref(Ident("c"))
# 022f5 Load8 [Register(0x44), Register(0x51)]
#       inline_main_parseHex_17_tea8d <- mem[inline_main_parseHex_17_tac13] U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(43,5))
#       Assign { target: Ident("h"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
#       Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
#       Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })
#       Deref(Ident("c"))
05 44 51 

# inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_ch <- inline_main_parseHex_17_tea8d U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(43,5))
# Assign { target: Ident("h"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
# Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
# Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })
# optimized away noop copy Instruction { source: "inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_ch <- inline_main_parseHex_17_tea8d U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(43,5))\nAssign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }\nArithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))\nCall(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\nComparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t4421 <- 0n97/0x61u8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
# Number(U8, 97)
# 022f8 LoadImm8 [Register(0x52), Constant8(0x61=97)]
#       inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t4421 <- 0n97/0x61u8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
#       Number(U8, 97)
04 52 61 

# if inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 >= inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t4421 then 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
# 022fb Cmp8 [Register(0x52), Register(0x51)]
#       if inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 >= inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t4421 then 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
15 52 51 

# 022fe JcImm [Label24(inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_1)]
#       if inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 >= inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t4421 then 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
71 06 23 00 

# 02302 JmpImm [Label24(inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_2)]
#       if inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 >= inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t4421 then 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
70 1c 23 00 

# :inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_1 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_1
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
# Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
# Arithmetic(Subtract, Ident("ch"), Number(U8, 97))
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))\nReturn { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }\nArithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))\nArithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_te3ca <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 Subtract Number(0n97/0x61u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
# Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
# Arithmetic(Subtract, Ident("ch"), Number(U8, 97))
# 02306 LoadImm8 [Register(0x00), Constant8(0x9f=159)]
#       inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_te3ca <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 Subtract Number(0n97/0x61u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 97))
04 00 9f 

# 02309 Add8NoCarryIn [Register(0x51), Register(0x00), Register(0x51)]
#       inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_te3ca <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 Subtract Number(0n97/0x61u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 97))
14 51 00 51 

# inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t45e4 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_te3ca Add Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
# Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
# 0230d LoadImm8 [Register(0x00), Constant8(0x0a=10)]
#       inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t45e4 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_te3ca Add Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
04 00 0a 

# 02310 Add8NoCarryIn [Register(0x51), Register(0x00), Register(0x51)]
#       inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t45e4 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_te3ca Add Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
14 51 00 51 

# inline_main_parseHex_17_t61f3 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t45e4 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
# optimized away noop copy Instruction { source: "inline_main_parseHex_17_t61f3 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t45e4 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))\nReturn { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# goto inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_function_end_parseHexNibble Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
# 02314 JmpImm [Label24(inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_function_end_parseHexNibble)]
#       goto inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_function_end_parseHexNibble Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
70 4b 23 00 

# goto inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# 02318 JmpImm [Label24(inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_end_0)]
#       goto inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
70 1c 23 00 

# :inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_2 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_2
# :inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_end_0
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))\nIfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }\nComparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t2ac9 <- 0n57/0x39u8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
# Number(U8, 57)
# 0231c LoadImm8 [Register(0x52), Constant8(0x39=57)]
#       inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t2ac9 <- 0n57/0x39u8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
#       Number(U8, 57)
04 52 39 

# if inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 <= inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t2ac9 then 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_5' Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
# 0231f Cmp8 [Register(0x51), Register(0x52)]
#       if inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 <= inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t2ac9 then 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_5' Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
15 51 52 

# 02322 JcImm [Label24(inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_4)]
#       if inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 <= inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t2ac9 then 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_5' Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
71 2a 23 00 

# 02326 JmpImm [Label24(inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_5)]
#       if inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 <= inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t2ac9 then 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_5' Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
70 39 23 00 

# :inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_4 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_4
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
# Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))\nReturn { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }\nArithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t7ff1 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 Subtract Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
# Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
# 0232a LoadImm8 [Register(0x00), Constant8(0xd0=208)]
#       inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t7ff1 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 Subtract Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
04 00 d0 

# 0232d Add8NoCarryIn [Register(0x51), Register(0x00), Register(0x51)]
#       inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t7ff1 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 Subtract Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
14 51 00 51 

# inline_main_parseHex_17_t61f3 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t7ff1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
# optimized away noop copy Instruction { source: "inline_main_parseHex_17_t61f3 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t7ff1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))\nReturn { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# goto inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_function_end_parseHexNibble Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
# 02331 JmpImm [Label24(inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_function_end_parseHexNibble)]
#       goto inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_function_end_parseHexNibble Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
70 4b 23 00 

# goto inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_end_3 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# 02335 JmpImm [Label24(inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_end_3)]
#       goto inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_end_3 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
70 39 23 00 

# :inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_5 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_5
# :inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_end_3 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_parseHexNibble_if_end_3
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
# Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
# Arithmetic(Subtract, Ident("ch"), Number(U8, 65))
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))\nReturn { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }\nArithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))\nArithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_td437 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 Subtract Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
# Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
# Arithmetic(Subtract, Ident("ch"), Number(U8, 65))
# 02339 LoadImm8 [Register(0x00), Constant8(0xbf=191)]
#       inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_td437 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 Subtract Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 65))
04 00 bf 

# 0233c Add8NoCarryIn [Register(0x51), Register(0x00), Register(0x51)]
#       inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_td437 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_tdcd9 Subtract Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 65))
14 51 00 51 

# inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t3fb8 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_td437 Add Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
# Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
# 02340 LoadImm8 [Register(0x00), Constant8(0x0a=10)]
#       inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t3fb8 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_td437 Add Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
04 00 0a 

# 02343 Add8NoCarryIn [Register(0x51), Register(0x00), Register(0x51)]
#       inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t3fb8 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_td437 Add Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
14 51 00 51 

# inline_main_parseHex_17_t61f3 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t3fb8 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
# optimized away noop copy Instruction { source: "inline_main_parseHex_17_t61f3 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_t3fb8 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))\nReturn { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# goto inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_function_end_parseHexNibble Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
# 02347 JmpImm [Label24(inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_function_end_parseHexNibble)]
#       goto inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_function_end_parseHexNibble Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
70 4b 23 00 

# :inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_function_end_parseHexNibble None
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_15_function_end_parseHexNibble
# inline_main_parseHex_17_h <- inline_main_parseHex_17_t61f3 Multiply Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(43,5))
# Assign { target: Ident("h"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
# Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
# 0234b LoadImm8 [Register(0x00), Constant8(0x10=16)]
#       inline_main_parseHex_17_h <- inline_main_parseHex_17_t61f3 Multiply Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(43,5))
#       Assign { target: Ident("h"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
#       Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
04 00 10 

# 0234e Mul8_8 [Register(0x51), Register(0x00), Register(0x51)]
#       inline_main_parseHex_17_h <- inline_main_parseHex_17_t61f3 Multiply Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(43,5))
#       Assign { target: Ident("h"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
#       Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
10 51 00 51 

# inline_main_parseHex_17_t87c3 <- inline_main_parseHex_17_c U32 Some('/home/john/lutcomp/programs/lib/print_hex.j':(44,5))
# Assign { target: Ident("c"), var_type: None, value: AddressOf(Index("c", Number(USIZE, 1))) }
# AddressOf(Index("c", Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 1)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 1))
# Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_parseHex_17_t87c3 <- inline_main_parseHex_17_c U32 Some('/home/john/lutcomp/programs/lib/print_hex.j':(44,5))\nAssign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }\nAddressOf(Index(\"c\", Number(USIZE, 1)))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1))\nCast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_main_parseHex_17_t2fed <- inline_main_parseHex_17_t87c3 Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/print_hex.j':(44,5))
# Assign { target: Ident("c"), var_type: None, value: AddressOf(Index("c", Number(USIZE, 1))) }
# AddressOf(Index("c", Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 1)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 1))
# 02352 AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000001=1)]
#       inline_main_parseHex_17_t2fed <- inline_main_parseHex_17_t87c3 Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/print_hex.j':(44,5))
#       Assign { target: Ident("c"), var_type: None, value: AddressOf(Index("c", Number(USIZE, 1))) }
#       AddressOf(Index("c", Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 1)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 1))
32 44 01 00 00 00 

# inline_main_parseHex_17_c <- inline_main_parseHex_17_t2fed U32 Some('/home/john/lutcomp/programs/lib/print_hex.j':(44,5))
# Assign { target: Ident("c"), var_type: None, value: AddressOf(Index("c", Number(USIZE, 1))) }
# AddressOf(Index("c", Number(USIZE, 1)))
# optimized away noop copy Instruction { source: "inline_main_parseHex_17_c <- inline_main_parseHex_17_t2fed U32 Some('/home/john/lutcomp/programs/lib/print_hex.j':(44,5))\nAssign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }\nAddressOf(Index(\"c\", Number(USIZE, 1)))\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_main_parseHex_17_t4768 <- inline_main_parseHex_17_h U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(45,5))
# Assign { target: Ident("h"), var_type: None, value: Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
# Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
# Ident("h")
# 02358 Copy8 [Register(0x51), Register(0x52)]
#       inline_main_parseHex_17_t4768 <- inline_main_parseHex_17_h U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(45,5))
#       Assign { target: Ident("h"), var_type: None, value: Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
#       Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
#       Ident("h")
0b 51 52 

# inline_main_parseHex_17_tac13 <- inline_main_parseHex_17_c U32 Some('/home/john/lutcomp/programs/lib/print_hex.j':(45,5))
# Assign { target: Ident("h"), var_type: None, value: Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
# Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
# Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })
# Deref(Ident("c"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_parseHex_17_tac13 <- inline_main_parseHex_17_c U32 Some('/home/john/lutcomp/programs/lib/print_hex.j':(45,5))\nAssign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }\nArithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))\nCall(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })\nDeref(Ident(\"c\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_main_parseHex_17_tea8d <- mem[inline_main_parseHex_17_tac13] U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(45,5))
# Assign { target: Ident("h"), var_type: None, value: Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
# Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
# Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })
# Deref(Ident("c"))
# 0235b Load8 [Register(0x44), Register(0x51)]
#       inline_main_parseHex_17_tea8d <- mem[inline_main_parseHex_17_tac13] U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(45,5))
#       Assign { target: Ident("h"), var_type: None, value: Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
#       Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
#       Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })
#       Deref(Ident("c"))
05 44 51 

# inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_ch <- inline_main_parseHex_17_tea8d U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(45,5))
# Assign { target: Ident("h"), var_type: None, value: Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
# Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
# Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })
# 0235e Copy8 [Register(0x51), Register(0x40)]
#       inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_ch <- inline_main_parseHex_17_tea8d U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(45,5))
#       Assign { target: Ident("h"), var_type: None, value: Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
#       Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
#       Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })
0b 51 40 

# inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\nComparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t4421 <- 0n97/0x61u8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
# Number(U8, 97)
# 02361 LoadImm8 [Register(0x51), Constant8(0x61=97)]
#       inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t4421 <- 0n97/0x61u8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
#       Number(U8, 97)
04 51 61 

# if inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 >= inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t4421 then 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
# 02364 Cmp8 [Register(0x51), Register(0x40)]
#       if inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 >= inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t4421 then 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
15 51 40 

# 02367 JcImm [Label24(inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_1)]
#       if inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 >= inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t4421 then 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
71 6f 23 00 

# 0236b JmpImm [Label24(inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_2)]
#       if inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 >= inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t4421 then 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
70 88 23 00 

# :inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_1 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_1
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
# Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
# Arithmetic(Subtract, Ident("ch"), Number(U8, 97))
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))\nReturn { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }\nArithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))\nArithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_te3ca <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 Subtract Number(0n97/0x61u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
# Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
# Arithmetic(Subtract, Ident("ch"), Number(U8, 97))
# 0236f LoadImm8 [Register(0x00), Constant8(0x9f=159)]
#       inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_te3ca <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 Subtract Number(0n97/0x61u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 97))
04 00 9f 

# 02372 Add8NoCarryIn [Register(0x40), Register(0x00), Register(0x40)]
#       inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_te3ca <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 Subtract Number(0n97/0x61u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 97))
14 40 00 40 

# inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t45e4 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_te3ca Add Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
# Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
# 02376 LoadImm8 [Register(0x00), Constant8(0x0a=10)]
#       inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t45e4 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_te3ca Add Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
04 00 0a 

# 02379 Add8NoCarryIn [Register(0x40), Register(0x00), Register(0x40)]
#       inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t45e4 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_te3ca Add Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
14 40 00 40 

# inline_main_parseHex_17_t61f3 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t45e4 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
# 0237d Copy8 [Register(0x40), Register(0x51)]
#       inline_main_parseHex_17_t61f3 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t45e4 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
0b 40 51 

# goto inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_function_end_parseHexNibble Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
# 02380 JmpImm [Label24(inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_function_end_parseHexNibble)]
#       goto inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_function_end_parseHexNibble Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
70 bd 23 00 

# goto inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# 02384 JmpImm [Label24(inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_end_0)]
#       goto inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
70 88 23 00 

# :inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_2 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_2
# :inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_end_0
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))\nIfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }\nComparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t2ac9 <- 0n57/0x39u8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
# Number(U8, 57)
# 02388 LoadImm8 [Register(0x51), Constant8(0x39=57)]
#       inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t2ac9 <- 0n57/0x39u8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
#       Number(U8, 57)
04 51 39 

# if inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 <= inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t2ac9 then 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_5' Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
# 0238b Cmp8 [Register(0x40), Register(0x51)]
#       if inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 <= inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t2ac9 then 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_5' Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
15 40 51 

# 0238e JcImm [Label24(inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_4)]
#       if inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 <= inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t2ac9 then 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_5' Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
71 96 23 00 

# 02392 JmpImm [Label24(inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_5)]
#       if inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 <= inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t2ac9 then 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_5' Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
70 a8 23 00 

# :inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_4 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_4
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
# Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))\nReturn { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }\nArithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t7ff1 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 Subtract Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
# Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
# 02396 LoadImm8 [Register(0x00), Constant8(0xd0=208)]
#       inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t7ff1 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 Subtract Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
04 00 d0 

# 02399 Add8NoCarryIn [Register(0x40), Register(0x00), Register(0x40)]
#       inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t7ff1 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 Subtract Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
14 40 00 40 

# inline_main_parseHex_17_t61f3 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t7ff1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
# 0239d Copy8 [Register(0x40), Register(0x51)]
#       inline_main_parseHex_17_t61f3 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t7ff1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
0b 40 51 

# goto inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_function_end_parseHexNibble Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
# 023a0 JmpImm [Label24(inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_function_end_parseHexNibble)]
#       goto inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_function_end_parseHexNibble Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
70 bd 23 00 

# goto inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_end_3 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# 023a4 JmpImm [Label24(inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_end_3)]
#       goto inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_end_3 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
70 a8 23 00 

# :inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_5 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_5
# :inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_end_3 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_parseHexNibble_if_end_3
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
# Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
# Arithmetic(Subtract, Ident("ch"), Number(U8, 65))
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))\nReturn { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }\nArithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))\nArithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_td437 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 Subtract Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
# Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
# Arithmetic(Subtract, Ident("ch"), Number(U8, 65))
# 023a8 LoadImm8 [Register(0x00), Constant8(0xbf=191)]
#       inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_td437 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 Subtract Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 65))
04 00 bf 

# 023ab Add8NoCarryIn [Register(0x40), Register(0x00), Register(0x40)]
#       inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_td437 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_tdcd9 Subtract Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 65))
14 40 00 40 

# inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t3fb8 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_td437 Add Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
# Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
# 023af LoadImm8 [Register(0x00), Constant8(0x0a=10)]
#       inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t3fb8 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_td437 Add Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
04 00 0a 

# 023b2 Add8NoCarryIn [Register(0x40), Register(0x00), Register(0x40)]
#       inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t3fb8 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_td437 Add Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
14 40 00 40 

# inline_main_parseHex_17_t61f3 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t3fb8 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
# 023b6 Copy8 [Register(0x40), Register(0x51)]
#       inline_main_parseHex_17_t61f3 <- inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_t3fb8 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
0b 40 51 

# goto inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_function_end_parseHexNibble Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
# 023b9 JmpImm [Label24(inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_function_end_parseHexNibble)]
#       goto inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_function_end_parseHexNibble Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
70 bd 23 00 

# :inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_function_end_parseHexNibble None
# inline_main_parseHex_17_inline_parseHex_parseHexNibble_16_function_end_parseHexNibble
# inline_main_parseHex_17_h <- inline_main_parseHex_17_t4768 Add Var(inline_main_parseHex_17_t61f3) Some('/home/john/lutcomp/programs/lib/print_hex.j':(45,5))
# Assign { target: Ident("h"), var_type: None, value: Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
# Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
# 023bd Add8NoCarryIn [Register(0x52), Register(0x51), Register(0x51)]
#       inline_main_parseHex_17_h <- inline_main_parseHex_17_t4768 Add Var(inline_main_parseHex_17_t61f3) Some('/home/john/lutcomp/programs/lib/print_hex.j':(45,5))
#       Assign { target: Ident("h"), var_type: None, value: Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
#       Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
14 52 51 51 

# inline_main_parseHex_17_t4768 <- inline_main_parseHex_17_h U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(46,5))
# Return { value: Some(Ident("h")) }
# Ident("h")
# 023c1 Copy8 [Register(0x51), Register(0x52)]
#       inline_main_parseHex_17_t4768 <- inline_main_parseHex_17_h U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(46,5))
#       Return { value: Some(Ident("h")) }
#       Ident("h")
0b 51 52 

# t2bfd <- inline_main_parseHex_17_t4768 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(46,5))
# Return { value: Some(Ident("h")) }
# 023c4 Copy8 [Register(0x52), Register(0x40)]
#       t2bfd <- inline_main_parseHex_17_t4768 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(46,5))
#       Return { value: Some(Ident("h")) }
0b 52 40 

# goto inline_main_parseHex_17_function_end_parseHex Some('/home/john/lutcomp/programs/lib/print_hex.j':(46,5))
# Return { value: Some(Ident("h")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_parseHex_17_function_end_parseHex Some('/home/john/lutcomp/programs/lib/print_hex.j':(46,5))\nReturn { value: Some(Ident(\"h\")) }\n", opcode: JmpImm, args: [Label24(inline_main_parseHex_17_function_end_parseHex)], resolved: None }
# :inline_main_parseHex_17_function_end_parseHex None
# inline_main_parseHex_17_function_end_parseHex
# mem[tbf00] <- t2bfd U8 Some('programs/app/bootram.j':(22,5))
# Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }
# 023c7 Store8 [Register(0x40), Register(0x54)]
#       mem[tbf00] <- t2bfd U8 Some('programs/app/bootram.j':(22,5))
#       Assign { target: Deref(Ident("p_byte")), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Number(USIZE, 1)))] }) }
06 40 54 

# goto main_if_end_3 Some('programs/app/bootram.j':(22,5))
# 023ca JmpImm [Label24(main_if_end_3)]
#       goto main_if_end_3 Some('programs/app/bootram.j':(22,5))
70 57 2b 00 

# :main_if_else_2_9 Some('programs/app/bootram.j':(22,5))
# main_if_else_2_9
# tdcd9 <- ch U8 Some('programs/app/bootram.j':(22,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 110) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/app/bootram.j':(22,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 110) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# t1129 <- 0n110/0x6eu8  Some('programs/app/bootram.j':(22,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 110) }
# Number(U8, 110)
# 023ce LoadImm8 [Register(0x51), Constant8(0x6e=110)]
#       t1129 <- 0n110/0x6eu8  Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 110) }
#       Number(U8, 110)
04 51 6e 

# if tdcd9 == t1129 then 'main_if_true_3_10' else 'main_if_else_3_11' Some('programs/app/bootram.j':(22,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 110) }
# 023d1 Cmp8 [Register(0x40), Register(0x51)]
#       if tdcd9 == t1129 then 'main_if_true_3_10' else 'main_if_else_3_11' Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 110) }
15 40 51 

# 023d4 JzImm [Label24(main_if_true_3_10)]
#       if tdcd9 == t1129 then 'main_if_true_3_10' else 'main_if_else_3_11' Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 110) }
72 dc 23 00 

# 023d8 JmpImm [Label24(main_if_else_3_11)]
#       if tdcd9 == t1129 then 'main_if_true_3_10' else 'main_if_else_3_11' Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 110) }
70 e6 23 00 

# :main_if_true_3_10 Some('programs/app/bootram.j':(22,5))
# main_if_true_3_10
# t2bc4 <- addr U32 Some('programs/app/bootram.j':(22,5))
# Assign { target: Ident("addr"), var_type: None, value: Arithmetic(Add, Ident("addr"), Number(U8, 1)) }
# Arithmetic(Add, Ident("addr"), Number(U8, 1))
# Ident("addr")
# optimized away noop copy Instruction { source: "t2bc4 <- addr U32 Some('programs/app/bootram.j':(22,5))\nAssign { target: Ident(\"addr\"), var_type: None, value: Arithmetic(Add, Ident(\"addr\"), Number(U8, 1)) }\nArithmetic(Add, Ident(\"addr\"), Number(U8, 1))\nIdent(\"addr\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# addr <- t2bc4 Add Number(0n1/0x00000001u32) Some('programs/app/bootram.j':(22,5))
# Assign { target: Ident("addr"), var_type: None, value: Arithmetic(Add, Ident("addr"), Number(U8, 1)) }
# Arithmetic(Add, Ident("addr"), Number(U8, 1))
# 023dc AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       addr <- t2bc4 Add Number(0n1/0x00000001u32) Some('programs/app/bootram.j':(22,5))
#       Assign { target: Ident("addr"), var_type: None, value: Arithmetic(Add, Ident("addr"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("addr"), Number(U8, 1))
32 3c 01 00 00 00 

# goto main_if_end_3 Some('programs/app/bootram.j':(22,5))
# 023e2 JmpImm [Label24(main_if_end_3)]
#       goto main_if_end_3 Some('programs/app/bootram.j':(22,5))
70 57 2b 00 

# :main_if_else_3_11 Some('programs/app/bootram.j':(22,5))
# main_if_else_3_11
# tdcd9 <- ch U8 Some('programs/app/bootram.j':(22,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 97) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/app/bootram.j':(22,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 97) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# t4421 <- 0n97/0x61u8  Some('programs/app/bootram.j':(22,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 97) }
# Number(U8, 97)
# 023e6 LoadImm8 [Register(0x51), Constant8(0x61=97)]
#       t4421 <- 0n97/0x61u8  Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 97) }
#       Number(U8, 97)
04 51 61 

# if tdcd9 == t4421 then 'main_if_true_4_12' else 'main_if_else_4_13' Some('programs/app/bootram.j':(22,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 97) }
# 023e9 Cmp8 [Register(0x40), Register(0x51)]
#       if tdcd9 == t4421 then 'main_if_true_4_12' else 'main_if_else_4_13' Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 97) }
15 40 51 

# 023ec JzImm [Label24(main_if_true_4_12)]
#       if tdcd9 == t4421 then 'main_if_true_4_12' else 'main_if_else_4_13' Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 97) }
72 f4 23 00 

# 023f0 JmpImm [Label24(main_if_else_4_13)]
#       if tdcd9 == t4421 then 'main_if_true_4_12' else 'main_if_else_4_13' Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 97) }
70 4a 28 00 

# :main_if_true_4_12 Some('programs/app/bootram.j':(22,5))
# main_if_true_4_12
# t7f1c <- addr[0x03..0x04] U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] }) }
# Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] })
# Index("addr", Number(USIZE, 3))
# 023f4 Copy8 [Register(0x3f), Register(0x68)]
#       t7f1c <- addr[0x03..0x04] U8 Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] }) }
#       Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] })
#       Index("addr", Number(USIZE, 3))
0b 3f 68 

# inline_main_printHex_61_a <- t7f1c U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] }) }
# Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] })
# 023f7 Copy8 [Register(0x68), Register(0x40)]
#       inline_main_printHex_61_a <- t7f1c U8 Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] }) }
#       Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 3))] })
0b 68 40 

# inline_main_printHex_61_t8792 <- inline_main_printHex_61_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
# Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
# Ident("a")
# 023fa Copy8 [Register(0x40), Register(0x52)]
#       inline_main_printHex_61_t8792 <- inline_main_printHex_61_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
#       Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
#       Ident("a")
0b 40 52 

# inline_main_printHex_61_t610c <- 0n15/0x0fu8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
# Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
# Number(U8, 15)
# 023fd LoadImm8 [Register(0x51), Constant8(0x0f=15)]
#       inline_main_printHex_61_t610c <- 0n15/0x0fu8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
#       Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
#       Number(U8, 15)
04 51 0f 

# if inline_main_printHex_61_t8792 > inline_main_printHex_61_t610c then 'inline_main_printHex_61_printHex_if_true_0_1' else 'inline_main_printHex_61_printHex_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
# Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
# 02400 Cmp8 [Register(0x52), Register(0x51)]
#       if inline_main_printHex_61_t8792 > inline_main_printHex_61_t610c then 'inline_main_printHex_61_printHex_if_true_0_1' else 'inline_main_printHex_61_printHex_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
#       Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
15 52 51 

# 02403 JcImm [Label24(inline_main_printHex_61_printHex_if_else_0_2)]
#       if inline_main_printHex_61_t8792 > inline_main_printHex_61_t610c then 'inline_main_printHex_61_printHex_if_true_0_1' else 'inline_main_printHex_61_printHex_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
#       Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
71 84 24 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_61_t8792 > inline_main_printHex_61_t610c then 'inline_main_printHex_61_printHex_if_true_0_1' else 'inline_main_printHex_61_printHex_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }\nComparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_61_printHex_if_true_0_1)], resolved: None }
# :inline_main_printHex_61_printHex_if_true_0_1 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
# inline_main_printHex_61_printHex_if_true_0_1
# inline_main_printHex_61_t8792 <- inline_main_printHex_61_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }
# Arithmetic(Divide, Ident("a"), Number(U8, 16))
# Ident("a")
# 02407 Copy8 [Register(0x40), Register(0x52)]
#       inline_main_printHex_61_t8792 <- inline_main_printHex_61_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 16))
#       Ident("a")
0b 40 52 

# inline_main_printHex_61_b <- inline_main_printHex_61_t8792 Divide Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }
# Arithmetic(Divide, Ident("a"), Number(U8, 16))
# 0240a LoadImm8 [Register(0x00), Constant8(0x10=16)]
#       inline_main_printHex_61_b <- inline_main_printHex_61_t8792 Divide Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 16))
04 00 10 

# 0240d Divide8 [Register(0x52), Register(0x00), Register(0x51)]
#       inline_main_printHex_61_b <- inline_main_printHex_61_t8792 Divide Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 16))
17 52 00 51 

# inline_main_printHex_61_tace9 <- inline_main_printHex_61_b U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }
# Call(Call { function: "printHexDigit", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_main_printHex_61_tace9 <- inline_main_printHex_61_b U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))\nVoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }\nCall(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_printHex_61_inline_printHex_printHexDigit_58_a <- inline_main_printHex_61_tace9 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }
# Call(Call { function: "printHexDigit", parameters: [Ident("b")] })
# 02411 Copy8 [Register(0x51), Register(0x52)]
#       inline_main_printHex_61_inline_printHex_printHexDigit_58_a <- inline_main_printHex_61_tace9 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }
#       Call(Call { function: "printHexDigit", parameters: [Ident("b")] })
0b 51 52 

# inline_main_printHex_61_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_61_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_61_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_61_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_61_inline_printHex_printHexDigit_58_td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# Number(U8, 10)
# 02414 LoadImm8 [Register(0x53), Constant8(0x0a=10)]
#       inline_main_printHex_61_inline_printHex_printHexDigit_58_td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
#       Number(U8, 10)
04 53 0a 

# if inline_main_printHex_61_inline_printHex_printHexDigit_58_t8792 < inline_main_printHex_61_inline_printHex_printHexDigit_58_td7b5 then 'inline_main_printHex_61_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1' else 'inline_main_printHex_61_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# 02417 Cmp8 [Register(0x53), Register(0x52)]
#       if inline_main_printHex_61_inline_printHex_printHexDigit_58_t8792 < inline_main_printHex_61_inline_printHex_printHexDigit_58_td7b5 then 'inline_main_printHex_61_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1' else 'inline_main_printHex_61_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
15 53 52 

# 0241a JcImm [Label24(inline_main_printHex_61_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2)]
#       if inline_main_printHex_61_inline_printHex_printHexDigit_58_t8792 < inline_main_printHex_61_inline_printHex_printHexDigit_58_td7b5 then 'inline_main_printHex_61_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1' else 'inline_main_printHex_61_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
71 44 24 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_61_inline_printHex_printHexDigit_58_t8792 < inline_main_printHex_61_inline_printHex_printHexDigit_58_td7b5 then 'inline_main_printHex_61_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1' else 'inline_main_printHex_61_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_61_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_61_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# inline_main_printHex_61_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1
# inline_main_printHex_61_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_61_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_61_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_61_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })\nArithmetic(Add, Ident(\"a\"), Number(U8, 48))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_61_inline_printHex_printHexDigit_58_t6db1 <- inline_main_printHex_61_inline_printHex_printHexDigit_58_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# 0241e LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       inline_main_printHex_61_inline_printHex_printHexDigit_58_t6db1 <- inline_main_printHex_61_inline_printHex_printHexDigit_58_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
04 00 30 

# 02421 Add8NoCarryIn [Register(0x52), Register(0x00), Register(0x52)]
#       inline_main_printHex_61_inline_printHex_printHexDigit_58_t6db1 <- inline_main_printHex_61_inline_printHex_printHexDigit_58_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
14 52 00 52 

# inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c <- inline_main_printHex_61_inline_printHex_printHexDigit_58_t6db1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# optimized away noop copy Instruction { source: "inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c <- inline_main_printHex_61_inline_printHex_printHexDigit_58_t6db1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# None <= call io_write0(inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02425 Out0 [Register(0x52)]
#       IoWrite0
68 52 

# inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# None <= call lcd_putc(inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 02427 Copy8 [Register(0x52), Register(0x00)]
#       Arg0[ch]=inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 None <= call lcd_putc(inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 52 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 0242a AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02430 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 3a 24 00 00 

# 02436 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 0243a AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_function_end_putc)], resolved: None }
# :inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_function_end_putc None
# inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_function_end_putc
# goto inline_main_printHex_61_inline_printHex_printHexDigit_58_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# 02440 JmpImm [Label24(inline_main_printHex_61_inline_printHex_printHexDigit_58_printHexDigit_if_end_0)]
#       goto inline_main_printHex_61_inline_printHex_printHexDigit_58_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
70 6d 24 00 

# :inline_main_printHex_61_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# inline_main_printHex_61_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2
# inline_main_printHex_61_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_61_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
# Arithmetic(Subtract, Ident("a"), Number(U8, 10))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_61_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_61_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }\nArithmetic(Subtract, Ident(\"a\"), Number(U8, 10))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_61_inline_printHex_printHexDigit_58_a <- inline_main_printHex_61_inline_printHex_printHexDigit_58_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
# Arithmetic(Subtract, Ident("a"), Number(U8, 10))
# 02444 LoadImm8 [Register(0x00), Constant8(0xf6=246)]
#       inline_main_printHex_61_inline_printHex_printHexDigit_58_a <- inline_main_printHex_61_inline_printHex_printHexDigit_58_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Subtract, Ident("a"), Number(U8, 10))
04 00 f6 

# 02447 Add8NoCarryIn [Register(0x52), Register(0x00), Register(0x52)]
#       inline_main_printHex_61_inline_printHex_printHexDigit_58_a <- inline_main_printHex_61_inline_printHex_printHexDigit_58_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Subtract, Ident("a"), Number(U8, 10))
14 52 00 52 

# inline_main_printHex_61_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_61_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
# Arithmetic(Add, Ident("a"), Number(U8, 65))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_61_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_61_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }\nArithmetic(Add, Ident(\"a\"), Number(U8, 65))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_61_inline_printHex_printHexDigit_58_a <- inline_main_printHex_61_inline_printHex_printHexDigit_58_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
# Arithmetic(Add, Ident("a"), Number(U8, 65))
# 0244b LoadImm8 [Register(0x00), Constant8(0x41=65)]
#       inline_main_printHex_61_inline_printHex_printHexDigit_58_a <- inline_main_printHex_61_inline_printHex_printHexDigit_58_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
#       Arithmetic(Add, Ident("a"), Number(U8, 65))
04 00 41 

# 0244e Add8NoCarryIn [Register(0x52), Register(0x00), Register(0x52)]
#       inline_main_printHex_61_inline_printHex_printHexDigit_58_a <- inline_main_printHex_61_inline_printHex_printHexDigit_58_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
#       Arithmetic(Add, Ident("a"), Number(U8, 65))
14 52 00 52 

# inline_main_printHex_61_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_61_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }
# Call(Call { function: "putc", parameters: [Ident("a")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_61_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_61_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }\nCall(Call { function: \"putc\", parameters: [Ident(\"a\")] })\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c <- inline_main_printHex_61_inline_printHex_printHexDigit_58_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }
# Call(Call { function: "putc", parameters: [Ident("a")] })
# optimized away noop copy Instruction { source: "inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c <- inline_main_printHex_61_inline_printHex_printHexDigit_58_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }\nCall(Call { function: \"putc\", parameters: [Ident(\"a\")] })\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# None <= call io_write0(inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02452 Out0 [Register(0x52)]
#       IoWrite0
68 52 

# inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# None <= call lcd_putc(inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 02454 Copy8 [Register(0x52), Register(0x00)]
#       Arg0[ch]=inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 None <= call lcd_putc(inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 52 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02457 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 0245d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 67 24 00 00 

# 02463 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02467 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_function_end_putc)], resolved: None }
# :inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_function_end_putc None
# inline_main_printHex_61_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_function_end_putc
# :inline_main_printHex_61_inline_printHex_printHexDigit_58_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# inline_main_printHex_61_inline_printHex_printHexDigit_58_printHexDigit_if_end_0
# goto inline_main_printHex_61_inline_printHex_printHexDigit_58_function_end_printHexDigit None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_61_inline_printHex_printHexDigit_58_function_end_printHexDigit None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_61_inline_printHex_printHexDigit_58_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_61_inline_printHex_printHexDigit_58_function_end_printHexDigit None
# inline_main_printHex_61_inline_printHex_printHexDigit_58_function_end_printHexDigit
# inline_main_printHex_61_t8792 <- inline_main_printHex_61_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
# Ident("a")
# 0246d Copy8 [Register(0x40), Register(0x52)]
#       inline_main_printHex_61_t8792 <- inline_main_printHex_61_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
#       Ident("a")
0b 40 52 

# inline_main_printHex_61_tace9 <- inline_main_printHex_61_b U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
# Arithmetic(Multiply, Ident("b"), Number(U8, 16))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_main_printHex_61_tace9 <- inline_main_printHex_61_b U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }\nArithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))\nArithmetic(Multiply, Ident(\"b\"), Number(U8, 16))\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_printHex_61_t4271 <- inline_main_printHex_61_tace9 Multiply Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
# Arithmetic(Multiply, Ident("b"), Number(U8, 16))
# 02470 LoadImm8 [Register(0x00), Constant8(0x10=16)]
#       inline_main_printHex_61_t4271 <- inline_main_printHex_61_tace9 Multiply Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
#       Arithmetic(Multiply, Ident("b"), Number(U8, 16))
04 00 10 

# 02473 Mul8_8 [Register(0x51), Register(0x00), Register(0x40)]
#       inline_main_printHex_61_t4271 <- inline_main_printHex_61_tace9 Multiply Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
#       Arithmetic(Multiply, Ident("b"), Number(U8, 16))
10 51 00 40 

# inline_main_printHex_61_a <- inline_main_printHex_61_t8792 Subtract Var(inline_main_printHex_61_t4271) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
# 02477 Copy8 [Register(0x40), Register(0x00)]
#       inline_main_printHex_61_a <- inline_main_printHex_61_t8792 Subtract Var(inline_main_printHex_61_t4271) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
0b 40 00 

# 0247a Negate8 [Register(0x00)]
#       inline_main_printHex_61_a <- inline_main_printHex_61_t8792 Subtract Var(inline_main_printHex_61_t4271) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
02 00 

# 0247c Add8NoCarryIn [Register(0x52), Register(0x00), Register(0x40)]
#       inline_main_printHex_61_a <- inline_main_printHex_61_t8792 Subtract Var(inline_main_printHex_61_t4271) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
14 52 00 40 

# goto inline_main_printHex_61_printHex_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# 02480 JmpImm [Label24(inline_main_printHex_61_printHex_if_end_0)]
#       goto inline_main_printHex_61_printHex_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
70 a2 24 00 

# :inline_main_printHex_61_printHex_if_else_0_2 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# inline_main_printHex_61_printHex_if_else_0_2
# inline_main_printHex_61_tf48d <- 0n48/0x30u8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 48)] })
# Number(U8, 48)
# 02484 LoadImm8 [Register(0x51), Constant8(0x30=48)]
#       inline_main_printHex_61_tf48d <- 0n48/0x30u8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 48)] })
#       Number(U8, 48)
04 51 30 

# inline_main_printHex_61_inline_printHex_putc_55_c <- inline_main_printHex_61_tf48d U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 48)] })
# optimized away noop copy Instruction { source: "inline_main_printHex_61_inline_printHex_putc_55_c <- inline_main_printHex_61_tf48d U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 48)] })\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_printHex_61_inline_printHex_putc_55_tac13 <- inline_main_printHex_61_inline_printHex_putc_55_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_61_inline_printHex_putc_55_tac13 <- inline_main_printHex_61_inline_printHex_putc_55_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# None <= call io_write0(inline_main_printHex_61_inline_printHex_putc_55_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02487 Out0 [Register(0x51)]
#       IoWrite0
68 51 

# inline_main_printHex_61_inline_printHex_putc_55_tac13 <- inline_main_printHex_61_inline_printHex_putc_55_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_61_inline_printHex_putc_55_tac13 <- inline_main_printHex_61_inline_printHex_putc_55_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# None <= call lcd_putc(inline_main_printHex_61_inline_printHex_putc_55_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 02489 Copy8 [Register(0x51), Register(0x00)]
#       Arg0[ch]=inline_main_printHex_61_inline_printHex_putc_55_tac13 None <= call lcd_putc(inline_main_printHex_61_inline_printHex_putc_55_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 51 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 0248c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02492 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 9c 24 00 00 

# 02498 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 0249c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_printHex_61_inline_printHex_putc_55_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_61_inline_printHex_putc_55_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_61_inline_printHex_putc_55_function_end_putc)], resolved: None }
# :inline_main_printHex_61_inline_printHex_putc_55_function_end_putc None
# inline_main_printHex_61_inline_printHex_putc_55_function_end_putc
# :inline_main_printHex_61_printHex_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# inline_main_printHex_61_printHex_if_end_0
# inline_main_printHex_61_t8792 <- inline_main_printHex_61_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(22,5))
# VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("a")] }) }
# Call(Call { function: "printHexDigit", parameters: [Ident("a")] })
# Ident("a")
# 024a2 Copy8 [Register(0x40), Register(0x52)]
#       inline_main_printHex_61_t8792 <- inline_main_printHex_61_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("a")] }) }
#       Call(Call { function: "printHexDigit", parameters: [Ident("a")] })
#       Ident("a")
0b 40 52 

# inline_main_printHex_61_inline_printHex_printHexDigit_59_a <- inline_main_printHex_61_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(22,5))
# VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("a")] }) }
# Call(Call { function: "printHexDigit", parameters: [Ident("a")] })
# 024a5 Copy8 [Register(0x52), Register(0x40)]
#       inline_main_printHex_61_inline_printHex_printHexDigit_59_a <- inline_main_printHex_61_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("a")] }) }
#       Call(Call { function: "printHexDigit", parameters: [Ident("a")] })
0b 52 40 

# inline_main_printHex_61_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_61_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_61_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_61_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_61_inline_printHex_printHexDigit_59_td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# Number(U8, 10)
# 024a8 LoadImm8 [Register(0x51), Constant8(0x0a=10)]
#       inline_main_printHex_61_inline_printHex_printHexDigit_59_td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
#       Number(U8, 10)
04 51 0a 

# if inline_main_printHex_61_inline_printHex_printHexDigit_59_t8792 < inline_main_printHex_61_inline_printHex_printHexDigit_59_td7b5 then 'inline_main_printHex_61_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1' else 'inline_main_printHex_61_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# 024ab Cmp8 [Register(0x51), Register(0x40)]
#       if inline_main_printHex_61_inline_printHex_printHexDigit_59_t8792 < inline_main_printHex_61_inline_printHex_printHexDigit_59_td7b5 then 'inline_main_printHex_61_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1' else 'inline_main_printHex_61_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
15 51 40 

# 024ae JcImm [Label24(inline_main_printHex_61_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2)]
#       if inline_main_printHex_61_inline_printHex_printHexDigit_59_t8792 < inline_main_printHex_61_inline_printHex_printHexDigit_59_td7b5 then 'inline_main_printHex_61_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1' else 'inline_main_printHex_61_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
71 d8 24 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_61_inline_printHex_printHexDigit_59_t8792 < inline_main_printHex_61_inline_printHex_printHexDigit_59_td7b5 then 'inline_main_printHex_61_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1' else 'inline_main_printHex_61_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_61_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_61_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# inline_main_printHex_61_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1
# inline_main_printHex_61_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_61_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_61_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_61_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })\nArithmetic(Add, Ident(\"a\"), Number(U8, 48))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_61_inline_printHex_printHexDigit_59_t6db1 <- inline_main_printHex_61_inline_printHex_printHexDigit_59_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# 024b2 LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       inline_main_printHex_61_inline_printHex_printHexDigit_59_t6db1 <- inline_main_printHex_61_inline_printHex_printHexDigit_59_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
04 00 30 

# 024b5 Add8NoCarryIn [Register(0x40), Register(0x00), Register(0x40)]
#       inline_main_printHex_61_inline_printHex_printHexDigit_59_t6db1 <- inline_main_printHex_61_inline_printHex_printHexDigit_59_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
14 40 00 40 

# inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c <- inline_main_printHex_61_inline_printHex_printHexDigit_59_t6db1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# optimized away noop copy Instruction { source: "inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c <- inline_main_printHex_61_inline_printHex_printHexDigit_59_t6db1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 024b9 Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 024bb Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 None <= call lcd_putc(inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 024be AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 024c4 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c ce 24 00 00 

# 024ca JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 024ce AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_function_end_putc)], resolved: None }
# :inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_function_end_putc None
# inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_function_end_putc
# goto inline_main_printHex_61_inline_printHex_printHexDigit_59_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# 024d4 JmpImm [Label24(inline_main_printHex_61_inline_printHex_printHexDigit_59_printHexDigit_if_end_0)]
#       goto inline_main_printHex_61_inline_printHex_printHexDigit_59_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
70 01 25 00 

# :inline_main_printHex_61_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# inline_main_printHex_61_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2
# inline_main_printHex_61_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_61_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
# Arithmetic(Subtract, Ident("a"), Number(U8, 10))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_61_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_61_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }\nArithmetic(Subtract, Ident(\"a\"), Number(U8, 10))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_61_inline_printHex_printHexDigit_59_a <- inline_main_printHex_61_inline_printHex_printHexDigit_59_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
# Arithmetic(Subtract, Ident("a"), Number(U8, 10))
# 024d8 LoadImm8 [Register(0x00), Constant8(0xf6=246)]
#       inline_main_printHex_61_inline_printHex_printHexDigit_59_a <- inline_main_printHex_61_inline_printHex_printHexDigit_59_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Subtract, Ident("a"), Number(U8, 10))
04 00 f6 

# 024db Add8NoCarryIn [Register(0x40), Register(0x00), Register(0x40)]
#       inline_main_printHex_61_inline_printHex_printHexDigit_59_a <- inline_main_printHex_61_inline_printHex_printHexDigit_59_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Subtract, Ident("a"), Number(U8, 10))
14 40 00 40 

# inline_main_printHex_61_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_61_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
# Arithmetic(Add, Ident("a"), Number(U8, 65))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_61_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_61_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }\nArithmetic(Add, Ident(\"a\"), Number(U8, 65))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_61_inline_printHex_printHexDigit_59_a <- inline_main_printHex_61_inline_printHex_printHexDigit_59_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
# Arithmetic(Add, Ident("a"), Number(U8, 65))
# 024df LoadImm8 [Register(0x00), Constant8(0x41=65)]
#       inline_main_printHex_61_inline_printHex_printHexDigit_59_a <- inline_main_printHex_61_inline_printHex_printHexDigit_59_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
#       Arithmetic(Add, Ident("a"), Number(U8, 65))
04 00 41 

# 024e2 Add8NoCarryIn [Register(0x40), Register(0x00), Register(0x40)]
#       inline_main_printHex_61_inline_printHex_printHexDigit_59_a <- inline_main_printHex_61_inline_printHex_printHexDigit_59_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
#       Arithmetic(Add, Ident("a"), Number(U8, 65))
14 40 00 40 

# inline_main_printHex_61_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_61_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }
# Call(Call { function: "putc", parameters: [Ident("a")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_61_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_61_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }\nCall(Call { function: \"putc\", parameters: [Ident(\"a\")] })\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c <- inline_main_printHex_61_inline_printHex_printHexDigit_59_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }
# Call(Call { function: "putc", parameters: [Ident("a")] })
# optimized away noop copy Instruction { source: "inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c <- inline_main_printHex_61_inline_printHex_printHexDigit_59_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }\nCall(Call { function: \"putc\", parameters: [Ident(\"a\")] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 024e6 Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 024e8 Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 None <= call lcd_putc(inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 024eb AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 024f1 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c fb 24 00 00 

# 024f7 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 024fb AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_function_end_putc)], resolved: None }
# :inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_function_end_putc None
# inline_main_printHex_61_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_function_end_putc
# :inline_main_printHex_61_inline_printHex_printHexDigit_59_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# inline_main_printHex_61_inline_printHex_printHexDigit_59_printHexDigit_if_end_0
# goto inline_main_printHex_61_inline_printHex_printHexDigit_59_function_end_printHexDigit None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_61_inline_printHex_printHexDigit_59_function_end_printHexDigit None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_61_inline_printHex_printHexDigit_59_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_61_inline_printHex_printHexDigit_59_function_end_printHexDigit None
# inline_main_printHex_61_inline_printHex_printHexDigit_59_function_end_printHexDigit
# goto inline_main_printHex_61_function_end_printHex None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_61_function_end_printHex None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_61_function_end_printHex)], resolved: None }
# :inline_main_printHex_61_function_end_printHex None
# inline_main_printHex_61_function_end_printHex
# teaed <- addr[0x02..0x03] U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] }) }
# Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] })
# Index("addr", Number(USIZE, 2))
# 02501 Copy8 [Register(0x3e), Register(0x68)]
#       teaed <- addr[0x02..0x03] U8 Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] }) }
#       Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] })
#       Index("addr", Number(USIZE, 2))
0b 3e 68 

# inline_main_printHex_62_a <- teaed U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] }) }
# Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] })
# 02504 Copy8 [Register(0x68), Register(0x40)]
#       inline_main_printHex_62_a <- teaed U8 Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] }) }
#       Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 2))] })
0b 68 40 

# inline_main_printHex_62_t8792 <- inline_main_printHex_62_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
# Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
# Ident("a")
# 02507 Copy8 [Register(0x40), Register(0x52)]
#       inline_main_printHex_62_t8792 <- inline_main_printHex_62_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
#       Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
#       Ident("a")
0b 40 52 

# inline_main_printHex_62_t610c <- 0n15/0x0fu8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
# Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
# Number(U8, 15)
# 0250a LoadImm8 [Register(0x51), Constant8(0x0f=15)]
#       inline_main_printHex_62_t610c <- 0n15/0x0fu8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
#       Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
#       Number(U8, 15)
04 51 0f 

# if inline_main_printHex_62_t8792 > inline_main_printHex_62_t610c then 'inline_main_printHex_62_printHex_if_true_0_1' else 'inline_main_printHex_62_printHex_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
# Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
# 0250d Cmp8 [Register(0x52), Register(0x51)]
#       if inline_main_printHex_62_t8792 > inline_main_printHex_62_t610c then 'inline_main_printHex_62_printHex_if_true_0_1' else 'inline_main_printHex_62_printHex_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
#       Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
15 52 51 

# 02510 JcImm [Label24(inline_main_printHex_62_printHex_if_else_0_2)]
#       if inline_main_printHex_62_t8792 > inline_main_printHex_62_t610c then 'inline_main_printHex_62_printHex_if_true_0_1' else 'inline_main_printHex_62_printHex_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
#       Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
71 91 25 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_62_t8792 > inline_main_printHex_62_t610c then 'inline_main_printHex_62_printHex_if_true_0_1' else 'inline_main_printHex_62_printHex_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }\nComparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_62_printHex_if_true_0_1)], resolved: None }
# :inline_main_printHex_62_printHex_if_true_0_1 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
# inline_main_printHex_62_printHex_if_true_0_1
# inline_main_printHex_62_t8792 <- inline_main_printHex_62_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }
# Arithmetic(Divide, Ident("a"), Number(U8, 16))
# Ident("a")
# 02514 Copy8 [Register(0x40), Register(0x52)]
#       inline_main_printHex_62_t8792 <- inline_main_printHex_62_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 16))
#       Ident("a")
0b 40 52 

# inline_main_printHex_62_b <- inline_main_printHex_62_t8792 Divide Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }
# Arithmetic(Divide, Ident("a"), Number(U8, 16))
# 02517 LoadImm8 [Register(0x00), Constant8(0x10=16)]
#       inline_main_printHex_62_b <- inline_main_printHex_62_t8792 Divide Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 16))
04 00 10 

# 0251a Divide8 [Register(0x52), Register(0x00), Register(0x51)]
#       inline_main_printHex_62_b <- inline_main_printHex_62_t8792 Divide Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 16))
17 52 00 51 

# inline_main_printHex_62_tace9 <- inline_main_printHex_62_b U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }
# Call(Call { function: "printHexDigit", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_main_printHex_62_tace9 <- inline_main_printHex_62_b U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))\nVoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }\nCall(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_printHex_62_inline_printHex_printHexDigit_58_a <- inline_main_printHex_62_tace9 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }
# Call(Call { function: "printHexDigit", parameters: [Ident("b")] })
# 0251e Copy8 [Register(0x51), Register(0x52)]
#       inline_main_printHex_62_inline_printHex_printHexDigit_58_a <- inline_main_printHex_62_tace9 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }
#       Call(Call { function: "printHexDigit", parameters: [Ident("b")] })
0b 51 52 

# inline_main_printHex_62_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_62_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_62_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_62_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_62_inline_printHex_printHexDigit_58_td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# Number(U8, 10)
# 02521 LoadImm8 [Register(0x53), Constant8(0x0a=10)]
#       inline_main_printHex_62_inline_printHex_printHexDigit_58_td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
#       Number(U8, 10)
04 53 0a 

# if inline_main_printHex_62_inline_printHex_printHexDigit_58_t8792 < inline_main_printHex_62_inline_printHex_printHexDigit_58_td7b5 then 'inline_main_printHex_62_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1' else 'inline_main_printHex_62_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# 02524 Cmp8 [Register(0x53), Register(0x52)]
#       if inline_main_printHex_62_inline_printHex_printHexDigit_58_t8792 < inline_main_printHex_62_inline_printHex_printHexDigit_58_td7b5 then 'inline_main_printHex_62_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1' else 'inline_main_printHex_62_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
15 53 52 

# 02527 JcImm [Label24(inline_main_printHex_62_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2)]
#       if inline_main_printHex_62_inline_printHex_printHexDigit_58_t8792 < inline_main_printHex_62_inline_printHex_printHexDigit_58_td7b5 then 'inline_main_printHex_62_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1' else 'inline_main_printHex_62_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
71 51 25 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_62_inline_printHex_printHexDigit_58_t8792 < inline_main_printHex_62_inline_printHex_printHexDigit_58_td7b5 then 'inline_main_printHex_62_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1' else 'inline_main_printHex_62_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_62_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_62_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# inline_main_printHex_62_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1
# inline_main_printHex_62_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_62_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_62_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_62_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })\nArithmetic(Add, Ident(\"a\"), Number(U8, 48))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_62_inline_printHex_printHexDigit_58_t6db1 <- inline_main_printHex_62_inline_printHex_printHexDigit_58_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# 0252b LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       inline_main_printHex_62_inline_printHex_printHexDigit_58_t6db1 <- inline_main_printHex_62_inline_printHex_printHexDigit_58_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
04 00 30 

# 0252e Add8NoCarryIn [Register(0x52), Register(0x00), Register(0x52)]
#       inline_main_printHex_62_inline_printHex_printHexDigit_58_t6db1 <- inline_main_printHex_62_inline_printHex_printHexDigit_58_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
14 52 00 52 

# inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c <- inline_main_printHex_62_inline_printHex_printHexDigit_58_t6db1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# optimized away noop copy Instruction { source: "inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c <- inline_main_printHex_62_inline_printHex_printHexDigit_58_t6db1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# None <= call io_write0(inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02532 Out0 [Register(0x52)]
#       IoWrite0
68 52 

# inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# None <= call lcd_putc(inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 02534 Copy8 [Register(0x52), Register(0x00)]
#       Arg0[ch]=inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 None <= call lcd_putc(inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 52 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02537 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 0253d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 47 25 00 00 

# 02543 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02547 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_function_end_putc)], resolved: None }
# :inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_function_end_putc None
# inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_function_end_putc
# goto inline_main_printHex_62_inline_printHex_printHexDigit_58_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# 0254d JmpImm [Label24(inline_main_printHex_62_inline_printHex_printHexDigit_58_printHexDigit_if_end_0)]
#       goto inline_main_printHex_62_inline_printHex_printHexDigit_58_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
70 7a 25 00 

# :inline_main_printHex_62_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# inline_main_printHex_62_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2
# inline_main_printHex_62_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_62_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
# Arithmetic(Subtract, Ident("a"), Number(U8, 10))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_62_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_62_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }\nArithmetic(Subtract, Ident(\"a\"), Number(U8, 10))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_62_inline_printHex_printHexDigit_58_a <- inline_main_printHex_62_inline_printHex_printHexDigit_58_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
# Arithmetic(Subtract, Ident("a"), Number(U8, 10))
# 02551 LoadImm8 [Register(0x00), Constant8(0xf6=246)]
#       inline_main_printHex_62_inline_printHex_printHexDigit_58_a <- inline_main_printHex_62_inline_printHex_printHexDigit_58_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Subtract, Ident("a"), Number(U8, 10))
04 00 f6 

# 02554 Add8NoCarryIn [Register(0x52), Register(0x00), Register(0x52)]
#       inline_main_printHex_62_inline_printHex_printHexDigit_58_a <- inline_main_printHex_62_inline_printHex_printHexDigit_58_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Subtract, Ident("a"), Number(U8, 10))
14 52 00 52 

# inline_main_printHex_62_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_62_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
# Arithmetic(Add, Ident("a"), Number(U8, 65))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_62_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_62_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }\nArithmetic(Add, Ident(\"a\"), Number(U8, 65))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_62_inline_printHex_printHexDigit_58_a <- inline_main_printHex_62_inline_printHex_printHexDigit_58_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
# Arithmetic(Add, Ident("a"), Number(U8, 65))
# 02558 LoadImm8 [Register(0x00), Constant8(0x41=65)]
#       inline_main_printHex_62_inline_printHex_printHexDigit_58_a <- inline_main_printHex_62_inline_printHex_printHexDigit_58_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
#       Arithmetic(Add, Ident("a"), Number(U8, 65))
04 00 41 

# 0255b Add8NoCarryIn [Register(0x52), Register(0x00), Register(0x52)]
#       inline_main_printHex_62_inline_printHex_printHexDigit_58_a <- inline_main_printHex_62_inline_printHex_printHexDigit_58_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
#       Arithmetic(Add, Ident("a"), Number(U8, 65))
14 52 00 52 

# inline_main_printHex_62_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_62_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }
# Call(Call { function: "putc", parameters: [Ident("a")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_62_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_62_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }\nCall(Call { function: \"putc\", parameters: [Ident(\"a\")] })\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c <- inline_main_printHex_62_inline_printHex_printHexDigit_58_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }
# Call(Call { function: "putc", parameters: [Ident("a")] })
# optimized away noop copy Instruction { source: "inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c <- inline_main_printHex_62_inline_printHex_printHexDigit_58_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }\nCall(Call { function: \"putc\", parameters: [Ident(\"a\")] })\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# None <= call io_write0(inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 0255f Out0 [Register(0x52)]
#       IoWrite0
68 52 

# inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# None <= call lcd_putc(inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 02561 Copy8 [Register(0x52), Register(0x00)]
#       Arg0[ch]=inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 None <= call lcd_putc(inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 52 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02564 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 0256a StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 74 25 00 00 

# 02570 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02574 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_function_end_putc)], resolved: None }
# :inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_function_end_putc None
# inline_main_printHex_62_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_function_end_putc
# :inline_main_printHex_62_inline_printHex_printHexDigit_58_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# inline_main_printHex_62_inline_printHex_printHexDigit_58_printHexDigit_if_end_0
# goto inline_main_printHex_62_inline_printHex_printHexDigit_58_function_end_printHexDigit None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_62_inline_printHex_printHexDigit_58_function_end_printHexDigit None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_62_inline_printHex_printHexDigit_58_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_62_inline_printHex_printHexDigit_58_function_end_printHexDigit None
# inline_main_printHex_62_inline_printHex_printHexDigit_58_function_end_printHexDigit
# inline_main_printHex_62_t8792 <- inline_main_printHex_62_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
# Ident("a")
# 0257a Copy8 [Register(0x40), Register(0x52)]
#       inline_main_printHex_62_t8792 <- inline_main_printHex_62_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
#       Ident("a")
0b 40 52 

# inline_main_printHex_62_tace9 <- inline_main_printHex_62_b U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
# Arithmetic(Multiply, Ident("b"), Number(U8, 16))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_main_printHex_62_tace9 <- inline_main_printHex_62_b U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }\nArithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))\nArithmetic(Multiply, Ident(\"b\"), Number(U8, 16))\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_printHex_62_t4271 <- inline_main_printHex_62_tace9 Multiply Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
# Arithmetic(Multiply, Ident("b"), Number(U8, 16))
# 0257d LoadImm8 [Register(0x00), Constant8(0x10=16)]
#       inline_main_printHex_62_t4271 <- inline_main_printHex_62_tace9 Multiply Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
#       Arithmetic(Multiply, Ident("b"), Number(U8, 16))
04 00 10 

# 02580 Mul8_8 [Register(0x51), Register(0x00), Register(0x40)]
#       inline_main_printHex_62_t4271 <- inline_main_printHex_62_tace9 Multiply Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
#       Arithmetic(Multiply, Ident("b"), Number(U8, 16))
10 51 00 40 

# inline_main_printHex_62_a <- inline_main_printHex_62_t8792 Subtract Var(inline_main_printHex_62_t4271) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
# 02584 Copy8 [Register(0x40), Register(0x00)]
#       inline_main_printHex_62_a <- inline_main_printHex_62_t8792 Subtract Var(inline_main_printHex_62_t4271) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
0b 40 00 

# 02587 Negate8 [Register(0x00)]
#       inline_main_printHex_62_a <- inline_main_printHex_62_t8792 Subtract Var(inline_main_printHex_62_t4271) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
02 00 

# 02589 Add8NoCarryIn [Register(0x52), Register(0x00), Register(0x40)]
#       inline_main_printHex_62_a <- inline_main_printHex_62_t8792 Subtract Var(inline_main_printHex_62_t4271) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
14 52 00 40 

# goto inline_main_printHex_62_printHex_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# 0258d JmpImm [Label24(inline_main_printHex_62_printHex_if_end_0)]
#       goto inline_main_printHex_62_printHex_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
70 af 25 00 

# :inline_main_printHex_62_printHex_if_else_0_2 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# inline_main_printHex_62_printHex_if_else_0_2
# inline_main_printHex_62_tf48d <- 0n48/0x30u8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 48)] })
# Number(U8, 48)
# 02591 LoadImm8 [Register(0x51), Constant8(0x30=48)]
#       inline_main_printHex_62_tf48d <- 0n48/0x30u8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 48)] })
#       Number(U8, 48)
04 51 30 

# inline_main_printHex_62_inline_printHex_putc_55_c <- inline_main_printHex_62_tf48d U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 48)] })
# optimized away noop copy Instruction { source: "inline_main_printHex_62_inline_printHex_putc_55_c <- inline_main_printHex_62_tf48d U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 48)] })\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_printHex_62_inline_printHex_putc_55_tac13 <- inline_main_printHex_62_inline_printHex_putc_55_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_62_inline_printHex_putc_55_tac13 <- inline_main_printHex_62_inline_printHex_putc_55_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# None <= call io_write0(inline_main_printHex_62_inline_printHex_putc_55_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02594 Out0 [Register(0x51)]
#       IoWrite0
68 51 

# inline_main_printHex_62_inline_printHex_putc_55_tac13 <- inline_main_printHex_62_inline_printHex_putc_55_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_62_inline_printHex_putc_55_tac13 <- inline_main_printHex_62_inline_printHex_putc_55_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# None <= call lcd_putc(inline_main_printHex_62_inline_printHex_putc_55_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 02596 Copy8 [Register(0x51), Register(0x00)]
#       Arg0[ch]=inline_main_printHex_62_inline_printHex_putc_55_tac13 None <= call lcd_putc(inline_main_printHex_62_inline_printHex_putc_55_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 51 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02599 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 0259f StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c a9 25 00 00 

# 025a5 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 025a9 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_printHex_62_inline_printHex_putc_55_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_62_inline_printHex_putc_55_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_62_inline_printHex_putc_55_function_end_putc)], resolved: None }
# :inline_main_printHex_62_inline_printHex_putc_55_function_end_putc None
# inline_main_printHex_62_inline_printHex_putc_55_function_end_putc
# :inline_main_printHex_62_printHex_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# inline_main_printHex_62_printHex_if_end_0
# inline_main_printHex_62_t8792 <- inline_main_printHex_62_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(22,5))
# VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("a")] }) }
# Call(Call { function: "printHexDigit", parameters: [Ident("a")] })
# Ident("a")
# 025af Copy8 [Register(0x40), Register(0x52)]
#       inline_main_printHex_62_t8792 <- inline_main_printHex_62_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("a")] }) }
#       Call(Call { function: "printHexDigit", parameters: [Ident("a")] })
#       Ident("a")
0b 40 52 

# inline_main_printHex_62_inline_printHex_printHexDigit_59_a <- inline_main_printHex_62_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(22,5))
# VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("a")] }) }
# Call(Call { function: "printHexDigit", parameters: [Ident("a")] })
# 025b2 Copy8 [Register(0x52), Register(0x40)]
#       inline_main_printHex_62_inline_printHex_printHexDigit_59_a <- inline_main_printHex_62_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("a")] }) }
#       Call(Call { function: "printHexDigit", parameters: [Ident("a")] })
0b 52 40 

# inline_main_printHex_62_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_62_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_62_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_62_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_62_inline_printHex_printHexDigit_59_td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# Number(U8, 10)
# 025b5 LoadImm8 [Register(0x51), Constant8(0x0a=10)]
#       inline_main_printHex_62_inline_printHex_printHexDigit_59_td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
#       Number(U8, 10)
04 51 0a 

# if inline_main_printHex_62_inline_printHex_printHexDigit_59_t8792 < inline_main_printHex_62_inline_printHex_printHexDigit_59_td7b5 then 'inline_main_printHex_62_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1' else 'inline_main_printHex_62_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# 025b8 Cmp8 [Register(0x51), Register(0x40)]
#       if inline_main_printHex_62_inline_printHex_printHexDigit_59_t8792 < inline_main_printHex_62_inline_printHex_printHexDigit_59_td7b5 then 'inline_main_printHex_62_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1' else 'inline_main_printHex_62_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
15 51 40 

# 025bb JcImm [Label24(inline_main_printHex_62_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2)]
#       if inline_main_printHex_62_inline_printHex_printHexDigit_59_t8792 < inline_main_printHex_62_inline_printHex_printHexDigit_59_td7b5 then 'inline_main_printHex_62_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1' else 'inline_main_printHex_62_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
71 e5 25 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_62_inline_printHex_printHexDigit_59_t8792 < inline_main_printHex_62_inline_printHex_printHexDigit_59_td7b5 then 'inline_main_printHex_62_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1' else 'inline_main_printHex_62_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_62_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_62_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# inline_main_printHex_62_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1
# inline_main_printHex_62_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_62_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_62_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_62_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })\nArithmetic(Add, Ident(\"a\"), Number(U8, 48))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_62_inline_printHex_printHexDigit_59_t6db1 <- inline_main_printHex_62_inline_printHex_printHexDigit_59_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# 025bf LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       inline_main_printHex_62_inline_printHex_printHexDigit_59_t6db1 <- inline_main_printHex_62_inline_printHex_printHexDigit_59_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
04 00 30 

# 025c2 Add8NoCarryIn [Register(0x40), Register(0x00), Register(0x40)]
#       inline_main_printHex_62_inline_printHex_printHexDigit_59_t6db1 <- inline_main_printHex_62_inline_printHex_printHexDigit_59_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
14 40 00 40 

# inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c <- inline_main_printHex_62_inline_printHex_printHexDigit_59_t6db1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# optimized away noop copy Instruction { source: "inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c <- inline_main_printHex_62_inline_printHex_printHexDigit_59_t6db1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 025c6 Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 025c8 Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 None <= call lcd_putc(inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 025cb AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 025d1 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c db 25 00 00 

# 025d7 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 025db AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_function_end_putc)], resolved: None }
# :inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_function_end_putc None
# inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_function_end_putc
# goto inline_main_printHex_62_inline_printHex_printHexDigit_59_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# 025e1 JmpImm [Label24(inline_main_printHex_62_inline_printHex_printHexDigit_59_printHexDigit_if_end_0)]
#       goto inline_main_printHex_62_inline_printHex_printHexDigit_59_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
70 0e 26 00 

# :inline_main_printHex_62_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# inline_main_printHex_62_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2
# inline_main_printHex_62_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_62_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
# Arithmetic(Subtract, Ident("a"), Number(U8, 10))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_62_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_62_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }\nArithmetic(Subtract, Ident(\"a\"), Number(U8, 10))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_62_inline_printHex_printHexDigit_59_a <- inline_main_printHex_62_inline_printHex_printHexDigit_59_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
# Arithmetic(Subtract, Ident("a"), Number(U8, 10))
# 025e5 LoadImm8 [Register(0x00), Constant8(0xf6=246)]
#       inline_main_printHex_62_inline_printHex_printHexDigit_59_a <- inline_main_printHex_62_inline_printHex_printHexDigit_59_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Subtract, Ident("a"), Number(U8, 10))
04 00 f6 

# 025e8 Add8NoCarryIn [Register(0x40), Register(0x00), Register(0x40)]
#       inline_main_printHex_62_inline_printHex_printHexDigit_59_a <- inline_main_printHex_62_inline_printHex_printHexDigit_59_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Subtract, Ident("a"), Number(U8, 10))
14 40 00 40 

# inline_main_printHex_62_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_62_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
# Arithmetic(Add, Ident("a"), Number(U8, 65))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_62_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_62_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }\nArithmetic(Add, Ident(\"a\"), Number(U8, 65))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_62_inline_printHex_printHexDigit_59_a <- inline_main_printHex_62_inline_printHex_printHexDigit_59_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
# Arithmetic(Add, Ident("a"), Number(U8, 65))
# 025ec LoadImm8 [Register(0x00), Constant8(0x41=65)]
#       inline_main_printHex_62_inline_printHex_printHexDigit_59_a <- inline_main_printHex_62_inline_printHex_printHexDigit_59_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
#       Arithmetic(Add, Ident("a"), Number(U8, 65))
04 00 41 

# 025ef Add8NoCarryIn [Register(0x40), Register(0x00), Register(0x40)]
#       inline_main_printHex_62_inline_printHex_printHexDigit_59_a <- inline_main_printHex_62_inline_printHex_printHexDigit_59_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
#       Arithmetic(Add, Ident("a"), Number(U8, 65))
14 40 00 40 

# inline_main_printHex_62_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_62_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }
# Call(Call { function: "putc", parameters: [Ident("a")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_62_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_62_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }\nCall(Call { function: \"putc\", parameters: [Ident(\"a\")] })\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c <- inline_main_printHex_62_inline_printHex_printHexDigit_59_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }
# Call(Call { function: "putc", parameters: [Ident("a")] })
# optimized away noop copy Instruction { source: "inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c <- inline_main_printHex_62_inline_printHex_printHexDigit_59_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }\nCall(Call { function: \"putc\", parameters: [Ident(\"a\")] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 025f3 Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 025f5 Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 None <= call lcd_putc(inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 025f8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 025fe StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 08 26 00 00 

# 02604 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02608 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_function_end_putc)], resolved: None }
# :inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_function_end_putc None
# inline_main_printHex_62_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_function_end_putc
# :inline_main_printHex_62_inline_printHex_printHexDigit_59_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# inline_main_printHex_62_inline_printHex_printHexDigit_59_printHexDigit_if_end_0
# goto inline_main_printHex_62_inline_printHex_printHexDigit_59_function_end_printHexDigit None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_62_inline_printHex_printHexDigit_59_function_end_printHexDigit None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_62_inline_printHex_printHexDigit_59_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_62_inline_printHex_printHexDigit_59_function_end_printHexDigit None
# inline_main_printHex_62_inline_printHex_printHexDigit_59_function_end_printHexDigit
# goto inline_main_printHex_62_function_end_printHex None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_62_function_end_printHex None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_62_function_end_printHex)], resolved: None }
# :inline_main_printHex_62_function_end_printHex None
# inline_main_printHex_62_function_end_printHex
# t92f6 <- addr[0x01..0x02] U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] }) }
# Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] })
# Index("addr", Number(USIZE, 1))
# 0260e Copy8 [Register(0x3d), Register(0x68)]
#       t92f6 <- addr[0x01..0x02] U8 Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] }) }
#       Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] })
#       Index("addr", Number(USIZE, 1))
0b 3d 68 

# inline_main_printHex_63_a <- t92f6 U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] }) }
# Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] })
# 02611 Copy8 [Register(0x68), Register(0x40)]
#       inline_main_printHex_63_a <- t92f6 U8 Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] }) }
#       Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 1))] })
0b 68 40 

# inline_main_printHex_63_t8792 <- inline_main_printHex_63_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
# Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
# Ident("a")
# 02614 Copy8 [Register(0x40), Register(0x52)]
#       inline_main_printHex_63_t8792 <- inline_main_printHex_63_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
#       Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
#       Ident("a")
0b 40 52 

# inline_main_printHex_63_t610c <- 0n15/0x0fu8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
# Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
# Number(U8, 15)
# 02617 LoadImm8 [Register(0x51), Constant8(0x0f=15)]
#       inline_main_printHex_63_t610c <- 0n15/0x0fu8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
#       Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
#       Number(U8, 15)
04 51 0f 

# if inline_main_printHex_63_t8792 > inline_main_printHex_63_t610c then 'inline_main_printHex_63_printHex_if_true_0_1' else 'inline_main_printHex_63_printHex_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
# Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
# 0261a Cmp8 [Register(0x52), Register(0x51)]
#       if inline_main_printHex_63_t8792 > inline_main_printHex_63_t610c then 'inline_main_printHex_63_printHex_if_true_0_1' else 'inline_main_printHex_63_printHex_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
#       Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
15 52 51 

# 0261d JcImm [Label24(inline_main_printHex_63_printHex_if_else_0_2)]
#       if inline_main_printHex_63_t8792 > inline_main_printHex_63_t610c then 'inline_main_printHex_63_printHex_if_true_0_1' else 'inline_main_printHex_63_printHex_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
#       Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
71 9e 26 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_63_t8792 > inline_main_printHex_63_t610c then 'inline_main_printHex_63_printHex_if_true_0_1' else 'inline_main_printHex_63_printHex_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }\nComparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_63_printHex_if_true_0_1)], resolved: None }
# :inline_main_printHex_63_printHex_if_true_0_1 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
# inline_main_printHex_63_printHex_if_true_0_1
# inline_main_printHex_63_t8792 <- inline_main_printHex_63_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }
# Arithmetic(Divide, Ident("a"), Number(U8, 16))
# Ident("a")
# 02621 Copy8 [Register(0x40), Register(0x52)]
#       inline_main_printHex_63_t8792 <- inline_main_printHex_63_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 16))
#       Ident("a")
0b 40 52 

# inline_main_printHex_63_b <- inline_main_printHex_63_t8792 Divide Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }
# Arithmetic(Divide, Ident("a"), Number(U8, 16))
# 02624 LoadImm8 [Register(0x00), Constant8(0x10=16)]
#       inline_main_printHex_63_b <- inline_main_printHex_63_t8792 Divide Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 16))
04 00 10 

# 02627 Divide8 [Register(0x52), Register(0x00), Register(0x51)]
#       inline_main_printHex_63_b <- inline_main_printHex_63_t8792 Divide Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 16))
17 52 00 51 

# inline_main_printHex_63_tace9 <- inline_main_printHex_63_b U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }
# Call(Call { function: "printHexDigit", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_main_printHex_63_tace9 <- inline_main_printHex_63_b U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))\nVoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }\nCall(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_printHex_63_inline_printHex_printHexDigit_58_a <- inline_main_printHex_63_tace9 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }
# Call(Call { function: "printHexDigit", parameters: [Ident("b")] })
# 0262b Copy8 [Register(0x51), Register(0x52)]
#       inline_main_printHex_63_inline_printHex_printHexDigit_58_a <- inline_main_printHex_63_tace9 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }
#       Call(Call { function: "printHexDigit", parameters: [Ident("b")] })
0b 51 52 

# inline_main_printHex_63_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_63_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_63_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_63_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_63_inline_printHex_printHexDigit_58_td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# Number(U8, 10)
# 0262e LoadImm8 [Register(0x53), Constant8(0x0a=10)]
#       inline_main_printHex_63_inline_printHex_printHexDigit_58_td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
#       Number(U8, 10)
04 53 0a 

# if inline_main_printHex_63_inline_printHex_printHexDigit_58_t8792 < inline_main_printHex_63_inline_printHex_printHexDigit_58_td7b5 then 'inline_main_printHex_63_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1' else 'inline_main_printHex_63_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# 02631 Cmp8 [Register(0x53), Register(0x52)]
#       if inline_main_printHex_63_inline_printHex_printHexDigit_58_t8792 < inline_main_printHex_63_inline_printHex_printHexDigit_58_td7b5 then 'inline_main_printHex_63_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1' else 'inline_main_printHex_63_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
15 53 52 

# 02634 JcImm [Label24(inline_main_printHex_63_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2)]
#       if inline_main_printHex_63_inline_printHex_printHexDigit_58_t8792 < inline_main_printHex_63_inline_printHex_printHexDigit_58_td7b5 then 'inline_main_printHex_63_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1' else 'inline_main_printHex_63_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
71 5e 26 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_63_inline_printHex_printHexDigit_58_t8792 < inline_main_printHex_63_inline_printHex_printHexDigit_58_td7b5 then 'inline_main_printHex_63_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1' else 'inline_main_printHex_63_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_63_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_63_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# inline_main_printHex_63_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1
# inline_main_printHex_63_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_63_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_63_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_63_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })\nArithmetic(Add, Ident(\"a\"), Number(U8, 48))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_63_inline_printHex_printHexDigit_58_t6db1 <- inline_main_printHex_63_inline_printHex_printHexDigit_58_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# 02638 LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       inline_main_printHex_63_inline_printHex_printHexDigit_58_t6db1 <- inline_main_printHex_63_inline_printHex_printHexDigit_58_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
04 00 30 

# 0263b Add8NoCarryIn [Register(0x52), Register(0x00), Register(0x52)]
#       inline_main_printHex_63_inline_printHex_printHexDigit_58_t6db1 <- inline_main_printHex_63_inline_printHex_printHexDigit_58_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
14 52 00 52 

# inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c <- inline_main_printHex_63_inline_printHex_printHexDigit_58_t6db1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# optimized away noop copy Instruction { source: "inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c <- inline_main_printHex_63_inline_printHex_printHexDigit_58_t6db1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# None <= call io_write0(inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 0263f Out0 [Register(0x52)]
#       IoWrite0
68 52 

# inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# None <= call lcd_putc(inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 02641 Copy8 [Register(0x52), Register(0x00)]
#       Arg0[ch]=inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 None <= call lcd_putc(inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 52 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02644 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 0264a StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 54 26 00 00 

# 02650 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02654 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_function_end_putc)], resolved: None }
# :inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_function_end_putc None
# inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_function_end_putc
# goto inline_main_printHex_63_inline_printHex_printHexDigit_58_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# 0265a JmpImm [Label24(inline_main_printHex_63_inline_printHex_printHexDigit_58_printHexDigit_if_end_0)]
#       goto inline_main_printHex_63_inline_printHex_printHexDigit_58_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
70 87 26 00 

# :inline_main_printHex_63_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# inline_main_printHex_63_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2
# inline_main_printHex_63_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_63_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
# Arithmetic(Subtract, Ident("a"), Number(U8, 10))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_63_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_63_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }\nArithmetic(Subtract, Ident(\"a\"), Number(U8, 10))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_63_inline_printHex_printHexDigit_58_a <- inline_main_printHex_63_inline_printHex_printHexDigit_58_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
# Arithmetic(Subtract, Ident("a"), Number(U8, 10))
# 0265e LoadImm8 [Register(0x00), Constant8(0xf6=246)]
#       inline_main_printHex_63_inline_printHex_printHexDigit_58_a <- inline_main_printHex_63_inline_printHex_printHexDigit_58_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Subtract, Ident("a"), Number(U8, 10))
04 00 f6 

# 02661 Add8NoCarryIn [Register(0x52), Register(0x00), Register(0x52)]
#       inline_main_printHex_63_inline_printHex_printHexDigit_58_a <- inline_main_printHex_63_inline_printHex_printHexDigit_58_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Subtract, Ident("a"), Number(U8, 10))
14 52 00 52 

# inline_main_printHex_63_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_63_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
# Arithmetic(Add, Ident("a"), Number(U8, 65))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_63_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_63_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }\nArithmetic(Add, Ident(\"a\"), Number(U8, 65))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_63_inline_printHex_printHexDigit_58_a <- inline_main_printHex_63_inline_printHex_printHexDigit_58_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
# Arithmetic(Add, Ident("a"), Number(U8, 65))
# 02665 LoadImm8 [Register(0x00), Constant8(0x41=65)]
#       inline_main_printHex_63_inline_printHex_printHexDigit_58_a <- inline_main_printHex_63_inline_printHex_printHexDigit_58_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
#       Arithmetic(Add, Ident("a"), Number(U8, 65))
04 00 41 

# 02668 Add8NoCarryIn [Register(0x52), Register(0x00), Register(0x52)]
#       inline_main_printHex_63_inline_printHex_printHexDigit_58_a <- inline_main_printHex_63_inline_printHex_printHexDigit_58_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
#       Arithmetic(Add, Ident("a"), Number(U8, 65))
14 52 00 52 

# inline_main_printHex_63_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_63_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }
# Call(Call { function: "putc", parameters: [Ident("a")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_63_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_63_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }\nCall(Call { function: \"putc\", parameters: [Ident(\"a\")] })\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c <- inline_main_printHex_63_inline_printHex_printHexDigit_58_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }
# Call(Call { function: "putc", parameters: [Ident("a")] })
# optimized away noop copy Instruction { source: "inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c <- inline_main_printHex_63_inline_printHex_printHexDigit_58_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }\nCall(Call { function: \"putc\", parameters: [Ident(\"a\")] })\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# None <= call io_write0(inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 0266c Out0 [Register(0x52)]
#       IoWrite0
68 52 

# inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# None <= call lcd_putc(inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 0266e Copy8 [Register(0x52), Register(0x00)]
#       Arg0[ch]=inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 None <= call lcd_putc(inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 52 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02671 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02677 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 81 26 00 00 

# 0267d JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02681 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_function_end_putc)], resolved: None }
# :inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_function_end_putc None
# inline_main_printHex_63_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_function_end_putc
# :inline_main_printHex_63_inline_printHex_printHexDigit_58_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# inline_main_printHex_63_inline_printHex_printHexDigit_58_printHexDigit_if_end_0
# goto inline_main_printHex_63_inline_printHex_printHexDigit_58_function_end_printHexDigit None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_63_inline_printHex_printHexDigit_58_function_end_printHexDigit None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_63_inline_printHex_printHexDigit_58_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_63_inline_printHex_printHexDigit_58_function_end_printHexDigit None
# inline_main_printHex_63_inline_printHex_printHexDigit_58_function_end_printHexDigit
# inline_main_printHex_63_t8792 <- inline_main_printHex_63_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
# Ident("a")
# 02687 Copy8 [Register(0x40), Register(0x52)]
#       inline_main_printHex_63_t8792 <- inline_main_printHex_63_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
#       Ident("a")
0b 40 52 

# inline_main_printHex_63_tace9 <- inline_main_printHex_63_b U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
# Arithmetic(Multiply, Ident("b"), Number(U8, 16))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_main_printHex_63_tace9 <- inline_main_printHex_63_b U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }\nArithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))\nArithmetic(Multiply, Ident(\"b\"), Number(U8, 16))\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_printHex_63_t4271 <- inline_main_printHex_63_tace9 Multiply Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
# Arithmetic(Multiply, Ident("b"), Number(U8, 16))
# 0268a LoadImm8 [Register(0x00), Constant8(0x10=16)]
#       inline_main_printHex_63_t4271 <- inline_main_printHex_63_tace9 Multiply Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
#       Arithmetic(Multiply, Ident("b"), Number(U8, 16))
04 00 10 

# 0268d Mul8_8 [Register(0x51), Register(0x00), Register(0x40)]
#       inline_main_printHex_63_t4271 <- inline_main_printHex_63_tace9 Multiply Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
#       Arithmetic(Multiply, Ident("b"), Number(U8, 16))
10 51 00 40 

# inline_main_printHex_63_a <- inline_main_printHex_63_t8792 Subtract Var(inline_main_printHex_63_t4271) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
# 02691 Copy8 [Register(0x40), Register(0x00)]
#       inline_main_printHex_63_a <- inline_main_printHex_63_t8792 Subtract Var(inline_main_printHex_63_t4271) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
0b 40 00 

# 02694 Negate8 [Register(0x00)]
#       inline_main_printHex_63_a <- inline_main_printHex_63_t8792 Subtract Var(inline_main_printHex_63_t4271) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
02 00 

# 02696 Add8NoCarryIn [Register(0x52), Register(0x00), Register(0x40)]
#       inline_main_printHex_63_a <- inline_main_printHex_63_t8792 Subtract Var(inline_main_printHex_63_t4271) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
14 52 00 40 

# goto inline_main_printHex_63_printHex_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# 0269a JmpImm [Label24(inline_main_printHex_63_printHex_if_end_0)]
#       goto inline_main_printHex_63_printHex_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
70 bc 26 00 

# :inline_main_printHex_63_printHex_if_else_0_2 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# inline_main_printHex_63_printHex_if_else_0_2
# inline_main_printHex_63_tf48d <- 0n48/0x30u8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 48)] })
# Number(U8, 48)
# 0269e LoadImm8 [Register(0x51), Constant8(0x30=48)]
#       inline_main_printHex_63_tf48d <- 0n48/0x30u8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 48)] })
#       Number(U8, 48)
04 51 30 

# inline_main_printHex_63_inline_printHex_putc_55_c <- inline_main_printHex_63_tf48d U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 48)] })
# optimized away noop copy Instruction { source: "inline_main_printHex_63_inline_printHex_putc_55_c <- inline_main_printHex_63_tf48d U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 48)] })\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_printHex_63_inline_printHex_putc_55_tac13 <- inline_main_printHex_63_inline_printHex_putc_55_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_63_inline_printHex_putc_55_tac13 <- inline_main_printHex_63_inline_printHex_putc_55_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# None <= call io_write0(inline_main_printHex_63_inline_printHex_putc_55_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 026a1 Out0 [Register(0x51)]
#       IoWrite0
68 51 

# inline_main_printHex_63_inline_printHex_putc_55_tac13 <- inline_main_printHex_63_inline_printHex_putc_55_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_63_inline_printHex_putc_55_tac13 <- inline_main_printHex_63_inline_printHex_putc_55_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# None <= call lcd_putc(inline_main_printHex_63_inline_printHex_putc_55_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 026a3 Copy8 [Register(0x51), Register(0x00)]
#       Arg0[ch]=inline_main_printHex_63_inline_printHex_putc_55_tac13 None <= call lcd_putc(inline_main_printHex_63_inline_printHex_putc_55_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 51 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 026a6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 026ac StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c b6 26 00 00 

# 026b2 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 026b6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_printHex_63_inline_printHex_putc_55_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_63_inline_printHex_putc_55_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_63_inline_printHex_putc_55_function_end_putc)], resolved: None }
# :inline_main_printHex_63_inline_printHex_putc_55_function_end_putc None
# inline_main_printHex_63_inline_printHex_putc_55_function_end_putc
# :inline_main_printHex_63_printHex_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# inline_main_printHex_63_printHex_if_end_0
# inline_main_printHex_63_t8792 <- inline_main_printHex_63_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(22,5))
# VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("a")] }) }
# Call(Call { function: "printHexDigit", parameters: [Ident("a")] })
# Ident("a")
# 026bc Copy8 [Register(0x40), Register(0x52)]
#       inline_main_printHex_63_t8792 <- inline_main_printHex_63_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("a")] }) }
#       Call(Call { function: "printHexDigit", parameters: [Ident("a")] })
#       Ident("a")
0b 40 52 

# inline_main_printHex_63_inline_printHex_printHexDigit_59_a <- inline_main_printHex_63_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(22,5))
# VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("a")] }) }
# Call(Call { function: "printHexDigit", parameters: [Ident("a")] })
# 026bf Copy8 [Register(0x52), Register(0x40)]
#       inline_main_printHex_63_inline_printHex_printHexDigit_59_a <- inline_main_printHex_63_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("a")] }) }
#       Call(Call { function: "printHexDigit", parameters: [Ident("a")] })
0b 52 40 

# inline_main_printHex_63_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_63_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_63_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_63_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_63_inline_printHex_printHexDigit_59_td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# Number(U8, 10)
# 026c2 LoadImm8 [Register(0x51), Constant8(0x0a=10)]
#       inline_main_printHex_63_inline_printHex_printHexDigit_59_td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
#       Number(U8, 10)
04 51 0a 

# if inline_main_printHex_63_inline_printHex_printHexDigit_59_t8792 < inline_main_printHex_63_inline_printHex_printHexDigit_59_td7b5 then 'inline_main_printHex_63_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1' else 'inline_main_printHex_63_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# 026c5 Cmp8 [Register(0x51), Register(0x40)]
#       if inline_main_printHex_63_inline_printHex_printHexDigit_59_t8792 < inline_main_printHex_63_inline_printHex_printHexDigit_59_td7b5 then 'inline_main_printHex_63_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1' else 'inline_main_printHex_63_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
15 51 40 

# 026c8 JcImm [Label24(inline_main_printHex_63_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2)]
#       if inline_main_printHex_63_inline_printHex_printHexDigit_59_t8792 < inline_main_printHex_63_inline_printHex_printHexDigit_59_td7b5 then 'inline_main_printHex_63_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1' else 'inline_main_printHex_63_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
71 f2 26 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_63_inline_printHex_printHexDigit_59_t8792 < inline_main_printHex_63_inline_printHex_printHexDigit_59_td7b5 then 'inline_main_printHex_63_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1' else 'inline_main_printHex_63_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_63_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_63_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# inline_main_printHex_63_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1
# inline_main_printHex_63_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_63_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_63_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_63_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })\nArithmetic(Add, Ident(\"a\"), Number(U8, 48))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_63_inline_printHex_printHexDigit_59_t6db1 <- inline_main_printHex_63_inline_printHex_printHexDigit_59_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# 026cc LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       inline_main_printHex_63_inline_printHex_printHexDigit_59_t6db1 <- inline_main_printHex_63_inline_printHex_printHexDigit_59_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
04 00 30 

# 026cf Add8NoCarryIn [Register(0x40), Register(0x00), Register(0x40)]
#       inline_main_printHex_63_inline_printHex_printHexDigit_59_t6db1 <- inline_main_printHex_63_inline_printHex_printHexDigit_59_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
14 40 00 40 

# inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c <- inline_main_printHex_63_inline_printHex_printHexDigit_59_t6db1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# optimized away noop copy Instruction { source: "inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c <- inline_main_printHex_63_inline_printHex_printHexDigit_59_t6db1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 026d3 Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 026d5 Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 None <= call lcd_putc(inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 026d8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 026de StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c e8 26 00 00 

# 026e4 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 026e8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_function_end_putc)], resolved: None }
# :inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_function_end_putc None
# inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_function_end_putc
# goto inline_main_printHex_63_inline_printHex_printHexDigit_59_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# 026ee JmpImm [Label24(inline_main_printHex_63_inline_printHex_printHexDigit_59_printHexDigit_if_end_0)]
#       goto inline_main_printHex_63_inline_printHex_printHexDigit_59_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
70 1b 27 00 

# :inline_main_printHex_63_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# inline_main_printHex_63_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2
# inline_main_printHex_63_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_63_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
# Arithmetic(Subtract, Ident("a"), Number(U8, 10))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_63_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_63_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }\nArithmetic(Subtract, Ident(\"a\"), Number(U8, 10))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_63_inline_printHex_printHexDigit_59_a <- inline_main_printHex_63_inline_printHex_printHexDigit_59_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
# Arithmetic(Subtract, Ident("a"), Number(U8, 10))
# 026f2 LoadImm8 [Register(0x00), Constant8(0xf6=246)]
#       inline_main_printHex_63_inline_printHex_printHexDigit_59_a <- inline_main_printHex_63_inline_printHex_printHexDigit_59_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Subtract, Ident("a"), Number(U8, 10))
04 00 f6 

# 026f5 Add8NoCarryIn [Register(0x40), Register(0x00), Register(0x40)]
#       inline_main_printHex_63_inline_printHex_printHexDigit_59_a <- inline_main_printHex_63_inline_printHex_printHexDigit_59_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Subtract, Ident("a"), Number(U8, 10))
14 40 00 40 

# inline_main_printHex_63_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_63_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
# Arithmetic(Add, Ident("a"), Number(U8, 65))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_63_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_63_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }\nArithmetic(Add, Ident(\"a\"), Number(U8, 65))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_63_inline_printHex_printHexDigit_59_a <- inline_main_printHex_63_inline_printHex_printHexDigit_59_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
# Arithmetic(Add, Ident("a"), Number(U8, 65))
# 026f9 LoadImm8 [Register(0x00), Constant8(0x41=65)]
#       inline_main_printHex_63_inline_printHex_printHexDigit_59_a <- inline_main_printHex_63_inline_printHex_printHexDigit_59_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
#       Arithmetic(Add, Ident("a"), Number(U8, 65))
04 00 41 

# 026fc Add8NoCarryIn [Register(0x40), Register(0x00), Register(0x40)]
#       inline_main_printHex_63_inline_printHex_printHexDigit_59_a <- inline_main_printHex_63_inline_printHex_printHexDigit_59_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
#       Arithmetic(Add, Ident("a"), Number(U8, 65))
14 40 00 40 

# inline_main_printHex_63_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_63_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }
# Call(Call { function: "putc", parameters: [Ident("a")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_63_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_63_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }\nCall(Call { function: \"putc\", parameters: [Ident(\"a\")] })\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c <- inline_main_printHex_63_inline_printHex_printHexDigit_59_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }
# Call(Call { function: "putc", parameters: [Ident("a")] })
# optimized away noop copy Instruction { source: "inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c <- inline_main_printHex_63_inline_printHex_printHexDigit_59_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }\nCall(Call { function: \"putc\", parameters: [Ident(\"a\")] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02700 Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 02702 Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 None <= call lcd_putc(inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02705 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 0270b StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 15 27 00 00 

# 02711 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02715 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_function_end_putc)], resolved: None }
# :inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_function_end_putc None
# inline_main_printHex_63_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_function_end_putc
# :inline_main_printHex_63_inline_printHex_printHexDigit_59_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# inline_main_printHex_63_inline_printHex_printHexDigit_59_printHexDigit_if_end_0
# goto inline_main_printHex_63_inline_printHex_printHexDigit_59_function_end_printHexDigit None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_63_inline_printHex_printHexDigit_59_function_end_printHexDigit None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_63_inline_printHex_printHexDigit_59_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_63_inline_printHex_printHexDigit_59_function_end_printHexDigit None
# inline_main_printHex_63_inline_printHex_printHexDigit_59_function_end_printHexDigit
# goto inline_main_printHex_63_function_end_printHex None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_63_function_end_printHex None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_63_function_end_printHex)], resolved: None }
# :inline_main_printHex_63_function_end_printHex None
# inline_main_printHex_63_function_end_printHex
# tf5dc <- addr[0x00..0x01] U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] }) }
# Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] })
# Index("addr", Number(USIZE, 0))
# 0271b Copy8 [Register(0x3c), Register(0x68)]
#       tf5dc <- addr[0x00..0x01] U8 Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] }) }
#       Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] })
#       Index("addr", Number(USIZE, 0))
0b 3c 68 

# inline_main_printHex_64_a <- tf5dc U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] }) }
# Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] })
# 0271e Copy8 [Register(0x68), Register(0x40)]
#       inline_main_printHex_64_a <- tf5dc U8 Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] }) }
#       Call(Call { function: "printHex", parameters: [Index("addr", Number(USIZE, 0))] })
0b 68 40 

# inline_main_printHex_64_t8792 <- inline_main_printHex_64_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
# Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
# Ident("a")
# 02721 Copy8 [Register(0x40), Register(0x52)]
#       inline_main_printHex_64_t8792 <- inline_main_printHex_64_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
#       Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
#       Ident("a")
0b 40 52 

# inline_main_printHex_64_t610c <- 0n15/0x0fu8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
# Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
# Number(U8, 15)
# 02724 LoadImm8 [Register(0x51), Constant8(0x0f=15)]
#       inline_main_printHex_64_t610c <- 0n15/0x0fu8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
#       Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
#       Number(U8, 15)
04 51 0f 

# if inline_main_printHex_64_t8792 > inline_main_printHex_64_t610c then 'inline_main_printHex_64_printHex_if_true_0_1' else 'inline_main_printHex_64_printHex_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
# Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
# 02727 Cmp8 [Register(0x52), Register(0x51)]
#       if inline_main_printHex_64_t8792 > inline_main_printHex_64_t610c then 'inline_main_printHex_64_printHex_if_true_0_1' else 'inline_main_printHex_64_printHex_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
#       Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
15 52 51 

# 0272a JcImm [Label24(inline_main_printHex_64_printHex_if_else_0_2)]
#       if inline_main_printHex_64_t8792 > inline_main_printHex_64_t610c then 'inline_main_printHex_64_printHex_if_true_0_1' else 'inline_main_printHex_64_printHex_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
#       Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }
71 ab 27 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_64_t8792 > inline_main_printHex_64_t610c then 'inline_main_printHex_64_printHex_if_true_0_1' else 'inline_main_printHex_64_printHex_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }] }\nComparison { op: GreaterThan, left: Ident(\"a\"), right: Number(U8, 15) }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_64_printHex_if_true_0_1)], resolved: None }
# :inline_main_printHex_64_printHex_if_true_0_1 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("a"), right: Number(U8, 15) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }, VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }])], else_block: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }] }
# inline_main_printHex_64_printHex_if_true_0_1
# inline_main_printHex_64_t8792 <- inline_main_printHex_64_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }
# Arithmetic(Divide, Ident("a"), Number(U8, 16))
# Ident("a")
# 0272e Copy8 [Register(0x40), Register(0x52)]
#       inline_main_printHex_64_t8792 <- inline_main_printHex_64_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 16))
#       Ident("a")
0b 40 52 

# inline_main_printHex_64_b <- inline_main_printHex_64_t8792 Divide Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }
# Arithmetic(Divide, Ident("a"), Number(U8, 16))
# 02731 LoadImm8 [Register(0x00), Constant8(0x10=16)]
#       inline_main_printHex_64_b <- inline_main_printHex_64_t8792 Divide Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 16))
04 00 10 

# 02734 Divide8 [Register(0x52), Register(0x00), Register(0x51)]
#       inline_main_printHex_64_b <- inline_main_printHex_64_t8792 Divide Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 16)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 16))
17 52 00 51 

# inline_main_printHex_64_tace9 <- inline_main_printHex_64_b U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }
# Call(Call { function: "printHexDigit", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_main_printHex_64_tace9 <- inline_main_printHex_64_b U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))\nVoidExpression { expression: Call(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] }) }\nCall(Call { function: \"printHexDigit\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_printHex_64_inline_printHex_printHexDigit_58_a <- inline_main_printHex_64_tace9 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }
# Call(Call { function: "printHexDigit", parameters: [Ident("b")] })
# 02738 Copy8 [Register(0x51), Register(0x52)]
#       inline_main_printHex_64_inline_printHex_printHexDigit_58_a <- inline_main_printHex_64_tace9 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("b")] }) }
#       Call(Call { function: "printHexDigit", parameters: [Ident("b")] })
0b 51 52 

# inline_main_printHex_64_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_64_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_64_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_64_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_64_inline_printHex_printHexDigit_58_td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# Number(U8, 10)
# 0273b LoadImm8 [Register(0x53), Constant8(0x0a=10)]
#       inline_main_printHex_64_inline_printHex_printHexDigit_58_td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
#       Number(U8, 10)
04 53 0a 

# if inline_main_printHex_64_inline_printHex_printHexDigit_58_t8792 < inline_main_printHex_64_inline_printHex_printHexDigit_58_td7b5 then 'inline_main_printHex_64_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1' else 'inline_main_printHex_64_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# 0273e Cmp8 [Register(0x53), Register(0x52)]
#       if inline_main_printHex_64_inline_printHex_printHexDigit_58_t8792 < inline_main_printHex_64_inline_printHex_printHexDigit_58_td7b5 then 'inline_main_printHex_64_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1' else 'inline_main_printHex_64_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
15 53 52 

# 02741 JcImm [Label24(inline_main_printHex_64_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2)]
#       if inline_main_printHex_64_inline_printHex_printHexDigit_58_t8792 < inline_main_printHex_64_inline_printHex_printHexDigit_58_td7b5 then 'inline_main_printHex_64_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1' else 'inline_main_printHex_64_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
71 6b 27 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_64_inline_printHex_printHexDigit_58_t8792 < inline_main_printHex_64_inline_printHex_printHexDigit_58_td7b5 then 'inline_main_printHex_64_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1' else 'inline_main_printHex_64_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_64_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_64_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# inline_main_printHex_64_inline_printHex_printHexDigit_58_printHexDigit_if_true_0_1
# inline_main_printHex_64_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_64_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_64_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_64_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })\nArithmetic(Add, Ident(\"a\"), Number(U8, 48))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_64_inline_printHex_printHexDigit_58_t6db1 <- inline_main_printHex_64_inline_printHex_printHexDigit_58_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# 02745 LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       inline_main_printHex_64_inline_printHex_printHexDigit_58_t6db1 <- inline_main_printHex_64_inline_printHex_printHexDigit_58_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
04 00 30 

# 02748 Add8NoCarryIn [Register(0x52), Register(0x00), Register(0x52)]
#       inline_main_printHex_64_inline_printHex_printHexDigit_58_t6db1 <- inline_main_printHex_64_inline_printHex_printHexDigit_58_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
14 52 00 52 

# inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c <- inline_main_printHex_64_inline_printHex_printHexDigit_58_t6db1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# optimized away noop copy Instruction { source: "inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c <- inline_main_printHex_64_inline_printHex_printHexDigit_58_t6db1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# None <= call io_write0(inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 0274c Out0 [Register(0x52)]
#       IoWrite0
68 52 

# inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# None <= call lcd_putc(inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 0274e Copy8 [Register(0x52), Register(0x00)]
#       Arg0[ch]=inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13 None <= call lcd_putc(inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 52 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02751 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02757 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 61 27 00 00 

# 0275d JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02761 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_function_end_putc)], resolved: None }
# :inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_function_end_putc None
# inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_56_function_end_putc
# goto inline_main_printHex_64_inline_printHex_printHexDigit_58_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# 02767 JmpImm [Label24(inline_main_printHex_64_inline_printHex_printHexDigit_58_printHexDigit_if_end_0)]
#       goto inline_main_printHex_64_inline_printHex_printHexDigit_58_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
70 94 27 00 

# :inline_main_printHex_64_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# inline_main_printHex_64_inline_printHex_printHexDigit_58_printHexDigit_if_else_0_2
# inline_main_printHex_64_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_64_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
# Arithmetic(Subtract, Ident("a"), Number(U8, 10))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_64_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_64_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }\nArithmetic(Subtract, Ident(\"a\"), Number(U8, 10))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_64_inline_printHex_printHexDigit_58_a <- inline_main_printHex_64_inline_printHex_printHexDigit_58_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
# Arithmetic(Subtract, Ident("a"), Number(U8, 10))
# 0276b LoadImm8 [Register(0x00), Constant8(0xf6=246)]
#       inline_main_printHex_64_inline_printHex_printHexDigit_58_a <- inline_main_printHex_64_inline_printHex_printHexDigit_58_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Subtract, Ident("a"), Number(U8, 10))
04 00 f6 

# 0276e Add8NoCarryIn [Register(0x52), Register(0x00), Register(0x52)]
#       inline_main_printHex_64_inline_printHex_printHexDigit_58_a <- inline_main_printHex_64_inline_printHex_printHexDigit_58_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Subtract, Ident("a"), Number(U8, 10))
14 52 00 52 

# inline_main_printHex_64_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_64_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
# Arithmetic(Add, Ident("a"), Number(U8, 65))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_64_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_64_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }\nArithmetic(Add, Ident(\"a\"), Number(U8, 65))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_64_inline_printHex_printHexDigit_58_a <- inline_main_printHex_64_inline_printHex_printHexDigit_58_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
# Arithmetic(Add, Ident("a"), Number(U8, 65))
# 02772 LoadImm8 [Register(0x00), Constant8(0x41=65)]
#       inline_main_printHex_64_inline_printHex_printHexDigit_58_a <- inline_main_printHex_64_inline_printHex_printHexDigit_58_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
#       Arithmetic(Add, Ident("a"), Number(U8, 65))
04 00 41 

# 02775 Add8NoCarryIn [Register(0x52), Register(0x00), Register(0x52)]
#       inline_main_printHex_64_inline_printHex_printHexDigit_58_a <- inline_main_printHex_64_inline_printHex_printHexDigit_58_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
#       Arithmetic(Add, Ident("a"), Number(U8, 65))
14 52 00 52 

# inline_main_printHex_64_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_64_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }
# Call(Call { function: "putc", parameters: [Ident("a")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_64_inline_printHex_printHexDigit_58_t8792 <- inline_main_printHex_64_inline_printHex_printHexDigit_58_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }\nCall(Call { function: \"putc\", parameters: [Ident(\"a\")] })\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c <- inline_main_printHex_64_inline_printHex_printHexDigit_58_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }
# Call(Call { function: "putc", parameters: [Ident("a")] })
# optimized away noop copy Instruction { source: "inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c <- inline_main_printHex_64_inline_printHex_printHexDigit_58_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }\nCall(Call { function: \"putc\", parameters: [Ident(\"a\")] })\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# None <= call io_write0(inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02779 Out0 [Register(0x52)]
#       IoWrite0
68 52 

# inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# None <= call lcd_putc(inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 0277b Copy8 [Register(0x52), Register(0x00)]
#       Arg0[ch]=inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13 None <= call lcd_putc(inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 52 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 0277e AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02784 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 8e 27 00 00 

# 0278a JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 0278e AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_function_end_putc)], resolved: None }
# :inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_function_end_putc None
# inline_main_printHex_64_inline_printHex_printHexDigit_58_inline_printHexDigit_putc_57_function_end_putc
# :inline_main_printHex_64_inline_printHex_printHexDigit_58_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# inline_main_printHex_64_inline_printHex_printHexDigit_58_printHexDigit_if_end_0
# goto inline_main_printHex_64_inline_printHex_printHexDigit_58_function_end_printHexDigit None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_64_inline_printHex_printHexDigit_58_function_end_printHexDigit None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_64_inline_printHex_printHexDigit_58_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_64_inline_printHex_printHexDigit_58_function_end_printHexDigit None
# inline_main_printHex_64_inline_printHex_printHexDigit_58_function_end_printHexDigit
# inline_main_printHex_64_t8792 <- inline_main_printHex_64_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
# Ident("a")
# 02794 Copy8 [Register(0x40), Register(0x52)]
#       inline_main_printHex_64_t8792 <- inline_main_printHex_64_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
#       Ident("a")
0b 40 52 

# inline_main_printHex_64_tace9 <- inline_main_printHex_64_b U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
# Arithmetic(Multiply, Ident("b"), Number(U8, 16))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_main_printHex_64_tace9 <- inline_main_printHex_64_b U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16))) }\nArithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 16)))\nArithmetic(Multiply, Ident(\"b\"), Number(U8, 16))\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_printHex_64_t4271 <- inline_main_printHex_64_tace9 Multiply Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
# Arithmetic(Multiply, Ident("b"), Number(U8, 16))
# 02797 LoadImm8 [Register(0x00), Constant8(0x10=16)]
#       inline_main_printHex_64_t4271 <- inline_main_printHex_64_tace9 Multiply Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
#       Arithmetic(Multiply, Ident("b"), Number(U8, 16))
04 00 10 

# 0279a Mul8_8 [Register(0x51), Register(0x00), Register(0x40)]
#       inline_main_printHex_64_t4271 <- inline_main_printHex_64_tace9 Multiply Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
#       Arithmetic(Multiply, Ident("b"), Number(U8, 16))
10 51 00 40 

# inline_main_printHex_64_a <- inline_main_printHex_64_t8792 Subtract Var(inline_main_printHex_64_t4271) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
# 0279e Copy8 [Register(0x40), Register(0x00)]
#       inline_main_printHex_64_a <- inline_main_printHex_64_t8792 Subtract Var(inline_main_printHex_64_t4271) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
0b 40 00 

# 027a1 Negate8 [Register(0x00)]
#       inline_main_printHex_64_a <- inline_main_printHex_64_t8792 Subtract Var(inline_main_printHex_64_t4271) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
02 00 

# 027a3 Add8NoCarryIn [Register(0x52), Register(0x00), Register(0x40)]
#       inline_main_printHex_64_a <- inline_main_printHex_64_t8792 Subtract Var(inline_main_printHex_64_t4271) Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 16)))
14 52 00 40 

# goto inline_main_printHex_64_printHex_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# 027a7 JmpImm [Label24(inline_main_printHex_64_printHex_if_end_0)]
#       goto inline_main_printHex_64_printHex_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
70 c9 27 00 

# :inline_main_printHex_64_printHex_if_else_0_2 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# inline_main_printHex_64_printHex_if_else_0_2
# inline_main_printHex_64_tf48d <- 0n48/0x30u8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 48)] })
# Number(U8, 48)
# 027ab LoadImm8 [Register(0x51), Constant8(0x30=48)]
#       inline_main_printHex_64_tf48d <- 0n48/0x30u8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 48)] })
#       Number(U8, 48)
04 51 30 

# inline_main_printHex_64_inline_printHex_putc_55_c <- inline_main_printHex_64_tf48d U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 48)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 48)] })
# optimized away noop copy Instruction { source: "inline_main_printHex_64_inline_printHex_putc_55_c <- inline_main_printHex_64_tf48d U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 48)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 48)] })\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_printHex_64_inline_printHex_putc_55_tac13 <- inline_main_printHex_64_inline_printHex_putc_55_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_64_inline_printHex_putc_55_tac13 <- inline_main_printHex_64_inline_printHex_putc_55_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# None <= call io_write0(inline_main_printHex_64_inline_printHex_putc_55_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 027ae Out0 [Register(0x51)]
#       IoWrite0
68 51 

# inline_main_printHex_64_inline_printHex_putc_55_tac13 <- inline_main_printHex_64_inline_printHex_putc_55_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_64_inline_printHex_putc_55_tac13 <- inline_main_printHex_64_inline_printHex_putc_55_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# None <= call lcd_putc(inline_main_printHex_64_inline_printHex_putc_55_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 027b0 Copy8 [Register(0x51), Register(0x00)]
#       Arg0[ch]=inline_main_printHex_64_inline_printHex_putc_55_tac13 None <= call lcd_putc(inline_main_printHex_64_inline_printHex_putc_55_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 51 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 027b3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 027b9 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c c3 27 00 00 

# 027bf JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 027c3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_printHex_64_inline_printHex_putc_55_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_64_inline_printHex_putc_55_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_64_inline_printHex_putc_55_function_end_putc)], resolved: None }
# :inline_main_printHex_64_inline_printHex_putc_55_function_end_putc None
# inline_main_printHex_64_inline_printHex_putc_55_function_end_putc
# :inline_main_printHex_64_printHex_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(14,5))
# inline_main_printHex_64_printHex_if_end_0
# inline_main_printHex_64_t8792 <- inline_main_printHex_64_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(22,5))
# VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("a")] }) }
# Call(Call { function: "printHexDigit", parameters: [Ident("a")] })
# Ident("a")
# 027c9 Copy8 [Register(0x40), Register(0x52)]
#       inline_main_printHex_64_t8792 <- inline_main_printHex_64_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("a")] }) }
#       Call(Call { function: "printHexDigit", parameters: [Ident("a")] })
#       Ident("a")
0b 40 52 

# inline_main_printHex_64_inline_printHex_printHexDigit_59_a <- inline_main_printHex_64_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(22,5))
# VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("a")] }) }
# Call(Call { function: "printHexDigit", parameters: [Ident("a")] })
# 027cc Copy8 [Register(0x52), Register(0x40)]
#       inline_main_printHex_64_inline_printHex_printHexDigit_59_a <- inline_main_printHex_64_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "printHexDigit", parameters: [Ident("a")] }) }
#       Call(Call { function: "printHexDigit", parameters: [Ident("a")] })
0b 52 40 

# inline_main_printHex_64_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_64_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_64_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_64_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_64_inline_printHex_printHexDigit_59_td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# Number(U8, 10)
# 027cf LoadImm8 [Register(0x51), Constant8(0x0a=10)]
#       inline_main_printHex_64_inline_printHex_printHexDigit_59_td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
#       Number(U8, 10)
04 51 0a 

# if inline_main_printHex_64_inline_printHex_printHexDigit_59_t8792 < inline_main_printHex_64_inline_printHex_printHexDigit_59_td7b5 then 'inline_main_printHex_64_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1' else 'inline_main_printHex_64_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
# 027d2 Cmp8 [Register(0x51), Register(0x40)]
#       if inline_main_printHex_64_inline_printHex_printHexDigit_59_t8792 < inline_main_printHex_64_inline_printHex_printHexDigit_59_td7b5 then 'inline_main_printHex_64_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1' else 'inline_main_printHex_64_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
15 51 40 

# 027d5 JcImm [Label24(inline_main_printHex_64_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2)]
#       if inline_main_printHex_64_inline_printHex_printHexDigit_59_t8792 < inline_main_printHex_64_inline_printHex_printHexDigit_59_td7b5 then 'inline_main_printHex_64_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1' else 'inline_main_printHex_64_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }
71 ff 27 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_printHex_64_inline_printHex_printHexDigit_59_t8792 < inline_main_printHex_64_inline_printHex_printHexDigit_59_td7b5 then 'inline_main_printHex_64_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1' else 'inline_main_printHex_64_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(U8, 10) }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_64_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1)], resolved: None }
# :inline_main_printHex_64_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }])], else_block: [Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }] }
# inline_main_printHex_64_inline_printHex_printHexDigit_59_printHexDigit_if_true_0_1
# inline_main_printHex_64_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_64_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_64_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_64_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })\nArithmetic(Add, Ident(\"a\"), Number(U8, 48))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_64_inline_printHex_printHexDigit_59_t6db1 <- inline_main_printHex_64_inline_printHex_printHexDigit_59_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# 027d9 LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       inline_main_printHex_64_inline_printHex_printHexDigit_59_t6db1 <- inline_main_printHex_64_inline_printHex_printHexDigit_59_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
04 00 30 

# 027dc Add8NoCarryIn [Register(0x40), Register(0x00), Register(0x40)]
#       inline_main_printHex_64_inline_printHex_printHexDigit_59_t6db1 <- inline_main_printHex_64_inline_printHex_printHexDigit_59_t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
14 40 00 40 

# inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c <- inline_main_printHex_64_inline_printHex_printHexDigit_59_t6db1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# optimized away noop copy Instruction { source: "inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c <- inline_main_printHex_64_inline_printHex_printHexDigit_59_t6db1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 027e0 Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 <- inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 027e2 Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13 None <= call lcd_putc(inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 027e5 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 027eb StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c f5 27 00 00 

# 027f1 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 027f5 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_function_end_putc)], resolved: None }
# :inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_function_end_putc None
# inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_56_function_end_putc
# goto inline_main_printHex_64_inline_printHex_printHexDigit_59_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# 027fb JmpImm [Label24(inline_main_printHex_64_inline_printHex_printHexDigit_59_printHexDigit_if_end_0)]
#       goto inline_main_printHex_64_inline_printHex_printHexDigit_59_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
70 28 28 00 

# :inline_main_printHex_64_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# inline_main_printHex_64_inline_printHex_printHexDigit_59_printHexDigit_if_else_0_2
# inline_main_printHex_64_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_64_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
# Arithmetic(Subtract, Ident("a"), Number(U8, 10))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_64_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_64_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Number(U8, 10)) }\nArithmetic(Subtract, Ident(\"a\"), Number(U8, 10))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_64_inline_printHex_printHexDigit_59_a <- inline_main_printHex_64_inline_printHex_printHexDigit_59_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
# Arithmetic(Subtract, Ident("a"), Number(U8, 10))
# 027ff LoadImm8 [Register(0x00), Constant8(0xf6=246)]
#       inline_main_printHex_64_inline_printHex_printHexDigit_59_a <- inline_main_printHex_64_inline_printHex_printHexDigit_59_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Subtract, Ident("a"), Number(U8, 10))
04 00 f6 

# 02802 Add8NoCarryIn [Register(0x40), Register(0x00), Register(0x40)]
#       inline_main_printHex_64_inline_printHex_printHexDigit_59_a <- inline_main_printHex_64_inline_printHex_printHexDigit_59_t8792 Subtract Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Subtract, Ident("a"), Number(U8, 10))
14 40 00 40 

# inline_main_printHex_64_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_64_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
# Arithmetic(Add, Ident("a"), Number(U8, 65))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_64_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_64_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Number(U8, 65)) }\nArithmetic(Add, Ident(\"a\"), Number(U8, 65))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_64_inline_printHex_printHexDigit_59_a <- inline_main_printHex_64_inline_printHex_printHexDigit_59_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
# Arithmetic(Add, Ident("a"), Number(U8, 65))
# 02806 LoadImm8 [Register(0x00), Constant8(0x41=65)]
#       inline_main_printHex_64_inline_printHex_printHexDigit_59_a <- inline_main_printHex_64_inline_printHex_printHexDigit_59_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
#       Arithmetic(Add, Ident("a"), Number(U8, 65))
04 00 41 

# 02809 Add8NoCarryIn [Register(0x40), Register(0x00), Register(0x40)]
#       inline_main_printHex_64_inline_printHex_printHexDigit_59_a <- inline_main_printHex_64_inline_printHex_printHexDigit_59_t8792 Add Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Number(U8, 65)) }
#       Arithmetic(Add, Ident("a"), Number(U8, 65))
14 40 00 40 

# inline_main_printHex_64_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_64_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }
# Call(Call { function: "putc", parameters: [Ident("a")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_main_printHex_64_inline_printHex_printHexDigit_59_t8792 <- inline_main_printHex_64_inline_printHex_printHexDigit_59_a U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }\nCall(Call { function: \"putc\", parameters: [Ident(\"a\")] })\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c <- inline_main_printHex_64_inline_printHex_printHexDigit_59_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("a")] }) }
# Call(Call { function: "putc", parameters: [Ident("a")] })
# optimized away noop copy Instruction { source: "inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c <- inline_main_printHex_64_inline_printHex_printHexDigit_59_t8792 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"a\")] }) }\nCall(Call { function: \"putc\", parameters: [Ident(\"a\")] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 0280d Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 <- inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 0280f Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13 None <= call lcd_putc(inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02812 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02818 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 22 28 00 00 

# 0281e JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02822 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_function_end_putc)], resolved: None }
# :inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_function_end_putc None
# inline_main_printHex_64_inline_printHex_printHexDigit_59_inline_printHexDigit_putc_57_function_end_putc
# :inline_main_printHex_64_inline_printHex_printHexDigit_59_printHexDigit_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(4,5))
# inline_main_printHex_64_inline_printHex_printHexDigit_59_printHexDigit_if_end_0
# goto inline_main_printHex_64_inline_printHex_printHexDigit_59_function_end_printHexDigit None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_64_inline_printHex_printHexDigit_59_function_end_printHexDigit None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_64_inline_printHex_printHexDigit_59_function_end_printHexDigit)], resolved: None }
# :inline_main_printHex_64_inline_printHex_printHexDigit_59_function_end_printHexDigit None
# inline_main_printHex_64_inline_printHex_printHexDigit_59_function_end_printHexDigit
# goto inline_main_printHex_64_function_end_printHex None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_printHex_64_function_end_printHex None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_printHex_64_function_end_printHex)], resolved: None }
# :inline_main_printHex_64_function_end_printHex None
# inline_main_printHex_64_function_end_printHex
# td7b5 <- 0n10/0x0au8  Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 02828 LoadImm8 [Register(0x40), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 40 0a 

# inline_main_putc_40_c <- td7b5 U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# optimized away noop copy Instruction { source: "inline_main_putc_40_c <- td7b5 U8 Some('programs/app/bootram.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 10)] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_putc_40_tac13 <- inline_main_putc_40_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_40_tac13 <- inline_main_putc_40_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_putc_40_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 0282b Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_putc_40_tac13 <- inline_main_putc_40_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_40_tac13 <- inline_main_putc_40_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_putc_40_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 0282d Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_putc_40_tac13 None <= call lcd_putc(inline_main_putc_40_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02830 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02836 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 40 28 00 00 

# 0283c JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02840 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_40_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_40_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_40_function_end_putc)], resolved: None }
# :inline_main_putc_40_function_end_putc None
# inline_main_putc_40_function_end_putc
# goto main_if_end_3 Some('programs/app/bootram.j':(22,5))
# 02846 JmpImm [Label24(main_if_end_3)]
#       goto main_if_end_3 Some('programs/app/bootram.j':(22,5))
70 57 2b 00 

# :main_if_else_4_13 Some('programs/app/bootram.j':(22,5))
# main_if_else_4_13
# tdcd9 <- ch U8 Some('programs/app/bootram.j':(22,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/app/bootram.j':(22,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# t39b5 <- 0n115/0x73u8  Some('programs/app/bootram.j':(22,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# Number(U8, 115)
# 0284a LoadImm8 [Register(0x51), Constant8(0x73=115)]
#       t39b5 <- 0n115/0x73u8  Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
#       Number(U8, 115)
04 51 73 

# if tdcd9 == t39b5 then 'main_if_true_5_14' else 'main_if_else_5_15' Some('programs/app/bootram.j':(22,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# 0284d Cmp8 [Register(0x40), Register(0x51)]
#       if tdcd9 == t39b5 then 'main_if_true_5_14' else 'main_if_else_5_15' Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
15 40 51 

# 02850 JzImm [Label24(main_if_true_5_14)]
#       if tdcd9 == t39b5 then 'main_if_true_5_14' else 'main_if_else_5_15' Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
72 58 28 00 

# 02854 JmpImm [Label24(main_if_else_5_15)]
#       if tdcd9 == t39b5 then 'main_if_true_5_14' else 'main_if_else_5_15' Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
70 78 29 00 

# :main_if_true_5_14 Some('programs/app/bootram.j':(22,5))
# main_if_true_5_14
# i <- 0n1/0x00000001u32  Some('programs/app/bootram.j':(22,5))
# Assign { target: Ident("i"), var_type: None, value: Number(USIZE, 1) }
# Number(USIZE, 1)
# 02858 LoadImm32 [Register(0x44), Constant32(0x00000001=1)]
#       i <- 0n1/0x00000001u32  Some('programs/app/bootram.j':(22,5))
#       Assign { target: Ident("i"), var_type: None, value: Number(USIZE, 1) }
#       Number(USIZE, 1)
20 44 01 00 00 00 

# addr <- 0n0/0x00000000u32  Some('programs/app/bootram.j':(22,5))
# Assign { target: Ident("addr"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 0285e LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       addr <- 0n0/0x00000000u32  Some('programs/app/bootram.j':(22,5))
#       Assign { target: Ident("addr"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 3c 00 00 00 00 

# :main_while_predicate_16 Some('programs/app/bootram.j':(22,5))
# While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }
# main_while_predicate_16
# te825 <- __frame_pointer U32 Some('programs/app/bootram.j':(22,5))
# While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }
# Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }
# Index("buf", Ident("i"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Ident("i")) }
# Arithmetic(Add, Ident("__frame_pointer"), Ident("i"))
# Ident("__frame_pointer")
# 02864 Copy32 [Register(0x0c), Register(0x64)]
#       te825 <- __frame_pointer U32 Some('programs/app/bootram.j':(22,5))
#       While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }
#       Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }
#       Index("buf", Ident("i"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Ident("i")) }
#       Arithmetic(Add, Ident("__frame_pointer"), Ident("i"))
#       Ident("__frame_pointer")
21 0c 64 

# td0f3 <- i U32 Some('programs/app/bootram.j':(22,5))
# While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }
# Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }
# Index("buf", Ident("i"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Ident("i")) }
# Arithmetic(Add, Ident("__frame_pointer"), Ident("i"))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U32 Some('programs/app/bootram.j':(22,5))\nWhile { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }\nComparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }\nIndex(\"buf\", Ident(\"i\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }\nArithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\"))\nIdent(\"i\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# t71cb <- te825 Add Var(td0f3) Some('programs/app/bootram.j':(22,5))
# While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }
# Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }
# Index("buf", Ident("i"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Ident("i")) }
# Arithmetic(Add, Ident("__frame_pointer"), Ident("i"))
# 02867 ClearCarry []
#       t71cb <- te825 Add Var(td0f3) Some('programs/app/bootram.j':(22,5))
#       While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }
#       Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }
#       Index("buf", Ident("i"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Ident("i")) }
#       Arithmetic(Add, Ident("__frame_pointer"), Ident("i"))
03 

# 02868 AddCarry32_1 [Register(0x64), Register(0x44), Register(0x48)]
#       t71cb <- te825 Add Var(td0f3) Some('programs/app/bootram.j':(22,5))
#       While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }
#       Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }
#       Index("buf", Ident("i"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Ident("i")) }
#       Arithmetic(Add, Ident("__frame_pointer"), Ident("i"))
30 64 44 48 

# 0286c AddCarry32_2 []
#       t71cb <- te825 Add Var(td0f3) Some('programs/app/bootram.j':(22,5))
#       While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }
#       Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }
#       Index("buf", Ident("i"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Ident("i")) }
#       Arithmetic(Add, Ident("__frame_pointer"), Ident("i"))
31 

# t3837 <- mem[t71cb] U8 Some('programs/app/bootram.j':(22,5))
# While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }
# Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }
# Index("buf", Ident("i"))
# 0286d Load8 [Register(0x48), Register(0x51)]
#       t3837 <- mem[t71cb] U8 Some('programs/app/bootram.j':(22,5))
#       While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }
#       Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }
#       Index("buf", Ident("i"))
05 48 51 

# tb36e <- 0n0/0x00u8  Some('programs/app/bootram.j':(22,5))
# While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }
# Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }
# Number(U8, 0)
# 02870 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('programs/app/bootram.j':(22,5))
#       While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }
#       Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }
#       Number(U8, 0)
04 52 00 

# if t3837 != tb36e then 'main_while_body_17' else 'main_while_end_18' Some('programs/app/bootram.j':(22,5))
# While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }
# Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }
# 02873 Cmp8 [Register(0x51), Register(0x52)]
#       if t3837 != tb36e then 'main_while_body_17' else 'main_while_end_18' Some('programs/app/bootram.j':(22,5))
#       While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }
#       Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }
15 51 52 

# 02876 JzImm [Label24(main_while_end_18)]
#       if t3837 != tb36e then 'main_while_body_17' else 'main_while_end_18' Some('programs/app/bootram.j':(22,5))
#       While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }
#       Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }
72 74 29 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t3837 != tb36e then 'main_while_body_17' else 'main_while_end_18' Some('programs/app/bootram.j':(22,5))\nWhile { predicate: Comparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }, while_true: [Assign { target: Index(\"addr\", Number(USIZE, 3)), var_type: None, value: Index(\"addr\", Number(USIZE, 2)) }, Assign { target: Index(\"addr\", Number(USIZE, 2)), var_type: None, value: Index(\"addr\", Number(USIZE, 1)) }, Assign { target: Index(\"addr\", Number(USIZE, 1)), var_type: None, value: Index(\"addr\", Number(USIZE, 0)) }, Assign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }] }\nComparison { op: NotEquals, left: Index(\"buf\", Ident(\"i\")), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(main_while_body_17)], resolved: None }
# :main_while_body_17 Some('programs/app/bootram.j':(22,5))
# While { predicate: Comparison { op: NotEquals, left: Index("buf", Ident("i")), right: Number(U8, 0) }, while_true: [Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }, Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }, Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }, Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }] }
# main_while_body_17
# teaed <- addr[0x02..0x03] U8 Some('programs/app/bootram.j':(22,5))
# Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }
# Index("addr", Number(USIZE, 2))
# 0287a Copy8 [Register(0x3e), Register(0x68)]
#       teaed <- addr[0x02..0x03] U8 Some('programs/app/bootram.j':(22,5))
#       Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }
#       Index("addr", Number(USIZE, 2))
0b 3e 68 

# addr[0x03..0x04] <- teaed U8 Some('programs/app/bootram.j':(22,5))
# Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }
# 0287d Copy8 [Register(0x68), Register(0x3f)]
#       addr[0x03..0x04] <- teaed U8 Some('programs/app/bootram.j':(22,5))
#       Assign { target: Index("addr", Number(USIZE, 3)), var_type: None, value: Index("addr", Number(USIZE, 2)) }
0b 68 3f 

# t92f6 <- addr[0x01..0x02] U8 Some('programs/app/bootram.j':(22,5))
# Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }
# Index("addr", Number(USIZE, 1))
# 02880 Copy8 [Register(0x3d), Register(0x68)]
#       t92f6 <- addr[0x01..0x02] U8 Some('programs/app/bootram.j':(22,5))
#       Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }
#       Index("addr", Number(USIZE, 1))
0b 3d 68 

# addr[0x02..0x03] <- t92f6 U8 Some('programs/app/bootram.j':(22,5))
# Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }
# 02883 Copy8 [Register(0x68), Register(0x3e)]
#       addr[0x02..0x03] <- t92f6 U8 Some('programs/app/bootram.j':(22,5))
#       Assign { target: Index("addr", Number(USIZE, 2)), var_type: None, value: Index("addr", Number(USIZE, 1)) }
0b 68 3e 

# tf5dc <- addr[0x00..0x01] U8 Some('programs/app/bootram.j':(22,5))
# Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }
# Index("addr", Number(USIZE, 0))
# 02886 Copy8 [Register(0x3c), Register(0x68)]
#       tf5dc <- addr[0x00..0x01] U8 Some('programs/app/bootram.j':(22,5))
#       Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }
#       Index("addr", Number(USIZE, 0))
0b 3c 68 

# addr[0x01..0x02] <- tf5dc U8 Some('programs/app/bootram.j':(22,5))
# Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }
# 02889 Copy8 [Register(0x68), Register(0x3d)]
#       addr[0x01..0x02] <- tf5dc U8 Some('programs/app/bootram.j':(22,5))
#       Assign { target: Index("addr", Number(USIZE, 1)), var_type: None, value: Index("addr", Number(USIZE, 0)) }
0b 68 3d 

# te825 <- __frame_pointer U32 Some('programs/app/bootram.j':(22,5))
# Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }
# Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] })
# AddressOf(Index("buf", Ident("i")))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Ident("i")) }
# Arithmetic(Add, Ident("__frame_pointer"), Ident("i"))
# Ident("__frame_pointer")
# 0288c Copy32 [Register(0x0c), Register(0x64)]
#       te825 <- __frame_pointer U32 Some('programs/app/bootram.j':(22,5))
#       Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }
#       Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] })
#       AddressOf(Index("buf", Ident("i")))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Ident("i")) }
#       Arithmetic(Add, Ident("__frame_pointer"), Ident("i"))
#       Ident("__frame_pointer")
21 0c 64 

# td0f3 <- i U32 Some('programs/app/bootram.j':(22,5))
# Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }
# Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] })
# AddressOf(Index("buf", Ident("i")))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Ident("i")) }
# Arithmetic(Add, Ident("__frame_pointer"), Ident("i"))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U32 Some('programs/app/bootram.j':(22,5))\nAssign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }\nCall(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })\nAddressOf(Index(\"buf\", Ident(\"i\")))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\")) }\nArithmetic(Add, Ident(\"__frame_pointer\"), Ident(\"i\"))\nIdent(\"i\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# t71cb <- te825 Add Var(td0f3) Some('programs/app/bootram.j':(22,5))
# Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }
# Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] })
# AddressOf(Index("buf", Ident("i")))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Ident("i")) }
# Arithmetic(Add, Ident("__frame_pointer"), Ident("i"))
# 0288f ClearCarry []
#       t71cb <- te825 Add Var(td0f3) Some('programs/app/bootram.j':(22,5))
#       Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }
#       Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] })
#       AddressOf(Index("buf", Ident("i")))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Ident("i")) }
#       Arithmetic(Add, Ident("__frame_pointer"), Ident("i"))
03 

# 02890 AddCarry32_1 [Register(0x64), Register(0x44), Register(0x48)]
#       t71cb <- te825 Add Var(td0f3) Some('programs/app/bootram.j':(22,5))
#       Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }
#       Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] })
#       AddressOf(Index("buf", Ident("i")))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Ident("i")) }
#       Arithmetic(Add, Ident("__frame_pointer"), Ident("i"))
30 64 44 48 

# 02894 AddCarry32_2 []
#       t71cb <- te825 Add Var(td0f3) Some('programs/app/bootram.j':(22,5))
#       Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }
#       Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] })
#       AddressOf(Index("buf", Ident("i")))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Ident("__frame_pointer"), Ident("i")) }
#       Arithmetic(Add, Ident("__frame_pointer"), Ident("i"))
31 

# t22ae <- t71cb U32 Some('programs/app/bootram.j':(22,5))
# Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }
# Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] })
# AddressOf(Index("buf", Ident("i")))
# optimized away noop copy Instruction { source: "t22ae <- t71cb U32 Some('programs/app/bootram.j':(22,5))\nAssign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }\nCall(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })\nAddressOf(Index(\"buf\", Ident(\"i\")))\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_main_parseHex_18_c <- t22ae U32 Some('programs/app/bootram.j':(22,5))
# Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }
# Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] })
# optimized away noop copy Instruction { source: "inline_main_parseHex_18_c <- t22ae U32 Some('programs/app/bootram.j':(22,5))\nAssign { target: Index(\"addr\", Number(USIZE, 0)), var_type: None, value: Call(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] }) }\nCall(Call { function: \"parseHex\", parameters: [AddressOf(Index(\"buf\", Ident(\"i\")))] })\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_main_parseHex_18_tac13 <- inline_main_parseHex_18_c U32 Some('/home/john/lutcomp/programs/lib/print_hex.j':(43,5))
# Assign { target: Ident("h"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
# Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
# Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })
# Deref(Ident("c"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_parseHex_18_tac13 <- inline_main_parseHex_18_c U32 Some('/home/john/lutcomp/programs/lib/print_hex.j':(43,5))\nAssign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }\nArithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))\nCall(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })\nDeref(Ident(\"c\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_main_parseHex_18_tea8d <- mem[inline_main_parseHex_18_tac13] U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(43,5))
# Assign { target: Ident("h"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
# Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
# Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })
# Deref(Ident("c"))
# 02895 Load8 [Register(0x48), Register(0x52)]
#       inline_main_parseHex_18_tea8d <- mem[inline_main_parseHex_18_tac13] U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(43,5))
#       Assign { target: Ident("h"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
#       Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
#       Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })
#       Deref(Ident("c"))
05 48 52 

# inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_ch <- inline_main_parseHex_18_tea8d U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(43,5))
# Assign { target: Ident("h"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
# Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
# Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })
# optimized away noop copy Instruction { source: "inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_ch <- inline_main_parseHex_18_tea8d U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(43,5))\nAssign { target: Ident(\"h\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }\nArithmetic(Multiply, Number(U8, 16), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))\nCall(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\nComparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t4421 <- 0n97/0x61u8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
# Number(U8, 97)
# 02898 LoadImm8 [Register(0x53), Constant8(0x61=97)]
#       inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t4421 <- 0n97/0x61u8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
#       Number(U8, 97)
04 53 61 

# if inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 >= inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t4421 then 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
# 0289b Cmp8 [Register(0x53), Register(0x52)]
#       if inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 >= inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t4421 then 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
15 53 52 

# 0289e JcImm [Label24(inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_1)]
#       if inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 >= inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t4421 then 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
71 a6 28 00 

# 028a2 JmpImm [Label24(inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_2)]
#       if inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 >= inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t4421 then 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
70 bc 28 00 

# :inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_1 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_1
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
# Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
# Arithmetic(Subtract, Ident("ch"), Number(U8, 97))
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))\nReturn { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }\nArithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))\nArithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_te3ca <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 Subtract Number(0n97/0x61u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
# Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
# Arithmetic(Subtract, Ident("ch"), Number(U8, 97))
# 028a6 LoadImm8 [Register(0x00), Constant8(0x9f=159)]
#       inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_te3ca <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 Subtract Number(0n97/0x61u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 97))
04 00 9f 

# 028a9 Add8NoCarryIn [Register(0x52), Register(0x00), Register(0x52)]
#       inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_te3ca <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 Subtract Number(0n97/0x61u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 97))
14 52 00 52 

# inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t45e4 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_te3ca Add Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
# Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
# 028ad LoadImm8 [Register(0x00), Constant8(0x0a=10)]
#       inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t45e4 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_te3ca Add Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
04 00 0a 

# 028b0 Add8NoCarryIn [Register(0x52), Register(0x00), Register(0x52)]
#       inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t45e4 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_te3ca Add Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
14 52 00 52 

# inline_main_parseHex_18_t61f3 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t45e4 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
# optimized away noop copy Instruction { source: "inline_main_parseHex_18_t61f3 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t45e4 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))\nReturn { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# goto inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_function_end_parseHexNibble Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
# 028b4 JmpImm [Label24(inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_function_end_parseHexNibble)]
#       goto inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_function_end_parseHexNibble Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
70 eb 28 00 

# goto inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# 028b8 JmpImm [Label24(inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_end_0)]
#       goto inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
70 bc 28 00 

# :inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_2 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_2
# :inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_end_0
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))\nIfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }\nComparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t2ac9 <- 0n57/0x39u8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
# Number(U8, 57)
# 028bc LoadImm8 [Register(0x53), Constant8(0x39=57)]
#       inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t2ac9 <- 0n57/0x39u8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
#       Number(U8, 57)
04 53 39 

# if inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 <= inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t2ac9 then 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_5' Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
# 028bf Cmp8 [Register(0x52), Register(0x53)]
#       if inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 <= inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t2ac9 then 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_5' Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
15 52 53 

# 028c2 JcImm [Label24(inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_4)]
#       if inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 <= inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t2ac9 then 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_5' Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
71 ca 28 00 

# 028c6 JmpImm [Label24(inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_5)]
#       if inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 <= inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t2ac9 then 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_5' Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
70 d9 28 00 

# :inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_4 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_true_0_4
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
# Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))\nReturn { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }\nArithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t7ff1 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 Subtract Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
# Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
# 028ca LoadImm8 [Register(0x00), Constant8(0xd0=208)]
#       inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t7ff1 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 Subtract Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
04 00 d0 

# 028cd Add8NoCarryIn [Register(0x52), Register(0x00), Register(0x52)]
#       inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t7ff1 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 Subtract Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
14 52 00 52 

# inline_main_parseHex_18_t61f3 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t7ff1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
# optimized away noop copy Instruction { source: "inline_main_parseHex_18_t61f3 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t7ff1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))\nReturn { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# goto inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_function_end_parseHexNibble Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
# 028d1 JmpImm [Label24(inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_function_end_parseHexNibble)]
#       goto inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_function_end_parseHexNibble Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
70 eb 28 00 

# goto inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_end_3 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# 028d5 JmpImm [Label24(inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_end_3)]
#       goto inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_end_3 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
70 d9 28 00 

# :inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_5 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_else_0_5
# :inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_end_3 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_parseHexNibble_if_end_3
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
# Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
# Arithmetic(Subtract, Ident("ch"), Number(U8, 65))
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))\nReturn { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }\nArithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))\nArithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_td437 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 Subtract Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
# Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
# Arithmetic(Subtract, Ident("ch"), Number(U8, 65))
# 028d9 LoadImm8 [Register(0x00), Constant8(0xbf=191)]
#       inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_td437 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 Subtract Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 65))
04 00 bf 

# 028dc Add8NoCarryIn [Register(0x52), Register(0x00), Register(0x52)]
#       inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_td437 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_tdcd9 Subtract Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 65))
14 52 00 52 

# inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t3fb8 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_td437 Add Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
# Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
# 028e0 LoadImm8 [Register(0x00), Constant8(0x0a=10)]
#       inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t3fb8 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_td437 Add Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
04 00 0a 

# 028e3 Add8NoCarryIn [Register(0x52), Register(0x00), Register(0x52)]
#       inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t3fb8 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_td437 Add Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
14 52 00 52 

# inline_main_parseHex_18_t61f3 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t3fb8 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
# optimized away noop copy Instruction { source: "inline_main_parseHex_18_t61f3 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_t3fb8 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))\nReturn { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }\n", opcode: Copy8, args: [Register(0x52), Register(0x52)], resolved: None }
# goto inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_function_end_parseHexNibble Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
# 028e7 JmpImm [Label24(inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_function_end_parseHexNibble)]
#       goto inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_function_end_parseHexNibble Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
70 eb 28 00 

# :inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_function_end_parseHexNibble None
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_15_function_end_parseHexNibble
# inline_main_parseHex_18_h <- inline_main_parseHex_18_t61f3 Multiply Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(43,5))
# Assign { target: Ident("h"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
# Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
# 028eb LoadImm8 [Register(0x00), Constant8(0x10=16)]
#       inline_main_parseHex_18_h <- inline_main_parseHex_18_t61f3 Multiply Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(43,5))
#       Assign { target: Ident("h"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
#       Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
04 00 10 

# 028ee Mul8_8 [Register(0x52), Register(0x00), Register(0x52)]
#       inline_main_parseHex_18_h <- inline_main_parseHex_18_t61f3 Multiply Number(0n16/0x10u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(43,5))
#       Assign { target: Ident("h"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
#       Arithmetic(Multiply, Number(U8, 16), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
10 52 00 52 

# inline_main_parseHex_18_t87c3 <- inline_main_parseHex_18_c U32 Some('/home/john/lutcomp/programs/lib/print_hex.j':(44,5))
# Assign { target: Ident("c"), var_type: None, value: AddressOf(Index("c", Number(USIZE, 1))) }
# AddressOf(Index("c", Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 1)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 1))
# Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_parseHex_18_t87c3 <- inline_main_parseHex_18_c U32 Some('/home/john/lutcomp/programs/lib/print_hex.j':(44,5))\nAssign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }\nAddressOf(Index(\"c\", Number(USIZE, 1)))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 1))\nCast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_main_parseHex_18_t2fed <- inline_main_parseHex_18_t87c3 Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/print_hex.j':(44,5))
# Assign { target: Ident("c"), var_type: None, value: AddressOf(Index("c", Number(USIZE, 1))) }
# AddressOf(Index("c", Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 1)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 1))
# 028f2 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000001=1)]
#       inline_main_parseHex_18_t2fed <- inline_main_parseHex_18_t87c3 Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/print_hex.j':(44,5))
#       Assign { target: Ident("c"), var_type: None, value: AddressOf(Index("c", Number(USIZE, 1))) }
#       AddressOf(Index("c", Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 1)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 1))
32 48 01 00 00 00 

# inline_main_parseHex_18_c <- inline_main_parseHex_18_t2fed U32 Some('/home/john/lutcomp/programs/lib/print_hex.j':(44,5))
# Assign { target: Ident("c"), var_type: None, value: AddressOf(Index("c", Number(USIZE, 1))) }
# AddressOf(Index("c", Number(USIZE, 1)))
# optimized away noop copy Instruction { source: "inline_main_parseHex_18_c <- inline_main_parseHex_18_t2fed U32 Some('/home/john/lutcomp/programs/lib/print_hex.j':(44,5))\nAssign { target: Ident(\"c\"), var_type: None, value: AddressOf(Index(\"c\", Number(USIZE, 1))) }\nAddressOf(Index(\"c\", Number(USIZE, 1)))\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_main_parseHex_18_t4768 <- inline_main_parseHex_18_h U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(45,5))
# Assign { target: Ident("h"), var_type: None, value: Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
# Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
# Ident("h")
# 028f8 Copy8 [Register(0x52), Register(0x53)]
#       inline_main_parseHex_18_t4768 <- inline_main_parseHex_18_h U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(45,5))
#       Assign { target: Ident("h"), var_type: None, value: Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
#       Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
#       Ident("h")
0b 52 53 

# inline_main_parseHex_18_tac13 <- inline_main_parseHex_18_c U32 Some('/home/john/lutcomp/programs/lib/print_hex.j':(45,5))
# Assign { target: Ident("h"), var_type: None, value: Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
# Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
# Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })
# Deref(Ident("c"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_parseHex_18_tac13 <- inline_main_parseHex_18_c U32 Some('/home/john/lutcomp/programs/lib/print_hex.j':(45,5))\nAssign { target: Ident(\"h\"), var_type: None, value: Arithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })) }\nArithmetic(Add, Ident(\"h\"), Call(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] }))\nCall(Call { function: \"parseHexNibble\", parameters: [Deref(Ident(\"c\"))] })\nDeref(Ident(\"c\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_main_parseHex_18_tea8d <- mem[inline_main_parseHex_18_tac13] U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(45,5))
# Assign { target: Ident("h"), var_type: None, value: Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
# Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
# Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })
# Deref(Ident("c"))
# 028fb Load8 [Register(0x48), Register(0x52)]
#       inline_main_parseHex_18_tea8d <- mem[inline_main_parseHex_18_tac13] U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(45,5))
#       Assign { target: Ident("h"), var_type: None, value: Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
#       Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
#       Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })
#       Deref(Ident("c"))
05 48 52 

# inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_ch <- inline_main_parseHex_18_tea8d U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(45,5))
# Assign { target: Ident("h"), var_type: None, value: Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
# Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
# Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })
# 028fe Copy8 [Register(0x52), Register(0x51)]
#       inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_ch <- inline_main_parseHex_18_tea8d U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(45,5))
#       Assign { target: Ident("h"), var_type: None, value: Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
#       Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
#       Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })
0b 52 51 

# inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }\nComparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 97) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t4421 <- 0n97/0x61u8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
# Number(U8, 97)
# 02901 LoadImm8 [Register(0x52), Constant8(0x61=97)]
#       inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t4421 <- 0n97/0x61u8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
#       Number(U8, 97)
04 52 61 

# if inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 >= inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t4421 then 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
# 02904 Cmp8 [Register(0x52), Register(0x51)]
#       if inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 >= inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t4421 then 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
15 52 51 

# 02907 JcImm [Label24(inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_1)]
#       if inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 >= inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t4421 then 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
71 0f 29 00 

# 0290b JmpImm [Label24(inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_2)]
#       if inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 >= inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t4421 then 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_1' else 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_2' Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }
70 28 29 00 

# :inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_1 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 97) }, [Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }])], else_block: [] }
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_1
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
# Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
# Arithmetic(Subtract, Ident("ch"), Number(U8, 97))
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))\nReturn { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))) }\nArithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 97)), Number(U8, 10))\nArithmetic(Subtract, Ident(\"ch\"), Number(U8, 97))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_te3ca <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 Subtract Number(0n97/0x61u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
# Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
# Arithmetic(Subtract, Ident("ch"), Number(U8, 97))
# 0290f LoadImm8 [Register(0x00), Constant8(0x9f=159)]
#       inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_te3ca <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 Subtract Number(0n97/0x61u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 97))
04 00 9f 

# 02912 Add8NoCarryIn [Register(0x51), Register(0x00), Register(0x51)]
#       inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_te3ca <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 Subtract Number(0n97/0x61u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 97))
14 51 00 51 

# inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t45e4 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_te3ca Add Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
# Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
# 02916 LoadImm8 [Register(0x00), Constant8(0x0a=10)]
#       inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t45e4 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_te3ca Add Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
04 00 0a 

# 02919 Add8NoCarryIn [Register(0x51), Register(0x00), Register(0x51)]
#       inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t45e4 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_te3ca Add Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))
14 51 00 51 

# inline_main_parseHex_18_t61f3 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t45e4 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
# 0291d Copy8 [Register(0x51), Register(0x52)]
#       inline_main_parseHex_18_t61f3 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t45e4 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
0b 51 52 

# goto inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_function_end_parseHexNibble Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
# 02920 JmpImm [Label24(inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_function_end_parseHexNibble)]
#       goto inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_function_end_parseHexNibble Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 97)), Number(U8, 10))) }
70 5d 29 00 

# goto inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# 02924 JmpImm [Label24(inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_end_0)]
#       goto inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
70 28 29 00 

# :inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_2 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_2
# :inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_end_0 Some('/home/john/lutcomp/programs/lib/print_hex.j':(32,5))
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_end_0
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))\nIfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }])], else_block: [] }\nComparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t2ac9 <- 0n57/0x39u8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
# Number(U8, 57)
# 02928 LoadImm8 [Register(0x52), Constant8(0x39=57)]
#       inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t2ac9 <- 0n57/0x39u8  Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
#       Number(U8, 57)
04 52 39 

# if inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 <= inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t2ac9 then 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_5' Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
# 0292b Cmp8 [Register(0x51), Register(0x52)]
#       if inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 <= inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t2ac9 then 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_5' Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
15 51 52 

# 0292e JcImm [Label24(inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_4)]
#       if inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 <= inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t2ac9 then 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_5' Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
71 36 29 00 

# 02932 JmpImm [Label24(inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_5)]
#       if inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 <= inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t2ac9 then 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_4' else 'inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_5' Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
70 48 29 00 

# :inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_4 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# IfElse { if_blocks: [(Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }])], else_block: [] }
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_true_0_4
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
# Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))\nReturn { value: Some(Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))) }\nArithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t7ff1 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 Subtract Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
# Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
# 02936 LoadImm8 [Register(0x00), Constant8(0xd0=208)]
#       inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t7ff1 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 Subtract Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
04 00 d0 

# 02939 Add8NoCarryIn [Register(0x51), Register(0x00), Register(0x51)]
#       inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t7ff1 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 Subtract Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
14 51 00 51 

# inline_main_parseHex_18_t61f3 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t7ff1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
# 0293d Copy8 [Register(0x51), Register(0x52)]
#       inline_main_parseHex_18_t61f3 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t7ff1 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
0b 51 52 

# goto inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_function_end_parseHexNibble Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
# 02940 JmpImm [Label24(inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_function_end_parseHexNibble)]
#       goto inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_function_end_parseHexNibble Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
#       Return { value: Some(Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) }
70 5d 29 00 

# goto inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_end_3 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# 02944 JmpImm [Label24(inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_end_3)]
#       goto inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_end_3 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
70 48 29 00 

# :inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_5 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_else_0_5
# :inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_end_3 Some('/home/john/lutcomp/programs/lib/print_hex.j':(35,5))
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_parseHexNibble_if_end_3
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
# Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
# Arithmetic(Subtract, Ident("ch"), Number(U8, 65))
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_ch U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))\nReturn { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))) }\nArithmetic(Add, Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 65)), Number(U8, 10))\nArithmetic(Subtract, Ident(\"ch\"), Number(U8, 65))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_td437 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 Subtract Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
# Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
# Arithmetic(Subtract, Ident("ch"), Number(U8, 65))
# 02948 LoadImm8 [Register(0x00), Constant8(0xbf=191)]
#       inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_td437 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 Subtract Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 65))
04 00 bf 

# 0294b Add8NoCarryIn [Register(0x51), Register(0x00), Register(0x51)]
#       inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_td437 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_tdcd9 Subtract Number(0n65/0x41u8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 65))
14 51 00 51 

# inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t3fb8 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_td437 Add Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
# Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
# 0294f LoadImm8 [Register(0x00), Constant8(0x0a=10)]
#       inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t3fb8 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_td437 Add Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
04 00 0a 

# 02952 Add8NoCarryIn [Register(0x51), Register(0x00), Register(0x51)]
#       inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t3fb8 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_td437 Add Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
#       Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))
14 51 00 51 

# inline_main_parseHex_18_t61f3 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t3fb8 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
# 02956 Copy8 [Register(0x51), Register(0x52)]
#       inline_main_parseHex_18_t61f3 <- inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_t3fb8 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
0b 51 52 

# goto inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_function_end_parseHexNibble Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
# Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
# 02959 JmpImm [Label24(inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_function_end_parseHexNibble)]
#       goto inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_function_end_parseHexNibble Some('/home/john/lutcomp/programs/lib/print_hex.j':(39,5))
#       Return { value: Some(Arithmetic(Add, Arithmetic(Subtract, Ident("ch"), Number(U8, 65)), Number(U8, 10))) }
70 5d 29 00 

# :inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_function_end_parseHexNibble None
# inline_main_parseHex_18_inline_parseHex_parseHexNibble_16_function_end_parseHexNibble
# inline_main_parseHex_18_h <- inline_main_parseHex_18_t4768 Add Var(inline_main_parseHex_18_t61f3) Some('/home/john/lutcomp/programs/lib/print_hex.j':(45,5))
# Assign { target: Ident("h"), var_type: None, value: Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
# Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
# 0295d Add8NoCarryIn [Register(0x53), Register(0x52), Register(0x52)]
#       inline_main_parseHex_18_h <- inline_main_parseHex_18_t4768 Add Var(inline_main_parseHex_18_t61f3) Some('/home/john/lutcomp/programs/lib/print_hex.j':(45,5))
#       Assign { target: Ident("h"), var_type: None, value: Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] })) }
#       Arithmetic(Add, Ident("h"), Call(Call { function: "parseHexNibble", parameters: [Deref(Ident("c"))] }))
14 53 52 52 

# inline_main_parseHex_18_t4768 <- inline_main_parseHex_18_h U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(46,5))
# Return { value: Some(Ident("h")) }
# Ident("h")
# 02961 Copy8 [Register(0x52), Register(0x53)]
#       inline_main_parseHex_18_t4768 <- inline_main_parseHex_18_h U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(46,5))
#       Return { value: Some(Ident("h")) }
#       Ident("h")
0b 52 53 

# t8ed0 <- inline_main_parseHex_18_t4768 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(46,5))
# Return { value: Some(Ident("h")) }
# 02964 Copy8 [Register(0x53), Register(0x51)]
#       t8ed0 <- inline_main_parseHex_18_t4768 U8 Some('/home/john/lutcomp/programs/lib/print_hex.j':(46,5))
#       Return { value: Some(Ident("h")) }
0b 53 51 

# goto inline_main_parseHex_18_function_end_parseHex Some('/home/john/lutcomp/programs/lib/print_hex.j':(46,5))
# Return { value: Some(Ident("h")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_parseHex_18_function_end_parseHex Some('/home/john/lutcomp/programs/lib/print_hex.j':(46,5))\nReturn { value: Some(Ident(\"h\")) }\n", opcode: JmpImm, args: [Label24(inline_main_parseHex_18_function_end_parseHex)], resolved: None }
# :inline_main_parseHex_18_function_end_parseHex None
# inline_main_parseHex_18_function_end_parseHex
# addr[0x00..0x01] <- t8ed0 U8 Some('programs/app/bootram.j':(22,5))
# Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }
# 02967 Copy8 [Register(0x51), Register(0x3c)]
#       addr[0x00..0x01] <- t8ed0 U8 Some('programs/app/bootram.j':(22,5))
#       Assign { target: Index("addr", Number(USIZE, 0)), var_type: None, value: Call(Call { function: "parseHex", parameters: [AddressOf(Index("buf", Ident("i")))] }) }
0b 51 3c 

# td0f3 <- i U32 Some('programs/app/bootram.j':(22,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }
# Arithmetic(Add, Ident("i"), Number(USIZE, 2))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U32 Some('programs/app/bootram.j':(22,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(USIZE, 2)) }\nArithmetic(Add, Ident(\"i\"), Number(USIZE, 2))\nIdent(\"i\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# i <- td0f3 Add Number(0n2/0x00000002u32) Some('programs/app/bootram.j':(22,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }
# Arithmetic(Add, Ident("i"), Number(USIZE, 2))
# 0296a AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000002=2)]
#       i <- td0f3 Add Number(0n2/0x00000002u32) Some('programs/app/bootram.j':(22,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(USIZE, 2)) }
#       Arithmetic(Add, Ident("i"), Number(USIZE, 2))
32 44 02 00 00 00 

# goto main_while_predicate_16 Some('programs/app/bootram.j':(22,5))
# 02970 JmpImm [Label24(main_while_predicate_16)]
#       goto main_while_predicate_16 Some('programs/app/bootram.j':(22,5))
70 64 28 00 

# :main_while_end_18 Some('programs/app/bootram.j':(22,5))
# main_while_end_18
# goto main_if_end_3 Some('programs/app/bootram.j':(22,5))
# 02974 JmpImm [Label24(main_if_end_3)]
#       goto main_if_end_3 Some('programs/app/bootram.j':(22,5))
70 57 2b 00 

# :main_if_else_5_15 Some('programs/app/bootram.j':(22,5))
# main_if_else_5_15
# tdcd9 <- ch U8 Some('programs/app/bootram.j':(22,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/app/bootram.j':(22,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# t1501 <- 0n113/0x71u8  Some('programs/app/bootram.j':(22,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
# Number(U8, 113)
# 02978 LoadImm8 [Register(0x51), Constant8(0x71=113)]
#       t1501 <- 0n113/0x71u8  Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
#       Number(U8, 113)
04 51 71 

# if tdcd9 == t1501 then 'main_if_true_6_19' else 'main_if_else_6_20' Some('programs/app/bootram.j':(22,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
# 0297b Cmp8 [Register(0x40), Register(0x51)]
#       if tdcd9 == t1501 then 'main_if_true_6_19' else 'main_if_else_6_20' Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
15 40 51 

# 0297e JzImm [Label24(main_if_true_6_19)]
#       if tdcd9 == t1501 then 'main_if_true_6_19' else 'main_if_else_6_20' Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
72 86 29 00 

# 02982 JmpImm [Label24(main_if_else_6_20)]
#       if tdcd9 == t1501 then 'main_if_true_6_19' else 'main_if_else_6_20' Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
70 9e 29 00 

# :main_if_true_6_19 Some('programs/app/bootram.j':(22,5))
# main_if_true_6_19
# tb36e <- 0n0/0x00u8  Some('programs/app/bootram.j':(22,5))
# Return { value: Some(Number(U8, 0)) }
# Number(U8, 0)
# 02986 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('programs/app/bootram.j':(22,5))
#       Return { value: Some(Number(U8, 0)) }
#       Number(U8, 0)
04 52 00 

# __frame_pointer <- __frame_pointer Add Number(0n20/0x00000014u32) Some('programs/app/bootram.j':(22,5))
# Return { value: Some(Number(U8, 0)) }
# 02989 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000014=20)]
#       __frame_pointer <- __frame_pointer Add Number(0n20/0x00000014u32) Some('programs/app/bootram.j':(22,5))
#       Return { value: Some(Number(U8, 0)) }
32 0c 14 00 00 00 

# return Some(tb36e) Some('programs/app/bootram.j':(22,5))
# Return { value: Some(Number(U8, 0)) }
# 0298f Copy8 [Register(0x52), Register(0x00)]
#       return Some(tb36e) Some('programs/app/bootram.j':(22,5))
#       Return { value: Some(Number(U8, 0)) }
0b 52 00 

# 02992 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000014=20)]
#       Dealloc 20 bytes from stack
32 0c 14 00 00 00 

# 02998 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto main_if_end_3 Some('programs/app/bootram.j':(22,5))
# 0299a JmpImm [Label24(main_if_end_3)]
#       goto main_if_end_3 Some('programs/app/bootram.j':(22,5))
70 57 2b 00 

# :main_if_else_6_20 Some('programs/app/bootram.j':(22,5))
# main_if_else_6_20
# tdcd9 <- ch U8 Some('programs/app/bootram.j':(22,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 105) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/app/bootram.j':(22,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 105) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# tc49a <- 0n105/0x69u8  Some('programs/app/bootram.j':(22,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 105) }
# Number(U8, 105)
# 0299e LoadImm8 [Register(0x51), Constant8(0x69=105)]
#       tc49a <- 0n105/0x69u8  Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 105) }
#       Number(U8, 105)
04 51 69 

# if tdcd9 == tc49a then 'main_if_true_7_21' else 'main_if_else_7_22' Some('programs/app/bootram.j':(22,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 105) }
# 029a1 Cmp8 [Register(0x40), Register(0x51)]
#       if tdcd9 == tc49a then 'main_if_true_7_21' else 'main_if_else_7_22' Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 105) }
15 40 51 

# 029a4 JzImm [Label24(main_if_true_7_21)]
#       if tdcd9 == tc49a then 'main_if_true_7_21' else 'main_if_else_7_22' Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 105) }
72 ac 29 00 

# 029a8 JmpImm [Label24(main_if_else_7_22)]
#       if tdcd9 == tc49a then 'main_if_true_7_21' else 'main_if_else_7_22' Some('programs/app/bootram.j':(22,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 105) }
70 a6 2a 00 

# :main_if_true_7_21 Some('programs/app/bootram.j':(22,5))
# main_if_true_7_21
# tc4c6 <- 0n66/0x42u8  Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 66)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 66)] })
# Number(U8, 66)
# 029ac LoadImm8 [Register(0x40), Constant8(0x42=66)]
#       tc4c6 <- 0n66/0x42u8  Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 66)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 66)] })
#       Number(U8, 66)
04 40 42 

# inline_main_putc_41_c <- tc4c6 U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 66)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 66)] })
# optimized away noop copy Instruction { source: "inline_main_putc_41_c <- tc4c6 U8 Some('programs/app/bootram.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 66)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 66)] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_putc_41_tac13 <- inline_main_putc_41_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_41_tac13 <- inline_main_putc_41_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_putc_41_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 029af Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_putc_41_tac13 <- inline_main_putc_41_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_41_tac13 <- inline_main_putc_41_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_putc_41_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 029b1 Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_putc_41_tac13 None <= call lcd_putc(inline_main_putc_41_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 029b4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 029ba StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c c4 29 00 00 

# 029c0 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 029c4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_41_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_41_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_41_function_end_putc)], resolved: None }
# :inline_main_putc_41_function_end_putc None
# inline_main_putc_41_function_end_putc
# tb699 <- 0n111/0x6fu8  Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 111)] })
# Number(U8, 111)
# 029ca LoadImm8 [Register(0x40), Constant8(0x6f=111)]
#       tb699 <- 0n111/0x6fu8  Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 111)] })
#       Number(U8, 111)
04 40 6f 

# inline_main_putc_42_c <- tb699 U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 111)] })
# optimized away noop copy Instruction { source: "inline_main_putc_42_c <- tb699 U8 Some('programs/app/bootram.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 111)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 111)] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_putc_42_tac13 <- inline_main_putc_42_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_42_tac13 <- inline_main_putc_42_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_putc_42_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 029cd Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_putc_42_tac13 <- inline_main_putc_42_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_42_tac13 <- inline_main_putc_42_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_putc_42_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 029cf Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_putc_42_tac13 None <= call lcd_putc(inline_main_putc_42_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 029d2 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 029d8 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c e2 29 00 00 

# 029de JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 029e2 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_42_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_42_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_42_function_end_putc)], resolved: None }
# :inline_main_putc_42_function_end_putc None
# inline_main_putc_42_function_end_putc
# tb699 <- 0n111/0x6fu8  Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 111)] })
# Number(U8, 111)
# 029e8 LoadImm8 [Register(0x40), Constant8(0x6f=111)]
#       tb699 <- 0n111/0x6fu8  Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 111)] })
#       Number(U8, 111)
04 40 6f 

# inline_main_putc_43_c <- tb699 U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 111)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 111)] })
# optimized away noop copy Instruction { source: "inline_main_putc_43_c <- tb699 U8 Some('programs/app/bootram.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 111)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 111)] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_putc_43_tac13 <- inline_main_putc_43_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_43_tac13 <- inline_main_putc_43_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_putc_43_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 029eb Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_putc_43_tac13 <- inline_main_putc_43_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_43_tac13 <- inline_main_putc_43_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_putc_43_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 029ed Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_putc_43_tac13 None <= call lcd_putc(inline_main_putc_43_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 029f0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 029f6 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 00 2a 00 00 

# 029fc JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02a00 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_43_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_43_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_43_function_end_putc)], resolved: None }
# :inline_main_putc_43_function_end_putc None
# inline_main_putc_43_function_end_putc
# tc0b9 <- 0n116/0x74u8  Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 116)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 116)] })
# Number(U8, 116)
# 02a06 LoadImm8 [Register(0x40), Constant8(0x74=116)]
#       tc0b9 <- 0n116/0x74u8  Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 116)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 116)] })
#       Number(U8, 116)
04 40 74 

# inline_main_putc_44_c <- tc0b9 U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 116)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 116)] })
# optimized away noop copy Instruction { source: "inline_main_putc_44_c <- tc0b9 U8 Some('programs/app/bootram.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 116)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 116)] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_putc_44_tac13 <- inline_main_putc_44_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_44_tac13 <- inline_main_putc_44_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_putc_44_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02a09 Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_putc_44_tac13 <- inline_main_putc_44_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_44_tac13 <- inline_main_putc_44_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_putc_44_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 02a0b Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_putc_44_tac13 None <= call lcd_putc(inline_main_putc_44_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02a0e AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02a14 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 1e 2a 00 00 

# 02a1a JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02a1e AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_44_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_44_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_44_function_end_putc)], resolved: None }
# :inline_main_putc_44_function_end_putc None
# inline_main_putc_44_function_end_putc
# tc076 <- 0n114/0x72u8  Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 114)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 114)] })
# Number(U8, 114)
# 02a24 LoadImm8 [Register(0x51), Constant8(0x72=114)]
#       tc076 <- 0n114/0x72u8  Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 114)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 114)] })
#       Number(U8, 114)
04 51 72 

# inline_main_putc_45_c <- tc076 U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 114)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 114)] })
# 02a27 Copy8 [Register(0x51), Register(0x40)]
#       inline_main_putc_45_c <- tc076 U8 Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 114)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 114)] })
0b 51 40 

# inline_main_putc_45_tac13 <- inline_main_putc_45_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_45_tac13 <- inline_main_putc_45_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_putc_45_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02a2a Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_putc_45_tac13 <- inline_main_putc_45_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_45_tac13 <- inline_main_putc_45_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_putc_45_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 02a2c Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_putc_45_tac13 None <= call lcd_putc(inline_main_putc_45_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02a2f AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02a35 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 3f 2a 00 00 

# 02a3b JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02a3f AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_45_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_45_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_45_function_end_putc)], resolved: None }
# :inline_main_putc_45_function_end_putc None
# inline_main_putc_45_function_end_putc
# t4421 <- 0n97/0x61u8  Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 97)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 97)] })
# Number(U8, 97)
# 02a45 LoadImm8 [Register(0x51), Constant8(0x61=97)]
#       t4421 <- 0n97/0x61u8  Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 97)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 97)] })
#       Number(U8, 97)
04 51 61 

# inline_main_putc_46_c <- t4421 U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 97)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 97)] })
# 02a48 Copy8 [Register(0x51), Register(0x40)]
#       inline_main_putc_46_c <- t4421 U8 Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 97)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 97)] })
0b 51 40 

# inline_main_putc_46_tac13 <- inline_main_putc_46_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_46_tac13 <- inline_main_putc_46_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_putc_46_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02a4b Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_putc_46_tac13 <- inline_main_putc_46_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_46_tac13 <- inline_main_putc_46_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_putc_46_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 02a4d Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_putc_46_tac13 None <= call lcd_putc(inline_main_putc_46_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02a50 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02a56 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 60 2a 00 00 

# 02a5c JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02a60 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_46_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_46_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_46_function_end_putc)], resolved: None }
# :inline_main_putc_46_function_end_putc None
# inline_main_putc_46_function_end_putc
# te879 <- 0n109/0x6du8  Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 109)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 109)] })
# Number(U8, 109)
# 02a66 LoadImm8 [Register(0x40), Constant8(0x6d=109)]
#       te879 <- 0n109/0x6du8  Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 109)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 109)] })
#       Number(U8, 109)
04 40 6d 

# inline_main_putc_47_c <- te879 U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 109)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 109)] })
# optimized away noop copy Instruction { source: "inline_main_putc_47_c <- te879 U8 Some('programs/app/bootram.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 109)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 109)] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_putc_47_tac13 <- inline_main_putc_47_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_47_tac13 <- inline_main_putc_47_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_putc_47_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02a69 Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_putc_47_tac13 <- inline_main_putc_47_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_47_tac13 <- inline_main_putc_47_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_putc_47_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 02a6b Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_putc_47_tac13 None <= call lcd_putc(inline_main_putc_47_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02a6e AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02a74 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 7e 2a 00 00 

# 02a7a JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02a7e AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_47_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_47_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_47_function_end_putc)], resolved: None }
# :inline_main_putc_47_function_end_putc None
# inline_main_putc_47_function_end_putc
# td7b5 <- 0n10/0x0au8  Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 02a84 LoadImm8 [Register(0x40), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 40 0a 

# inline_main_putc_48_c <- td7b5 U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# optimized away noop copy Instruction { source: "inline_main_putc_48_c <- td7b5 U8 Some('programs/app/bootram.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 10)] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_putc_48_tac13 <- inline_main_putc_48_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_48_tac13 <- inline_main_putc_48_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_putc_48_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02a87 Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_putc_48_tac13 <- inline_main_putc_48_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_48_tac13 <- inline_main_putc_48_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_putc_48_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 02a89 Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_putc_48_tac13 None <= call lcd_putc(inline_main_putc_48_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02a8c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02a92 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 9c 2a 00 00 

# 02a98 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02a9c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_48_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_48_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_48_function_end_putc)], resolved: None }
# :inline_main_putc_48_function_end_putc None
# inline_main_putc_48_function_end_putc
# goto main_if_end_3 Some('programs/app/bootram.j':(22,5))
# 02aa2 JmpImm [Label24(main_if_end_3)]
#       goto main_if_end_3 Some('programs/app/bootram.j':(22,5))
70 57 2b 00 

# :main_if_else_7_22 Some('programs/app/bootram.j':(22,5))
# main_if_else_7_22
# t6100 <- 0n72/0x48u8  Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 72)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 72)] })
# Number(U8, 72)
# 02aa6 LoadImm8 [Register(0x51), Constant8(0x48=72)]
#       t6100 <- 0n72/0x48u8  Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 72)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 72)] })
#       Number(U8, 72)
04 51 48 

# inline_main_putc_49_c <- t6100 U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 72)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 72)] })
# optimized away noop copy Instruction { source: "inline_main_putc_49_c <- t6100 U8 Some('programs/app/bootram.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 72)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 72)] })\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_putc_49_tac13 <- inline_main_putc_49_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_49_tac13 <- inline_main_putc_49_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# None <= call io_write0(inline_main_putc_49_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02aa9 Out0 [Register(0x51)]
#       IoWrite0
68 51 

# inline_main_putc_49_tac13 <- inline_main_putc_49_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_49_tac13 <- inline_main_putc_49_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# None <= call lcd_putc(inline_main_putc_49_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 02aab Copy8 [Register(0x51), Register(0x00)]
#       Arg0[ch]=inline_main_putc_49_tac13 None <= call lcd_putc(inline_main_putc_49_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 51 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02aae AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02ab4 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c be 2a 00 00 

# 02aba JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02abe AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_49_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_49_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_49_function_end_putc)], resolved: None }
# :inline_main_putc_49_function_end_putc None
# inline_main_putc_49_function_end_putc
# t4e2d <- 0n117/0x75u8  Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 117)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 117)] })
# Number(U8, 117)
# 02ac4 LoadImm8 [Register(0x51), Constant8(0x75=117)]
#       t4e2d <- 0n117/0x75u8  Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 117)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 117)] })
#       Number(U8, 117)
04 51 75 

# inline_main_putc_50_c <- t4e2d U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 117)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 117)] })
# optimized away noop copy Instruction { source: "inline_main_putc_50_c <- t4e2d U8 Some('programs/app/bootram.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 117)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 117)] })\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_putc_50_tac13 <- inline_main_putc_50_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_50_tac13 <- inline_main_putc_50_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# None <= call io_write0(inline_main_putc_50_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02ac7 Out0 [Register(0x51)]
#       IoWrite0
68 51 

# inline_main_putc_50_tac13 <- inline_main_putc_50_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_50_tac13 <- inline_main_putc_50_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# None <= call lcd_putc(inline_main_putc_50_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 02ac9 Copy8 [Register(0x51), Register(0x00)]
#       Arg0[ch]=inline_main_putc_50_tac13 None <= call lcd_putc(inline_main_putc_50_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 51 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02acc AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02ad2 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c dc 2a 00 00 

# 02ad8 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02adc AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_50_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_50_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_50_function_end_putc)], resolved: None }
# :inline_main_putc_50_function_end_putc None
# inline_main_putc_50_function_end_putc
# t9959 <- 0n104/0x68u8  Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 104)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 104)] })
# Number(U8, 104)
# 02ae2 LoadImm8 [Register(0x51), Constant8(0x68=104)]
#       t9959 <- 0n104/0x68u8  Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 104)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 104)] })
#       Number(U8, 104)
04 51 68 

# inline_main_putc_51_c <- t9959 U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 104)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 104)] })
# optimized away noop copy Instruction { source: "inline_main_putc_51_c <- t9959 U8 Some('programs/app/bootram.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 104)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 104)] })\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_putc_51_tac13 <- inline_main_putc_51_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_51_tac13 <- inline_main_putc_51_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# None <= call io_write0(inline_main_putc_51_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02ae5 Out0 [Register(0x51)]
#       IoWrite0
68 51 

# inline_main_putc_51_tac13 <- inline_main_putc_51_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_51_tac13 <- inline_main_putc_51_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# None <= call lcd_putc(inline_main_putc_51_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 02ae7 Copy8 [Register(0x51), Register(0x00)]
#       Arg0[ch]=inline_main_putc_51_tac13 None <= call lcd_putc(inline_main_putc_51_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 51 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02aea AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02af0 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c fa 2a 00 00 

# 02af6 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02afa AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_51_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_51_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_51_function_end_putc)], resolved: None }
# :inline_main_putc_51_function_end_putc None
# inline_main_putc_51_function_end_putc
# ta852 <- 0n63/0x3fu8  Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 63)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 63)] })
# Number(U8, 63)
# 02b00 LoadImm8 [Register(0x51), Constant8(0x3f=63)]
#       ta852 <- 0n63/0x3fu8  Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 63)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 63)] })
#       Number(U8, 63)
04 51 3f 

# inline_main_putc_52_c <- ta852 U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 63)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 63)] })
# optimized away noop copy Instruction { source: "inline_main_putc_52_c <- ta852 U8 Some('programs/app/bootram.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 63)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 63)] })\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# inline_main_putc_52_tac13 <- inline_main_putc_52_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_52_tac13 <- inline_main_putc_52_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# None <= call io_write0(inline_main_putc_52_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02b03 Out0 [Register(0x51)]
#       IoWrite0
68 51 

# inline_main_putc_52_tac13 <- inline_main_putc_52_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_52_tac13 <- inline_main_putc_52_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# None <= call lcd_putc(inline_main_putc_52_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 02b05 Copy8 [Register(0x51), Register(0x00)]
#       Arg0[ch]=inline_main_putc_52_tac13 None <= call lcd_putc(inline_main_putc_52_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 51 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02b08 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02b0e StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 18 2b 00 00 

# 02b14 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02b18 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_52_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_52_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_52_function_end_putc)], resolved: None }
# :inline_main_putc_52_function_end_putc None
# inline_main_putc_52_function_end_putc
# tdcd9 <- ch U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("ch")] }) }
# Call(Call { function: "putc", parameters: [Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('programs/app/bootram.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"ch\")] }) }\nCall(Call { function: \"putc\", parameters: [Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_putc_53_c <- tdcd9 U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Ident("ch")] }) }
# Call(Call { function: "putc", parameters: [Ident("ch")] })
# optimized away noop copy Instruction { source: "inline_main_putc_53_c <- tdcd9 U8 Some('programs/app/bootram.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Ident(\"ch\")] }) }\nCall(Call { function: \"putc\", parameters: [Ident(\"ch\")] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_putc_53_tac13 <- inline_main_putc_53_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_53_tac13 <- inline_main_putc_53_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_putc_53_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02b1e Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_putc_53_tac13 <- inline_main_putc_53_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_53_tac13 <- inline_main_putc_53_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_putc_53_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 02b20 Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_putc_53_tac13 None <= call lcd_putc(inline_main_putc_53_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02b23 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02b29 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 33 2b 00 00 

# 02b2f JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02b33 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_53_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_53_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_53_function_end_putc)], resolved: None }
# :inline_main_putc_53_function_end_putc None
# inline_main_putc_53_function_end_putc
# td7b5 <- 0n10/0x0au8  Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 02b39 LoadImm8 [Register(0x40), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('programs/app/bootram.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 40 0a 

# inline_main_putc_54_c <- td7b5 U8 Some('programs/app/bootram.j':(22,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# optimized away noop copy Instruction { source: "inline_main_putc_54_c <- td7b5 U8 Some('programs/app/bootram.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 10)] })\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_putc_54_tac13 <- inline_main_putc_54_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_54_tac13 <- inline_main_putc_54_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call io_write0(inline_main_putc_54_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02b3c Out0 [Register(0x40)]
#       IoWrite0
68 40 

# inline_main_putc_54_tac13 <- inline_main_putc_54_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_54_tac13 <- inline_main_putc_54_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x40), Register(0x40)], resolved: None }
# None <= call lcd_putc(inline_main_putc_54_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 02b3e Copy8 [Register(0x40), Register(0x00)]
#       Arg0[ch]=inline_main_putc_54_tac13 None <= call lcd_putc(inline_main_putc_54_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 40 00 

# Registers used by this function: {60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 02b41 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02b47 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 51 2b 00 00 

# 02b4d JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 02b51 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_54_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_54_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_54_function_end_putc)], resolved: None }
# :inline_main_putc_54_function_end_putc None
# inline_main_putc_54_function_end_putc
# :main_if_end_3 Some('programs/app/bootram.j':(22,5))
# main_if_end_3
# goto main_while_predicate_0 Some('programs/app/bootram.j':(22,5))
# 02b57 JmpImm [Label24(main_while_predicate_0)]
#       goto main_while_predicate_0 Some('programs/app/bootram.j':(22,5))
70 a4 1e 00 

# :main_while_end_2 Some('programs/app/bootram.j':(22,5))
# main_while_end_2
# tb36e <- 0n0/0x00u8  Some('programs/app/bootram.j':(89,5))
# Return { value: Some(Number(U8, 0)) }
# Number(U8, 0)
# 02b5b LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('programs/app/bootram.j':(89,5))
#       Return { value: Some(Number(U8, 0)) }
#       Number(U8, 0)
04 52 00 

# __frame_pointer <- __frame_pointer Add Number(0n20/0x00000014u32) Some('programs/app/bootram.j':(89,5))
# Return { value: Some(Number(U8, 0)) }
# 02b5e AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000014=20)]
#       __frame_pointer <- __frame_pointer Add Number(0n20/0x00000014u32) Some('programs/app/bootram.j':(89,5))
#       Return { value: Some(Number(U8, 0)) }
32 0c 14 00 00 00 

# return Some(tb36e) Some('programs/app/bootram.j':(89,5))
# Return { value: Some(Number(U8, 0)) }
# 02b64 Copy8 [Register(0x52), Register(0x00)]
#       return Some(tb36e) Some('programs/app/bootram.j':(89,5))
#       Return { value: Some(Number(U8, 0)) }
0b 52 00 

# 02b67 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000014=20)]
#       Dealloc 20 bytes from stack
32 0c 14 00 00 00 

# 02b6d JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_main None
# function_end_main
# Unreachable None
# 02b6f Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :mul32_64
# Ret None
# Arg0=a
# Arg1=b
# Arg2=c
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var a (Arg0 a Number(USIZE)) Reg(U32) Some([108, 109, 110, 111])
# Var a_hi (Local a_hi Number(USIZE) Reg(U32)) Reg(U32) Some([112, 113, 114, 115])
# Var b (Arg1 b Number(USIZE)) Reg(U32) Some([116, 117, 118, 119])
# Var b_hi (Local b_hi Number(USIZE) Reg(U32)) Reg(U32) Some([120, 121, 122, 123])
# Var c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([124, 125, 126, 127])
# Var inline_mul32_64_add_U64_0_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_mul32_64_add_U64_0_a (Arg0 a Ptr(Struct("U64"))) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_add_U64_0_b (Arg1 b Ptr(Struct("U64"))) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_add_U64_0_c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_add_U64_0_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_mul32_64_add_U64_0_lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([132, 133, 134, 135])
# Var inline_mul32_64_add_U64_0_t1335 (t1335 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([136, 137, 138, 139])
# Var inline_mul32_64_add_U64_0_t144a (t144a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }) Reg(U32) Some([140, 141, 142, 143])
# Var inline_mul32_64_add_U64_0_t1506 (t1506 Ident("lo")) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_add_U64_0_t153d (t153d PtrFieldDeref("b", "hi")) Reg(U32) Some([140, 141, 142, 143])
# Var inline_mul32_64_add_U64_0_t24ae (t24ae Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") } }) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_add_U64_0_t2558 (t2558 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_add_U64_0_t3203 (t3203 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_add_U64_0_t6f1c (t6f1c Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))) Reg(U32) Some([140, 141, 142, 143])
# Var inline_mul32_64_add_U64_0_t809 (t809 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }) Reg(U32) Some([140, 141, 142, 143])
# Var inline_mul32_64_add_U64_0_t8956 (t8956 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_add_U64_0_t90ac (t90ac PtrFieldDeref("c", "lo")) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_add_U64_0_ta95f (ta95f Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_add_U64_0_tbeec (tbeec Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_add_U64_0_tcbd1 (tcbd1 Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_add_U64_0_td5bf (td5bf PtrFieldDeref("b", "lo")) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_add_U64_0_td868 (td868 PtrFieldDeref("a", "lo")) Reg(U32) Some([136, 137, 138, 139])
# Var inline_mul32_64_add_U64_0_te24c (te24c PtrFieldDeref("a", "hi")) Reg(U32) Some([144, 145, 146, 147])
# Var inline_mul32_64_add_U64_0_teec0 (teec0 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_add_U64_0_tf677 (tf677 PtrFieldDeref("c", "hi")) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_add_U64_1_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_mul32_64_add_U64_1_a (Arg0 a Ptr(Struct("U64"))) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_add_U64_1_b (Arg1 b Ptr(Struct("U64"))) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_add_U64_1_c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_add_U64_1_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_mul32_64_add_U64_1_lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([120, 121, 122, 123])
# Var inline_mul32_64_add_U64_1_t1335 (t1335 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([124, 125, 126, 127])
# Var inline_mul32_64_add_U64_1_t144a (t144a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_add_U64_1_t1506 (t1506 Ident("lo")) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_add_U64_1_t153d (t153d PtrFieldDeref("b", "hi")) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_add_U64_1_t24ae (t24ae Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") } }) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_add_U64_1_t2558 (t2558 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_add_U64_1_t3203 (t3203 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_add_U64_1_t6f1c (t6f1c Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_add_U64_1_t809 (t809 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_add_U64_1_t8956 (t8956 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_add_U64_1_t90ac (t90ac PtrFieldDeref("c", "lo")) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_add_U64_1_ta95f (ta95f Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_add_U64_1_tbeec (tbeec Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_add_U64_1_tcbd1 (tcbd1 Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_add_U64_1_td5bf (td5bf PtrFieldDeref("b", "lo")) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_add_U64_1_td868 (td868 PtrFieldDeref("a", "lo")) Reg(U32) Some([124, 125, 126, 127])
# Var inline_mul32_64_add_U64_1_te24c (te24c PtrFieldDeref("a", "hi")) Reg(U32) Some([132, 133, 134, 135])
# Var inline_mul32_64_add_U64_1_teec0 (teec0 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_add_U64_1_tf677 (tf677 PtrFieldDeref("c", "hi")) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_10_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_mul32_64_mul16_32_10_a (Arg0 a Number(USIZE)) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_mul16_32_10_b (Arg1 b Number(USIZE)) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_mul16_32_10_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_mul16_32_10_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([132, 133, 134, 135])
# Var inline_mul32_64_mul16_32_10_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_mul16_32_10_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([132, 133, 134, 135])
# Var inline_mul32_64_mul16_32_10_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_mul32_64_mul16_32_10_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([148])
# Var inline_mul32_64_mul16_32_10_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([148])
# Var inline_mul32_64_mul16_32_10_t3585 (t3585 Ident("e")) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_mul16_32_10_t45f5 (t45f5 Ident("d")) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_mul16_32_10_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([149])
# Var inline_mul32_64_mul16_32_10_t8792 (t8792 Ident("a")) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_mul16_32_10_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([150])
# Var inline_mul32_64_mul16_32_10_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_mul16_32_10_tac13 (tac13 Ident("c")) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_mul16_32_10_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([148])
# Var inline_mul32_64_mul16_32_10_tace9 (tace9 Ident("b")) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_mul16_32_10_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([151])
# Var inline_mul32_64_mul16_32_10_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([148])
# Var inline_mul32_64_mul16_32_10_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([132, 133, 134, 135])
# Var inline_mul32_64_mul16_32_10_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([149])
# Var inline_mul32_64_mul16_32_10_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_mul32_64_mul16_32_10_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([136, 137, 138, 139])
# Var inline_mul32_64_mul16_32_11_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_mul32_64_mul16_32_11_a (Arg0 a Number(USIZE)) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_11_b (Arg1 b Number(USIZE)) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_mul16_32_11_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_mul16_32_11_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([120, 121, 122, 123])
# Var inline_mul32_64_mul16_32_11_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_11_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([120, 121, 122, 123])
# Var inline_mul32_64_mul16_32_11_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_mul32_64_mul16_32_11_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([152])
# Var inline_mul32_64_mul16_32_11_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([152])
# Var inline_mul32_64_mul16_32_11_t3585 (t3585 Ident("e")) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_11_t45f5 (t45f5 Ident("d")) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_mul16_32_11_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([153])
# Var inline_mul32_64_mul16_32_11_t8792 (t8792 Ident("a")) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_11_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([148])
# Var inline_mul32_64_mul16_32_11_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_11_tac13 (tac13 Ident("c")) Reg(U32) Some([116, 117, 118, 119])
# Var inline_mul32_64_mul16_32_11_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([152])
# Var inline_mul32_64_mul16_32_11_tace9 (tace9 Ident("b")) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_mul16_32_11_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([154])
# Var inline_mul32_64_mul16_32_11_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([152])
# Var inline_mul32_64_mul16_32_11_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([120, 121, 122, 123])
# Var inline_mul32_64_mul16_32_11_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([153])
# Var inline_mul32_64_mul16_32_11_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([120, 121, 122, 123])
# Var inline_mul32_64_mul16_32_11_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_mul16_32_8_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_mul32_64_mul16_32_8_a (Arg0 a Number(USIZE)) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_mul16_32_8_b (Arg1 b Number(USIZE)) Reg(U32) Some([132, 133, 134, 135])
# Var inline_mul32_64_mul16_32_8_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([136, 137, 138, 139])
# Var inline_mul32_64_mul16_32_8_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([140, 141, 142, 143])
# Var inline_mul32_64_mul16_32_8_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_mul16_32_8_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([140, 141, 142, 143])
# Var inline_mul32_64_mul16_32_8_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_mul32_64_mul16_32_8_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([154])
# Var inline_mul32_64_mul16_32_8_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([154])
# Var inline_mul32_64_mul16_32_8_t3585 (t3585 Ident("e")) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_mul16_32_8_t45f5 (t45f5 Ident("d")) Reg(U32) Some([132, 133, 134, 135])
# Var inline_mul32_64_mul16_32_8_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([155])
# Var inline_mul32_64_mul16_32_8_t8792 (t8792 Ident("a")) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_mul16_32_8_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([149])
# Var inline_mul32_64_mul16_32_8_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_mul16_32_8_tac13 (tac13 Ident("c")) Reg(U32) Some([136, 137, 138, 139])
# Var inline_mul32_64_mul16_32_8_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([154])
# Var inline_mul32_64_mul16_32_8_tace9 (tace9 Ident("b")) Reg(U32) Some([132, 133, 134, 135])
# Var inline_mul32_64_mul16_32_8_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([156])
# Var inline_mul32_64_mul16_32_8_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([154])
# Var inline_mul32_64_mul16_32_8_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([140, 141, 142, 143])
# Var inline_mul32_64_mul16_32_8_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([155])
# Var inline_mul32_64_mul16_32_8_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([140, 141, 142, 143])
# Var inline_mul32_64_mul16_32_8_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([144, 145, 146, 147])
# Var inline_mul32_64_mul16_32_9_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_mul32_64_mul16_32_9_a (Arg0 a Number(USIZE)) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_mul16_32_9_b (Arg1 b Number(USIZE)) Reg(U32) Some([132, 133, 134, 135])
# Var inline_mul32_64_mul16_32_9_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([136, 137, 138, 139])
# Var inline_mul32_64_mul16_32_9_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([140, 141, 142, 143])
# Var inline_mul32_64_mul16_32_9_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_mul16_32_9_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([140, 141, 142, 143])
# Var inline_mul32_64_mul16_32_9_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_mul32_64_mul16_32_9_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([154])
# Var inline_mul32_64_mul16_32_9_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([154])
# Var inline_mul32_64_mul16_32_9_t3585 (t3585 Ident("e")) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_mul16_32_9_t45f5 (t45f5 Ident("d")) Reg(U32) Some([132, 133, 134, 135])
# Var inline_mul32_64_mul16_32_9_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([155])
# Var inline_mul32_64_mul16_32_9_t8792 (t8792 Ident("a")) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_mul16_32_9_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([149])
# Var inline_mul32_64_mul16_32_9_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([128, 129, 130, 131])
# Var inline_mul32_64_mul16_32_9_tac13 (tac13 Ident("c")) Reg(U32) Some([136, 137, 138, 139])
# Var inline_mul32_64_mul16_32_9_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([154])
# Var inline_mul32_64_mul16_32_9_tace9 (tace9 Ident("b")) Reg(U32) Some([132, 133, 134, 135])
# Var inline_mul32_64_mul16_32_9_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([156])
# Var inline_mul32_64_mul16_32_9_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([154])
# Var inline_mul32_64_mul16_32_9_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([140, 141, 142, 143])
# Var inline_mul32_64_mul16_32_9_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([155])
# Var inline_mul32_64_mul16_32_9_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([140, 141, 142, 143])
# Var inline_mul32_64_mul16_32_9_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([144, 145, 146, 147])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (Stack size negated) Reg(U32) Some([160, 161, 162, 163])
# Var t1335 (t1335 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([164, 165, 166, 167])
# Var t1f52 (t1f52 Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })) Reg(U8) Some([168])
# Var t2558 (t2558 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([124, 125, 126, 127])
# Var t3308 (t3308 Ident("temp_lo")) Reg(U32) Some([112, 113, 114, 115])
# Var t3f2a (t3f2a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }) Reg(U32) Some([112, 113, 114, 115])
# Var t41f5 (t41f5 Ident("temp_hi")) Reg(U32) Some([116, 117, 118, 119])
# Var t4a94 (t4a94 Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))) Reg(U32) Some([112, 113, 114, 115])
# Var t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([152])
# Var t5a04 (t5a04 Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })) Reg(U32) Some([128, 129, 130, 131])
# Var t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([152])
# Var t5cca (t5cca Ident("b_hi")) Reg(U32) Some([120, 121, 122, 123])
# Var t720d (t720d Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })) Reg(U32) Some([128, 129, 130, 131])
# Var t811a (t811a Index("b", Number(U8, 2))) Reg(U8) Some([150])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([108, 109, 110, 111])
# Var t8956 (t8956 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([124, 125, 126, 127])
# Var t8fbd (t8fbd Ident("a_hi")) Reg(U32) Some([112, 113, 114, 115])
# Var t9829 (t9829 Index("b", Number(U8, 3))) Reg(U8) Some([150])
# Var tac13 (tac13 Ident("c")) Reg(U32) Some([124, 125, 126, 127])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([116, 117, 118, 119])
# Var tb6b4 (tb6b4 Index("temp", Number(U8, 3))) Reg(U8) Some([148])
# Var tc89e (tc89e Index("temp", Number(U8, 0))) Reg(U8) Some([148])
# Var tdc08 (tdc08 Index("temp", Number(U8, 1))) Reg(U8) Some([148])
# Var te546 (te546 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }) Reg(U32) Some([160, 161, 162, 163])
# Var te825 (te825 Ident("__frame_pointer")) Reg(U32) Some([160, 161, 162, 163])
# Var temp (Local temp Number(USIZE) Reg(U32)) Reg(U32) Some([112, 113, 114, 115])
# Var temp64 (Local temp64 Struct("U64") FrameOffset(0)) FrameOffset(0) None
# Var temp_hi (Local temp_hi Number(USIZE) Reg(U32)) Reg(U32) Some([164, 165, 166, 167])
# Var temp_lo (Local temp_lo Number(USIZE) Reg(U32)) Reg(U32) Some([172, 173, 174, 175])
# Var tf338 (tf338 Index("temp", Number(U8, 2))) Reg(U8) Some([148])
# Var tf4b2 (tf4b2 AddressOf(Ident("temp64"))) Reg(U32) Some([116, 117, 118, 119])
# 02b74 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       reserve 8 bytes of stack space for locals
32 0c f8 ff ff ff 

# 02b7a Copy32 [Register(0x00), Register(0x6c)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [108, 109, 110, 111].
21 00 6c 

# 02b7d Copy32 [Register(0x04), Register(0x74)]
#       Save function parameter 'b' registers [4, 5, 6, 7] to locals [116, 117, 118, 119].
21 04 74 

# 02b80 Copy32 [Register(0x08), Register(0x7c)]
#       Save function parameter 'c' registers [8, 9, 10, 11] to locals [124, 125, 126, 127].
21 08 7c 

# __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
# 02b83 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
32 0c f8 ff ff ff 

# a_hi <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/mul.j':(58,5))
# Assign { target: Ident("a_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 02b89 LoadImm32 [Register(0x70), Constant32(0x00000000=0)]
#       a_hi <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/mul.j':(58,5))
#       Assign { target: Ident("a_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 70 00 00 00 00 

# t5b7c <- a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(59,5))
# Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
# Index("a", Number(U8, 3))
# 02b8f Copy8 [Register(0x6f), Register(0x98)]
#       t5b7c <- a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(59,5))
#       Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
#       Index("a", Number(U8, 3))
0b 6f 98 

# a_hi[0x01..0x02] <- t5b7c U8 Some('/home/john/lutcomp/programs/lib/mul.j':(59,5))
# Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
# 02b92 Copy8 [Register(0x98), Register(0x71)]
#       a_hi[0x01..0x02] <- t5b7c U8 Some('/home/john/lutcomp/programs/lib/mul.j':(59,5))
#       Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
0b 98 71 

# t577f <- a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(60,5))
# Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
# Index("a", Number(U8, 2))
# 02b95 Copy8 [Register(0x6e), Register(0x98)]
#       t577f <- a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(60,5))
#       Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
#       Index("a", Number(U8, 2))
0b 6e 98 

# a_hi[0x00..0x01] <- t577f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(60,5))
# Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
# 02b98 Copy8 [Register(0x98), Register(0x70)]
#       a_hi[0x00..0x01] <- t577f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(60,5))
#       Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
0b 98 70 

# b_hi <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/mul.j':(62,5))
# Assign { target: Ident("b_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 02b9b LoadImm32 [Register(0x78), Constant32(0x00000000=0)]
#       b_hi <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/mul.j':(62,5))
#       Assign { target: Ident("b_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 78 00 00 00 00 

# t9829 <- b[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(63,5))
# Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
# Index("b", Number(U8, 3))
# 02ba1 Copy8 [Register(0x77), Register(0x96)]
#       t9829 <- b[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(63,5))
#       Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
#       Index("b", Number(U8, 3))
0b 77 96 

# b_hi[0x01..0x02] <- t9829 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(63,5))
# Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
# 02ba4 Copy8 [Register(0x96), Register(0x79)]
#       b_hi[0x01..0x02] <- t9829 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(63,5))
#       Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
0b 96 79 

# t811a <- b[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(64,5))
# Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
# Index("b", Number(U8, 2))
# 02ba7 Copy8 [Register(0x76), Register(0x96)]
#       t811a <- b[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(64,5))
#       Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
#       Index("b", Number(U8, 2))
0b 76 96 

# b_hi[0x00..0x01] <- t811a U8 Some('/home/john/lutcomp/programs/lib/mul.j':(64,5))
# Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
# 02baa Copy8 [Register(0x96), Register(0x78)]
#       b_hi[0x00..0x01] <- t811a U8 Some('/home/john/lutcomp/programs/lib/mul.j':(64,5))
#       Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
0b 96 78 

# t8956 <- c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "t8956 <- c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(66,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(66,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x6c), Register(0x6c)], resolved: None }
# tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(66,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_mul16_32_8_a <- t8792 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 02bad Copy32 [Register(0x6c), Register(0x80)]
#       inline_mul32_64_mul16_32_8_a <- t8792 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 6c 80 

# inline_mul32_64_mul16_32_8_b <- tace9 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 02bb0 Copy32 [Register(0x74), Register(0x84)]
#       inline_mul32_64_mul16_32_8_b <- tace9 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 74 84 

# inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 02bb3 Mul8_16 [Register(0x80), Register(0x84), Register(0x88)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 80 84 88 

# 02bb7 LoadImm8 [Register(0x8a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 8a 00 

# 02bba LoadImm8 [Register(0x8b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 8b 00 

# inline_mul32_64_mul16_32_8_t1539 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 02bbd Copy8 [Register(0x81), Register(0x9a)]
#       inline_mul32_64_mul16_32_8_t1539 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 81 9a 

# inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 02bc0 LoadImm32 [Register(0x90), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 90 00 00 00 00 

# 02bc6 Copy8 [Register(0x9a), Register(0x90)]
#       inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 9a 90 

# inline_mul32_64_mul16_32_8_t8b9 <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 02bc9 Copy8 [Register(0x85), Register(0x95)]
#       inline_mul32_64_mul16_32_8_t8b9 <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 85 95 

# inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 02bcc LoadImm32 [Register(0x8c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 8c 00 00 00 00 

# 02bd2 Copy8 [Register(0x95), Register(0x8c)]
#       inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 95 8c 

# inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 02bd5 Mul8_16 [Register(0x90), Register(0x8c), Register(0x8c)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 90 8c 8c 

# 02bd9 LoadImm8 [Register(0x8e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 8e 00 

# 02bdc LoadImm8 [Register(0x8f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 8f 00 

# inline_mul32_64_mul16_32_8_t5d8 <- inline_mul32_64_mul16_32_8_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 02bdf Copy8 [Register(0x8d), Register(0x9b)]
#       inline_mul32_64_mul16_32_8_t5d8 <- inline_mul32_64_mul16_32_8_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 8d 9b 

# inline_mul32_64_mul16_32_8_f[0x03..0x04] <- inline_mul32_64_mul16_32_8_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 02be2 Copy8 [Register(0x9b), Register(0x8f)]
#       inline_mul32_64_mul16_32_8_f[0x03..0x04] <- inline_mul32_64_mul16_32_8_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 9b 8f 

# inline_mul32_64_mul16_32_8_te25f <- inline_mul32_64_mul16_32_8_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 02be5 Copy8 [Register(0x8c), Register(0x9b)]
#       inline_mul32_64_mul16_32_8_te25f <- inline_mul32_64_mul16_32_8_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 8c 9b 

# inline_mul32_64_mul16_32_8_f[0x02..0x03] <- inline_mul32_64_mul16_32_8_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 02be8 Copy8 [Register(0x9b), Register(0x8e)]
#       inline_mul32_64_mul16_32_8_f[0x02..0x03] <- inline_mul32_64_mul16_32_8_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 9b 8e 

# inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 02beb LoadImm8 [Register(0x9c), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 9c 00 

# inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_8_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 02bee Copy8 [Register(0x9c), Register(0x8d)]
#       inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_8_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 9c 8d 

# inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 02bf1 LoadImm8 [Register(0x9c), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 9c 00 

# inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_8_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 02bf4 Copy8 [Register(0x9c), Register(0x8c)]
#       inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_8_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 9c 8c 

# inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x88), Register(0x88)], resolved: None }
# inline_mul32_64_mul16_32_8_tcbd4 <- inline_mul32_64_mul16_32_8_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tcbd4 <- inline_mul32_64_mul16_32_8_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x8c), Register(0x8c)], resolved: None }
# inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 02bf7 ClearCarry []
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 02bf8 AddCarry32_1 [Register(0x88), Register(0x8c), Register(0x88)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 88 8c 88 

# 02bfc AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_mul32_64_mul16_32_8_t8b9 <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 02bfd Copy8 [Register(0x85), Register(0x95)]
#       inline_mul32_64_mul16_32_8_t8b9 <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 85 95 

# inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 02c00 LoadImm32 [Register(0x8c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 8c 00 00 00 00 

# 02c06 Copy8 [Register(0x95), Register(0x8c)]
#       inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 95 8c 

# inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 02c09 Mul8_16 [Register(0x80), Register(0x8c), Register(0x8c)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 80 8c 8c 

# 02c0d LoadImm8 [Register(0x8e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 8e 00 

# 02c10 LoadImm8 [Register(0x8f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 8f 00 

# inline_mul32_64_mul16_32_8_t1539 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 02c13 Copy8 [Register(0x81), Register(0x9a)]
#       inline_mul32_64_mul16_32_8_t1539 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 81 9a 

# inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 02c16 LoadImm32 [Register(0x90), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 90 00 00 00 00 

# 02c1c Copy8 [Register(0x9a), Register(0x90)]
#       inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 9a 90 

# inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 02c1f Mul8_16 [Register(0x90), Register(0x84), Register(0x80)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 90 84 80 

# 02c23 LoadImm8 [Register(0x82), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 82 00 

# 02c26 LoadImm8 [Register(0x83), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 83 00 

# inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 02c29 Copy32 [Register(0x8c), Register(0x84)]
#       inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 8c 84 

# inline_mul32_64_mul16_32_8_t3585 <- inline_mul32_64_mul16_32_8_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t3585 <- inline_mul32_64_mul16_32_8_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 02c2c ClearCarry []
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 02c2d AddCarry32_1 [Register(0x84), Register(0x80), Register(0x8c)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 84 80 8c 

# 02c31 AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_8_t2d6f <- inline_mul32_64_mul16_32_8_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 02c32 Copy8 [Register(0x8e), Register(0x9a)]
#       inline_mul32_64_mul16_32_8_t2d6f <- inline_mul32_64_mul16_32_8_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 8e 9a 

# inline_mul32_64_mul16_32_8_d[0x03..0x04] <- inline_mul32_64_mul16_32_8_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 02c35 Copy8 [Register(0x9a), Register(0x8f)]
#       inline_mul32_64_mul16_32_8_d[0x03..0x04] <- inline_mul32_64_mul16_32_8_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 9a 8f 

# inline_mul32_64_mul16_32_8_tbd6 <- inline_mul32_64_mul16_32_8_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 02c38 Copy8 [Register(0x8d), Register(0x9a)]
#       inline_mul32_64_mul16_32_8_tbd6 <- inline_mul32_64_mul16_32_8_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 8d 9a 

# inline_mul32_64_mul16_32_8_d[0x02..0x03] <- inline_mul32_64_mul16_32_8_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 02c3b Copy8 [Register(0x9a), Register(0x8e)]
#       inline_mul32_64_mul16_32_8_d[0x02..0x03] <- inline_mul32_64_mul16_32_8_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 9a 8e 

# inline_mul32_64_mul16_32_8_tac23 <- inline_mul32_64_mul16_32_8_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 02c3e Copy8 [Register(0x8c), Register(0x9a)]
#       inline_mul32_64_mul16_32_8_tac23 <- inline_mul32_64_mul16_32_8_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 8c 9a 

# inline_mul32_64_mul16_32_8_d[0x01..0x02] <- inline_mul32_64_mul16_32_8_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 02c41 Copy8 [Register(0x9a), Register(0x8d)]
#       inline_mul32_64_mul16_32_8_d[0x01..0x02] <- inline_mul32_64_mul16_32_8_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 9a 8d 

# inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 02c44 LoadImm8 [Register(0x9c), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 9c 00 

# inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_8_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 02c47 Copy8 [Register(0x9c), Register(0x8c)]
#       inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_8_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 9c 8c 

# inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x88), Register(0x88)], resolved: None }
# inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 02c4a Copy32 [Register(0x8c), Register(0x84)]
#       inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 8c 84 

# inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 02c4d ClearCarry []
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 02c4e AddCarry32_1 [Register(0x88), Register(0x84), Register(0x80)]
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 88 84 80 

# 02c52 AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# t720d <- inline_mul32_64_mul16_32_8_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "t720d <- inline_mul32_64_mul16_32_8_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# goto inline_mul32_64_mul16_32_8_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_8_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_8_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_8_function_end_mul16_32 None
# inline_mul32_64_mul16_32_8_function_end_mul16_32
# mem[t8956] <- t720d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# 02c53 Store32_1 [Register(0x80), Register(0x7c)]
#       mem[t8956] <- t720d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
23 80 7c 

# 02c56 Store32_2 []
#       mem[t8956] <- t720d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
24 

# t2558 <- c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "t2558 <- c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# t1335 <- t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 02c57 Copy32 [Register(0x7c), Register(0xa4)]
#       t1335 <- t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 7c a4 

# 02c5a AddImm32IgnoreCarry [Register(0xa4), Constant32(0x00000004=4)]
#       t1335 <- t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 a4 04 00 00 00 

# t8fbd <- a_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "t8fbd <- a_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# t5cca <- b_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# Ident("b_hi")
# optimized away noop copy Instruction { source: "t5cca <- b_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })\nIdent(\"b_hi\")\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_mul32_64_mul16_32_9_a <- t8fbd U32 Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# 02c60 Copy32 [Register(0x70), Register(0x80)]
#       inline_mul32_64_mul16_32_9_a <- t8fbd U32 Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
21 70 80 

# inline_mul32_64_mul16_32_9_b <- t5cca U32 Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# 02c63 Copy32 [Register(0x78), Register(0x84)]
#       inline_mul32_64_mul16_32_9_b <- t5cca U32 Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
21 78 84 

# inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 02c66 Mul8_16 [Register(0x80), Register(0x84), Register(0x88)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 80 84 88 

# 02c6a LoadImm8 [Register(0x8a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 8a 00 

# 02c6d LoadImm8 [Register(0x8b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 8b 00 

# inline_mul32_64_mul16_32_9_t1539 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 02c70 Copy8 [Register(0x81), Register(0x9a)]
#       inline_mul32_64_mul16_32_9_t1539 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 81 9a 

# inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 02c73 LoadImm32 [Register(0x90), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 90 00 00 00 00 

# 02c79 Copy8 [Register(0x9a), Register(0x90)]
#       inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 9a 90 

# inline_mul32_64_mul16_32_9_t8b9 <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 02c7c Copy8 [Register(0x85), Register(0x95)]
#       inline_mul32_64_mul16_32_9_t8b9 <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 85 95 

# inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 02c7f LoadImm32 [Register(0x8c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 8c 00 00 00 00 

# 02c85 Copy8 [Register(0x95), Register(0x8c)]
#       inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 95 8c 

# inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 02c88 Mul8_16 [Register(0x90), Register(0x8c), Register(0x8c)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 90 8c 8c 

# 02c8c LoadImm8 [Register(0x8e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 8e 00 

# 02c8f LoadImm8 [Register(0x8f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 8f 00 

# inline_mul32_64_mul16_32_9_t5d8 <- inline_mul32_64_mul16_32_9_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 02c92 Copy8 [Register(0x8d), Register(0x9b)]
#       inline_mul32_64_mul16_32_9_t5d8 <- inline_mul32_64_mul16_32_9_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 8d 9b 

# inline_mul32_64_mul16_32_9_f[0x03..0x04] <- inline_mul32_64_mul16_32_9_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 02c95 Copy8 [Register(0x9b), Register(0x8f)]
#       inline_mul32_64_mul16_32_9_f[0x03..0x04] <- inline_mul32_64_mul16_32_9_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 9b 8f 

# inline_mul32_64_mul16_32_9_te25f <- inline_mul32_64_mul16_32_9_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 02c98 Copy8 [Register(0x8c), Register(0x9b)]
#       inline_mul32_64_mul16_32_9_te25f <- inline_mul32_64_mul16_32_9_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 8c 9b 

# inline_mul32_64_mul16_32_9_f[0x02..0x03] <- inline_mul32_64_mul16_32_9_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 02c9b Copy8 [Register(0x9b), Register(0x8e)]
#       inline_mul32_64_mul16_32_9_f[0x02..0x03] <- inline_mul32_64_mul16_32_9_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 9b 8e 

# inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 02c9e LoadImm8 [Register(0x9c), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 9c 00 

# inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_9_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 02ca1 Copy8 [Register(0x9c), Register(0x8d)]
#       inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_9_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 9c 8d 

# inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 02ca4 LoadImm8 [Register(0x9c), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 9c 00 

# inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_9_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 02ca7 Copy8 [Register(0x9c), Register(0x8c)]
#       inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_9_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 9c 8c 

# inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x88), Register(0x88)], resolved: None }
# inline_mul32_64_mul16_32_9_tcbd4 <- inline_mul32_64_mul16_32_9_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tcbd4 <- inline_mul32_64_mul16_32_9_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x8c), Register(0x8c)], resolved: None }
# inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 02caa ClearCarry []
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 02cab AddCarry32_1 [Register(0x88), Register(0x8c), Register(0x88)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 88 8c 88 

# 02caf AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_mul32_64_mul16_32_9_t8b9 <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 02cb0 Copy8 [Register(0x85), Register(0x95)]
#       inline_mul32_64_mul16_32_9_t8b9 <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 85 95 

# inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 02cb3 LoadImm32 [Register(0x8c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 8c 00 00 00 00 

# 02cb9 Copy8 [Register(0x95), Register(0x8c)]
#       inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 95 8c 

# inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 02cbc Mul8_16 [Register(0x80), Register(0x8c), Register(0x8c)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 80 8c 8c 

# 02cc0 LoadImm8 [Register(0x8e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 8e 00 

# 02cc3 LoadImm8 [Register(0x8f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 8f 00 

# inline_mul32_64_mul16_32_9_t1539 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 02cc6 Copy8 [Register(0x81), Register(0x9a)]
#       inline_mul32_64_mul16_32_9_t1539 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 81 9a 

# inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 02cc9 LoadImm32 [Register(0x90), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 90 00 00 00 00 

# 02ccf Copy8 [Register(0x9a), Register(0x90)]
#       inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 9a 90 

# inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 02cd2 Mul8_16 [Register(0x90), Register(0x84), Register(0x80)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 90 84 80 

# 02cd6 LoadImm8 [Register(0x82), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 82 00 

# 02cd9 LoadImm8 [Register(0x83), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 83 00 

# inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 02cdc Copy32 [Register(0x8c), Register(0x84)]
#       inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 8c 84 

# inline_mul32_64_mul16_32_9_t3585 <- inline_mul32_64_mul16_32_9_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t3585 <- inline_mul32_64_mul16_32_9_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 02cdf ClearCarry []
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 02ce0 AddCarry32_1 [Register(0x84), Register(0x80), Register(0x8c)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 84 80 8c 

# 02ce4 AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_9_t2d6f <- inline_mul32_64_mul16_32_9_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 02ce5 Copy8 [Register(0x8e), Register(0x9a)]
#       inline_mul32_64_mul16_32_9_t2d6f <- inline_mul32_64_mul16_32_9_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 8e 9a 

# inline_mul32_64_mul16_32_9_d[0x03..0x04] <- inline_mul32_64_mul16_32_9_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 02ce8 Copy8 [Register(0x9a), Register(0x8f)]
#       inline_mul32_64_mul16_32_9_d[0x03..0x04] <- inline_mul32_64_mul16_32_9_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 9a 8f 

# inline_mul32_64_mul16_32_9_tbd6 <- inline_mul32_64_mul16_32_9_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 02ceb Copy8 [Register(0x8d), Register(0x9a)]
#       inline_mul32_64_mul16_32_9_tbd6 <- inline_mul32_64_mul16_32_9_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 8d 9a 

# inline_mul32_64_mul16_32_9_d[0x02..0x03] <- inline_mul32_64_mul16_32_9_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 02cee Copy8 [Register(0x9a), Register(0x8e)]
#       inline_mul32_64_mul16_32_9_d[0x02..0x03] <- inline_mul32_64_mul16_32_9_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 9a 8e 

# inline_mul32_64_mul16_32_9_tac23 <- inline_mul32_64_mul16_32_9_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 02cf1 Copy8 [Register(0x8c), Register(0x9a)]
#       inline_mul32_64_mul16_32_9_tac23 <- inline_mul32_64_mul16_32_9_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 8c 9a 

# inline_mul32_64_mul16_32_9_d[0x01..0x02] <- inline_mul32_64_mul16_32_9_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 02cf4 Copy8 [Register(0x9a), Register(0x8d)]
#       inline_mul32_64_mul16_32_9_d[0x01..0x02] <- inline_mul32_64_mul16_32_9_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 9a 8d 

# inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 02cf7 LoadImm8 [Register(0x9c), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 9c 00 

# inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_9_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 02cfa Copy8 [Register(0x9c), Register(0x8c)]
#       inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_9_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 9c 8c 

# inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x88), Register(0x88)], resolved: None }
# inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 02cfd Copy32 [Register(0x8c), Register(0x84)]
#       inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 8c 84 

# inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 02d00 ClearCarry []
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 02d01 AddCarry32_1 [Register(0x88), Register(0x84), Register(0x80)]
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 88 84 80 

# 02d05 AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# t5a04 <- inline_mul32_64_mul16_32_9_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "t5a04 <- inline_mul32_64_mul16_32_9_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# goto inline_mul32_64_mul16_32_9_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_9_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_9_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_9_function_end_mul16_32 None
# inline_mul32_64_mul16_32_9_function_end_mul16_32
# mem[t1335] <- t5a04 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# 02d06 Store32_1 [Register(0x80), Register(0xa4)]
#       mem[t1335] <- t5a04 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
23 80 a4 

# 02d09 Store32_2 []
#       mem[t1335] <- t5a04 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
24 

# temp_lo <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/mul.j':(71,5))
# Assign { target: Ident("temp_lo"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 02d0a LoadImm32 [Register(0xac), Constant32(0x00000000=0)]
#       temp_lo <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/mul.j':(71,5))
#       Assign { target: Ident("temp_lo"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 ac 00 00 00 00 

# temp_hi <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/mul.j':(72,5))
# Assign { target: Ident("temp_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 02d10 LoadImm32 [Register(0xa4), Constant32(0x00000000=0)]
#       temp_hi <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/mul.j':(72,5))
#       Assign { target: Ident("temp_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 a4 00 00 00 00 

# t8fbd <- a_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "t8fbd <- a_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_mul16_32_10_a <- t8fbd U32 Some('/home/john/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_a <- t8fbd U32 Some('/home/john/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_mul32_64_mul16_32_10_b <- tace9 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_b <- tace9 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 02d16 Mul8_16 [Register(0x70), Register(0x74), Register(0x80)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 70 74 80 

# 02d1a LoadImm8 [Register(0x82), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 82 00 

# 02d1d LoadImm8 [Register(0x83), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 83 00 

# inline_mul32_64_mul16_32_10_t1539 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 02d20 Copy8 [Register(0x71), Register(0x94)]
#       inline_mul32_64_mul16_32_10_t1539 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 71 94 

# inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 02d23 LoadImm32 [Register(0x88), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 88 00 00 00 00 

# 02d29 Copy8 [Register(0x94), Register(0x88)]
#       inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 94 88 

# inline_mul32_64_mul16_32_10_t8b9 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 02d2c Copy8 [Register(0x75), Register(0x96)]
#       inline_mul32_64_mul16_32_10_t8b9 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 75 96 

# inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 02d2f LoadImm32 [Register(0x84), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 84 00 00 00 00 

# 02d35 Copy8 [Register(0x96), Register(0x84)]
#       inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 96 84 

# inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 02d38 Mul8_16 [Register(0x88), Register(0x84), Register(0x84)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 88 84 84 

# 02d3c LoadImm8 [Register(0x86), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 86 00 

# 02d3f LoadImm8 [Register(0x87), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 87 00 

# inline_mul32_64_mul16_32_10_t5d8 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 02d42 Copy8 [Register(0x85), Register(0x95)]
#       inline_mul32_64_mul16_32_10_t5d8 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 85 95 

# inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 02d45 Copy8 [Register(0x95), Register(0x87)]
#       inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 95 87 

# inline_mul32_64_mul16_32_10_te25f <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 02d48 Copy8 [Register(0x84), Register(0x95)]
#       inline_mul32_64_mul16_32_10_te25f <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 84 95 

# inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 02d4b Copy8 [Register(0x95), Register(0x86)]
#       inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 95 86 

# inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 02d4e LoadImm8 [Register(0x97), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 97 00 

# inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 02d51 Copy8 [Register(0x97), Register(0x85)]
#       inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 97 85 

# inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 02d54 LoadImm8 [Register(0x97), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 97 00 

# inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 02d57 Copy8 [Register(0x97), Register(0x84)]
#       inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 97 84 

# inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_mul32_64_mul16_32_10_tcbd4 <- inline_mul32_64_mul16_32_10_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tcbd4 <- inline_mul32_64_mul16_32_10_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 02d5a ClearCarry []
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 02d5b AddCarry32_1 [Register(0x80), Register(0x84), Register(0x80)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 80 84 80 

# 02d5f AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_mul32_64_mul16_32_10_t8b9 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 02d60 Copy8 [Register(0x75), Register(0x96)]
#       inline_mul32_64_mul16_32_10_t8b9 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 75 96 

# inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 02d63 LoadImm32 [Register(0x84), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 84 00 00 00 00 

# 02d69 Copy8 [Register(0x96), Register(0x84)]
#       inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 96 84 

# inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 02d6c Mul8_16 [Register(0x70), Register(0x84), Register(0x84)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 70 84 84 

# 02d70 LoadImm8 [Register(0x86), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 86 00 

# 02d73 LoadImm8 [Register(0x87), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 87 00 

# inline_mul32_64_mul16_32_10_t1539 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 02d76 Copy8 [Register(0x71), Register(0x94)]
#       inline_mul32_64_mul16_32_10_t1539 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 71 94 

# inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 02d79 LoadImm32 [Register(0x88), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 88 00 00 00 00 

# 02d7f Copy8 [Register(0x94), Register(0x88)]
#       inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 94 88 

# inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 02d82 Mul8_16 [Register(0x88), Register(0x74), Register(0x70)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 88 74 70 

# 02d86 LoadImm8 [Register(0x72), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 72 00 

# 02d89 LoadImm8 [Register(0x73), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 73 00 

# inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 02d8c Copy32 [Register(0x84), Register(0x74)]
#       inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 84 74 

# inline_mul32_64_mul16_32_10_t3585 <- inline_mul32_64_mul16_32_10_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t3585 <- inline_mul32_64_mul16_32_10_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 02d8f ClearCarry []
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 02d90 AddCarry32_1 [Register(0x74), Register(0x70), Register(0x84)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 74 70 84 

# 02d94 AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_10_t2d6f <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 02d95 Copy8 [Register(0x86), Register(0x94)]
#       inline_mul32_64_mul16_32_10_t2d6f <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 86 94 

# inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 02d98 Copy8 [Register(0x94), Register(0x87)]
#       inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 94 87 

# inline_mul32_64_mul16_32_10_tbd6 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 02d9b Copy8 [Register(0x85), Register(0x94)]
#       inline_mul32_64_mul16_32_10_tbd6 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 85 94 

# inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 02d9e Copy8 [Register(0x94), Register(0x86)]
#       inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 94 86 

# inline_mul32_64_mul16_32_10_tac23 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 02da1 Copy8 [Register(0x84), Register(0x94)]
#       inline_mul32_64_mul16_32_10_tac23 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 84 94 

# inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 02da4 Copy8 [Register(0x94), Register(0x85)]
#       inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 94 85 

# inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 02da7 LoadImm8 [Register(0x97), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 97 00 

# inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 02daa Copy8 [Register(0x97), Register(0x84)]
#       inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 97 84 

# inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 02dad Copy32 [Register(0x84), Register(0x74)]
#       inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 84 74 

# inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 02db0 ClearCarry []
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 02db1 AddCarry32_1 [Register(0x80), Register(0x74), Register(0x70)]
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 80 74 70 

# 02db5 AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# temp <- inline_mul32_64_mul16_32_10_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "temp <- inline_mul32_64_mul16_32_10_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# goto inline_mul32_64_mul16_32_10_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_10_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_10_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_10_function_end_mul16_32 None
# inline_mul32_64_mul16_32_10_function_end_mul16_32
# tc89e <- temp[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(75,5))
# Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
# Index("temp", Number(U8, 0))
# 02db6 Copy8 [Register(0x70), Register(0x94)]
#       tc89e <- temp[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(75,5))
#       Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
#       Index("temp", Number(U8, 0))
0b 70 94 

# temp_lo[0x02..0x03] <- tc89e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(75,5))
# Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
# 02db9 Copy8 [Register(0x94), Register(0xae)]
#       temp_lo[0x02..0x03] <- tc89e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(75,5))
#       Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
0b 94 ae 

# tdc08 <- temp[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(76,5))
# Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
# Index("temp", Number(U8, 1))
# 02dbc Copy8 [Register(0x71), Register(0x94)]
#       tdc08 <- temp[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(76,5))
#       Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
#       Index("temp", Number(U8, 1))
0b 71 94 

# temp_lo[0x03..0x04] <- tdc08 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(76,5))
# Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
# 02dbf Copy8 [Register(0x94), Register(0xaf)]
#       temp_lo[0x03..0x04] <- tdc08 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(76,5))
#       Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
0b 94 af 

# tf338 <- temp[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(77,5))
# Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
# Index("temp", Number(U8, 2))
# 02dc2 Copy8 [Register(0x72), Register(0x94)]
#       tf338 <- temp[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(77,5))
#       Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
#       Index("temp", Number(U8, 2))
0b 72 94 

# temp_hi[0x00..0x01] <- tf338 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(77,5))
# Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
# 02dc5 Copy8 [Register(0x94), Register(0xa4)]
#       temp_hi[0x00..0x01] <- tf338 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(77,5))
#       Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
0b 94 a4 

# tb6b4 <- temp[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(78,5))
# Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
# Index("temp", Number(U8, 3))
# 02dc8 Copy8 [Register(0x73), Register(0x94)]
#       tb6b4 <- temp[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(78,5))
#       Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
#       Index("temp", Number(U8, 3))
0b 73 94 

# temp_hi[0x01..0x02] <- tb6b4 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(78,5))
# Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
# 02dcb Copy8 [Register(0x94), Register(0xa5)]
#       temp_hi[0x01..0x02] <- tb6b4 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(78,5))
#       Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
0b 94 a5 

# te546 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 02dce Copy32 [Register(0x0c), Register(0xa0)]
#       te546 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c a0 

# t3308 <- temp_lo U32 Some('/home/john/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Ident("temp_lo")
# 02dd1 Copy32 [Register(0xac), Register(0x70)]
#       t3308 <- temp_lo U32 Some('/home/john/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Ident("temp_lo")
21 ac 70 

# mem[te546] <- t3308 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# 02dd4 Store32_1 [Register(0x70), Register(0xa0)]
#       mem[te546] <- t3308 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
23 70 a0 

# 02dd7 Store32_2 []
#       mem[te546] <- t3308 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
24 

# te825 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
# Ident("__frame_pointer")
# 02dd8 Copy32 [Register(0x0c), Register(0xa0)]
#       te825 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
#       Ident("__frame_pointer")
21 0c a0 

# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
# 02ddb Copy32 [Register(0xa0), Register(0x70)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
21 a0 70 

# 02dde AddImm32IgnoreCarry [Register(0x70), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
32 70 04 00 00 00 

# t41f5 <- temp_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Ident("temp_hi")
# 02de4 Copy32 [Register(0xa4), Register(0x74)]
#       t41f5 <- temp_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Ident("temp_hi")
21 a4 74 

# mem[t3f2a] <- t41f5 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# 02de7 Store32_1 [Register(0x74), Register(0x70)]
#       mem[t3f2a] <- t41f5 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
23 74 70 

# 02dea Store32_2 []
#       mem[t3f2a] <- t41f5 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
24 

# tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# te825 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
# Ident("__frame_pointer")
# 02deb Copy32 [Register(0x0c), Register(0xa0)]
#       te825 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
#       Ident("__frame_pointer")
21 0c a0 

# t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
# 02dee Copy32 [Register(0xa0), Register(0x70)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
21 a0 70 

# 02df1 AddImm32IgnoreCarry [Register(0x70), Constant32(0x00000000=0)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
32 70 00 00 00 00 

# tf4b2 <- t4a94 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# 02df7 Copy32 [Register(0x70), Register(0x74)]
#       tf4b2 <- t4a94 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
21 70 74 

# tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_mul32_64_add_U64_0_a <- tac13 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 02dfa Copy32 [Register(0x7c), Register(0x70)]
#       inline_mul32_64_add_U64_0_a <- tac13 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 7c 70 

# inline_mul32_64_add_U64_0_b <- tf4b2 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_b <- tf4b2 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_add_U64_0_c <- tac13 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 02dfd Copy32 [Register(0x7c), Register(0x80)]
#       inline_mul32_64_add_U64_0_c <- tac13 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 7c 80 

# inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/home/john/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/home/john/lutcomp/programs/lib/U64.j':(7,5))\nAssign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"a\", \"lo\") }\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# 02e00 Load32 [Register(0x70), Register(0x84)]
#       inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(7,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("a", "lo") }
#       PtrFieldDeref("a", "lo")
22 70 84 

# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 02e03 Copy32 [Register(0x80), Register(0x88)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 80 88 

# 02e06 AddImm32IgnoreCarry [Register(0x88), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 88 04 00 00 00 

# inline_mul32_64_add_U64_0_t3203 <- inline_mul32_64_add_U64_0_a U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t3203 <- inline_mul32_64_add_U64_0_a U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))\nPtrFieldDeref(\"a\", \"hi\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_t3203 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
# 02e0c Copy32 [Register(0x70), Register(0x8c)]
#       inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_t3203 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
21 70 8c 

# 02e0f AddImm32IgnoreCarry [Register(0x8c), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_t3203 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
32 8c 04 00 00 00 

# inline_mul32_64_add_U64_0_te24c <- mem[inline_mul32_64_add_U64_0_t144a] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# 02e15 Load32 [Register(0x8c), Register(0x90)]
#       inline_mul32_64_add_U64_0_te24c <- mem[inline_mul32_64_add_U64_0_t144a] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
22 8c 90 

# inline_mul32_64_add_U64_0_teec0 <- inline_mul32_64_add_U64_0_b U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_teec0 <- inline_mul32_64_add_U64_0_b U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))\nPtrFieldDeref(\"b\", \"hi\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_teec0 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
# 02e18 Copy32 [Register(0x74), Register(0x8c)]
#       inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_teec0 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
21 74 8c 

# 02e1b AddImm32IgnoreCarry [Register(0x8c), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_teec0 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
32 8c 04 00 00 00 

# inline_mul32_64_add_U64_0_t153d <- mem[inline_mul32_64_add_U64_0_t809] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# 02e21 Load32 [Register(0x8c), Register(0x8c)]
#       inline_mul32_64_add_U64_0_t153d <- mem[inline_mul32_64_add_U64_0_t809] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
22 8c 8c 

# inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# 02e24 ClearCarry []
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
03 

# 02e25 AddCarry32_1 [Register(0x90), Register(0x8c), Register(0x8c)]
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
30 90 8c 8c 

# 02e29 AddCarry32_2 []
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
31 

# mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# 02e2a Store32_1 [Register(0x8c), Register(0x88)]
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
23 8c 88 

# 02e2d Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
24 

# inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_mul32_64_add_U64_0_td868 <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# 02e2e Load32 [Register(0x70), Register(0x88)]
#       inline_mul32_64_add_U64_0_td868 <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("a", "lo")
22 70 88 

# inline_mul32_64_add_U64_0_t24ae <- inline_mul32_64_add_U64_0_b U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("b", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }
# Ident("b")
# 02e31 Copy32 [Register(0x74), Register(0x70)]
#       inline_mul32_64_add_U64_0_t24ae <- inline_mul32_64_add_U64_0_b U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("b", "lo")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") } }
#       Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }
#       Ident("b")
21 74 70 

# inline_mul32_64_add_U64_0_td5bf <- mem[inline_mul32_64_add_U64_0_t24ae] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("b", "lo")
# 02e34 Load32 [Register(0x70), Register(0x70)]
#       inline_mul32_64_add_U64_0_td5bf <- mem[inline_mul32_64_add_U64_0_t24ae] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("b", "lo")
22 70 70 

# inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# 02e37 ClearCarry []
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
03 

# 02e38 AddCarry32_1 [Register(0x88), Register(0x70), Register(0x70)]
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
30 88 70 70 

# 02e3c AddCarry32_2 []
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
31 

# mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# 02e3d Store32_1 [Register(0x70), Register(0x80)]
#       mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
23 70 80 

# 02e40 Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
24 

# inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\nPtrFieldDeref(\"c\", \"lo\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_mul32_64_add_U64_0_t90ac <- mem[inline_mul32_64_add_U64_0_t8956] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# 02e41 Load32 [Register(0x80), Register(0x74)]
#       inline_mul32_64_add_U64_0_t90ac <- mem[inline_mul32_64_add_U64_0_t8956] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       PtrFieldDeref("c", "lo")
22 80 74 

# inline_mul32_64_add_U64_0_t1506 <- inline_mul32_64_add_U64_0_lo U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# Ident("lo")
# 02e44 Copy32 [Register(0x84), Register(0x70)]
#       inline_mul32_64_add_U64_0_t1506 <- inline_mul32_64_add_U64_0_lo U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       Ident("lo")
21 84 70 

# if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# 02e47 Cmp8 [Register(0x73), Register(0x77)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
15 73 77 

# 02e4a Cmp8IfZero [Register(0x72), Register(0x76)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 72 76 

# 02e4d Cmp8IfZero [Register(0x71), Register(0x75)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 71 75 

# 02e50 Cmp8IfZero [Register(0x70), Register(0x74)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 70 74 

# 02e53 JcImm [Label24(inline_mul32_64_add_U64_0_add_U64_if_else_0_2)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
71 7a 2e 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_0_add_U64_if_true_0_1)], resolved: None }
# :inline_mul32_64_add_U64_0_add_U64_if_true_0_1 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# inline_mul32_64_add_U64_0_add_U64_if_true_0_1
# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 02e57 Copy32 [Register(0x80), Register(0x88)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 80 88 

# 02e5a AddImm32IgnoreCarry [Register(0x88), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 88 04 00 00 00 

# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))\nPtrFieldDeref(\"c\", \"hi\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 02e60 Copy32 [Register(0x80), Register(0x88)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 80 88 

# 02e63 AddImm32IgnoreCarry [Register(0x88), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 88 04 00 00 00 

# inline_mul32_64_add_U64_0_tf677 <- mem[inline_mul32_64_add_U64_0_t1335] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# PtrFieldDeref("c", "hi")
# 02e69 Load32 [Register(0x88), Register(0x70)]
#       inline_mul32_64_add_U64_0_tf677 <- mem[inline_mul32_64_add_U64_0_t1335] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
#       PtrFieldDeref("c", "hi")
22 88 70 

# inline_mul32_64_add_U64_0_tcbd1 <- inline_mul32_64_add_U64_0_tf677 Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# 02e6c AddImm32IgnoreCarry [Register(0x70), Constant32(0x00000001=1)]
#       inline_mul32_64_add_U64_0_tcbd1 <- inline_mul32_64_add_U64_0_tf677 Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
32 70 01 00 00 00 

# mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# 02e72 Store32_1 [Register(0x70), Register(0x88)]
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
23 70 88 

# 02e75 Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
24 

# goto inline_mul32_64_add_U64_0_add_U64_if_end_0 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# 02e76 JmpImm [Label24(inline_mul32_64_add_U64_0_add_U64_if_end_0)]
#       goto inline_mul32_64_add_U64_0_add_U64_if_end_0 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
70 7a 2e 00 

# :inline_mul32_64_add_U64_0_add_U64_if_else_0_2 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_0_add_U64_if_else_0_2
# :inline_mul32_64_add_U64_0_add_U64_if_end_0 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_0_add_U64_if_end_0
# goto inline_mul32_64_add_U64_0_function_end_add_U64 None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_add_U64_0_function_end_add_U64 None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_0_function_end_add_U64)], resolved: None }
# :inline_mul32_64_add_U64_0_function_end_add_U64 None
# inline_mul32_64_add_U64_0_function_end_add_U64
# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x6c), Register(0x6c)], resolved: None }
# t5cca <- b_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("b_hi")
# optimized away noop copy Instruction { source: "t5cca <- b_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"b_hi\")\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_mul32_64_mul16_32_11_a <- t8792 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_a <- t8792 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x6c), Register(0x6c)], resolved: None }
# inline_mul32_64_mul16_32_11_b <- t5cca U32 Some('/home/john/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# 02e7a Copy32 [Register(0x78), Register(0x70)]
#       inline_mul32_64_mul16_32_11_b <- t5cca U32 Some('/home/john/lutcomp/programs/lib/mul.j':(84,5))
#       Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
21 78 70 

# inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x6c), Register(0x6c)], resolved: None }
# inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 02e7d Mul8_16 [Register(0x6c), Register(0x70), Register(0x74)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 6c 70 74 

# 02e81 LoadImm8 [Register(0x76), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 76 00 

# 02e84 LoadImm8 [Register(0x77), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 77 00 

# inline_mul32_64_mul16_32_11_t1539 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 02e87 Copy8 [Register(0x6d), Register(0x98)]
#       inline_mul32_64_mul16_32_11_t1539 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 6d 98 

# inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 02e8a LoadImm32 [Register(0x80), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 80 00 00 00 00 

# 02e90 Copy8 [Register(0x98), Register(0x80)]
#       inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 98 80 

# inline_mul32_64_mul16_32_11_t8b9 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 02e93 Copy8 [Register(0x71), Register(0x94)]
#       inline_mul32_64_mul16_32_11_t8b9 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 71 94 

# inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 02e96 LoadImm32 [Register(0x78), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 78 00 00 00 00 

# 02e9c Copy8 [Register(0x94), Register(0x78)]
#       inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 94 78 

# inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 02e9f Mul8_16 [Register(0x80), Register(0x78), Register(0x78)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 80 78 78 

# 02ea3 LoadImm8 [Register(0x7a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 7a 00 

# 02ea6 LoadImm8 [Register(0x7b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 7b 00 

# inline_mul32_64_mul16_32_11_t5d8 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 02ea9 Copy8 [Register(0x79), Register(0x99)]
#       inline_mul32_64_mul16_32_11_t5d8 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 79 99 

# inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 02eac Copy8 [Register(0x99), Register(0x7b)]
#       inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 99 7b 

# inline_mul32_64_mul16_32_11_te25f <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 02eaf Copy8 [Register(0x78), Register(0x99)]
#       inline_mul32_64_mul16_32_11_te25f <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 78 99 

# inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 02eb2 Copy8 [Register(0x99), Register(0x7a)]
#       inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 99 7a 

# inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 02eb5 LoadImm8 [Register(0x9a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 9a 00 

# inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 02eb8 Copy8 [Register(0x9a), Register(0x79)]
#       inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 9a 79 

# inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 02ebb LoadImm8 [Register(0x9a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 9a 00 

# inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 02ebe Copy8 [Register(0x9a), Register(0x78)]
#       inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 9a 78 

# inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_mul16_32_11_tcbd4 <- inline_mul32_64_mul16_32_11_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tcbd4 <- inline_mul32_64_mul16_32_11_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 02ec1 ClearCarry []
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 02ec2 AddCarry32_1 [Register(0x74), Register(0x78), Register(0x74)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 74 78 74 

# 02ec6 AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x6c), Register(0x6c)], resolved: None }
# inline_mul32_64_mul16_32_11_t8b9 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 02ec7 Copy8 [Register(0x71), Register(0x94)]
#       inline_mul32_64_mul16_32_11_t8b9 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 71 94 

# inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 02eca LoadImm32 [Register(0x78), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 78 00 00 00 00 

# 02ed0 Copy8 [Register(0x94), Register(0x78)]
#       inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 94 78 

# inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 02ed3 Mul8_16 [Register(0x6c), Register(0x78), Register(0x78)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 6c 78 78 

# 02ed7 LoadImm8 [Register(0x7a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 7a 00 

# 02eda LoadImm8 [Register(0x7b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 7b 00 

# inline_mul32_64_mul16_32_11_t1539 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 02edd Copy8 [Register(0x6d), Register(0x98)]
#       inline_mul32_64_mul16_32_11_t1539 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 6d 98 

# inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 02ee0 LoadImm32 [Register(0x80), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 80 00 00 00 00 

# 02ee6 Copy8 [Register(0x98), Register(0x80)]
#       inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 98 80 

# inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 02ee9 Mul8_16 [Register(0x80), Register(0x70), Register(0x6c)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 80 70 6c 

# 02eed LoadImm8 [Register(0x6e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 6e 00 

# 02ef0 LoadImm8 [Register(0x6f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 6f 00 

# inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 02ef3 Copy32 [Register(0x78), Register(0x70)]
#       inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 78 70 

# inline_mul32_64_mul16_32_11_t3585 <- inline_mul32_64_mul16_32_11_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t3585 <- inline_mul32_64_mul16_32_11_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x6c), Register(0x6c)], resolved: None }
# inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 02ef6 ClearCarry []
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 02ef7 AddCarry32_1 [Register(0x70), Register(0x6c), Register(0x78)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 70 6c 78 

# 02efb AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_11_t2d6f <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 02efc Copy8 [Register(0x7a), Register(0x98)]
#       inline_mul32_64_mul16_32_11_t2d6f <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 7a 98 

# inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 02eff Copy8 [Register(0x98), Register(0x7b)]
#       inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 98 7b 

# inline_mul32_64_mul16_32_11_tbd6 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 02f02 Copy8 [Register(0x79), Register(0x98)]
#       inline_mul32_64_mul16_32_11_tbd6 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 79 98 

# inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 02f05 Copy8 [Register(0x98), Register(0x7a)]
#       inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 98 7a 

# inline_mul32_64_mul16_32_11_tac23 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 02f08 Copy8 [Register(0x78), Register(0x98)]
#       inline_mul32_64_mul16_32_11_tac23 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 78 98 

# inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 02f0b Copy8 [Register(0x98), Register(0x79)]
#       inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 98 79 

# inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 02f0e LoadImm8 [Register(0x9a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 9a 00 

# inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 02f11 Copy8 [Register(0x9a), Register(0x78)]
#       inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 9a 78 

# inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 02f14 Copy32 [Register(0x78), Register(0x70)]
#       inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 78 70 

# inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 02f17 ClearCarry []
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 02f18 AddCarry32_1 [Register(0x74), Register(0x70), Register(0x6c)]
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 74 70 6c 

# 02f1c AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# temp <- inline_mul32_64_mul16_32_11_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 02f1d Copy32 [Register(0x6c), Register(0x70)]
#       temp <- inline_mul32_64_mul16_32_11_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 6c 70 

# goto inline_mul32_64_mul16_32_11_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_11_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_11_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_11_function_end_mul16_32 None
# inline_mul32_64_mul16_32_11_function_end_mul16_32
# tc89e <- temp[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(85,5))
# Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
# Index("temp", Number(U8, 0))
# 02f20 Copy8 [Register(0x70), Register(0x94)]
#       tc89e <- temp[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(85,5))
#       Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
#       Index("temp", Number(U8, 0))
0b 70 94 

# temp_lo[0x02..0x03] <- tc89e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(85,5))
# Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
# 02f23 Copy8 [Register(0x94), Register(0xae)]
#       temp_lo[0x02..0x03] <- tc89e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(85,5))
#       Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
0b 94 ae 

# tdc08 <- temp[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(86,5))
# Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
# Index("temp", Number(U8, 1))
# 02f26 Copy8 [Register(0x71), Register(0x94)]
#       tdc08 <- temp[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(86,5))
#       Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
#       Index("temp", Number(U8, 1))
0b 71 94 

# temp_lo[0x03..0x04] <- tdc08 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(86,5))
# Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
# 02f29 Copy8 [Register(0x94), Register(0xaf)]
#       temp_lo[0x03..0x04] <- tdc08 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(86,5))
#       Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
0b 94 af 

# tf338 <- temp[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(87,5))
# Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
# Index("temp", Number(U8, 2))
# 02f2c Copy8 [Register(0x72), Register(0x94)]
#       tf338 <- temp[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(87,5))
#       Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
#       Index("temp", Number(U8, 2))
0b 72 94 

# temp_hi[0x00..0x01] <- tf338 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(87,5))
# Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
# 02f2f Copy8 [Register(0x94), Register(0xa4)]
#       temp_hi[0x00..0x01] <- tf338 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(87,5))
#       Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
0b 94 a4 

# tb6b4 <- temp[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(88,5))
# Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
# Index("temp", Number(U8, 3))
# 02f32 Copy8 [Register(0x73), Register(0x94)]
#       tb6b4 <- temp[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(88,5))
#       Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
#       Index("temp", Number(U8, 3))
0b 73 94 

# temp_hi[0x01..0x02] <- tb6b4 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(88,5))
# Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
# 02f35 Copy8 [Register(0x94), Register(0xa5)]
#       temp_hi[0x01..0x02] <- tb6b4 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(88,5))
#       Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
0b 94 a5 

# te546 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 02f38 Copy32 [Register(0x0c), Register(0xa0)]
#       te546 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c a0 

# t3308 <- temp_lo U32 Some('/home/john/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Ident("temp_lo")
# 02f3b Copy32 [Register(0xac), Register(0x70)]
#       t3308 <- temp_lo U32 Some('/home/john/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Ident("temp_lo")
21 ac 70 

# mem[te546] <- t3308 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# 02f3e Store32_1 [Register(0x70), Register(0xa0)]
#       mem[te546] <- t3308 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
23 70 a0 

# 02f41 Store32_2 []
#       mem[te546] <- t3308 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
24 

# te825 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
# Ident("__frame_pointer")
# 02f42 Copy32 [Register(0x0c), Register(0xa0)]
#       te825 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
#       Ident("__frame_pointer")
21 0c a0 

# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
# 02f45 Copy32 [Register(0xa0), Register(0x70)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
21 a0 70 

# 02f48 AddImm32IgnoreCarry [Register(0x70), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
32 70 04 00 00 00 

# t41f5 <- temp_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Ident("temp_hi")
# 02f4e Copy32 [Register(0xa4), Register(0x74)]
#       t41f5 <- temp_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Ident("temp_hi")
21 a4 74 

# mem[t3f2a] <- t41f5 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# 02f51 Store32_1 [Register(0x74), Register(0x70)]
#       mem[t3f2a] <- t41f5 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
23 74 70 

# 02f54 Store32_2 []
#       mem[t3f2a] <- t41f5 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
24 

# tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# te825 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
# Ident("__frame_pointer")
# 02f55 Copy32 [Register(0x0c), Register(0xa0)]
#       te825 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
#       Ident("__frame_pointer")
21 0c a0 

# t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
# 02f58 Copy32 [Register(0xa0), Register(0x70)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
21 a0 70 

# 02f5b AddImm32IgnoreCarry [Register(0x70), Constant32(0x00000000=0)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
32 70 00 00 00 00 

# tf4b2 <- t4a94 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# 02f61 Copy32 [Register(0x70), Register(0x74)]
#       tf4b2 <- t4a94 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
21 70 74 

# tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_mul32_64_add_U64_1_a <- tac13 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 02f64 Copy32 [Register(0x7c), Register(0x6c)]
#       inline_mul32_64_add_U64_1_a <- tac13 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 7c 6c 

# inline_mul32_64_add_U64_1_b <- tf4b2 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 02f67 Copy32 [Register(0x74), Register(0x70)]
#       inline_mul32_64_add_U64_1_b <- tf4b2 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 74 70 

# inline_mul32_64_add_U64_1_c <- tac13 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 02f6a Copy32 [Register(0x7c), Register(0x74)]
#       inline_mul32_64_add_U64_1_c <- tac13 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 7c 74 

# inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/home/john/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/home/john/lutcomp/programs/lib/U64.j':(7,5))\nAssign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"a\", \"lo\") }\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x6c), Register(0x6c)], resolved: None }
# inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# 02f6d Load32 [Register(0x6c), Register(0x78)]
#       inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(7,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("a", "lo") }
#       PtrFieldDeref("a", "lo")
22 6c 78 

# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 02f70 Copy32 [Register(0x74), Register(0x7c)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 74 7c 

# 02f73 AddImm32IgnoreCarry [Register(0x7c), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 7c 04 00 00 00 

# inline_mul32_64_add_U64_1_t3203 <- inline_mul32_64_add_U64_1_a U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t3203 <- inline_mul32_64_add_U64_1_a U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))\nPtrFieldDeref(\"a\", \"hi\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x6c), Register(0x6c)], resolved: None }
# inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_t3203 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
# 02f79 Copy32 [Register(0x6c), Register(0x80)]
#       inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_t3203 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
21 6c 80 

# 02f7c AddImm32IgnoreCarry [Register(0x80), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_t3203 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
32 80 04 00 00 00 

# inline_mul32_64_add_U64_1_te24c <- mem[inline_mul32_64_add_U64_1_t144a] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# 02f82 Load32 [Register(0x80), Register(0x84)]
#       inline_mul32_64_add_U64_1_te24c <- mem[inline_mul32_64_add_U64_1_t144a] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
22 80 84 

# inline_mul32_64_add_U64_1_teec0 <- inline_mul32_64_add_U64_1_b U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_teec0 <- inline_mul32_64_add_U64_1_b U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))\nPtrFieldDeref(\"b\", \"hi\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_teec0 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
# 02f85 Copy32 [Register(0x70), Register(0x80)]
#       inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_teec0 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
21 70 80 

# 02f88 AddImm32IgnoreCarry [Register(0x80), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_teec0 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
32 80 04 00 00 00 

# inline_mul32_64_add_U64_1_t153d <- mem[inline_mul32_64_add_U64_1_t809] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# 02f8e Load32 [Register(0x80), Register(0x80)]
#       inline_mul32_64_add_U64_1_t153d <- mem[inline_mul32_64_add_U64_1_t809] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
22 80 80 

# inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# 02f91 ClearCarry []
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
03 

# 02f92 AddCarry32_1 [Register(0x84), Register(0x80), Register(0x80)]
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
30 84 80 80 

# 02f96 AddCarry32_2 []
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
31 

# mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# 02f97 Store32_1 [Register(0x80), Register(0x7c)]
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
23 80 7c 

# 02f9a Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
24 

# inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x6c), Register(0x6c)], resolved: None }
# inline_mul32_64_add_U64_1_td868 <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# 02f9b Load32 [Register(0x6c), Register(0x7c)]
#       inline_mul32_64_add_U64_1_td868 <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("a", "lo")
22 6c 7c 

# inline_mul32_64_add_U64_1_t24ae <- inline_mul32_64_add_U64_1_b U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("b", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }
# Ident("b")
# 02f9e Copy32 [Register(0x70), Register(0x6c)]
#       inline_mul32_64_add_U64_1_t24ae <- inline_mul32_64_add_U64_1_b U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("b", "lo")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") } }
#       Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }
#       Ident("b")
21 70 6c 

# inline_mul32_64_add_U64_1_td5bf <- mem[inline_mul32_64_add_U64_1_t24ae] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("b", "lo")
# 02fa1 Load32 [Register(0x6c), Register(0x6c)]
#       inline_mul32_64_add_U64_1_td5bf <- mem[inline_mul32_64_add_U64_1_t24ae] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("b", "lo")
22 6c 6c 

# inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# 02fa4 ClearCarry []
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
03 

# 02fa5 AddCarry32_1 [Register(0x7c), Register(0x6c), Register(0x6c)]
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
30 7c 6c 6c 

# 02fa9 AddCarry32_2 []
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
31 

# mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# 02faa Store32_1 [Register(0x6c), Register(0x74)]
#       mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
23 6c 74 

# 02fad Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
24 

# inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\nPtrFieldDeref(\"c\", \"lo\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_add_U64_1_t90ac <- mem[inline_mul32_64_add_U64_1_t8956] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# 02fae Load32 [Register(0x74), Register(0x70)]
#       inline_mul32_64_add_U64_1_t90ac <- mem[inline_mul32_64_add_U64_1_t8956] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       PtrFieldDeref("c", "lo")
22 74 70 

# inline_mul32_64_add_U64_1_t1506 <- inline_mul32_64_add_U64_1_lo U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# Ident("lo")
# 02fb1 Copy32 [Register(0x78), Register(0x6c)]
#       inline_mul32_64_add_U64_1_t1506 <- inline_mul32_64_add_U64_1_lo U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       Ident("lo")
21 78 6c 

# if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# 02fb4 Cmp8 [Register(0x6f), Register(0x73)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
15 6f 73 

# 02fb7 Cmp8IfZero [Register(0x6e), Register(0x72)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 6e 72 

# 02fba Cmp8IfZero [Register(0x6d), Register(0x71)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 6d 71 

# 02fbd Cmp8IfZero [Register(0x6c), Register(0x70)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 6c 70 

# 02fc0 JcImm [Label24(inline_mul32_64_add_U64_1_add_U64_if_else_0_2)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
71 e7 2f 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_1_add_U64_if_true_0_1)], resolved: None }
# :inline_mul32_64_add_U64_1_add_U64_if_true_0_1 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# inline_mul32_64_add_U64_1_add_U64_if_true_0_1
# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 02fc4 Copy32 [Register(0x74), Register(0x7c)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 74 7c 

# 02fc7 AddImm32IgnoreCarry [Register(0x7c), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 7c 04 00 00 00 

# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))\nPtrFieldDeref(\"c\", \"hi\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 02fcd Copy32 [Register(0x74), Register(0x7c)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 74 7c 

# 02fd0 AddImm32IgnoreCarry [Register(0x7c), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 7c 04 00 00 00 

# inline_mul32_64_add_U64_1_tf677 <- mem[inline_mul32_64_add_U64_1_t1335] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# PtrFieldDeref("c", "hi")
# 02fd6 Load32 [Register(0x7c), Register(0x6c)]
#       inline_mul32_64_add_U64_1_tf677 <- mem[inline_mul32_64_add_U64_1_t1335] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
#       PtrFieldDeref("c", "hi")
22 7c 6c 

# inline_mul32_64_add_U64_1_tcbd1 <- inline_mul32_64_add_U64_1_tf677 Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# 02fd9 AddImm32IgnoreCarry [Register(0x6c), Constant32(0x00000001=1)]
#       inline_mul32_64_add_U64_1_tcbd1 <- inline_mul32_64_add_U64_1_tf677 Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
32 6c 01 00 00 00 

# mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# 02fdf Store32_1 [Register(0x6c), Register(0x7c)]
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
23 6c 7c 

# 02fe2 Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
24 

# goto inline_mul32_64_add_U64_1_add_U64_if_end_0 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# 02fe3 JmpImm [Label24(inline_mul32_64_add_U64_1_add_U64_if_end_0)]
#       goto inline_mul32_64_add_U64_1_add_U64_if_end_0 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
70 e7 2f 00 

# :inline_mul32_64_add_U64_1_add_U64_if_else_0_2 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_1_add_U64_if_else_0_2
# :inline_mul32_64_add_U64_1_add_U64_if_end_0 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_1_add_U64_if_end_0
# goto inline_mul32_64_add_U64_1_function_end_add_U64 None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_add_U64_1_function_end_add_U64 None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_1_function_end_add_U64)], resolved: None }
# :inline_mul32_64_add_U64_1_function_end_add_U64 None
# inline_mul32_64_add_U64_1_function_end_add_U64
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) None
# Return { value: None }
# 02fe7 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) None
#       Return { value: None }
32 0c 08 00 00 00 

# return None None
# Return { value: None }
# 02fed AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 02ff3 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_mul32_64 None
# function_end_mul32_64
# Unreachable None
# 02ff5 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :print_dec32
# Ret None
# Arg0=a
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var a (Arg0 a Number(USIZE)) Reg(U32) Some([176, 177, 178, 179])
# Var b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_print_dec32_div32_by10_86_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_print_dec32_div32_by10_86_a (Arg0 a Number(USIZE)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a (Arg0 a Number(USIZE)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([184])
# Var inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t1c22 (t1c22 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31))) Reg(U8) Some([185])
# Var inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t2574 (t2574 Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))) Reg(U8) Some([185])
# Var inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t3f28 (t3f28 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))) Reg(U8) Some([185])
# Var inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t3f9e (t3f9e Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))) Reg(U8) Some([185])
# Var inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([185])
# Var inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([184])
# Var inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t5eed (t5eed Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) Reg(U8) Some([185])
# Var inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t6274 (t6274 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))) Reg(U8) Some([185])
# Var inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t8119 (t8119 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))) Reg(U8) Some([185])
# Var inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t8772 (t8772 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))) Reg(U8) Some([185])
# Var inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t8792 (t8792 Ident("a")) Reg(U32) Some([180, 181, 182, 183])
# Var inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t8e91 (t8e91 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))) Reg(U8) Some([185])
# Var inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t9450 (t9450 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) Reg(U8) Some([186])
# Var inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t96e8 (t96e8 Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))) Reg(U8) Some([185])
# Var inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_ta620 (ta620 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) Reg(U8) Some([185])
# Var inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([186])
# Var inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_te046 (te046 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))) Reg(U8) Some([185])
# Var inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_tea96 (tea96 Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))) Reg(U8) Some([185])
# Var inline_print_dec32_div32_by10_86_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_print_dec32_div32_by10_86_prod (Local prod Struct("U64") Static(987492)) Static(987492) None
# Var inline_print_dec32_div32_by10_86_t0 (static "prod") Reg(U32) Some([180, 181, 182, 183])
# Var inline_print_dec32_div32_by10_86_t1c61 (t1c61 AddressOf(Ident("prod"))) Reg(U32) Some([180, 181, 182, 183])
# Var inline_print_dec32_div32_by10_86_t45ae (t45ae Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) Reg(U32) Some([180, 181, 182, 183])
# Var inline_print_dec32_div32_by10_86_t8792 (t8792 Ident("a")) Reg(U32) Some([188, 189, 190, 191])
# Var inline_print_dec32_div32_by10_86_t9514 (t9514 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }) Reg(U32) Some([180, 181, 182, 183])
# Var inline_print_dec32_div32_by10_86_tb354 (tb354 LocalFieldDeref("prod", "hi")) Reg(U32) Some([180, 181, 182, 183])
# Var inline_print_dec32_div32_by10_86_tef1a (tef1a Number(USIZE, 3435973837)) Reg(U32) Some([192, 193, 194, 195])
# Var inline_print_dec32_div32_by10_86_tfc6a (tfc6a Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })) Reg(U8) Some([196])
# Var inline_print_dec32_mul32_by10_14_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_print_dec32_mul32_by10_14_a (Arg0 a Number(USIZE)) Reg(U32) Some([176, 177, 178, 179])
# Var inline_print_dec32_mul32_by10_14_b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_print_dec32_mul32_by10_14_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_print_dec32_mul32_by10_14_t7eaf (t7eaf Arithmetic(Add, Ident("b"), Ident("a"))) Reg(U32) Some([176, 177, 178, 179])
# Var inline_print_dec32_mul32_by10_14_t8792 (t8792 Ident("a")) Reg(U32) Some([176, 177, 178, 179])
# Var inline_print_dec32_mul32_by10_14_tace9 (tace9 Ident("b")) Reg(U32) Some([180, 181, 182, 183])
# Var inline_print_dec32_putc_67_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_print_dec32_putc_67_c (Arg0 c Number(U8)) Reg(U8) Some([196])
# Var inline_print_dec32_putc_67_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_print_dec32_putc_67_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([196])
# Var inline_print_dec32_putc_67_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([196])
# Var inline_print_dec32_putc_67_tac13 (tac13 Ident("c")) Reg(U8) Some([196])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t1723 (t1723 Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })) Reg(U8) Some([196])
# Var t1a60 (t1a60 Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))) Reg(U8) Some([196])
# Var t86e2 (t86e2 Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) Reg(U32) Some([176, 177, 178, 179])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([188, 189, 190, 191])
# Var t9c15 (t9c15 Number(USIZE, 256)) Reg(U32) Some([180, 181, 182, 183])
# Var ta8fd (ta8fd Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })) Reg(U8) Some([196])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([180, 181, 182, 183])
# Var tc4db (tc4db Call(Call { function: "print_dec32", parameters: [Ident("b")] })) Reg(U8) Some([196])
# Var tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([196])
# 02ffa Copy32 [Register(0x00), Register(0xb0)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [176, 177, 178, 179].
21 00 b0 

# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
# Ident("a")
# 02ffd Copy32 [Register(0xb0), Register(0xbc)]
#       t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
#       Ident("a")
21 b0 bc 

# t9c15 <- 0n256/0x00000100u32  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
# Number(USIZE, 256)
# 03000 LoadImm32 [Register(0xb4), Constant32(0x00000100=256)]
#       t9c15 <- 0n256/0x00000100u32  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
#       Number(USIZE, 256)
20 b4 00 01 00 00 

# if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
# 03006 Cmp8 [Register(0xb7), Register(0xbf)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
15 b7 bf 

# 03009 Cmp8IfZero [Register(0xb6), Register(0xbe)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
16 b6 be 

# 0300c Cmp8IfZero [Register(0xb5), Register(0xbd)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
16 b5 bd 

# 0300f Cmp8IfZero [Register(0xb4), Register(0xbc)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
16 b4 bc 

# 03012 JcImm [Label24(print_dec32_if_else_0_2)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
71 38 30 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }\n", opcode: JmpImm, args: [Label24(print_dec32_if_true_0_1)], resolved: None }
# :print_dec32_if_true_0_1 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
# print_dec32_if_true_0_1
# tdd9e <- a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
# Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
# Index("a", Number(U8, 0))
# 03016 Copy8 [Register(0xb0), Register(0xc4)]
#       tdd9e <- a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
#       Index("a", Number(U8, 0))
0b b0 c4 

# None <= call print_dec8(tdd9e,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
# Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
# 03019 Copy8 [Register(0xc4), Register(0x00)]
#       Arg0[a]=tdd9e None <= call print_dec8(tdd9e,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
0b c4 00 

# Registers used by this function: {176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 197, 198, 199, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 0301c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 

# 03022 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c 2c 30 00 00 

# 03028 JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 e7 31 00 

# 0302c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 

# return None Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
# Return { value: None }
# 03032 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto print_dec32_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
# 03034 JmpImm [Label24(print_dec32_if_end_0)]
#       goto print_dec32_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
70 38 30 00 

# :print_dec32_if_else_0_2 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
# print_dec32_if_else_0_2
# :print_dec32_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
# print_dec32_if_end_0
# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(147,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
# Call(Call { function: "div32_by10", parameters: [Ident("a")] })
# Ident("a")
# 03038 Copy32 [Register(0xb0), Register(0xbc)]
#       t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(147,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
#       Call(Call { function: "div32_by10", parameters: [Ident("a")] })
#       Ident("a")
21 b0 bc 

# inline_print_dec32_div32_by10_86_a <- t8792 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(147,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
# Call(Call { function: "div32_by10", parameters: [Ident("a")] })
# 0303b Copy32 [Register(0xbc), Register(0xb4)]
#       inline_print_dec32_div32_by10_86_a <- t8792 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(147,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
#       Call(Call { function: "div32_by10", parameters: [Ident("a")] })
21 bc b4 

# inline_print_dec32_div32_by10_86_t8792 <- inline_print_dec32_div32_by10_86_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
# Ident("a")
# 0303e Copy32 [Register(0xb4), Register(0xbc)]
#       inline_print_dec32_div32_by10_86_t8792 <- inline_print_dec32_div32_by10_86_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
#       Ident("a")
21 b4 bc 

# inline_print_dec32_div32_by10_86_tef1a <- 0xcccccccdu32  Some('/home/john/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
# Number(USIZE, 3435973837)
# 03041 LoadImm32 [Register(0xc0), Constant32(0xcccccccd=3435973837)]
#       inline_print_dec32_div32_by10_86_tef1a <- 0xcccccccdu32  Some('/home/john/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
#       Number(USIZE, 3435973837)
20 c0 cd cc cc cc 

# inline_print_dec32_div32_by10_86_t0 <- 0n987492/0x000f1164u32  Some('/home/john/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
# AddressOf(Ident("prod"))
# 03047 LoadImm32 [Register(0xb4), Constant32(0x000f1164=987492)]
#       inline_print_dec32_div32_by10_86_t0 <- 0n987492/0x000f1164u32  Some('/home/john/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
#       AddressOf(Ident("prod"))
20 b4 64 11 0f 00 

# inline_print_dec32_div32_by10_86_t1c61 <- inline_print_dec32_div32_by10_86_t0 U32 Some('/home/john/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
# AddressOf(Ident("prod"))
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_86_t1c61 <- inline_print_dec32_div32_by10_86_t0 U32 Some('/home/john/lutcomp/programs/lib/div.j':(130,5))\nVoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] }) }\nCall(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })\nAddressOf(Ident(\"prod\"))\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# None <= call mul32_64(inline_print_dec32_div32_by10_86_t8792,inline_print_dec32_div32_by10_86_tef1a,inline_print_dec32_div32_by10_86_t1c61,) Some('/home/john/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
# 0304d Copy32 [Register(0xbc), Register(0x00)]
#       Arg0[a]=inline_print_dec32_div32_by10_86_t8792 None <= call mul32_64(inline_print_dec32_div32_by10_86_t8792,inline_print_dec32_div32_by10_86_tef1a,inline_print_dec32_div32_by10_86_t1c61,) Some('/home/john/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
21 bc 00 

# 03050 Copy32 [Register(0xc0), Register(0x04)]
#       Arg1[b]=inline_print_dec32_div32_by10_86_tef1a None <= call mul32_64(inline_print_dec32_div32_by10_86_t8792,inline_print_dec32_div32_by10_86_tef1a,inline_print_dec32_div32_by10_86_t1c61,) Some('/home/john/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
21 c0 04 

# 03053 Copy32 [Register(0xb4), Register(0x08)]
#       Arg2[c]=inline_print_dec32_div32_by10_86_t1c61 None <= call mul32_64(inline_print_dec32_div32_by10_86_t8792,inline_print_dec32_div32_by10_86_tef1a,inline_print_dec32_div32_by10_86_t1c61,) Some('/home/john/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
21 b4 08 

# Registers used by this function: {176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196}
# Registers used by callee tree: {108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175}
# Registers to save: []
# 03056 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:mul32_64))
32 0c fc ff ff ff 

# 0305c StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:mul32_64))
25 0c 66 30 00 00 

# 03062 JmpImm [Label24(:mul32_64)]
#       PseudoCall(Label24(:mul32_64))
70 74 2b 00 

# 03066 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:mul32_64))
32 0c 04 00 00 00 

# inline_print_dec32_div32_by10_86_t9514 <- 0n987496/0x000f1168u32  Some('/home/john/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# LocalFieldDeref("prod", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }
# Number(USIZE, 987496)
# 0306c LoadImm32 [Register(0xb4), Constant32(0x000f1168=987496)]
#       inline_print_dec32_div32_by10_86_t9514 <- 0n987496/0x000f1168u32  Some('/home/john/lutcomp/programs/lib/div.j':(131,5))
#       Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
#       Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
#       LocalFieldDeref("prod", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }
#       Number(USIZE, 987496)
20 b4 68 11 0f 00 

# inline_print_dec32_div32_by10_86_tb354 <- mem[inline_print_dec32_div32_by10_86_t9514] U32 Some('/home/john/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# LocalFieldDeref("prod", "hi")
# 03072 Load32 [Register(0xb4), Register(0xb4)]
#       inline_print_dec32_div32_by10_86_tb354 <- mem[inline_print_dec32_div32_by10_86_t9514] U32 Some('/home/john/lutcomp/programs/lib/div.j':(131,5))
#       Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
#       Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
#       LocalFieldDeref("prod", "hi")
22 b4 b4 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a <- inline_print_dec32_div32_by10_86_tb354 U32 Some('/home/john/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a <- inline_print_dec32_div32_by10_86_tb354 U32 Some('/home/john/lutcomp/programs/lib/div.j':(131,5))\nReturn { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }\nCall(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_tdd9e <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))
# Index("a", Number(U8, 0))
# 03075 Copy8 [Register(0xb4), Register(0xba)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_tdd9e <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))
#       Index("a", Number(U8, 0))
0b b4 ba 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t3f28 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_tdd9e RotateRight Number(0n3/0x03u8) Some('/home/john/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))
# 03078 LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t3f28 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_tdd9e RotateRight Number(0n3/0x03u8) Some('/home/john/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))
04 00 03 

# 0307b Shift8 [Constant8(0x04=4), Register(0x00), Register(0xba), Register(0xb9)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t3f28 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_tdd9e RotateRight Number(0n3/0x03u8) Some('/home/john/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))
1e 04 00 ba b9 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x00..0x01] <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t3f28 U8 Some('/home/john/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
# 03080 Copy8 [Register(0xb9), Register(0xb4)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x00..0x01] <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t3f28 U8 Some('/home/john/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
0b b9 b4 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t1539 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))
# Index("a", Number(U8, 1))
# 03083 Copy8 [Register(0xb5), Register(0xb8)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t1539 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))
#       Index("a", Number(U8, 1))
0b b5 b8 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t6274 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t1539 RotateRight Number(0n3/0x03u8) Some('/home/john/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))
# 03086 LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t6274 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t1539 RotateRight Number(0n3/0x03u8) Some('/home/john/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))
04 00 03 

# 03089 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb8), Register(0xb9)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t6274 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t1539 RotateRight Number(0n3/0x03u8) Some('/home/john/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))
1e 04 00 b8 b9 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x01..0x02] <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t6274 U8 Some('/home/john/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
# 0308e Copy8 [Register(0xb9), Register(0xb5)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x01..0x02] <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t6274 U8 Some('/home/john/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
0b b9 b5 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t577f <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))
# Index("a", Number(U8, 2))
# 03091 Copy8 [Register(0xb6), Register(0xb9)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t577f <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))
#       Index("a", Number(U8, 2))
0b b6 b9 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t96e8 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t577f RotateRight Number(0n3/0x03u8) Some('/home/john/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))
# 03094 LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t96e8 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t577f RotateRight Number(0n3/0x03u8) Some('/home/john/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))
04 00 03 

# 03097 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb9), Register(0xb9)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t96e8 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t577f RotateRight Number(0n3/0x03u8) Some('/home/john/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))
1e 04 00 b9 b9 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x02..0x03] <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t96e8 U8 Some('/home/john/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
# 0309c Copy8 [Register(0xb9), Register(0xb6)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x02..0x03] <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t96e8 U8 Some('/home/john/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
0b b9 b6 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t5b7c <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))
# Index("a", Number(U8, 3))
# 0309f Copy8 [Register(0xb7), Register(0xb8)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t5b7c <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))
#       Index("a", Number(U8, 3))
0b b7 b8 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t3f9e <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t5b7c RotateRight Number(0n3/0x03u8) Some('/home/john/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))
# 030a2 LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t3f9e <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t5b7c RotateRight Number(0n3/0x03u8) Some('/home/john/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))
04 00 03 

# 030a5 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb8), Register(0xb9)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t3f9e <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t5b7c RotateRight Number(0n3/0x03u8) Some('/home/john/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))
1e 04 00 b8 b9 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x03..0x04] <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t3f9e U8 Some('/home/john/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
# 030aa Copy8 [Register(0xb9), Register(0xb7)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x03..0x04] <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t3f9e U8 Some('/home/john/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
0b b9 b7 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_tdd9e <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))
# Index("a", Number(U8, 0))
# 030ad Copy8 [Register(0xb4), Register(0xba)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_tdd9e <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))
#       Index("a", Number(U8, 0))
0b b4 ba 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_te046 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_tdd9e BitwiseAnd Number(0n31/0x1fu8) Some('/home/john/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))
# 030b0 LoadImm8 [Register(0x00), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_te046 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_tdd9e BitwiseAnd Number(0n31/0x1fu8) Some('/home/john/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))
04 00 1f 

# 030b3 And8 [Register(0xba), Register(0x00), Register(0xb9)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_te046 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_tdd9e BitwiseAnd Number(0n31/0x1fu8) Some('/home/john/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))
1b ba 00 b9 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x00..0x01] <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_te046 U8 Some('/home/john/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
# 030b7 Copy8 [Register(0xb9), Register(0xb4)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x00..0x01] <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_te046 U8 Some('/home/john/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
0b b9 b4 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_tdd9e <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
# Index("a", Number(U8, 0))
# 030ba Copy8 [Register(0xb4), Register(0xba)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_tdd9e <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
#       Index("a", Number(U8, 0))
0b b4 ba 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t1539 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))
# Index("a", Number(U8, 1))
# 030bd Copy8 [Register(0xb5), Register(0xb8)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t1539 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))
#       Index("a", Number(U8, 1))
0b b5 b8 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_ta620 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t1539 BitwiseAnd Number(0n224/0xe0u8) Some('/home/john/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))
# 030c0 LoadImm8 [Register(0x00), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_ta620 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t1539 BitwiseAnd Number(0n224/0xe0u8) Some('/home/john/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))
04 00 e0 

# 030c3 And8 [Register(0xb8), Register(0x00), Register(0xb9)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_ta620 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t1539 BitwiseAnd Number(0n224/0xe0u8) Some('/home/john/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))
1b b8 00 b9 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t8772 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_tdd9e BitwiseOr Var(inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_ta620) Some('/home/john/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
# 030c7 Or8 [Register(0xba), Register(0xb9), Register(0xb9)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t8772 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_tdd9e BitwiseOr Var(inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_ta620) Some('/home/john/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
1c ba b9 b9 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x00..0x01] <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t8772 U8 Some('/home/john/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
# 030cb Copy8 [Register(0xb9), Register(0xb4)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x00..0x01] <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t8772 U8 Some('/home/john/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
0b b9 b4 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t1539 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))
# Index("a", Number(U8, 1))
# 030ce Copy8 [Register(0xb5), Register(0xb8)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t1539 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))
#       Index("a", Number(U8, 1))
0b b5 b8 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t8e91 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t1539 BitwiseAnd Number(0n31/0x1fu8) Some('/home/john/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))
# 030d1 LoadImm8 [Register(0x00), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t8e91 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t1539 BitwiseAnd Number(0n31/0x1fu8) Some('/home/john/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))
04 00 1f 

# 030d4 And8 [Register(0xb8), Register(0x00), Register(0xb9)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t8e91 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t1539 BitwiseAnd Number(0n31/0x1fu8) Some('/home/john/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))
1b b8 00 b9 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x01..0x02] <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t8e91 U8 Some('/home/john/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
# 030d8 Copy8 [Register(0xb9), Register(0xb5)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x01..0x02] <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t8e91 U8 Some('/home/john/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
0b b9 b5 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t1539 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
# Index("a", Number(U8, 1))
# 030db Copy8 [Register(0xb5), Register(0xb8)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t1539 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
#       Index("a", Number(U8, 1))
0b b5 b8 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t577f <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))
# Index("a", Number(U8, 2))
# 030de Copy8 [Register(0xb6), Register(0xb9)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t577f <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))
#       Index("a", Number(U8, 2))
0b b6 b9 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t5eed <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t577f BitwiseAnd Number(0n224/0xe0u8) Some('/home/john/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))
# 030e1 LoadImm8 [Register(0x00), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t5eed <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t577f BitwiseAnd Number(0n224/0xe0u8) Some('/home/john/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))
04 00 e0 

# 030e4 And8 [Register(0xb9), Register(0x00), Register(0xb9)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t5eed <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t577f BitwiseAnd Number(0n224/0xe0u8) Some('/home/john/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))
1b b9 00 b9 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_tea96 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t1539 BitwiseOr Var(inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t5eed) Some('/home/john/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
# 030e8 Or8 [Register(0xb8), Register(0xb9), Register(0xb9)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_tea96 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t1539 BitwiseOr Var(inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t5eed) Some('/home/john/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
1c b8 b9 b9 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x01..0x02] <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_tea96 U8 Some('/home/john/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
# 030ec Copy8 [Register(0xb9), Register(0xb5)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x01..0x02] <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_tea96 U8 Some('/home/john/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
0b b9 b5 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t577f <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31))
# Index("a", Number(U8, 2))
# 030ef Copy8 [Register(0xb6), Register(0xb9)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t577f <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31))
#       Index("a", Number(U8, 2))
0b b6 b9 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t1c22 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t577f BitwiseAnd Number(0n31/0x1fu8) Some('/home/john/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31))
# 030f2 LoadImm8 [Register(0x00), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t1c22 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t577f BitwiseAnd Number(0n31/0x1fu8) Some('/home/john/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31))
04 00 1f 

# 030f5 And8 [Register(0xb9), Register(0x00), Register(0xb9)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t1c22 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t577f BitwiseAnd Number(0n31/0x1fu8) Some('/home/john/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31))
1b b9 00 b9 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x02..0x03] <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t1c22 U8 Some('/home/john/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31)) }
# 030f9 Copy8 [Register(0xb9), Register(0xb6)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x02..0x03] <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t1c22 U8 Some('/home/john/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31)) }
0b b9 b6 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t577f <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
# Index("a", Number(U8, 2))
# 030fc Copy8 [Register(0xb6), Register(0xb9)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t577f <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
#       Index("a", Number(U8, 2))
0b b6 b9 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t5b7c <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))
# Index("a", Number(U8, 3))
# 030ff Copy8 [Register(0xb7), Register(0xb8)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t5b7c <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))
#       Index("a", Number(U8, 3))
0b b7 b8 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t9450 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t5b7c BitwiseAnd Number(0n224/0xe0u8) Some('/home/john/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))
# 03102 LoadImm8 [Register(0x00), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t9450 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t5b7c BitwiseAnd Number(0n224/0xe0u8) Some('/home/john/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))
04 00 e0 

# 03105 And8 [Register(0xb8), Register(0x00), Register(0xba)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t9450 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t5b7c BitwiseAnd Number(0n224/0xe0u8) Some('/home/john/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))
1b b8 00 ba 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t2574 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t577f BitwiseOr Var(inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t9450) Some('/home/john/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
# 03109 Or8 [Register(0xb9), Register(0xba), Register(0xb9)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t2574 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t577f BitwiseOr Var(inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t9450) Some('/home/john/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
1c b9 ba b9 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x02..0x03] <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t2574 U8 Some('/home/john/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
# 0310d Copy8 [Register(0xb9), Register(0xb6)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x02..0x03] <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t2574 U8 Some('/home/john/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
0b b9 b6 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t5b7c <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))
# Index("a", Number(U8, 3))
# 03110 Copy8 [Register(0xb7), Register(0xb8)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t5b7c <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))
#       Index("a", Number(U8, 3))
0b b7 b8 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t8119 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t5b7c BitwiseAnd Number(0n31/0x1fu8) Some('/home/john/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))
# 03113 LoadImm8 [Register(0x00), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t8119 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t5b7c BitwiseAnd Number(0n31/0x1fu8) Some('/home/john/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))
04 00 1f 

# 03116 And8 [Register(0xb8), Register(0x00), Register(0xb9)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t8119 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t5b7c BitwiseAnd Number(0n31/0x1fu8) Some('/home/john/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))
1b b8 00 b9 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x03..0x04] <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t8119 U8 Some('/home/john/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
# 0311a Copy8 [Register(0xb9), Register(0xb7)]
#       inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a[0x03..0x04] <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t8119 U8 Some('/home/john/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
0b b9 b7 

# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t8792 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(124,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t8792 <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(124,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_print_dec32_div32_by10_86_t45ae <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t8792 U32 Some('/home/john/lutcomp/programs/lib/div.j':(124,5))
# Return { value: Some(Ident("a")) }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_86_t45ae <- inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_t8792 U32 Some('/home/john/lutcomp/programs/lib/div.j':(124,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# goto inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_function_end_shiftright3 Some('/home/john/lutcomp/programs/lib/div.j':(124,5))
# Return { value: Some(Ident("a")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_function_end_shiftright3 Some('/home/john/lutcomp/programs/lib/div.j':(124,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_function_end_shiftright3)], resolved: None }
# :inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_function_end_shiftright3 None
# inline_print_dec32_div32_by10_86_inline_div32_by10_shiftright3_85_function_end_shiftright3
# b <- inline_print_dec32_div32_by10_86_t45ae U32 Some('/home/john/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# optimized away noop copy Instruction { source: "b <- inline_print_dec32_div32_by10_86_t45ae U32 Some('/home/john/lutcomp/programs/lib/div.j':(131,5))\nReturn { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# goto inline_print_dec32_div32_by10_86_function_end_div32_by10 Some('/home/john/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_div32_by10_86_function_end_div32_by10 Some('/home/john/lutcomp/programs/lib/div.j':(131,5))\nReturn { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_div32_by10_86_function_end_div32_by10)], resolved: None }
# :inline_print_dec32_div32_by10_86_function_end_div32_by10 None
# inline_print_dec32_div32_by10_86_function_end_div32_by10
# tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] }) }\nCall(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("b")] })
# 0311d Copy32 [Register(0xb4), Register(0x00)]
#       Arg0[a]=tace9 None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
21 b4 00 

# Registers used by this function: {176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196]
# 03120 Push8 [Register(0xc4)]
#       Saving reg0xc4 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 c4 

# 03122 Push8 [Register(0xc3)]
#       Saving reg0xc3 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 c3 

# 03124 Push8 [Register(0xc2)]
#       Saving reg0xc2 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 c2 

# 03126 Push8 [Register(0xc1)]
#       Saving reg0xc1 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 c1 

# 03128 Push8 [Register(0xc0)]
#       Saving reg0xc0 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 c0 

# 0312a Push8 [Register(0xbf)]
#       Saving reg0xbf before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 bf 

# 0312c Push8 [Register(0xbe)]
#       Saving reg0xbe before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 be 

# 0312e Push8 [Register(0xbd)]
#       Saving reg0xbd before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 bd 

# 03130 Push8 [Register(0xbc)]
#       Saving reg0xbc before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 bc 

# 03132 Push8 [Register(0xba)]
#       Saving reg0xba before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 ba 

# 03134 Push8 [Register(0xb9)]
#       Saving reg0xb9 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 b9 

# 03136 Push8 [Register(0xb8)]
#       Saving reg0xb8 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 b8 

# 03138 Push8 [Register(0xb7)]
#       Saving reg0xb7 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 b7 

# 0313a Push8 [Register(0xb6)]
#       Saving reg0xb6 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 b6 

# 0313c Push8 [Register(0xb5)]
#       Saving reg0xb5 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 b5 

# 0313e Push8 [Register(0xb4)]
#       Saving reg0xb4 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 b4 

# 03140 Push8 [Register(0xb3)]
#       Saving reg0xb3 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 b3 

# 03142 Push8 [Register(0xb2)]
#       Saving reg0xb2 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 b2 

# 03144 Push8 [Register(0xb1)]
#       Saving reg0xb1 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 b1 

# 03146 Push8 [Register(0xb0)]
#       Saving reg0xb0 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 b0 

# 03148 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 0314e StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 58 31 00 00 

# 03154 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 fa 2f 00 

# 03158 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 0315e Pop8 [Register(0xb0)]
#       Restoring reg0xb0 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a b0 

# 03160 Pop8 [Register(0xb1)]
#       Restoring reg0xb1 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a b1 

# 03162 Pop8 [Register(0xb2)]
#       Restoring reg0xb2 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a b2 

# 03164 Pop8 [Register(0xb3)]
#       Restoring reg0xb3 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a b3 

# 03166 Pop8 [Register(0xb4)]
#       Restoring reg0xb4 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a b4 

# 03168 Pop8 [Register(0xb5)]
#       Restoring reg0xb5 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a b5 

# 0316a Pop8 [Register(0xb6)]
#       Restoring reg0xb6 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a b6 

# 0316c Pop8 [Register(0xb7)]
#       Restoring reg0xb7 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a b7 

# 0316e Pop8 [Register(0xb8)]
#       Restoring reg0xb8 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a b8 

# 03170 Pop8 [Register(0xb9)]
#       Restoring reg0xb9 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a b9 

# 03172 Pop8 [Register(0xba)]
#       Restoring reg0xba after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a ba 

# 03174 Pop8 [Register(0xbc)]
#       Restoring reg0xbc after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a bc 

# 03176 Pop8 [Register(0xbd)]
#       Restoring reg0xbd after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a bd 

# 03178 Pop8 [Register(0xbe)]
#       Restoring reg0xbe after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a be 

# 0317a Pop8 [Register(0xbf)]
#       Restoring reg0xbf after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a bf 

# 0317c Pop8 [Register(0xc0)]
#       Restoring reg0xc0 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a c0 

# 0317e Pop8 [Register(0xc1)]
#       Restoring reg0xc1 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a c1 

# 03180 Pop8 [Register(0xc2)]
#       Restoring reg0xc2 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a c2 

# 03182 Pop8 [Register(0xc3)]
#       Restoring reg0xc3 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a c3 

# 03184 Pop8 [Register(0xc4)]
#       Restoring reg0xc4 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a c4 

# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Ident("a")
# 03186 Copy32 [Register(0xb0), Register(0xbc)]
#       t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
#       Ident("a")
21 b0 bc 

# tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })) }\nArithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] }))\nCall(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_print_dec32_mul32_by10_14_a <- tace9 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
# 03189 Copy32 [Register(0xb4), Register(0xb0)]
#       inline_print_dec32_mul32_by10_14_a <- tace9 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
#       Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
21 b4 b0 

# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 0318c ClearCarry []
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 0318d AddCarry32_1 [Register(0xb0), Register(0xb0), Register(0xb0)]
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 b0 b0 b0 

# 03191 AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 03192 ClearCarry []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 03193 AddCarry32_1 [Register(0xb0), Register(0xb0), Register(0xb4)]
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 b0 b0 b4 

# 03197 AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# 03198 ClearCarry []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
03 

# 03199 AddCarry32_1 [Register(0xb4), Register(0xb4), Register(0xb4)]
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
30 b4 b4 b4 

# 0319d AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
31 

# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 0319e ClearCarry []
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 

# 0319f AddCarry32_1 [Register(0xb4), Register(0xb0), Register(0xb0)]
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 b4 b0 b0 

# 031a3 AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 

# t86e2 <- inline_print_dec32_mul32_by10_14_t7eaf U32 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# optimized away noop copy Instruction { source: "t86e2 <- inline_print_dec32_mul32_by10_14_t7eaf U32 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# goto inline_print_dec32_mul32_by10_14_function_end_mul32_by10 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_mul32_by10_14_function_end_mul32_by10 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_mul32_by10_14_function_end_mul32_by10)], resolved: None }
# :inline_print_dec32_mul32_by10_14_function_end_mul32_by10 None
# inline_print_dec32_mul32_by10_14_function_end_mul32_by10
# a <- t8792 Subtract Var(t86e2) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# 031a4 Copy32 [Register(0xb0), Register(0x00)]
#       a <- t8792 Subtract Var(t86e2) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
21 b0 00 

# 031a7 Invert8 [Register(0x00)]
#       a <- t8792 Subtract Var(t86e2) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 00 

# 031a9 Invert8 [Register(0x01)]
#       a <- t8792 Subtract Var(t86e2) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 01 

# 031ab Invert8 [Register(0x02)]
#       a <- t8792 Subtract Var(t86e2) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 02 

# 031ad Invert8 [Register(0x03)]
#       a <- t8792 Subtract Var(t86e2) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 03 

# 031af AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       a <- t8792 Subtract Var(t86e2) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
32 00 01 00 00 00 

# 031b5 ClearCarry []
#       a <- t8792 Subtract Var(t86e2) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
03 

# 031b6 AddCarry32_1 [Register(0xbc), Register(0x00), Register(0xb0)]
#       a <- t8792 Subtract Var(t86e2) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
30 bc 00 b0 

# 031ba AddCarry32_2 []
#       a <- t8792 Subtract Var(t86e2) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
31 

# tdd9e <- a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })
# Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))
# Index("a", Number(U8, 0))
# 031bb Copy8 [Register(0xb0), Register(0xc4)]
#       tdd9e <- a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })
#       Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))
#       Index("a", Number(U8, 0))
0b b0 c4 

# t1a60 <- tdd9e Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })
# Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))
# 031be LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       t1a60 <- tdd9e Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })
#       Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))
04 00 30 

# 031c1 Add8NoCarryIn [Register(0xc4), Register(0x00), Register(0xc4)]
#       t1a60 <- tdd9e Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })
#       Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))
14 c4 00 c4 

# inline_print_dec32_putc_67_c <- t1a60 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_67_c <- t1a60 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(151,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })\n", opcode: Copy8, args: [Register(0xc4), Register(0xc4)], resolved: None }
# inline_print_dec32_putc_67_tac13 <- inline_print_dec32_putc_67_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_67_tac13 <- inline_print_dec32_putc_67_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0xc4), Register(0xc4)], resolved: None }
# None <= call io_write0(inline_print_dec32_putc_67_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 031c5 Out0 [Register(0xc4)]
#       IoWrite0
68 c4 

# inline_print_dec32_putc_67_tac13 <- inline_print_dec32_putc_67_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_67_tac13 <- inline_print_dec32_putc_67_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0xc4), Register(0xc4)], resolved: None }
# None <= call lcd_putc(inline_print_dec32_putc_67_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 031c7 Copy8 [Register(0xc4), Register(0x00)]
#       Arg0[ch]=inline_print_dec32_putc_67_tac13 None <= call lcd_putc(inline_print_dec32_putc_67_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b c4 00 

# Registers used by this function: {176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 031ca AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 031d0 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c da 31 00 00 

# 031d6 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 031da AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_print_dec32_putc_67_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_putc_67_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_putc_67_function_end_putc)], resolved: None }
# :inline_print_dec32_putc_67_function_end_putc None
# inline_print_dec32_putc_67_function_end_putc
# return None None
# Return { value: None }
# 031e0 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_print_dec32 None
# function_end_print_dec32
# Unreachable None
# 031e2 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :print_dec8
# Ret None
# Arg0=a
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var a (Arg0 a Number(U8)) Reg(U8) Some([197])
# Var b (Local b Number(U8) Reg(U8)) Reg(U8) Some([198])
# Var inline_print_dec8_putc_68_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_print_dec8_putc_68_c (Arg0 c Number(U8)) Reg(U8) Some([197])
# Var inline_print_dec8_putc_68_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_print_dec8_putc_68_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([197])
# Var inline_print_dec8_putc_68_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([197])
# Var inline_print_dec8_putc_68_tac13 (tac13 Ident("c")) Reg(U8) Some([197])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t6cb (t6cb Arithmetic(Multiply, Ident("b"), Number(U8, 10))) Reg(U8) Some([197])
# Var t6db1 (t6db1 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([197])
# Var t79c4 (t79c4 Call(Call { function: "print_dec8", parameters: [Ident("b")] })) Reg(U8) Some([197])
# Var t8792 (t8792 Ident("a")) Reg(U8) Some([199])
# Var tace9 (tace9 Ident("b")) Reg(U8) Some([198])
# Var td36e (td36e Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([197])
# Var td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([198])
# 031e7 Copy8 [Register(0x00), Register(0xc5)]
#       Save function parameter 'a' registers [0] to locals [197].
0b 00 c5 

# t8792 <- a U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
# Ident("a")
# 031ea Copy8 [Register(0xc5), Register(0xc7)]
#       t8792 <- a U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
#       Ident("a")
0b c5 c7 

# td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
# Number(U8, 10)
# 031ed LoadImm8 [Register(0xc6), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
#       Number(U8, 10)
04 c6 0a 

# if t8792 >= td7b5 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
# 031f0 Cmp8 [Register(0xc6), Register(0xc7)]
#       if t8792 >= td7b5 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
15 c6 c7 

# 031f3 JcImm [Label24(print_dec8_if_true_0_1)]
#       if t8792 >= td7b5 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
71 fb 31 00 

# 031f7 JmpImm [Label24(print_dec8_if_else_0_2)]
#       if t8792 >= td7b5 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
70 41 32 00 

# :print_dec8_if_true_0_1 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
# print_dec8_if_true_0_1
# t8792 <- a U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }
# Arithmetic(Divide, Ident("a"), Number(U8, 10))
# Ident("a")
# 031fb Copy8 [Register(0xc5), Register(0xc7)]
#       t8792 <- a U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 10))
#       Ident("a")
0b c5 c7 

# b <- t8792 Divide Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }
# Arithmetic(Divide, Ident("a"), Number(U8, 10))
# 031fe LoadImm8 [Register(0x00), Constant8(0x0a=10)]
#       b <- t8792 Divide Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 10))
04 00 0a 

# 03201 Divide8 [Register(0xc7), Register(0x00), Register(0xc6)]
#       b <- t8792 Divide Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 10))
17 c7 00 c6 

# tace9 <- b U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))\nVoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }\nCall(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0xc6), Register(0xc6)], resolved: None }
# None <= call print_dec8(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("b")] })
# 03205 Copy8 [Register(0xc6), Register(0x00)]
#       Arg0[a]=tace9 None <= call print_dec8(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0b c6 00 

# Registers used by this function: {197, 198, 199}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 197, 198, 199, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [197, 198, 199]
# 03208 Push8 [Register(0xc7)]
#       Saving reg0xc7 before None <= call print_dec8(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 c7 

# 0320a Push8 [Register(0xc6)]
#       Saving reg0xc6 before None <= call print_dec8(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 c6 

# 0320c Push8 [Register(0xc5)]
#       Saving reg0xc5 before None <= call print_dec8(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 c5 

# 0320e AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 

# 03214 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c 1e 32 00 00 

# 0321a JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 e7 31 00 

# 0321e AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 

# 03224 Pop8 [Register(0xc5)]
#       Restoring reg0xc5 after None <= call print_dec8(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a c5 

# 03226 Pop8 [Register(0xc6)]
#       Restoring reg0xc6 after None <= call print_dec8(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a c6 

# 03228 Pop8 [Register(0xc7)]
#       Restoring reg0xc7 after None <= call print_dec8(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a c7 

# t8792 <- a U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
# Ident("a")
# 0322a Copy8 [Register(0xc5), Register(0xc7)]
#       t8792 <- a U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
#       Ident("a")
0b c5 c7 

# tace9 <- b U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
# Arithmetic(Multiply, Ident("b"), Number(U8, 10))
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }\nArithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10)))\nArithmetic(Multiply, Ident(\"b\"), Number(U8, 10))\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0xc6), Register(0xc6)], resolved: None }
# t6cb <- tace9 Multiply Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
# Arithmetic(Multiply, Ident("b"), Number(U8, 10))
# 0322d LoadImm8 [Register(0x00), Constant8(0x0a=10)]
#       t6cb <- tace9 Multiply Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
#       Arithmetic(Multiply, Ident("b"), Number(U8, 10))
04 00 0a 

# 03230 Mul8_8 [Register(0xc6), Register(0x00), Register(0xc5)]
#       t6cb <- tace9 Multiply Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
#       Arithmetic(Multiply, Ident("b"), Number(U8, 10))
10 c6 00 c5 

# a <- t8792 Subtract Var(t6cb) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
# 03234 Copy8 [Register(0xc5), Register(0x00)]
#       a <- t8792 Subtract Var(t6cb) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
0b c5 00 

# 03237 Negate8 [Register(0x00)]
#       a <- t8792 Subtract Var(t6cb) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
02 00 

# 03239 Add8NoCarryIn [Register(0xc7), Register(0x00), Register(0xc5)]
#       a <- t8792 Subtract Var(t6cb) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
14 c7 00 c5 

# goto print_dec8_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# 0323d JmpImm [Label24(print_dec8_if_end_0)]
#       goto print_dec8_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
70 41 32 00 

# :print_dec8_if_else_0_2 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# print_dec8_if_else_0_2
# :print_dec8_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# print_dec8_if_end_0
# t8792 <- a U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# Ident("a")
# 03241 Copy8 [Register(0xc5), Register(0xc7)]
#       t8792 <- a U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(161,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
#       Ident("a")
0b c5 c7 

# t6db1 <- t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# 03244 LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       t6db1 <- t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(161,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
04 00 30 

# 03247 Add8NoCarryIn [Register(0xc7), Register(0x00), Register(0xc5)]
#       t6db1 <- t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(161,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
14 c7 00 c5 

# inline_print_dec8_putc_68_c <- t6db1 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_68_c <- t6db1 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(161,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })\n", opcode: Copy8, args: [Register(0xc5), Register(0xc5)], resolved: None }
# inline_print_dec8_putc_68_tac13 <- inline_print_dec8_putc_68_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_68_tac13 <- inline_print_dec8_putc_68_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0xc5), Register(0xc5)], resolved: None }
# None <= call io_write0(inline_print_dec8_putc_68_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 0324b Out0 [Register(0xc5)]
#       IoWrite0
68 c5 

# inline_print_dec8_putc_68_tac13 <- inline_print_dec8_putc_68_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_68_tac13 <- inline_print_dec8_putc_68_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0xc5), Register(0xc5)], resolved: None }
# None <= call lcd_putc(inline_print_dec8_putc_68_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 0324d Copy8 [Register(0xc5), Register(0x00)]
#       Arg0[ch]=inline_print_dec8_putc_68_tac13 None <= call lcd_putc(inline_print_dec8_putc_68_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b c5 00 

# Registers used by this function: {197, 198, 199}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 03250 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 03256 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 60 32 00 00 

# 0325c JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 e2 1b 00 

# 03260 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_print_dec8_putc_68_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec8_putc_68_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_print_dec8_putc_68_function_end_putc)], resolved: None }
# :inline_print_dec8_putc_68_function_end_putc None
# inline_print_dec8_putc_68_function_end_putc
# return None None
# Return { value: None }
# 03266 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_print_dec8 None
# function_end_print_dec8
# Unreachable None
# 03268 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :stdio_init
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_stdio_init_queue_init_73_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_stdio_init_queue_init_73_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_stdio_init_queue_init_73_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([200, 201, 202, 203])
# Var inline_stdio_init_queue_init_73_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([200, 201, 202, 203])
# Var inline_stdio_init_queue_init_73_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([204])
# Var inline_stdio_init_queue_init_73_tb702 (tb702 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([208, 209, 210, 211])
# Var inline_stdio_init_queue_init_73_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([200, 201, 202, 203])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (static "stdin") Reg(U32) Some([200, 201, 202, 203])
# Var t5c19 (t5c19 Call(Call { function: "KeyBoard_init", parameters: [] })) Reg(U8) Some([212])
# Var t7567 (t7567 Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] })) Reg(U8) Some([212])
# Var t7b05 (t7b05 Call(Call { function: "lcd_init", parameters: [] })) Reg(U8) Some([212])
# Var tfff6 (tfff6 AddressOf(Ident("stdin"))) Reg(U32) Some([200, 201, 202, 203])
# t0 <- 0n987228/0x000f105cu32  Some('/home/john/lutcomp/programs/lib/stdio.j':(9,5))
# VoidExpression { expression: Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] })
# AddressOf(Ident("stdin"))
# 0326d LoadImm32 [Register(0xc8), Constant32(0x000f105c=987228)]
#       t0 <- 0n987228/0x000f105cu32  Some('/home/john/lutcomp/programs/lib/stdio.j':(9,5))
#       VoidExpression { expression: Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] }) }
#       Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] })
#       AddressOf(Ident("stdin"))
20 c8 5c 10 0f 00 

# tfff6 <- t0 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(9,5))
# VoidExpression { expression: Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] })
# AddressOf(Ident("stdin"))
# optimized away noop copy Instruction { source: "tfff6 <- t0 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(9,5))\nVoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }\nCall(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })\nAddressOf(Ident(\"stdin\"))\n", opcode: Copy32, args: [Register(0xc8), Register(0xc8)], resolved: None }
# inline_stdio_init_queue_init_73_s <- tfff6 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(9,5))
# VoidExpression { expression: Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] })
# optimized away noop copy Instruction { source: "inline_stdio_init_queue_init_73_s <- tfff6 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(9,5))\nVoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }\nCall(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })\n", opcode: Copy32, args: [Register(0xc8), Register(0xc8)], resolved: None }
# inline_stdio_init_queue_init_73_t4d4f <- inline_stdio_init_queue_init_73_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_stdio_init_queue_init_73_t4d4f <- inline_stdio_init_queue_init_73_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(8,5))\nAssign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0xc8), Register(0xc8)], resolved: None }
# inline_stdio_init_queue_init_73_tb702 <- inline_stdio_init_queue_init_73_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 03273 Copy32 [Register(0xc8), Register(0xd0)]
#       inline_stdio_init_queue_init_73_tb702 <- inline_stdio_init_queue_init_73_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 c8 d0 

# 03276 AddImm32IgnoreCarry [Register(0xd0), Constant32(0x00000100=256)]
#       inline_stdio_init_queue_init_73_tb702 <- inline_stdio_init_queue_init_73_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 d0 00 01 00 00 

# inline_stdio_init_queue_init_73_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 0327c LoadImm8 [Register(0xcc), Constant8(0x00=0)]
#       inline_stdio_init_queue_init_73_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 cc 00 

# mem[inline_stdio_init_queue_init_73_tb702] <- inline_stdio_init_queue_init_73_tb36e U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
# 0327f Store8 [Register(0xcc), Register(0xd0)]
#       mem[inline_stdio_init_queue_init_73_tb702] <- inline_stdio_init_queue_init_73_tb36e U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
06 cc d0 

# inline_stdio_init_queue_init_73_t4d4f <- inline_stdio_init_queue_init_73_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_stdio_init_queue_init_73_t4d4f <- inline_stdio_init_queue_init_73_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(9,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0xc8), Register(0xc8)], resolved: None }
# inline_stdio_init_queue_init_73_tc1ff <- inline_stdio_init_queue_init_73_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 03282 AddImm32IgnoreCarry [Register(0xc8), Constant32(0x00000104=260)]
#       inline_stdio_init_queue_init_73_tc1ff <- inline_stdio_init_queue_init_73_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 c8 04 01 00 00 

# inline_stdio_init_queue_init_73_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 03288 LoadImm8 [Register(0xcc), Constant8(0x00=0)]
#       inline_stdio_init_queue_init_73_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 cc 00 

# mem[inline_stdio_init_queue_init_73_tc1ff] <- inline_stdio_init_queue_init_73_tb36e U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
# 0328b Store8 [Register(0xcc), Register(0xc8)]
#       mem[inline_stdio_init_queue_init_73_tc1ff] <- inline_stdio_init_queue_init_73_tb36e U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
06 cc c8 

# goto inline_stdio_init_queue_init_73_function_end_queue_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_stdio_init_queue_init_73_function_end_queue_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_stdio_init_queue_init_73_function_end_queue_init)], resolved: None }
# :inline_stdio_init_queue_init_73_function_end_queue_init None
# inline_stdio_init_queue_init_73_function_end_queue_init
# None <= call lcd_init() Some('/home/john/lutcomp/programs/lib/stdio.j':(10,5))
# VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
# Call(Call { function: "lcd_init", parameters: [] })
# Registers used by this function: {200, 201, 202, 203, 204, 208, 209, 210, 211, 212}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 164, 165, 166, 167, 168, 169, 170, 171, 230, 252}
# Registers to save: []
# 0328e AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_init))
32 0c fc ff ff ff 

# 03294 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_init))
25 0c 9e 32 00 00 

# 0329a JmpImm [Label24(:lcd_init)]
#       PseudoCall(Label24(:lcd_init))
70 a0 1a 00 

# 0329e AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_init))
32 0c 04 00 00 00 

# None <= call KeyBoard_init() Some('/home/john/lutcomp/programs/lib/stdio.j':(11,5))
# VoidExpression { expression: Call(Call { function: "KeyBoard_init", parameters: [] }) }
# Call(Call { function: "KeyBoard_init", parameters: [] })
# Registers used by this function: {200, 201, 202, 203, 204, 208, 209, 210, 211, 212}
# Registers used by callee tree: {16, 20, 21, 22, 23}
# Registers to save: []
# 032a4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:KeyBoard_init))
32 0c fc ff ff ff 

# 032aa StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:KeyBoard_init))
25 0c b4 32 00 00 

# 032b0 JmpImm [Label24(:KeyBoard_init)]
#       PseudoCall(Label24(:KeyBoard_init))
70 27 04 00 

# 032b4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:KeyBoard_init))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 032ba JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_stdio_init None
# function_end_stdio_init
# Unreachable None
# 032bc Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

